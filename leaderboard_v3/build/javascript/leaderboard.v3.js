/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/ansi-html/index.js":
/*!*****************************************!*\
  !*** ./node_modules/ansi-html/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ansiHTML

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/

var _defColors = {
  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
}
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
}
var _openTags = {
  '1': 'font-weight:bold', // bold
  '2': 'opacity:0.5', // dim
  '3': '<i>', // italic
  '4': '<u>', // underscore
  '8': 'display:none', // hidden
  '9': '<del>' // delete
}
var _closeTags = {
  '23': '</i>', // reset italic
  '24': '</u>', // reset underscore
  '29': '</del>' // reset delete
}

;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>'
})

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML (text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text
  }

  // Cache opened sequence.
  var ansiCodes = []
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)*m/g, function (match, seq) {
    var ot = _openTags[seq]
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop()
        return '</span>'
      }
      // Open tag.
      ansiCodes.push(seq)
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
    }

    var ct = _closeTags[seq]
    if (ct) {
      // Pop sequence
      ansiCodes.pop()
      return ct
    }
    return ''
  })

  // Make sure tags are closed.
  var l = ansiCodes.length
  ;(l > 0) && (ret += Array(l + 1).join('</span>'))

  return ret
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.')
  }

  var _finalColors = {}
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null
    if (!hex) {
      _finalColors[key] = _defColors[key]
      continue
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex]
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string'
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
      }
      var defHexColor = _defColors[key]
      if (!hex[0]) {
        hex[0] = defHexColor[0]
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]]
        hex.push(defHexColor[1])
      }

      hex = hex.slice(0, 2)
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
    }
    _finalColors[key] = hex
  }
  _setTags(_finalColors)
}

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors)
}

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {}

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () { return _openTags }
  })
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () { return _closeTags }
  })
} else {
  ansiHTML.tags.open = _openTags
  ansiHTML.tags.close = _closeTags
}

function _setTags (colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey

  for (var code in _styles) {
    var color = _styles[code]
    var oriColor = colors[color] || '000'
    _openTags[code] = 'color:#' + oriColor
    code = parseInt(code)
    _openTags[(code + 10).toString()] = 'background:#' + oriColor
  }
}

ansiHTML.reset()


/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function eventListener() {
      if (errorListener !== undefined) {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };
    var errorListener;

    // Adding an error listener is not optional because
    // if an error is thrown on an event emitter we cannot
    // guarantee that the actual event we are waiting will
    // be fired. The result could be a silent way to create
    // memory or file descriptor leaks, which is something
    // we should avoid.
    if (name !== 'error') {
      errorListener = function errorListener(err) {
        emitter.removeListener(name, eventListener);
        reject(err);
      };

      emitter.once('error', errorListener);
    }

    emitter.once(name, eventListener);
  });
}


/***/ }),

/***/ "./node_modules/html-entities/lib/html4-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html4-entities.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'OElig', 'oelig', 'Scaron', 'scaron', 'Yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'Dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'Prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'lArr', 'uArr', 'rArr', 'dArr', 'hArr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];
var HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];
var alphaIndex = {};
var numIndex = {};
(function () {
    var i = 0;
    var length = HTML_ALPHA.length;
    while (i < length) {
        var a = HTML_ALPHA[i];
        var c = HTML_CODES[i];
        alphaIndex[a] = String.fromCharCode(c);
        numIndex[c] = a;
        i++;
    }
})();
var Html4Entities = /** @class */ (function () {
    function Html4Entities() {
    }
    Html4Entities.prototype.decode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        return str.replace(/&(#?[\w\d]+);?/g, function (s, entity) {
            var chr;
            if (entity.charAt(0) === "#") {
                var code = entity.charAt(1).toLowerCase() === 'x' ?
                    parseInt(entity.substr(2), 16) :
                    parseInt(entity.substr(1));
                if (!(isNaN(code) || code < -32768 || code > 65535)) {
                    chr = String.fromCharCode(code);
                }
            }
            else {
                chr = alphaIndex[entity];
            }
            return chr || s;
        });
    };
    Html4Entities.decode = function (str) {
        return new Html4Entities().decode(str);
    };
    Html4Entities.prototype.encode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var alpha = numIndex[str.charCodeAt(i)];
            result += alpha ? "&" + alpha + ";" : str.charAt(i);
            i++;
        }
        return result;
    };
    Html4Entities.encode = function (str) {
        return new Html4Entities().encode(str);
    };
    Html4Entities.prototype.encodeNonUTF = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var cc = str.charCodeAt(i);
            var alpha = numIndex[cc];
            if (alpha) {
                result += "&" + alpha + ";";
            }
            else if (cc < 32 || cc > 126) {
                result += "&#" + cc + ";";
            }
            else {
                result += str.charAt(i);
            }
            i++;
        }
        return result;
    };
    Html4Entities.encodeNonUTF = function (str) {
        return new Html4Entities().encodeNonUTF(str);
    };
    Html4Entities.prototype.encodeNonASCII = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var c = str.charCodeAt(i);
            if (c <= 255) {
                result += str[i++];
                continue;
            }
            result += '&#' + c + ';';
            i++;
        }
        return result;
    };
    Html4Entities.encodeNonASCII = function (str) {
        return new Html4Entities().encodeNonASCII(str);
    };
    return Html4Entities;
}());
exports.Html4Entities = Html4Entities;


/***/ }),

/***/ "./node_modules/html-entities/lib/html5-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html5-entities.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['CloseCurlyDoubleQuote', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['CloseCurlyQuote', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];
var alphaIndex = {};
var charIndex = {};
createIndexes(alphaIndex, charIndex);
var Html5Entities = /** @class */ (function () {
    function Html5Entities() {
    }
    Html5Entities.prototype.decode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        return str.replace(/&(#?[\w\d]+);?/g, function (s, entity) {
            var chr;
            if (entity.charAt(0) === "#") {
                var code = entity.charAt(1) === 'x' ?
                    parseInt(entity.substr(2).toLowerCase(), 16) :
                    parseInt(entity.substr(1));
                if (!(isNaN(code) || code < -32768 || code > 65535)) {
                    chr = String.fromCharCode(code);
                }
            }
            else {
                chr = alphaIndex[entity];
            }
            return chr || s;
        });
    };
    Html5Entities.decode = function (str) {
        return new Html5Entities().decode(str);
    };
    Html5Entities.prototype.encode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var charInfo = charIndex[str.charCodeAt(i)];
            if (charInfo) {
                var alpha = charInfo[str.charCodeAt(i + 1)];
                if (alpha) {
                    i++;
                }
                else {
                    alpha = charInfo[''];
                }
                if (alpha) {
                    result += "&" + alpha + ";";
                    i++;
                    continue;
                }
            }
            result += str.charAt(i);
            i++;
        }
        return result;
    };
    Html5Entities.encode = function (str) {
        return new Html5Entities().encode(str);
    };
    Html5Entities.prototype.encodeNonUTF = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var c = str.charCodeAt(i);
            var charInfo = charIndex[c];
            if (charInfo) {
                var alpha = charInfo[str.charCodeAt(i + 1)];
                if (alpha) {
                    i++;
                }
                else {
                    alpha = charInfo[''];
                }
                if (alpha) {
                    result += "&" + alpha + ";";
                    i++;
                    continue;
                }
            }
            if (c < 32 || c > 126) {
                result += '&#' + c + ';';
            }
            else {
                result += str.charAt(i);
            }
            i++;
        }
        return result;
    };
    Html5Entities.encodeNonUTF = function (str) {
        return new Html5Entities().encodeNonUTF(str);
    };
    Html5Entities.prototype.encodeNonASCII = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var c = str.charCodeAt(i);
            if (c <= 255) {
                result += str[i++];
                continue;
            }
            result += '&#' + c + ';';
            i++;
        }
        return result;
    };
    Html5Entities.encodeNonASCII = function (str) {
        return new Html5Entities().encodeNonASCII(str);
    };
    return Html5Entities;
}());
exports.Html5Entities = Html5Entities;
function createIndexes(alphaIndex, charIndex) {
    var i = ENTITIES.length;
    while (i--) {
        var e = ENTITIES[i];
        var alpha = e[0];
        var chars = e[1];
        var chr = chars[0];
        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;
        var charInfo = void 0;
        if (addChar) {
            charInfo = charIndex[chr] = charIndex[chr] || {};
        }
        if (chars[1]) {
            var chr2 = chars[1];
            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);
            addChar && (charInfo[chr2] = alpha);
        }
        else {
            alphaIndex[alpha] = String.fromCharCode(chr);
            addChar && (charInfo[''] = alpha);
        }
    }
}


/***/ }),

/***/ "./node_modules/html-entities/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/html-entities/lib/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xml_entities_1 = __webpack_require__(/*! ./xml-entities */ "./node_modules/html-entities/lib/xml-entities.js");
exports.XmlEntities = xml_entities_1.XmlEntities;
var html4_entities_1 = __webpack_require__(/*! ./html4-entities */ "./node_modules/html-entities/lib/html4-entities.js");
exports.Html4Entities = html4_entities_1.Html4Entities;
var html5_entities_1 = __webpack_require__(/*! ./html5-entities */ "./node_modules/html-entities/lib/html5-entities.js");
exports.Html5Entities = html5_entities_1.Html5Entities;
exports.AllHtmlEntities = html5_entities_1.Html5Entities;


/***/ }),

/***/ "./node_modules/html-entities/lib/xml-entities.js":
/*!********************************************************!*\
  !*** ./node_modules/html-entities/lib/xml-entities.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ALPHA_INDEX = {
    '&lt': '<',
    '&gt': '>',
    '&quot': '"',
    '&apos': '\'',
    '&amp': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&apos;': '\'',
    '&amp;': '&'
};
var CHAR_INDEX = {
    60: 'lt',
    62: 'gt',
    34: 'quot',
    39: 'apos',
    38: 'amp'
};
var CHAR_S_INDEX = {
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&apos;',
    '&': '&amp;'
};
var XmlEntities = /** @class */ (function () {
    function XmlEntities() {
    }
    XmlEntities.prototype.encode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        return str.replace(/[<>"'&]/g, function (s) {
            return CHAR_S_INDEX[s];
        });
    };
    XmlEntities.encode = function (str) {
        return new XmlEntities().encode(str);
    };
    XmlEntities.prototype.decode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        return str.replace(/&#?[0-9a-zA-Z]+;?/g, function (s) {
            if (s.charAt(1) === '#') {
                var code = s.charAt(2).toLowerCase() === 'x' ?
                    parseInt(s.substr(3), 16) :
                    parseInt(s.substr(2));
                if (isNaN(code) || code < -32768 || code > 65535) {
                    return '';
                }
                return String.fromCharCode(code);
            }
            return ALPHA_INDEX[s] || s;
        });
    };
    XmlEntities.decode = function (str) {
        return new XmlEntities().decode(str);
    };
    XmlEntities.prototype.encodeNonUTF = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var c = str.charCodeAt(i);
            var alpha = CHAR_INDEX[c];
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
            if (c < 32 || c > 126) {
                result += '&#' + c + ';';
            }
            else {
                result += str.charAt(i);
            }
            i++;
        }
        return result;
    };
    XmlEntities.encodeNonUTF = function (str) {
        return new XmlEntities().encodeNonUTF(str);
    };
    XmlEntities.prototype.encodeNonASCII = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLenght = str.length;
        var result = '';
        var i = 0;
        while (i < strLenght) {
            var c = str.charCodeAt(i);
            if (c <= 255) {
                result += str[i++];
                continue;
            }
            result += '&#' + c + ';';
            i++;
        }
        return result;
    };
    XmlEntities.encodeNonASCII = function (str) {
        return new XmlEntities().encodeNonASCII(str);
    };
    return XmlEntities;
}());
exports.XmlEntities = XmlEntities;


/***/ }),

/***/ "./node_modules/identicon.js/identicon.js":
/*!************************************************!*\
  !*** ./node_modules/identicon.js/identicon.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Identicon.js 2.3.3
 * http://github.com/stewartlord/identicon.js
 *
 * PNGLib required for PNG output
 * http://www.xarg.org/download/pnglib.js
 *
 * Copyright 2018, Stewart Lord
 * Released under the BSD license
 * http://www.opensource.org/licenses/bsd-license.php
 */

(function() {
    var PNGlib;
    if ( true && typeof module.exports !== 'undefined') {
        PNGlib = __webpack_require__(/*! ./pnglib */ "./node_modules/identicon.js/pnglib.js");
    } else {
        PNGlib = window.PNGlib;
    }

    var Identicon = function(hash, options){
        if (typeof(hash) !== 'string' || hash.length < 15) {
            throw 'A hash of at least 15 characters is required.';
        }

        this.defaults = {
            background: [240, 240, 240, 255],
            margin:     0.08,
            size:       64,
            saturation: 0.7,
            brightness: 0.5,
            format:     'png'
        };

        this.options = typeof(options) === 'object' ? options : this.defaults;

        // backward compatibility with old constructor (hash, size, margin)
        if (typeof(arguments[1]) === 'number') { this.options.size   = arguments[1]; }
        if (arguments[2])                      { this.options.margin = arguments[2]; }

        this.hash        = hash
        this.background  = this.options.background || this.defaults.background;
        this.size        = this.options.size       || this.defaults.size;
        this.format      = this.options.format     || this.defaults.format;
        this.margin      = this.options.margin !== undefined ? this.options.margin : this.defaults.margin;

        // foreground defaults to last 7 chars as hue at 70% saturation, 50% brightness
        var hue          = parseInt(this.hash.substr(-7), 16) / 0xfffffff;
        var saturation   = this.options.saturation || this.defaults.saturation;
        var brightness   = this.options.brightness || this.defaults.brightness;
        this.foreground  = this.options.foreground || this.hsl2rgb(hue, saturation, brightness);
    };

    Identicon.prototype = {
        background: null,
        foreground: null,
        hash:       null,
        margin:     null,
        size:       null,
        format:     null,

        image: function(){
            return this.isSvg()
                ? new Svg(this.size, this.foreground, this.background)
                : new PNGlib(this.size, this.size, 256);
        },

        render: function(){
            var image      = this.image(),
                size       = this.size,
                baseMargin = Math.floor(size * this.margin),
                cell       = Math.floor((size - (baseMargin * 2)) / 5),
                margin     = Math.floor((size - cell * 5) / 2),
                bg         = image.color.apply(image, this.background),
                fg         = image.color.apply(image, this.foreground);

            // the first 15 characters of the hash control the pixels (even/odd)
            // they are drawn down the middle first, then mirrored outwards
            var i, color;
            for (i = 0; i < 15; i++) {
                color = parseInt(this.hash.charAt(i), 16) % 2 ? bg : fg;
                if (i < 5) {
                    this.rectangle(2 * cell + margin, i * cell + margin, cell, cell, color, image);
                } else if (i < 10) {
                    this.rectangle(1 * cell + margin, (i - 5) * cell + margin, cell, cell, color, image);
                    this.rectangle(3 * cell + margin, (i - 5) * cell + margin, cell, cell, color, image);
                } else if (i < 15) {
                    this.rectangle(0 * cell + margin, (i - 10) * cell + margin, cell, cell, color, image);
                    this.rectangle(4 * cell + margin, (i - 10) * cell + margin, cell, cell, color, image);
                }
            }

            return image;
        },

        rectangle: function(x, y, w, h, color, image){
            if (this.isSvg()) {
                image.rectangles.push({x: x, y: y, w: w, h: h, color: color});
            } else {
                var i, j;
                for (i = x; i < x + w; i++) {
                    for (j = y; j < y + h; j++) {
                        image.buffer[image.index(i, j)] = color;
                    }
                }
            }
        },

        // adapted from: https://gist.github.com/aemkei/1325937
        hsl2rgb: function(h, s, b){
            h *= 6;
            s = [
                b += s *= b < .5 ? b : 1 - b,
                b - h % 1 * s * 2,
                b -= s *= 2,
                b,
                b + h % 1 * s,
                b + s
            ];

            return[
                s[ ~~h    % 6 ] * 255, // red
                s[ (h|16) % 6 ] * 255, // green
                s[ (h|8)  % 6 ] * 255  // blue
            ];
        },

        toString: function(raw){
            // backward compatibility with old toString, default to base64
            if (raw) {
                return this.render().getDump();
            } else {
                return this.render().getBase64();
            }
        },

        isSvg: function(){
            return this.format.match(/svg/i)
        }
    };

    var Svg = function(size, foreground, background){
        this.size       = size;
        this.foreground = this.color.apply(this, foreground);
        this.background = this.color.apply(this, background);
        this.rectangles = [];
    };

    Svg.prototype = {
        size:       null,
        foreground: null,
        background: null,
        rectangles: null,

        color: function(r, g, b, a){
            var values = [r, g, b].map(Math.round);
            values.push((a >= 0) && (a <= 255) ? a/255 : 1);
            return 'rgba(' + values.join(',') + ')';
        },

        getDump: function(){
          var i,
                xml,
                rect,
                fg     = this.foreground,
                bg     = this.background,
                stroke = this.size * 0.005;

            xml = "<svg xmlns='http://www.w3.org/2000/svg'"
                + " width='" + this.size + "' height='" + this.size + "'"
                + " style='background-color:" + bg + ";'>"
                + "<g style='fill:" + fg + "; stroke:" + fg + "; stroke-width:" + stroke + ";'>";

            for (i = 0; i < this.rectangles.length; i++) {
                rect = this.rectangles[i];
                if (rect.color == bg) continue;
                xml += "<rect "
                    + " x='"      + rect.x + "'"
                    + " y='"      + rect.y + "'"
                    + " width='"  + rect.w + "'"
                    + " height='" + rect.h + "'"
                    + "/>";
            }
            xml += "</g></svg>"

            return xml;
        },

        getBase64: function(){
            if ('function' === typeof btoa) {
                return btoa(this.getDump());
            } else if (Buffer) {
                return new Buffer(this.getDump(), 'binary').toString('base64');
            } else {
                throw 'Cannot generate base64 output';
            }
        }
    };

    if ( true && typeof module.exports !== 'undefined') {
        module.exports = Identicon;
    } else {
        window.Identicon = Identicon;
    }
})();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/identicon.js/pnglib.js":
/*!*********************************************!*\
  !*** ./node_modules/identicon.js/pnglib.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
* A handy class to calculate color values.
*
* @version 1.0
* @author Robert Eisele <robert@xarg.org>
* @copyright Copyright (c) 2010, Robert Eisele
* @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/
* @license http://www.opensource.org/licenses/bsd-license.php BSD License
*
*/

(function() {

	// helper functions for that ctx
	function write(buffer, offs) {
		for (var i = 2; i < arguments.length; i++) {
			for (var j = 0; j < arguments[i].length; j++) {
				buffer[offs++] = arguments[i].charAt(j);
			}
		}
	}

	function byte2(w) {
		return String.fromCharCode((w >> 8) & 255, w & 255);
	}

	function byte4(w) {
		return String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);
	}

	function byte2lsb(w) {
		return String.fromCharCode(w & 255, (w >> 8) & 255);
	}

	// modified from original source to support NPM
	var PNGlib = function(width,height,depth) {

		this.width   = width;
		this.height  = height;
		this.depth   = depth;

		// pixel data and row filter identifier size
		this.pix_size = height * (width + 1);

		// deflate header, pix_size, block headers, adler32 checksum
		this.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;

		// offsets and sizes of Png chunks
		this.ihdr_offs = 0;									// IHDR offset and size
		this.ihdr_size = 4 + 4 + 13 + 4;
		this.plte_offs = this.ihdr_offs + this.ihdr_size;	// PLTE offset and size
		this.plte_size = 4 + 4 + 3 * depth + 4;
		this.trns_offs = this.plte_offs + this.plte_size;	// tRNS offset and size
		this.trns_size = 4 + 4 + depth + 4;
		this.idat_offs = this.trns_offs + this.trns_size;	// IDAT offset and size
		this.idat_size = 4 + 4 + this.data_size + 4;
		this.iend_offs = this.idat_offs + this.idat_size;	// IEND offset and size
		this.iend_size = 4 + 4 + 4;
		this.buffer_size  = this.iend_offs + this.iend_size;	// total PNG size

		this.buffer  = new Array();
		this.palette = new Object();
		this.pindex  = 0;

		var _crc32 = new Array();

		// initialize buffer with zero bytes
		for (var i = 0; i < this.buffer_size; i++) {
			this.buffer[i] = "\x00";
		}

		// initialize non-zero elements
		write(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), "\x08\x03");
		write(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');
		write(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');
		write(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');
		write(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');

		// initialize deflate header
		var header = ((8 + (7 << 4)) << 8) | (3 << 6);
		header+= 31 - (header % 31);

		write(this.buffer, this.idat_offs + 8, byte2(header));

		// initialize deflate block headers
		for (var i = 0; (i << 16) - 1 < this.pix_size; i++) {
			var size, bits;
			if (i + 0xffff < this.pix_size) {
				size = 0xffff;
				bits = "\x00";
			} else {
				size = this.pix_size - (i << 16) - i;
				bits = "\x01";
			}
			write(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));
		}

		/* Create crc32 lookup table */
		for (var i = 0; i < 256; i++) {
			var c = i;
			for (var j = 0; j < 8; j++) {
				if (c & 1) {
					c = -306674912 ^ ((c >> 1) & 0x7fffffff);
				} else {
					c = (c >> 1) & 0x7fffffff;
				}
			}
			_crc32[i] = c;
		}

		// compute the index into a png for a given pixel
		this.index = function(x,y) {
			var i = y * (this.width + 1) + x + 1;
			var j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;
			return j;
		}

		// convert a color and build up the palette
		this.color = function(red, green, blue, alpha) {

			alpha = alpha >= 0 ? alpha : 255;
			var color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;

			if (typeof this.palette[color] == "undefined") {
				if (this.pindex == this.depth) return "\x00";

				var ndx = this.plte_offs + 8 + 3 * this.pindex;

				this.buffer[ndx + 0] = String.fromCharCode(red);
				this.buffer[ndx + 1] = String.fromCharCode(green);
				this.buffer[ndx + 2] = String.fromCharCode(blue);
				this.buffer[this.trns_offs+8+this.pindex] = String.fromCharCode(alpha);

				this.palette[color] = String.fromCharCode(this.pindex++);
			}
			return this.palette[color];
		}

		// output a PNG string, Base64 encoded
		this.getBase64 = function() {

			var s = this.getDump();

			var ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
			var c1, c2, c3, e1, e2, e3, e4;
			var l = s.length;
			var i = 0;
			var r = "";

			do {
				c1 = s.charCodeAt(i);
				e1 = c1 >> 2;
				c2 = s.charCodeAt(i+1);
				e2 = ((c1 & 3) << 4) | (c2 >> 4);
				c3 = s.charCodeAt(i+2);
				if (l < i+2) { e3 = 64; } else { e3 = ((c2 & 0xf) << 2) | (c3 >> 6); }
				if (l < i+3) { e4 = 64; } else { e4 = c3 & 0x3f; }
				r+= ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);
			} while ((i+= 3) < l);
			return r;
		}

		// output a PNG string
		this.getDump = function() {

			// compute adler32 of output pixels + row filter bytes
			var BASE = 65521; /* largest prime smaller than 65536 */
			var NMAX = 5552;  /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */
			var s1 = 1;
			var s2 = 0;
			var n = NMAX;

			for (var y = 0; y < this.height; y++) {
				for (var x = -1; x < this.width; x++) {
					s1+= this.buffer[this.index(x, y)].charCodeAt(0);
					s2+= s1;
					if ((n-= 1) == 0) {
						s1%= BASE;
						s2%= BASE;
						n = NMAX;
					}
				}
			}
			s1%= BASE;
			s2%= BASE;
			write(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));

			// compute crc32 of the PNG chunks
			function crc32(png, offs, size) {
				var crc = -1;
				for (var i = 4; i < size-4; i += 1) {
					crc = _crc32[(crc ^ png[offs+i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);
				}
				write(png, offs+size-4, byte4(crc ^ -1));
			}

			crc32(this.buffer, this.ihdr_offs, this.ihdr_size);
			crc32(this.buffer, this.plte_offs, this.plte_size);
			crc32(this.buffer, this.trns_offs, this.trns_size);
			crc32(this.buffer, this.idat_offs, this.idat_size);
			crc32(this.buffer, this.iend_offs, this.iend_size);

			// convert PNG to string
			return "\x89PNG\r\n\x1a\n"+this.buffer.join('');
		}
	}

	// modified from original source to support NPM
	if ( true && typeof module.exports !== 'undefined') {
		module.exports = PNGlib;
	} else {
		window.PNGlib = PNGlib;
	}
})();


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/jssha/dist/sha.mjs":
/*!*****************************************!*\
  !*** ./node_modules/jssha/dist/sha.mjs ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * A JavaScript implementation of the SHA family of hashes - defined in FIPS PUB 180-4, FIPS PUB 202,
 * and SP 800-185 - as well as the corresponding HMAC implementation as defined in FIPS PUB 198-1.
 *
 * Copyright 2008-2020 Brian Turek, 1998-2009 Paul Johnston & Contributors
 * Distributed under the BSD License
 * See http://caligatio.github.com/jsSHA/ for more information
 */
const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function n(t,n,e,r){let i,s,o;const h=n||[0],u=(e=e||0)>>>3,w=-1===r?3:0;for(i=0;i<t.length;i+=1)o=i+u,s=o>>>2,h.length<=s&&h.push(0),h[s]|=t[i]<<8*(w+r*(o%4));return{value:h,binLen:8*t.length+e}}function e(e,r,i){switch(r){case"UTF8":case"UTF16BE":case"UTF16LE":break;default:throw new Error("encoding must be UTF8, UTF16BE, or UTF16LE")}switch(e){case"HEX":return function(t,n,e){return function(t,n,e,r){let i,s,o,h;if(0!=t.length%2)throw new Error("String of HEX type must be in byte increments");const u=n||[0],w=(e=e||0)>>>3,c=-1===r?3:0;for(i=0;i<t.length;i+=2){if(s=parseInt(t.substr(i,2),16),isNaN(s))throw new Error("String of HEX type contains invalid characters");for(h=(i>>>1)+w,o=h>>>2;u.length<=o;)u.push(0);u[o]|=s<<8*(c+r*(h%4))}return{value:u,binLen:4*t.length+e}}(t,n,e,i)};case"TEXT":return function(t,n,e){return function(t,n,e,r,i){let s,o,h,u,w,c,f,a,l=0;const A=e||[0],E=(r=r||0)>>>3;if("UTF8"===n)for(f=-1===i?3:0,h=0;h<t.length;h+=1)for(s=t.charCodeAt(h),o=[],128>s?o.push(s):2048>s?(o.push(192|s>>>6),o.push(128|63&s)):55296>s||57344<=s?o.push(224|s>>>12,128|s>>>6&63,128|63&s):(h+=1,s=65536+((1023&s)<<10|1023&t.charCodeAt(h)),o.push(240|s>>>18,128|s>>>12&63,128|s>>>6&63,128|63&s)),u=0;u<o.length;u+=1){for(c=l+E,w=c>>>2;A.length<=w;)A.push(0);A[w]|=o[u]<<8*(f+i*(c%4)),l+=1}else for(f=-1===i?2:0,a="UTF16LE"===n&&1!==i||"UTF16LE"!==n&&1===i,h=0;h<t.length;h+=1){for(s=t.charCodeAt(h),!0===a&&(u=255&s,s=u<<8|s>>>8),c=l+E,w=c>>>2;A.length<=w;)A.push(0);A[w]|=s<<8*(f+i*(c%4)),l+=2}return{value:A,binLen:8*l+r}}(t,r,n,e,i)};case"B64":return function(n,e,r){return function(n,e,r,i){let s,o,h,u,w,c,f,a=0;const l=e||[0],A=(r=r||0)>>>3,E=-1===i?3:0,H=n.indexOf("=");if(-1===n.search(/^[a-zA-Z0-9=+/]+$/))throw new Error("Invalid character in base-64 string");if(n=n.replace(/=/g,""),-1!==H&&H<n.length)throw new Error("Invalid '=' found in base-64 string");for(o=0;o<n.length;o+=4){for(w=n.substr(o,4),u=0,h=0;h<w.length;h+=1)s=t.indexOf(w.charAt(h)),u|=s<<18-6*h;for(h=0;h<w.length-1;h+=1){for(f=a+A,c=f>>>2;l.length<=c;)l.push(0);l[c]|=(u>>>16-8*h&255)<<8*(E+i*(f%4)),a+=1}}return{value:l,binLen:8*a+r}}(n,e,r,i)};case"BYTES":return function(t,n,e){return function(t,n,e,r){let i,s,o,h;const u=n||[0],w=(e=e||0)>>>3,c=-1===r?3:0;for(s=0;s<t.length;s+=1)i=t.charCodeAt(s),h=s+w,o=h>>>2,u.length<=o&&u.push(0),u[o]|=i<<8*(c+r*(h%4));return{value:u,binLen:8*t.length+e}}(t,n,e,i)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(t){throw new Error("ARRAYBUFFER not supported by this environment")}return function(t,e,r){return function(t,e,r,i){return n(new Uint8Array(t),e,r,i)}(t,e,r,i)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(t){throw new Error("UINT8ARRAY not supported by this environment")}return function(t,e,r){return n(t,e,r,i)};default:throw new Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}function r(n,e,r,i){switch(n){case"HEX":return function(t){return function(t,n,e,r){let i,s,o="";const h=n/8,u=-1===e?3:0;for(i=0;i<h;i+=1)s=t[i>>>2]>>>8*(u+e*(i%4)),o+="0123456789abcdef".charAt(s>>>4&15)+"0123456789abcdef".charAt(15&s);return r.outputUpper?o.toUpperCase():o}(t,e,r,i)};case"B64":return function(n){return function(n,e,r,i){let s,o,h,u,w,c="";const f=e/8,a=-1===r?3:0;for(s=0;s<f;s+=3)for(u=s+1<f?n[s+1>>>2]:0,w=s+2<f?n[s+2>>>2]:0,h=(n[s>>>2]>>>8*(a+r*(s%4))&255)<<16|(u>>>8*(a+r*((s+1)%4))&255)<<8|w>>>8*(a+r*((s+2)%4))&255,o=0;o<4;o+=1)c+=8*s+6*o<=e?t.charAt(h>>>6*(3-o)&63):i.b64Pad;return c}(n,e,r,i)};case"BYTES":return function(t){return function(t,n,e){let r,i,s="";const o=n/8,h=-1===e?3:0;for(r=0;r<o;r+=1)i=t[r>>>2]>>>8*(h+e*(r%4))&255,s+=String.fromCharCode(i);return s}(t,e,r)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(t){throw new Error("ARRAYBUFFER not supported by this environment")}return function(t){return function(t,n,e){let r;const i=n/8,s=new ArrayBuffer(i),o=new Uint8Array(s),h=-1===e?3:0;for(r=0;r<i;r+=1)o[r]=t[r>>>2]>>>8*(h+e*(r%4))&255;return s}(t,e,r)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(t){throw new Error("UINT8ARRAY not supported by this environment")}return function(t){return function(t,n,e){let r;const i=n/8,s=-1===e?3:0,o=new Uint8Array(i);for(r=0;r<i;r+=1)o[r]=t[r>>>2]>>>8*(s+e*(r%4))&255;return o}(t,e,r)};default:throw new Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}const i=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428],o=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],h="Chosen SHA variant is not supported";function u(t,n){let e,r;const i=t.binLen>>>3,s=n.binLen>>>3,o=i<<3,h=4-i<<3;if(i%4!=0){for(e=0;e<s;e+=4)r=i+e>>>2,t.value[r]|=n.value[e>>>2]<<o,t.value.push(0),t.value[r+1]|=n.value[e>>>2]>>>h;return(t.value.length<<2)-4>=s+i&&t.value.pop(),{value:t.value,binLen:t.binLen+n.binLen}}return{value:t.value.concat(n.value),binLen:t.binLen+n.binLen}}function w(t){const n={outputUpper:!1,b64Pad:"=",outputLen:-1},e=t||{},r="Output length must be a multiple of 8";if(n.outputUpper=e.outputUpper||!1,e.b64Pad&&(n.b64Pad=e.b64Pad),e.outputLen){if(e.outputLen%8!=0)throw new Error(r);n.outputLen=e.outputLen}else if(e.shakeLen){if(e.shakeLen%8!=0)throw new Error(r);n.outputLen=e.shakeLen}if("boolean"!=typeof n.outputUpper)throw new Error("Invalid outputUpper formatting option");if("string"!=typeof n.b64Pad)throw new Error("Invalid b64Pad formatting option");return n}function c(t,n,r,i){const s=t+" must include a value and format";if(!n){if(!i)throw new Error(s);return i}if(void 0===n.value||!n.format)throw new Error(s);return e(n.format,n.encoding||"UTF8",r)(n.value)}class f{constructor(t,n,e){const r=e||{};if(this.t=n,this.i=r.encoding||"UTF8",this.numRounds=r.numRounds||1,isNaN(this.numRounds)||this.numRounds!==parseInt(this.numRounds,10)||1>this.numRounds)throw new Error("numRounds must a integer >= 1");this.s=t,this.o=[],this.h=0,this.u=!1,this.l=0,this.A=!1,this.H=[],this.S=[]}update(t){let n,e=0;const r=this.p>>>5,i=this.m(t,this.o,this.h),s=i.binLen,o=i.value,h=s>>>5;for(n=0;n<h;n+=r)e+this.p<=s&&(this.C=this.R(o.slice(n,n+r),this.C),e+=this.p);this.l+=e,this.o=o.slice(e>>>5),this.h=s%this.p,this.u=!0}getHash(t,n){let e,i,s=this.U;const o=w(n);if(this.v){if(-1===o.outputLen)throw new Error("Output length must be specified in options");s=o.outputLen}const h=r(t,s,this.K,o);if(this.A&&this.T)return h(this.T(o));for(i=this.F(this.o.slice(),this.h,this.l,this.g(this.C),s),e=1;e<this.numRounds;e+=1)this.v&&s%32!=0&&(i[i.length-1]&=16777215>>>24-s%32),i=this.F(i,s,0,this.B(this.s),s);return h(i)}setHMACKey(t,n,r){if(!this.L)throw new Error("Variant does not support HMAC");if(this.u)throw new Error("Cannot set MAC key after calling update");const i=e(n,(r||{}).encoding||"UTF8",this.K);this.M(i(t))}M(t){const n=this.p>>>3,e=n/4-1;let r;if(1!==this.numRounds)throw new Error("Cannot set numRounds with MAC");if(this.A)throw new Error("MAC key already set");for(n<t.binLen/8&&(t.value=this.F(t.value,t.binLen,0,this.B(this.s),this.U));t.value.length<=e;)t.value.push(0);for(r=0;r<=e;r+=1)this.H[r]=909522486^t.value[r],this.S[r]=1549556828^t.value[r];this.C=this.R(this.H,this.C),this.l=this.p,this.A=!0}getHMAC(t,n){const e=w(n);return r(t,this.U,this.K,e)(this.k())}k(){let t;if(!this.A)throw new Error("Cannot call getHMAC without first setting MAC key");const n=this.F(this.o.slice(),this.h,this.l,this.g(this.C),this.U);return t=this.R(this.S,this.B(this.s)),t=this.F(n,this.U,this.p,t,this.U),t}}function a(t,n){return t<<n|t>>>32-n}function l(t,n){return t>>>n|t<<32-n}function A(t,n){return t>>>n}function E(t,n,e){return t^n^e}function H(t,n,e){return t&n^~t&e}function S(t,n,e){return t&n^t&e^n&e}function b(t){return l(t,2)^l(t,13)^l(t,22)}function p(t,n){const e=(65535&t)+(65535&n);return(65535&(t>>>16)+(n>>>16)+(e>>>16))<<16|65535&e}function d(t,n,e,r){const i=(65535&t)+(65535&n)+(65535&e)+(65535&r);return(65535&(t>>>16)+(n>>>16)+(e>>>16)+(r>>>16)+(i>>>16))<<16|65535&i}function m(t,n,e,r,i){const s=(65535&t)+(65535&n)+(65535&e)+(65535&r)+(65535&i);return(65535&(t>>>16)+(n>>>16)+(e>>>16)+(r>>>16)+(i>>>16)+(s>>>16))<<16|65535&s}function C(t){return l(t,7)^l(t,18)^A(t,3)}function y(t){return l(t,6)^l(t,11)^l(t,25)}function R(t){return[1732584193,4023233417,2562383102,271733878,3285377520]}function U(t,n){let e,r,i,s,o,h,u;const w=[];for(e=n[0],r=n[1],i=n[2],s=n[3],o=n[4],u=0;u<80;u+=1)w[u]=u<16?t[u]:a(w[u-3]^w[u-8]^w[u-14]^w[u-16],1),h=u<20?m(a(e,5),H(r,i,s),o,1518500249,w[u]):u<40?m(a(e,5),E(r,i,s),o,1859775393,w[u]):u<60?m(a(e,5),S(r,i,s),o,2400959708,w[u]):m(a(e,5),E(r,i,s),o,3395469782,w[u]),o=s,s=i,i=a(r,30),r=e,e=h;return n[0]=p(e,n[0]),n[1]=p(r,n[1]),n[2]=p(i,n[2]),n[3]=p(s,n[3]),n[4]=p(o,n[4]),n}function v(t,n,e,r){let i;const s=15+(n+65>>>9<<4),o=n+e;for(;t.length<=s;)t.push(0);for(t[n>>>5]|=128<<24-n%32,t[s]=4294967295&o,t[s-1]=o/4294967296|0,i=0;i<t.length;i+=16)r=U(t.slice(i,i+16),r);return r}class K extends f{constructor(t,n,r){if("SHA-1"!==t)throw new Error(h);super(t,n,r);const i=r||{};this.L=!0,this.T=this.k,this.K=-1,this.m=e(this.t,this.i,this.K),this.R=U,this.g=function(t){return t.slice()},this.B=R,this.F=v,this.C=[1732584193,4023233417,2562383102,271733878,3285377520],this.p=512,this.U=160,this.v=!1,i.hmacKey&&this.M(c("hmacKey",i.hmacKey,this.K))}}function T(t){let n;return n="SHA-224"==t?s.slice():o.slice(),n}function F(t,n){let e,r,s,o,h,u,w,c,f,a,E;const R=[];for(e=n[0],r=n[1],s=n[2],o=n[3],h=n[4],u=n[5],w=n[6],c=n[7],E=0;E<64;E+=1)R[E]=E<16?t[E]:d(l(U=R[E-2],17)^l(U,19)^A(U,10),R[E-7],C(R[E-15]),R[E-16]),f=m(c,y(h),H(h,u,w),i[E],R[E]),a=p(b(e),S(e,r,s)),c=w,w=u,u=h,h=p(o,f),o=s,s=r,r=e,e=p(f,a);var U;return n[0]=p(e,n[0]),n[1]=p(r,n[1]),n[2]=p(s,n[2]),n[3]=p(o,n[3]),n[4]=p(h,n[4]),n[5]=p(u,n[5]),n[6]=p(w,n[6]),n[7]=p(c,n[7]),n}class g extends f{constructor(t,n,r){if("SHA-224"!==t&&"SHA-256"!==t)throw new Error(h);super(t,n,r);const i=r||{};this.T=this.k,this.L=!0,this.K=-1,this.m=e(this.t,this.i,this.K),this.R=F,this.g=function(t){return t.slice()},this.B=T,this.F=function(n,e,r,i){return function(t,n,e,r,i){let s,o;const h=15+(n+65>>>9<<4),u=n+e;for(;t.length<=h;)t.push(0);for(t[n>>>5]|=128<<24-n%32,t[h]=4294967295&u,t[h-1]=u/4294967296|0,s=0;s<t.length;s+=16)r=F(t.slice(s,s+16),r);return o="SHA-224"===i?[r[0],r[1],r[2],r[3],r[4],r[5],r[6]]:r,o}(n,e,r,i,t)},this.C=T(t),this.p=512,this.U="SHA-224"===t?224:256,this.v=!1,i.hmacKey&&this.M(c("hmacKey",i.hmacKey,this.K))}}class B{constructor(t,n){this.Y=t,this.N=n}}function L(t,n){let e;return n>32?(e=64-n,new B(t.N<<n|t.Y>>>e,t.Y<<n|t.N>>>e)):0!==n?(e=32-n,new B(t.Y<<n|t.N>>>e,t.N<<n|t.Y>>>e)):t}function M(t,n){let e;return n<32?(e=32-n,new B(t.Y>>>n|t.N<<e,t.N>>>n|t.Y<<e)):(e=64-n,new B(t.N>>>n|t.Y<<e,t.Y>>>n|t.N<<e))}function k(t,n){return new B(t.Y>>>n,t.N>>>n|t.Y<<32-n)}function Y(t,n,e){return new B(t.Y&n.Y^t.Y&e.Y^n.Y&e.Y,t.N&n.N^t.N&e.N^n.N&e.N)}function N(t){const n=M(t,28),e=M(t,34),r=M(t,39);return new B(n.Y^e.Y^r.Y,n.N^e.N^r.N)}function I(t,n){let e,r;e=(65535&t.N)+(65535&n.N),r=(t.N>>>16)+(n.N>>>16)+(e>>>16);const i=(65535&r)<<16|65535&e;return e=(65535&t.Y)+(65535&n.Y)+(r>>>16),r=(t.Y>>>16)+(n.Y>>>16)+(e>>>16),new B((65535&r)<<16|65535&e,i)}function X(t,n,e,r){let i,s;i=(65535&t.N)+(65535&n.N)+(65535&e.N)+(65535&r.N),s=(t.N>>>16)+(n.N>>>16)+(e.N>>>16)+(r.N>>>16)+(i>>>16);const o=(65535&s)<<16|65535&i;return i=(65535&t.Y)+(65535&n.Y)+(65535&e.Y)+(65535&r.Y)+(s>>>16),s=(t.Y>>>16)+(n.Y>>>16)+(e.Y>>>16)+(r.Y>>>16)+(i>>>16),new B((65535&s)<<16|65535&i,o)}function z(t,n,e,r,i){let s,o;s=(65535&t.N)+(65535&n.N)+(65535&e.N)+(65535&r.N)+(65535&i.N),o=(t.N>>>16)+(n.N>>>16)+(e.N>>>16)+(r.N>>>16)+(i.N>>>16)+(s>>>16);const h=(65535&o)<<16|65535&s;return s=(65535&t.Y)+(65535&n.Y)+(65535&e.Y)+(65535&r.Y)+(65535&i.Y)+(o>>>16),o=(t.Y>>>16)+(n.Y>>>16)+(e.Y>>>16)+(r.Y>>>16)+(i.Y>>>16)+(s>>>16),new B((65535&o)<<16|65535&s,h)}function x(t,n){return new B(t.Y^n.Y,t.N^n.N)}function _(t){const n=M(t,19),e=M(t,61),r=k(t,6);return new B(n.Y^e.Y^r.Y,n.N^e.N^r.N)}function O(t){const n=M(t,1),e=M(t,8),r=k(t,7);return new B(n.Y^e.Y^r.Y,n.N^e.N^r.N)}function P(t){const n=M(t,14),e=M(t,18),r=M(t,41);return new B(n.Y^e.Y^r.Y,n.N^e.N^r.N)}const V=[new B(i[0],3609767458),new B(i[1],602891725),new B(i[2],3964484399),new B(i[3],2173295548),new B(i[4],4081628472),new B(i[5],3053834265),new B(i[6],2937671579),new B(i[7],3664609560),new B(i[8],2734883394),new B(i[9],1164996542),new B(i[10],1323610764),new B(i[11],3590304994),new B(i[12],4068182383),new B(i[13],991336113),new B(i[14],633803317),new B(i[15],3479774868),new B(i[16],2666613458),new B(i[17],944711139),new B(i[18],2341262773),new B(i[19],2007800933),new B(i[20],1495990901),new B(i[21],1856431235),new B(i[22],3175218132),new B(i[23],2198950837),new B(i[24],3999719339),new B(i[25],766784016),new B(i[26],2566594879),new B(i[27],3203337956),new B(i[28],1034457026),new B(i[29],2466948901),new B(i[30],3758326383),new B(i[31],168717936),new B(i[32],1188179964),new B(i[33],1546045734),new B(i[34],1522805485),new B(i[35],2643833823),new B(i[36],2343527390),new B(i[37],1014477480),new B(i[38],1206759142),new B(i[39],344077627),new B(i[40],1290863460),new B(i[41],3158454273),new B(i[42],3505952657),new B(i[43],106217008),new B(i[44],3606008344),new B(i[45],1432725776),new B(i[46],1467031594),new B(i[47],851169720),new B(i[48],3100823752),new B(i[49],1363258195),new B(i[50],3750685593),new B(i[51],3785050280),new B(i[52],3318307427),new B(i[53],3812723403),new B(i[54],2003034995),new B(i[55],3602036899),new B(i[56],1575990012),new B(i[57],1125592928),new B(i[58],2716904306),new B(i[59],442776044),new B(i[60],593698344),new B(i[61],3733110249),new B(i[62],2999351573),new B(i[63],3815920427),new B(3391569614,3928383900),new B(3515267271,566280711),new B(3940187606,3454069534),new B(4118630271,4000239992),new B(116418474,1914138554),new B(174292421,2731055270),new B(289380356,3203993006),new B(460393269,320620315),new B(685471733,587496836),new B(852142971,1086792851),new B(1017036298,365543100),new B(1126000580,2618297676),new B(1288033470,3409855158),new B(1501505948,4234509866),new B(1607167915,987167468),new B(1816402316,1246189591)];function Z(t){return"SHA-384"===t?[new B(3418070365,s[0]),new B(1654270250,s[1]),new B(2438529370,s[2]),new B(355462360,s[3]),new B(1731405415,s[4]),new B(41048885895,s[5]),new B(3675008525,s[6]),new B(1203062813,s[7])]:[new B(o[0],4089235720),new B(o[1],2227873595),new B(o[2],4271175723),new B(o[3],1595750129),new B(o[4],2917565137),new B(o[5],725511199),new B(o[6],4215389547),new B(o[7],327033209)]}function j(t,n){let e,r,i,s,o,h,u,w,c,f,a,l;const A=[];for(e=n[0],r=n[1],i=n[2],s=n[3],o=n[4],h=n[5],u=n[6],w=n[7],a=0;a<80;a+=1)a<16?(l=2*a,A[a]=new B(t[l],t[l+1])):A[a]=X(_(A[a-2]),A[a-7],O(A[a-15]),A[a-16]),c=z(w,P(o),(H=h,S=u,new B((E=o).Y&H.Y^~E.Y&S.Y,E.N&H.N^~E.N&S.N)),V[a],A[a]),f=I(N(e),Y(e,r,i)),w=u,u=h,h=o,o=I(s,c),s=i,i=r,r=e,e=I(c,f);var E,H,S;return n[0]=I(e,n[0]),n[1]=I(r,n[1]),n[2]=I(i,n[2]),n[3]=I(s,n[3]),n[4]=I(o,n[4]),n[5]=I(h,n[5]),n[6]=I(u,n[6]),n[7]=I(w,n[7]),n}class q extends f{constructor(t,n,r){if("SHA-384"!==t&&"SHA-512"!==t)throw new Error(h);super(t,n,r);const i=r||{};this.T=this.k,this.L=!0,this.K=-1,this.m=e(this.t,this.i,this.K),this.R=j,this.g=function(t){return t.slice()},this.B=Z,this.F=function(n,e,r,i){return function(t,n,e,r,i){let s,o;const h=31+(n+129>>>10<<5),u=n+e;for(;t.length<=h;)t.push(0);for(t[n>>>5]|=128<<24-n%32,t[h]=4294967295&u,t[h-1]=u/4294967296|0,s=0;s<t.length;s+=32)r=j(t.slice(s,s+32),r);return o="SHA-384"===i?[(r=r)[0].Y,r[0].N,r[1].Y,r[1].N,r[2].Y,r[2].N,r[3].Y,r[3].N,r[4].Y,r[4].N,r[5].Y,r[5].N]:[r[0].Y,r[0].N,r[1].Y,r[1].N,r[2].Y,r[2].N,r[3].Y,r[3].N,r[4].Y,r[4].N,r[5].Y,r[5].N,r[6].Y,r[6].N,r[7].Y,r[7].N],o}(n,e,r,i,t)},this.C=Z(t),this.p=1024,this.U="SHA-384"===t?384:512,this.v=!1,i.hmacKey&&this.M(c("hmacKey",i.hmacKey,this.K))}}const D=[new B(0,1),new B(0,32898),new B(2147483648,32906),new B(2147483648,2147516416),new B(0,32907),new B(0,2147483649),new B(2147483648,2147516545),new B(2147483648,32777),new B(0,138),new B(0,136),new B(0,2147516425),new B(0,2147483658),new B(0,2147516555),new B(2147483648,139),new B(2147483648,32905),new B(2147483648,32771),new B(2147483648,32770),new B(2147483648,128),new B(0,32778),new B(2147483648,2147483658),new B(2147483648,2147516545),new B(2147483648,32896),new B(0,2147483649),new B(2147483648,2147516424)],G=[[0,36,3,41,18],[1,44,10,45,2],[62,6,43,15,61],[28,55,25,21,56],[27,20,39,8,14]];function J(t){let n;const e=[];for(n=0;n<5;n+=1)e[n]=[new B(0,0),new B(0,0),new B(0,0),new B(0,0),new B(0,0)];return e}function Q(t){let n;const e=[];for(n=0;n<5;n+=1)e[n]=t[n].slice();return e}function W(t,n){let e,r,i,s;const o=[],h=[];if(null!==t)for(r=0;r<t.length;r+=2)n[(r>>>1)%5][(r>>>1)/5|0]=x(n[(r>>>1)%5][(r>>>1)/5|0],new B(t[r+1],t[r]));for(e=0;e<24;e+=1){for(s=J(),r=0;r<5;r+=1)o[r]=(u=n[r][0],w=n[r][1],c=n[r][2],f=n[r][3],a=n[r][4],new B(u.Y^w.Y^c.Y^f.Y^a.Y,u.N^w.N^c.N^f.N^a.N));for(r=0;r<5;r+=1)h[r]=x(o[(r+4)%5],L(o[(r+1)%5],1));for(r=0;r<5;r+=1)for(i=0;i<5;i+=1)n[r][i]=x(n[r][i],h[r]);for(r=0;r<5;r+=1)for(i=0;i<5;i+=1)s[i][(2*r+3*i)%5]=L(n[r][i],G[r][i]);for(r=0;r<5;r+=1)for(i=0;i<5;i+=1)n[r][i]=x(s[r][i],new B(~s[(r+1)%5][i].Y&s[(r+2)%5][i].Y,~s[(r+1)%5][i].N&s[(r+2)%5][i].N));n[0][0]=x(n[0][0],D[e])}var u,w,c,f,a;return n}function $(t){let n,e,r=0;const i=[0,0],s=[4294967295&t,t/4294967296&2097151];for(n=6;n>=0;n--)e=s[n>>2]>>>8*n&255,0===e&&0===r||(i[r+1>>2]|=e<<8*(r+1),r+=1);return r=0!==r?r:1,i[0]|=r,{value:r+1>4?i:[i[0]],binLen:8+8*r}}function tt(t){return u($(t.binLen),t)}function nt(t,n){let e,r=$(n);r=u(r,t);const i=n>>>2,s=(i-r.value.length%i)%i;for(e=0;e<s;e++)r.value.push(0);return r.value}class et extends f{constructor(t,n,r){let i=6,s=0;super(t,n,r);const o=r||{};if(1!==this.numRounds){if(o.kmacKey||o.hmacKey)throw new Error("Cannot set numRounds with MAC");if("CSHAKE128"===this.s||"CSHAKE256"===this.s)throw new Error("Cannot set numRounds for CSHAKE variants")}switch(this.K=1,this.m=e(this.t,this.i,this.K),this.R=W,this.g=Q,this.B=J,this.C=J(),this.v=!1,t){case"SHA3-224":this.p=s=1152,this.U=224,this.L=!0,this.T=this.k;break;case"SHA3-256":this.p=s=1088,this.U=256,this.L=!0,this.T=this.k;break;case"SHA3-384":this.p=s=832,this.U=384,this.L=!0,this.T=this.k;break;case"SHA3-512":this.p=s=576,this.U=512,this.L=!0,this.T=this.k;break;case"SHAKE128":i=31,this.p=s=1344,this.U=-1,this.v=!0,this.L=!1,this.T=null;break;case"SHAKE256":i=31,this.p=s=1088,this.U=-1,this.v=!0,this.L=!1,this.T=null;break;case"KMAC128":i=4,this.p=s=1344,this.I(r),this.U=-1,this.v=!0,this.L=!1,this.T=this.X;break;case"KMAC256":i=4,this.p=s=1088,this.I(r),this.U=-1,this.v=!0,this.L=!1,this.T=this.X;break;case"CSHAKE128":this.p=s=1344,i=this._(r),this.U=-1,this.v=!0,this.L=!1,this.T=null;break;case"CSHAKE256":this.p=s=1088,i=this._(r),this.U=-1,this.v=!0,this.L=!1,this.T=null;break;default:throw new Error(h)}this.F=function(t,n,e,r,o){return function(t,n,e,r,i,s,o){let h,u,w=0;const c=[],f=i>>>5,a=n>>>5;for(h=0;h<a&&n>=i;h+=f)r=W(t.slice(h,h+f),r),n-=i;for(t=t.slice(h),n%=i;t.length<f;)t.push(0);for(h=n>>>3,t[h>>2]^=s<<h%4*8,t[f-1]^=2147483648,r=W(t,r);32*c.length<o&&(u=r[w%5][w/5|0],c.push(u.N),!(32*c.length>=o));)c.push(u.Y),w+=1,0==64*w%i&&(W(null,r),w=0);return c}(t,n,0,r,s,i,o)},o.hmacKey&&this.M(c("hmacKey",o.hmacKey,this.K))}_(t,n){const e=function(t){const n=t||{};return{funcName:c("funcName",n.funcName,1,{value:[],binLen:0}),customization:c("Customization",n.customization,1,{value:[],binLen:0})}}(t||{});n&&(e.funcName=n);const r=u(tt(e.funcName),tt(e.customization));if(0!==e.customization.binLen||0!==e.funcName.binLen){const t=nt(r,this.p>>>3);for(let n=0;n<t.length;n+=this.p>>>5)this.C=this.R(t.slice(n,n+(this.p>>>5)),this.C),this.l+=this.p;return 4}return 31}I(t){const n=function(t){const n=t||{};return{kmacKey:c("kmacKey",n.kmacKey,1),funcName:{value:[1128353099],binLen:32},customization:c("Customization",n.customization,1,{value:[],binLen:0})}}(t||{});this._(t,n.funcName);const e=nt(tt(n.kmacKey),this.p>>>3);for(let t=0;t<e.length;t+=this.p>>>5)this.C=this.R(e.slice(t,t+(this.p>>>5)),this.C),this.l+=this.p;this.A=!0}X(t){const n=u({value:this.o.slice(),binLen:this.h},function(t){let n,e,r=0;const i=[0,0],s=[4294967295&t,t/4294967296&2097151];for(n=6;n>=0;n--)e=s[n>>2]>>>8*n&255,0===e&&0===r||(i[r>>2]|=e<<8*r,r+=1);return r=0!==r?r:1,i[r>>2]|=r<<8*r,{value:r+1>4?i:[i[0]],binLen:8+8*r}}(t.outputLen));return this.F(n.value,n.binLen,this.l,this.g(this.C),t.outputLen)}}/* harmony default export */ __webpack_exports__["default"] = (class{constructor(t,n,e){if("SHA-1"==t)this.O=new K(t,n,e);else if("SHA-224"==t||"SHA-256"==t)this.O=new g(t,n,e);else if("SHA-384"==t||"SHA-512"==t)this.O=new q(t,n,e);else{if("SHA3-224"!=t&&"SHA3-256"!=t&&"SHA3-384"!=t&&"SHA3-512"!=t&&"SHAKE128"!=t&&"SHAKE256"!=t&&"CSHAKE128"!=t&&"CSHAKE256"!=t&&"KMAC128"!=t&&"KMAC256"!=t)throw new Error(h);this.O=new et(t,n,e)}}update(t){this.O.update(t)}getHash(t,n){return this.O.getHash(t,n)}setHMACKey(t,n,e){this.O.setHMACKey(t,n,e)}getHMAC(t,n){return this.O.getHMAC(t,n)}});
//# sourceMappingURL=sha.mjs.map


/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
    "use strict";
    if (true) {
        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function () {
    "use strict";

    // Slightly dubious tricks to cut down minimized file size
    var noop = function() {};
    var undefinedType = "undefined";
    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (
        /Trident\/|MSIE /.test(window.navigator.userAgent)
    );

    var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
    ];

    // Cross-browser bind equivalent that works at least back to IE6
    function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === 'function') {
            return method.bind(obj);
        } else {
            try {
                return Function.prototype.bind.call(method, obj);
            } catch (e) {
                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
                return function() {
                    return Function.prototype.apply.apply(method, [obj, arguments]);
                };
            }
        }
    }

    // Trace() doesn't print the message in IE, so for that case we need to wrap it
    function traceForIE() {
        if (console.log) {
            if (console.log.apply) {
                console.log.apply(console, arguments);
            } else {
                // In old IE, native console methods themselves don't have apply().
                Function.prototype.apply.apply(console.log, [console, arguments]);
            }
        }
        if (console.trace) console.trace();
    }

    // Build the best logging method possible for this env
    // Wherever possible we want to bind, not wrap, to preserve stack traces
    function realMethod(methodName) {
        if (methodName === 'debug') {
            methodName = 'log';
        }

        if (typeof console === undefinedType) {
            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
        } else if (methodName === 'trace' && isIE) {
            return traceForIE;
        } else if (console[methodName] !== undefined) {
            return bindMethod(console, methodName);
        } else if (console.log !== undefined) {
            return bindMethod(console, 'log');
        } else {
            return noop;
        }
    }

    // These private functions always need `this` to be set properly

    function replaceLoggingMethods(level, loggerName) {
        /*jshint validthis:true */
        for (var i = 0; i < logMethods.length; i++) {
            var methodName = logMethods[i];
            this[methodName] = (i < level) ?
                noop :
                this.methodFactory(methodName, level, loggerName);
        }

        // Define log.log as an alias for log.debug
        this.log = this.debug;
    }

    // In old IE versions, the console isn't present until you first open it.
    // We build realMethod() replacements here that regenerate logging methods
    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function () {
            if (typeof console !== undefinedType) {
                replaceLoggingMethods.call(this, level, loggerName);
                this[methodName].apply(this, arguments);
            }
        };
    }

    // By default, we use closely bound real methods wherever possible, and
    // otherwise we wait for a console to appear, and then try again.
    function defaultMethodFactory(methodName, level, loggerName) {
        /*jshint validthis:true */
        return realMethod(methodName) ||
               enableLoggingWhenConsoleArrives.apply(this, arguments);
    }

    function Logger(name, defaultLevel, factory) {
      var self = this;
      var currentLevel;
      var storageKey = "loglevel";
      if (name) {
        storageKey += ":" + name;
      }

      function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

          if (typeof window === undefinedType) return;

          // Use localStorage if available
          try {
              window.localStorage[storageKey] = levelName;
              return;
          } catch (ignore) {}

          // Use session cookie as fallback
          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {}
      }

      function getPersistedLevel() {
          var storedLevel;

          if (typeof window === undefinedType) return;

          try {
              storedLevel = window.localStorage[storageKey];
          } catch (ignore) {}

          // Fallback to cookies if local storage gives us nothing
          if (typeof storedLevel === undefinedType) {
              try {
                  var cookie = window.document.cookie;
                  var location = cookie.indexOf(
                      encodeURIComponent(storageKey) + "=");
                  if (location !== -1) {
                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
                  }
              } catch (ignore) {}
          }

          // If the stored level is not valid, treat it as if nothing was stored.
          if (self.levels[storedLevel] === undefined) {
              storedLevel = undefined;
          }

          return storedLevel;
      }

      /*
       *
       * Public logger API - see https://github.com/pimterry/loglevel for details
       *
       */

      self.name = name;

      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
          "ERROR": 4, "SILENT": 5};

      self.methodFactory = factory || defaultMethodFactory;

      self.getLevel = function () {
          return currentLevel;
      };

      self.setLevel = function (level, persist) {
          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
              level = self.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
              currentLevel = level;
              if (persist !== false) {  // defaults to true
                  persistLevelIfPossible(level);
              }
              replaceLoggingMethods.call(self, level, name);
              if (typeof console === undefinedType && level < self.levels.SILENT) {
                  return "No console available for logging";
              }
          } else {
              throw "log.setLevel() called with invalid level: " + level;
          }
      };

      self.setDefaultLevel = function (level) {
          if (!getPersistedLevel()) {
              self.setLevel(level, false);
          }
      };

      self.enableAll = function(persist) {
          self.setLevel(self.levels.TRACE, persist);
      };

      self.disableAll = function(persist) {
          self.setLevel(self.levels.SILENT, persist);
      };

      // Initialize with the right level
      var initialLevel = getPersistedLevel();
      if (initialLevel == null) {
          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;
      }
      self.setLevel(initialLevel, false);
    }

    /*
     *
     * Top-level API
     *
     */

    var defaultLogger = new Logger();

    var _loggersByName = {};
    defaultLogger.getLogger = function getLogger(name) {
        if (typeof name !== "string" || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }

        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
        }
        return logger;
    };

    // Grab the current global log variable in case of overwrite
    var _log = (typeof window !== undefinedType) ? window.log : undefined;
    defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType &&
               window.log === defaultLogger) {
            window.log = _log;
        }

        return defaultLogger;
    };

    defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
    };

    return defaultLogger;
}));


/***/ }),

/***/ "./node_modules/moment/moment.js":
/*!***************************************!*\
  !*** ./node_modules/moment/moment.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js

;(function (global, factory) {
     true ? module.exports = factory() :
    undefined
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return (Object.getOwnPropertyNames(obj).length === 0);
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1 (mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            }
            else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate (y) {
        var date;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            var args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays (ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays :
            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
            : (m) ? weekdays[m.day()] : weekdays;
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                !(function webpackMissingModule() { var e = new Error("Cannot find module 'undefined'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year': output = monthDiff(this, that) / 12; break;
            case 'month': output = monthDiff(this, that); break;
            case 'quarter': output = monthDiff(this, that) / 3; break;
            case 'second': output = (this - that) / 1e3; break; // 1000
            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default: output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    var MS_PER_SECOND = 1000;
    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2 () {
        return isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix (input) {
        return createLocal(input * 1000);
    }

    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;

    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;

    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':   return months;
                case 'quarter': return months / 3;
                case 'year':    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asQuarters     = makeAs('Q');
    var asYears        = makeAs('y');

    function clone$1 () {
        return createDuration(this);
    }

    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return ((x > 0) - (x < 0)) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' +
            (Y ? ymSign + Y + 'Y' : '') +
            (M ? ymSign + M + 'M' : '') +
            (D ? daysSign + D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? hmsSign + h + 'H' : '') +
            (m ? hmsSign + m + 'M' : '') +
            (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asQuarters     = asQuarters;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.clone          = clone$1;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.24.0';

    setHookCallback(createLocal);

    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',                             // <input type="date" />
        TIME: 'HH:mm',                                  // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',                             // <input type="week" />
        MONTH: 'YYYY-MM'                                // <input type="month" />
    };

    return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js":
/*!**************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/punycode/punycode.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring-es3/encode.js");


/***/ }),

/***/ "./node_modules/sockjs-client/dist/sockjs.js":
/*!***************************************************!*\
  !*** ./node_modules/sockjs-client/dist/sockjs.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/* sockjs-client v1.4.0 | http://sockjs.org | MIT license */
(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
'use strict';

var transportList = require('./transport-list');

module.exports = require('./main')(transportList);

// TODO can't get rid of this until all servers do
if ('_sockjs_onload' in global) {
  setTimeout(global._sockjs_onload, 1);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./main":14,"./transport-list":16}],2:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , Event = require('./event')
  ;

function CloseEvent() {
  Event.call(this);
  this.initEvent('close', false, false);
  this.wasClean = false;
  this.code = 0;
  this.reason = '';
}

inherits(CloseEvent, Event);

module.exports = CloseEvent;

},{"./event":4,"inherits":57}],3:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , EventTarget = require('./eventtarget')
  ;

function EventEmitter() {
  EventTarget.call(this);
}

inherits(EventEmitter, EventTarget);

EventEmitter.prototype.removeAllListeners = function(type) {
  if (type) {
    delete this._listeners[type];
  } else {
    this._listeners = {};
  }
};

EventEmitter.prototype.once = function(type, listener) {
  var self = this
    , fired = false;

  function g() {
    self.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  this.on(type, g);
};

EventEmitter.prototype.emit = function() {
  var type = arguments[0];
  var listeners = this._listeners[type];
  if (!listeners) {
    return;
  }
  // equivalent of Array.prototype.slice.call(arguments, 1);
  var l = arguments.length;
  var args = new Array(l - 1);
  for (var ai = 1; ai < l; ai++) {
    args[ai - 1] = arguments[ai];
  }
  for (var i = 0; i < listeners.length; i++) {
    listeners[i].apply(this, args);
  }
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;

module.exports.EventEmitter = EventEmitter;

},{"./eventtarget":5,"inherits":57}],4:[function(require,module,exports){
'use strict';

function Event(eventType) {
  this.type = eventType;
}

Event.prototype.initEvent = function(eventType, canBubble, cancelable) {
  this.type = eventType;
  this.bubbles = canBubble;
  this.cancelable = cancelable;
  this.timeStamp = +new Date();
  return this;
};

Event.prototype.stopPropagation = function() {};
Event.prototype.preventDefault = function() {};

Event.CAPTURING_PHASE = 1;
Event.AT_TARGET = 2;
Event.BUBBLING_PHASE = 3;

module.exports = Event;

},{}],5:[function(require,module,exports){
'use strict';

/* Simplified implementation of DOM2 EventTarget.
 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
 */

function EventTarget() {
  this._listeners = {};
}

EventTarget.prototype.addEventListener = function(eventType, listener) {
  if (!(eventType in this._listeners)) {
    this._listeners[eventType] = [];
  }
  var arr = this._listeners[eventType];
  // #4
  if (arr.indexOf(listener) === -1) {
    // Make a copy so as not to interfere with a current dispatchEvent.
    arr = arr.concat([listener]);
  }
  this._listeners[eventType] = arr;
};

EventTarget.prototype.removeEventListener = function(eventType, listener) {
  var arr = this._listeners[eventType];
  if (!arr) {
    return;
  }
  var idx = arr.indexOf(listener);
  if (idx !== -1) {
    if (arr.length > 1) {
      // Make a copy so as not to interfere with a current dispatchEvent.
      this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
    } else {
      delete this._listeners[eventType];
    }
    return;
  }
};

EventTarget.prototype.dispatchEvent = function() {
  var event = arguments[0];
  var t = event.type;
  // equivalent of Array.prototype.slice.call(arguments, 0);
  var args = arguments.length === 1 ? [event] : Array.apply(null, arguments);
  // TODO: This doesn't match the real behavior; per spec, onfoo get
  // their place in line from the /first/ time they're set from
  // non-null. Although WebKit bumps it to the end every time it's
  // set.
  if (this['on' + t]) {
    this['on' + t].apply(this, args);
  }
  if (t in this._listeners) {
    // Grab a reference to the listeners list. removeEventListener may alter the list.
    var listeners = this._listeners[t];
    for (var i = 0; i < listeners.length; i++) {
      listeners[i].apply(this, args);
    }
  }
};

module.exports = EventTarget;

},{}],6:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , Event = require('./event')
  ;

function TransportMessageEvent(data) {
  Event.call(this);
  this.initEvent('message', false, false);
  this.data = data;
}

inherits(TransportMessageEvent, Event);

module.exports = TransportMessageEvent;

},{"./event":4,"inherits":57}],7:[function(require,module,exports){
'use strict';

var JSON3 = require('json3')
  , iframeUtils = require('./utils/iframe')
  ;

function FacadeJS(transport) {
  this._transport = transport;
  transport.on('message', this._transportMessage.bind(this));
  transport.on('close', this._transportClose.bind(this));
}

FacadeJS.prototype._transportClose = function(code, reason) {
  iframeUtils.postMessage('c', JSON3.stringify([code, reason]));
};
FacadeJS.prototype._transportMessage = function(frame) {
  iframeUtils.postMessage('t', frame);
};
FacadeJS.prototype._send = function(data) {
  this._transport.send(data);
};
FacadeJS.prototype._close = function() {
  this._transport.close();
  this._transport.removeAllListeners();
};

module.exports = FacadeJS;

},{"./utils/iframe":47,"json3":58}],8:[function(require,module,exports){
(function (process){
'use strict';

var urlUtils = require('./utils/url')
  , eventUtils = require('./utils/event')
  , JSON3 = require('json3')
  , FacadeJS = require('./facade')
  , InfoIframeReceiver = require('./info-iframe-receiver')
  , iframeUtils = require('./utils/iframe')
  , loc = require('./location')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:iframe-bootstrap');
}

module.exports = function(SockJS, availableTransports) {
  var transportMap = {};
  availableTransports.forEach(function(at) {
    if (at.facadeTransport) {
      transportMap[at.facadeTransport.transportName] = at.facadeTransport;
    }
  });

  // hard-coded for the info iframe
  // TODO see if we can make this more dynamic
  transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
  var parentOrigin;

  /* eslint-disable camelcase */
  SockJS.bootstrap_iframe = function() {
    /* eslint-enable camelcase */
    var facade;
    iframeUtils.currentWindowId = loc.hash.slice(1);
    var onMessage = function(e) {
      if (e.source !== parent) {
        return;
      }
      if (typeof parentOrigin === 'undefined') {
        parentOrigin = e.origin;
      }
      if (e.origin !== parentOrigin) {
        return;
      }

      var iframeMessage;
      try {
        iframeMessage = JSON3.parse(e.data);
      } catch (ignored) {
        debug('bad json', e.data);
        return;
      }

      if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
        return;
      }
      switch (iframeMessage.type) {
      case 's':
        var p;
        try {
          p = JSON3.parse(iframeMessage.data);
        } catch (ignored) {
          debug('bad json', iframeMessage.data);
          break;
        }
        var version = p[0];
        var transport = p[1];
        var transUrl = p[2];
        var baseUrl = p[3];
        debug(version, transport, transUrl, baseUrl);
        // change this to semver logic
        if (version !== SockJS.version) {
          throw new Error('Incompatible SockJS! Main site uses:' +
                    ' "' + version + '", the iframe:' +
                    ' "' + SockJS.version + '".');
        }

        if (!urlUtils.isOriginEqual(transUrl, loc.href) ||
            !urlUtils.isOriginEqual(baseUrl, loc.href)) {
          throw new Error('Can\'t connect to different domain from within an ' +
                    'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
        }
        facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
        break;
      case 'm':
        facade._send(iframeMessage.data);
        break;
      case 'c':
        if (facade) {
          facade._close();
        }
        facade = null;
        break;
      }
    };

    eventUtils.attachEvent('message', onMessage);

    // Start
    iframeUtils.postMessage('s');
  };
};

}).call(this,{ env: {} })

},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,"debug":55,"json3":58}],9:[function(require,module,exports){
(function (process){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , objectUtils = require('./utils/object')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-ajax');
}

function InfoAjax(url, AjaxObject) {
  EventEmitter.call(this);

  var self = this;
  var t0 = +new Date();
  this.xo = new AjaxObject('GET', url);

  this.xo.once('finish', function(status, text) {
    var info, rtt;
    if (status === 200) {
      rtt = (+new Date()) - t0;
      if (text) {
        try {
          info = JSON3.parse(text);
        } catch (e) {
          debug('bad json', text);
        }
      }

      if (!objectUtils.isObject(info)) {
        info = {};
      }
    }
    self.emit('finish', info, rtt);
    self.removeAllListeners();
  });
}

inherits(InfoAjax, EventEmitter);

InfoAjax.prototype.close = function() {
  this.removeAllListeners();
  this.xo.close();
};

module.exports = InfoAjax;

}).call(this,{ env: {} })

},{"./utils/object":49,"debug":55,"events":3,"inherits":57,"json3":58}],10:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , JSON3 = require('json3')
  , XHRLocalObject = require('./transport/sender/xhr-local')
  , InfoAjax = require('./info-ajax')
  ;

function InfoReceiverIframe(transUrl) {
  var self = this;
  EventEmitter.call(this);

  this.ir = new InfoAjax(transUrl, XHRLocalObject);
  this.ir.once('finish', function(info, rtt) {
    self.ir = null;
    self.emit('message', JSON3.stringify([info, rtt]));
  });
}

inherits(InfoReceiverIframe, EventEmitter);

InfoReceiverIframe.transportName = 'iframe-info-receiver';

InfoReceiverIframe.prototype.close = function() {
  if (this.ir) {
    this.ir.close();
    this.ir = null;
  }
  this.removeAllListeners();
};

module.exports = InfoReceiverIframe;

},{"./info-ajax":9,"./transport/sender/xhr-local":37,"events":3,"inherits":57,"json3":58}],11:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , utils = require('./utils/event')
  , IframeTransport = require('./transport/iframe')
  , InfoReceiverIframe = require('./info-iframe-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-iframe');
}

function InfoIframe(baseUrl, url) {
  var self = this;
  EventEmitter.call(this);

  var go = function() {
    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);

    ifr.once('message', function(msg) {
      if (msg) {
        var d;
        try {
          d = JSON3.parse(msg);
        } catch (e) {
          debug('bad json', msg);
          self.emit('finish');
          self.close();
          return;
        }

        var info = d[0], rtt = d[1];
        self.emit('finish', info, rtt);
      }
      self.close();
    });

    ifr.once('close', function() {
      self.emit('finish');
      self.close();
    });
  };

  // TODO this seems the same as the 'needBody' from transports
  if (!global.document.body) {
    utils.attachEvent('load', go);
  } else {
    go();
  }
}

inherits(InfoIframe, EventEmitter);

InfoIframe.enabled = function() {
  return IframeTransport.enabled();
};

InfoIframe.prototype.close = function() {
  if (this.ifr) {
    this.ifr.close();
  }
  this.removeAllListeners();
  this.ifr = null;
};

module.exports = InfoIframe;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,"debug":55,"events":3,"inherits":57,"json3":58}],12:[function(require,module,exports){
(function (process){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , urlUtils = require('./utils/url')
  , XDR = require('./transport/sender/xdr')
  , XHRCors = require('./transport/sender/xhr-cors')
  , XHRLocal = require('./transport/sender/xhr-local')
  , XHRFake = require('./transport/sender/xhr-fake')
  , InfoIframe = require('./info-iframe')
  , InfoAjax = require('./info-ajax')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-receiver');
}

function InfoReceiver(baseUrl, urlInfo) {
  debug(baseUrl);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self.doXhr(baseUrl, urlInfo);
  }, 0);
}

inherits(InfoReceiver, EventEmitter);

// TODO this is currently ignoring the list of available transports and the whitelist

InfoReceiver._getReceiver = function(baseUrl, url, urlInfo) {
  // determine method of CORS support (if needed)
  if (urlInfo.sameOrigin) {
    return new InfoAjax(url, XHRLocal);
  }
  if (XHRCors.enabled) {
    return new InfoAjax(url, XHRCors);
  }
  if (XDR.enabled && urlInfo.sameScheme) {
    return new InfoAjax(url, XDR);
  }
  if (InfoIframe.enabled()) {
    return new InfoIframe(baseUrl, url);
  }
  return new InfoAjax(url, XHRFake);
};

InfoReceiver.prototype.doXhr = function(baseUrl, urlInfo) {
  var self = this
    , url = urlUtils.addPath(baseUrl, '/info')
    ;
  debug('doXhr', url);

  this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);

  this.timeoutRef = setTimeout(function() {
    debug('timeout');
    self._cleanup(false);
    self.emit('finish');
  }, InfoReceiver.timeout);

  this.xo.once('finish', function(info, rtt) {
    debug('finish', info, rtt);
    self._cleanup(true);
    self.emit('finish', info, rtt);
  });
};

InfoReceiver.prototype._cleanup = function(wasClean) {
  debug('_cleanup');
  clearTimeout(this.timeoutRef);
  this.timeoutRef = null;
  if (!wasClean && this.xo) {
    this.xo.close();
  }
  this.xo = null;
};

InfoReceiver.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  this._cleanup(false);
};

InfoReceiver.timeout = 8000;

module.exports = InfoReceiver;

}).call(this,{ env: {} })

},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,"debug":55,"events":3,"inherits":57}],13:[function(require,module,exports){
(function (global){
'use strict';

module.exports = global.location || {
  origin: 'http://localhost:80'
, protocol: 'http:'
, host: 'localhost'
, port: 80
, href: 'http://localhost/'
, hash: ''
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],14:[function(require,module,exports){
(function (process,global){
'use strict';

require('./shims');

var URL = require('url-parse')
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , random = require('./utils/random')
  , escape = require('./utils/escape')
  , urlUtils = require('./utils/url')
  , eventUtils = require('./utils/event')
  , transport = require('./utils/transport')
  , objectUtils = require('./utils/object')
  , browser = require('./utils/browser')
  , log = require('./utils/log')
  , Event = require('./event/event')
  , EventTarget = require('./event/eventtarget')
  , loc = require('./location')
  , CloseEvent = require('./event/close')
  , TransportMessageEvent = require('./event/trans-message')
  , InfoReceiver = require('./info-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:main');
}

var transports;

// follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface
function SockJS(url, protocols, options) {
  if (!(this instanceof SockJS)) {
    return new SockJS(url, protocols, options);
  }
  if (arguments.length < 1) {
    throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
  }
  EventTarget.call(this);

  this.readyState = SockJS.CONNECTING;
  this.extensions = '';
  this.protocol = '';

  // non-standard extension
  options = options || {};
  if (options.protocols_whitelist) {
    log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
  }
  this._transportsWhitelist = options.transports;
  this._transportOptions = options.transportOptions || {};
  this._timeout = options.timeout || 0;

  var sessionId = options.sessionId || 8;
  if (typeof sessionId === 'function') {
    this._generateSessionId = sessionId;
  } else if (typeof sessionId === 'number') {
    this._generateSessionId = function() {
      return random.string(sessionId);
    };
  } else {
    throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');
  }

  this._server = options.server || random.numberString(1000);

  // Step 1 of WS spec - parse and validate the url. Issue #8
  var parsedUrl = new URL(url);
  if (!parsedUrl.host || !parsedUrl.protocol) {
    throw new SyntaxError("The URL '" + url + "' is invalid");
  } else if (parsedUrl.hash) {
    throw new SyntaxError('The URL must not contain a fragment');
  } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
    throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
  }

  var secure = parsedUrl.protocol === 'https:';
  // Step 2 - don't allow secure origin with an insecure protocol
  if (loc.protocol === 'https:' && !secure) {
    throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
  }

  // Step 3 - check port access - no need here
  // Step 4 - parse protocols argument
  if (!protocols) {
    protocols = [];
  } else if (!Array.isArray(protocols)) {
    protocols = [protocols];
  }

  // Step 5 - check protocols argument
  var sortedProtocols = protocols.sort();
  sortedProtocols.forEach(function(proto, i) {
    if (!proto) {
      throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
    }
    if (i < (sortedProtocols.length - 1) && proto === sortedProtocols[i + 1]) {
      throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
    }
  });

  // Step 6 - convert origin
  var o = urlUtils.getOrigin(loc.href);
  this._origin = o ? o.toLowerCase() : null;

  // remove the trailing slash
  parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, ''));

  // store the sanitized url
  this.url = parsedUrl.href;
  debug('using url', this.url);

  // Step 7 - start connection in background
  // obtain server info
  // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26
  this._urlInfo = {
    nullOrigin: !browser.hasDomain()
  , sameOrigin: urlUtils.isOriginEqual(this.url, loc.href)
  , sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
  };

  this._ir = new InfoReceiver(this.url, this._urlInfo);
  this._ir.once('finish', this._receiveInfo.bind(this));
}

inherits(SockJS, EventTarget);

function userSetCode(code) {
  return code === 1000 || (code >= 3000 && code <= 4999);
}

SockJS.prototype.close = function(code, reason) {
  // Step 1
  if (code && !userSetCode(code)) {
    throw new Error('InvalidAccessError: Invalid code');
  }
  // Step 2.4 states the max is 123 bytes, but we are just checking length
  if (reason && reason.length > 123) {
    throw new SyntaxError('reason argument has an invalid length');
  }

  // Step 3.1
  if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
    return;
  }

  // TODO look at docs to determine how to set this
  var wasClean = true;
  this._close(code || 1000, reason || 'Normal closure', wasClean);
};

SockJS.prototype.send = function(data) {
  // #13 - convert anything non-string to string
  // TODO this currently turns objects into [object Object]
  if (typeof data !== 'string') {
    data = '' + data;
  }
  if (this.readyState === SockJS.CONNECTING) {
    throw new Error('InvalidStateError: The connection has not been established yet');
  }
  if (this.readyState !== SockJS.OPEN) {
    return;
  }
  this._transport.send(escape.quote(data));
};

SockJS.version = require('./version');

SockJS.CONNECTING = 0;
SockJS.OPEN = 1;
SockJS.CLOSING = 2;
SockJS.CLOSED = 3;

SockJS.prototype._receiveInfo = function(info, rtt) {
  debug('_receiveInfo', rtt);
  this._ir = null;
  if (!info) {
    this._close(1002, 'Cannot connect to server');
    return;
  }

  // establish a round-trip timeout (RTO) based on the
  // round-trip time (RTT)
  this._rto = this.countRTO(rtt);
  // allow server to override url used for the actual transport
  this._transUrl = info.base_url ? info.base_url : this.url;
  info = objectUtils.extend(info, this._urlInfo);
  debug('info', info);
  // determine list of desired and supported transports
  var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
  this._transports = enabledTransports.main;
  debug(this._transports.length + ' enabled transports');

  this._connect();
};

SockJS.prototype._connect = function() {
  for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
    debug('attempt', Transport.transportName);
    if (Transport.needBody) {
      if (!global.document.body ||
          (typeof global.document.readyState !== 'undefined' &&
            global.document.readyState !== 'complete' &&
            global.document.readyState !== 'interactive')) {
        debug('waiting for body');
        this._transports.unshift(Transport);
        eventUtils.attachEvent('load', this._connect.bind(this));
        return;
      }
    }

    // calculate timeout based on RTO and round trips. Default to 5s
    var timeoutMs = Math.max(this._timeout, (this._rto * Transport.roundTrips) || 5000);
    this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
    debug('using timeout', timeoutMs);

    var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
    var options = this._transportOptions[Transport.transportName];
    debug('transport url', transportUrl);
    var transportObj = new Transport(transportUrl, this._transUrl, options);
    transportObj.on('message', this._transportMessage.bind(this));
    transportObj.once('close', this._transportClose.bind(this));
    transportObj.transportName = Transport.transportName;
    this._transport = transportObj;

    return;
  }
  this._close(2000, 'All transports failed', false);
};

SockJS.prototype._transportTimeout = function() {
  debug('_transportTimeout');
  if (this.readyState === SockJS.CONNECTING) {
    if (this._transport) {
      this._transport.close();
    }

    this._transportClose(2007, 'Transport timed out');
  }
};

SockJS.prototype._transportMessage = function(msg) {
  debug('_transportMessage', msg);
  var self = this
    , type = msg.slice(0, 1)
    , content = msg.slice(1)
    , payload
    ;

  // first check for messages that don't need a payload
  switch (type) {
    case 'o':
      this._open();
      return;
    case 'h':
      this.dispatchEvent(new Event('heartbeat'));
      debug('heartbeat', this.transport);
      return;
  }

  if (content) {
    try {
      payload = JSON3.parse(content);
    } catch (e) {
      debug('bad json', content);
    }
  }

  if (typeof payload === 'undefined') {
    debug('empty payload', content);
    return;
  }

  switch (type) {
    case 'a':
      if (Array.isArray(payload)) {
        payload.forEach(function(p) {
          debug('message', self.transport, p);
          self.dispatchEvent(new TransportMessageEvent(p));
        });
      }
      break;
    case 'm':
      debug('message', this.transport, payload);
      this.dispatchEvent(new TransportMessageEvent(payload));
      break;
    case 'c':
      if (Array.isArray(payload) && payload.length === 2) {
        this._close(payload[0], payload[1], true);
      }
      break;
  }
};

SockJS.prototype._transportClose = function(code, reason) {
  debug('_transportClose', this.transport, code, reason);
  if (this._transport) {
    this._transport.removeAllListeners();
    this._transport = null;
    this.transport = null;
  }

  if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
    this._connect();
    return;
  }

  this._close(code, reason);
};

SockJS.prototype._open = function() {
  debug('_open', this._transport && this._transport.transportName, this.readyState);
  if (this.readyState === SockJS.CONNECTING) {
    if (this._transportTimeoutId) {
      clearTimeout(this._transportTimeoutId);
      this._transportTimeoutId = null;
    }
    this.readyState = SockJS.OPEN;
    this.transport = this._transport.transportName;
    this.dispatchEvent(new Event('open'));
    debug('connected', this.transport);
  } else {
    // The server might have been restarted, and lost track of our
    // connection.
    this._close(1006, 'Server lost session');
  }
};

SockJS.prototype._close = function(code, reason, wasClean) {
  debug('_close', this.transport, code, reason, wasClean, this.readyState);
  var forceFail = false;

  if (this._ir) {
    forceFail = true;
    this._ir.close();
    this._ir = null;
  }
  if (this._transport) {
    this._transport.close();
    this._transport = null;
    this.transport = null;
  }

  if (this.readyState === SockJS.CLOSED) {
    throw new Error('InvalidStateError: SockJS has already been closed');
  }

  this.readyState = SockJS.CLOSING;
  setTimeout(function() {
    this.readyState = SockJS.CLOSED;

    if (forceFail) {
      this.dispatchEvent(new Event('error'));
    }

    var e = new CloseEvent('close');
    e.wasClean = wasClean || false;
    e.code = code || 1000;
    e.reason = reason;

    this.dispatchEvent(e);
    this.onmessage = this.onclose = this.onerror = null;
    debug('disconnected');
  }.bind(this), 0);
};

// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
// and RFC 2988.
SockJS.prototype.countRTO = function(rtt) {
  // In a local environment, when using IE8/9 and the `jsonp-polling`
  // transport the time needed to establish a connection (the time that pass
  // from the opening of the transport to the call of `_dispatchOpen`) is
  // around 200msec (the lower bound used in the article above) and this
  // causes spurious timeouts. For this reason we calculate a value slightly
  // larger than that used in the article.
  if (rtt > 100) {
    return 4 * rtt; // rto > 400msec
  }
  return 300 + rtt; // 300msec < rto <= 400msec
};

module.exports = function(availableTransports) {
  transports = transport(availableTransports);
  require('./iframe-bootstrap')(SockJS, availableTransports);
  return SockJS;
};

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,"debug":55,"inherits":57,"json3":58,"url-parse":61}],15:[function(require,module,exports){
/* eslint-disable */
/* jscs: disable */
'use strict';

// pulled specific shims from https://github.com/es-shims/es5-shim

var ArrayPrototype = Array.prototype;
var ObjectPrototype = Object.prototype;
var FunctionPrototype = Function.prototype;
var StringPrototype = String.prototype;
var array_slice = ArrayPrototype.slice;

var _toString = ObjectPrototype.toString;
var isFunction = function (val) {
    return ObjectPrototype.toString.call(val) === '[object Function]';
};
var isArray = function isArray(obj) {
    return _toString.call(obj) === '[object Array]';
};
var isString = function isString(obj) {
    return _toString.call(obj) === '[object String]';
};

var supportsDescriptors = Object.defineProperty && (function () {
    try {
        Object.defineProperty({}, 'x', {});
        return true;
    } catch (e) { /* this is ES3 */
        return false;
    }
}());

// Define configurable, writable and non-enumerable props
// if they don't exist.
var defineProperty;
if (supportsDescriptors) {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        Object.defineProperty(object, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: method
        });
    };
} else {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        object[name] = method;
    };
}
var defineProperties = function (object, map, forceAssign) {
    for (var name in map) {
        if (ObjectPrototype.hasOwnProperty.call(map, name)) {
          defineProperty(object, name, map[name], forceAssign);
        }
    }
};

var toObject = function (o) {
    if (o == null) { // this matches both null and undefined
        throw new TypeError("can't convert " + o + ' to object');
    }
    return Object(o);
};

//
// Util
// ======
//

// ES5 9.4
// http://es5.github.com/#x9.4
// http://jsperf.com/to-integer

function toInteger(num) {
    var n = +num;
    if (n !== n) { // isNaN
        n = 0;
    } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
    }
    return n;
}

function ToUint32(x) {
    return x >>> 0;
}

//
// Function
// ========
//

// ES-5 15.3.4.5
// http://es5.github.com/#x15.3.4.5

function Empty() {}

defineProperties(FunctionPrototype, {
    bind: function bind(that) { // .length is 1
        // 1. Let Target be the this value.
        var target = this;
        // 2. If IsCallable(Target) is false, throw a TypeError exception.
        if (!isFunction(target)) {
            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
        }
        // 3. Let A be a new (possibly empty) internal list of all of the
        //   argument values provided after thisArg (arg1, arg2 etc), in order.
        // XXX slicedArgs will stand in for "A" if used
        var args = array_slice.call(arguments, 1); // for normal call
        // 4. Let F be a new native ECMAScript object.
        // 11. Set the [[Prototype]] internal property of F to the standard
        //   built-in Function prototype object as specified in 15.3.3.1.
        // 12. Set the [[Call]] internal property of F as described in
        //   15.3.4.5.1.
        // 13. Set the [[Construct]] internal property of F as described in
        //   15.3.4.5.2.
        // 14. Set the [[HasInstance]] internal property of F as described in
        //   15.3.4.5.3.
        var binder = function () {

            if (this instanceof bound) {
                // 15.3.4.5.2 [[Construct]]
                // When the [[Construct]] internal method of a function object,
                // F that was created using the bind function is called with a
                // list of arguments ExtraArgs, the following steps are taken:
                // 1. Let target be the value of F's [[TargetFunction]]
                //   internal property.
                // 2. If target has no [[Construct]] internal method, a
                //   TypeError exception is thrown.
                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Construct]] internal
                //   method of target providing args as the arguments.

                var result = target.apply(
                    this,
                    args.concat(array_slice.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;

            } else {
                // 15.3.4.5.1 [[Call]]
                // When the [[Call]] internal method of a function object, F,
                // which was created using the bind function is called with a
                // this value and a list of arguments ExtraArgs, the following
                // steps are taken:
                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 2. Let boundThis be the value of F's [[BoundThis]] internal
                //   property.
                // 3. Let target be the value of F's [[TargetFunction]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Call]] internal method
                //   of target providing boundThis as the this value and
                //   providing args as the arguments.

                // equiv: target.call(this, ...boundArgs, ...args)
                return target.apply(
                    that,
                    args.concat(array_slice.call(arguments))
                );

            }

        };

        // 15. If the [[Class]] internal property of Target is "Function", then
        //     a. Let L be the length property of Target minus the length of A.
        //     b. Set the length own property of F to either 0 or L, whichever is
        //       larger.
        // 16. Else set the length own property of F to 0.

        var boundLength = Math.max(0, target.length - args.length);

        // 17. Set the attributes of the length own property of F to the values
        //   specified in 15.3.5.1.
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }

        // XXX Build a dynamic function with desired amount of arguments is the only
        // way to set the length property of a function.
        // In environments where Content Security Policies enabled (Chrome extensions,
        // for ex.) all use of eval or Function costructor throws an exception.
        // However in all of these environments Function.prototype.bind exists
        // and so this code will never be executed.
        var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);

        if (target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            // Clean up dangling references.
            Empty.prototype = null;
        }

        // TODO
        // 18. Set the [[Extensible]] internal property of F to true.

        // TODO
        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
        // 20. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
        //   false.
        // 21. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
        //   and false.

        // TODO
        // NOTE Function objects created using Function.prototype.bind do not
        // have a prototype property or the [[Code]], [[FormalParameters]], and
        // [[Scope]] internal properties.
        // XXX can't delete prototype in pure-js.

        // 22. Return F.
        return bound;
    }
});

//
// Array
// =====
//

// ES5 15.4.3.2
// http://es5.github.com/#x15.4.3.2
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
defineProperties(Array, { isArray: isArray });


var boxedString = Object('a');
var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

var properlyBoxesContext = function properlyBoxed(method) {
    // Check node 0.6.21 bug where third parameter is not boxed
    var properlyBoxesNonStrict = true;
    var properlyBoxesStrict = true;
    if (method) {
        method.call('foo', function (_, __, context) {
            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }
        });

        method.call([1], function () {
            'use strict';
            properlyBoxesStrict = typeof this === 'string';
        }, 'x');
    }
    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
};

defineProperties(ArrayPrototype, {
    forEach: function forEach(fun /*, thisp*/) {
        var object = toObject(this),
            self = splitString && isString(this) ? this.split('') : object,
            thisp = arguments[1],
            i = -1,
            length = self.length >>> 0;

        // If no callback function or if callback is not a callable function
        if (!isFunction(fun)) {
            throw new TypeError(); // TODO message
        }

        while (++i < length) {
            if (i in self) {
                // Invoke the callback function with call, passing arguments:
                // context, property value, property key, thisArg object
                // context
                fun.call(thisp, self[i], i, object);
            }
        }
    }
}, !properlyBoxesContext(ArrayPrototype.forEach));

// ES5 15.4.4.14
// http://es5.github.com/#x15.4.4.14
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
defineProperties(ArrayPrototype, {
    indexOf: function indexOf(sought /*, fromIndex */ ) {
        var self = splitString && isString(this) ? this.split('') : toObject(this),
            length = self.length >>> 0;

        if (!length) {
            return -1;
        }

        var i = 0;
        if (arguments.length > 1) {
            i = toInteger(arguments[1]);
        }

        // handle negative indices
        i = i >= 0 ? i : Math.max(0, length + i);
        for (; i < length; i++) {
            if (i in self && self[i] === sought) {
                return i;
            }
        }
        return -1;
    }
}, hasFirefox2IndexOfBug);

//
// String
// ======
//

// ES5 15.5.4.14
// http://es5.github.com/#x15.5.4.14

// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
// Many browsers do not split properly with regular expressions or they
// do not perform the split correctly under obscure conditions.
// See http://blog.stevenlevithan.com/archives/cross-browser-split
// I've tested in many browsers and this seems to cover the deviant ones:
//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
//       [undefined, "t", undefined, "e", ...]
//    ''.split(/.?/) should be [], not [""]
//    '.'.split(/()()/) should be ["."], not ["", "", "."]

var string_split = StringPrototype.split;
if (
    'ab'.split(/(?:ab)*/).length !== 2 ||
    '.'.split(/(.?)(.?)/).length !== 4 ||
    'tesst'.split(/(s)*/)[1] === 't' ||
    'test'.split(/(?:)/, -1).length !== 4 ||
    ''.split(/.?/).length ||
    '.'.split(/()()/).length > 1
) {
    (function () {
        var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group

        StringPrototype.split = function (separator, limit) {
            var string = this;
            if (separator === void 0 && limit === 0) {
                return [];
            }

            // If `separator` is not a regex, use native split
            if (_toString.call(separator) !== '[object RegExp]') {
                return string_split.call(this, separator, limit);
            }

            var output = [],
                flags = (separator.ignoreCase ? 'i' : '') +
                        (separator.multiline  ? 'm' : '') +
                        (separator.extended   ? 'x' : '') + // Proposed for ES6
                        (separator.sticky     ? 'y' : ''), // Firefox 3+
                lastLastIndex = 0,
                // Make `global` and avoid `lastIndex` issues by working with a copy
                separator2, match, lastIndex, lastLength;
            separator = new RegExp(separator.source, flags + 'g');
            string += ''; // Type-convert
            if (!compliantExecNpcg) {
                // Doesn't need flags gy, but they don't hurt
                separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
            }
            /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // Math.pow(2, 32) - 1
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */
            limit = limit === void 0 ?
                -1 >>> 0 : // Math.pow(2, 32) - 1
                ToUint32(limit);
            while (match = separator.exec(string)) {
                // `separator.lastIndex` is not reliable cross-browser
                lastIndex = match.index + match[0].length;
                if (lastIndex > lastLastIndex) {
                    output.push(string.slice(lastLastIndex, match.index));
                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
                    // nonparticipating capturing groups
                    if (!compliantExecNpcg && match.length > 1) {
                        match[0].replace(separator2, function () {
                            for (var i = 1; i < arguments.length - 2; i++) {
                                if (arguments[i] === void 0) {
                                    match[i] = void 0;
                                }
                            }
                        });
                    }
                    if (match.length > 1 && match.index < string.length) {
                        ArrayPrototype.push.apply(output, match.slice(1));
                    }
                    lastLength = match[0].length;
                    lastLastIndex = lastIndex;
                    if (output.length >= limit) {
                        break;
                    }
                }
                if (separator.lastIndex === match.index) {
                    separator.lastIndex++; // Avoid an infinite loop
                }
            }
            if (lastLastIndex === string.length) {
                if (lastLength || !separator.test('')) {
                    output.push('');
                }
            } else {
                output.push(string.slice(lastLastIndex));
            }
            return output.length > limit ? output.slice(0, limit) : output;
        };
    }());

// [bugfix, chrome]
// If separator is undefined, then the result array contains just one String,
// which is the this value (converted to a String). If limit is not undefined,
// then the output array is truncated so that it contains no more than limit
// elements.
// "0".split(undefined, 0) -> []
} else if ('0'.split(void 0, 0).length) {
    StringPrototype.split = function split(separator, limit) {
        if (separator === void 0 && limit === 0) { return []; }
        return string_split.call(this, separator, limit);
    };
}

// ECMA-262, 3rd B.2.3
// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
// non-normative section suggesting uniform semantics and it should be
// normalized across all browsers
// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
var string_substr = StringPrototype.substr;
var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
defineProperties(StringPrototype, {
    substr: function substr(start, length) {
        return string_substr.call(
            this,
            start < 0 ? ((start = this.length + start) < 0 ? 0 : start) : start,
            length
        );
    }
}, hasNegativeSubstrBug);

},{}],16:[function(require,module,exports){
'use strict';

module.exports = [
  // streaming transports
  require('./transport/websocket')
, require('./transport/xhr-streaming')
, require('./transport/xdr-streaming')
, require('./transport/eventsource')
, require('./transport/lib/iframe-wrap')(require('./transport/eventsource'))

  // polling transports
, require('./transport/htmlfile')
, require('./transport/lib/iframe-wrap')(require('./transport/htmlfile'))
, require('./transport/xhr-polling')
, require('./transport/xdr-polling')
, require('./transport/lib/iframe-wrap')(require('./transport/xhr-polling'))
, require('./transport/jsonp-polling')
];

},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , utils = require('../../utils/event')
  , urlUtils = require('../../utils/url')
  , XHR = global.XMLHttpRequest
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:browser:xhr');
}

function AbstractXHRObject(method, url, payload, opts) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function () {
    self._start(method, url, payload, opts);
  }, 0);
}

inherits(AbstractXHRObject, EventEmitter);

AbstractXHRObject.prototype._start = function(method, url, payload, opts) {
  var self = this;

  try {
    this.xhr = new XHR();
  } catch (x) {
    // intentionally empty
  }

  if (!this.xhr) {
    debug('no xhr');
    this.emit('finish', 0, 'no xhr support');
    this._cleanup();
    return;
  }

  // several browsers cache POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  // Explorer tends to keep connection open, even after the
  // tab gets closed: http://bugs.jquery.com/ticket/5280
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload cleanup');
    self._cleanup(true);
  });
  try {
    this.xhr.open(method, url, true);
    if (this.timeout && 'timeout' in this.xhr) {
      this.xhr.timeout = this.timeout;
      this.xhr.ontimeout = function() {
        debug('xhr timeout');
        self.emit('finish', 0, '');
        self._cleanup(false);
      };
    }
  } catch (e) {
    debug('exception', e);
    // IE raises an exception on wrong port.
    this.emit('finish', 0, '');
    this._cleanup(false);
    return;
  }

  if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
    debug('withCredentials');
    // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
    // "This never affects same-site requests."

    this.xhr.withCredentials = true;
  }
  if (opts && opts.headers) {
    for (var key in opts.headers) {
      this.xhr.setRequestHeader(key, opts.headers[key]);
    }
  }

  this.xhr.onreadystatechange = function() {
    if (self.xhr) {
      var x = self.xhr;
      var text, status;
      debug('readyState', x.readyState);
      switch (x.readyState) {
      case 3:
        // IE doesn't like peeking into responseText or status
        // on Microsoft.XMLHTTP and readystate=3
        try {
          status = x.status;
          text = x.responseText;
        } catch (e) {
          // intentionally empty
        }
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }

        // IE does return readystate == 3 for 404 answers.
        if (status === 200 && text && text.length > 0) {
          debug('chunk');
          self.emit('chunk', status, text);
        }
        break;
      case 4:
        status = x.status;
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }
        // IE returns this for a bad port
        // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx
        if (status === 12005 || status === 12029) {
          status = 0;
        }

        debug('finish', status, x.responseText);
        self.emit('finish', status, x.responseText);
        self._cleanup(false);
        break;
      }
    }
  };

  try {
    self.xhr.send(payload);
  } catch (e) {
    self.emit('finish', 0, '');
    self._cleanup(false);
  }
};

AbstractXHRObject.prototype._cleanup = function(abort) {
  debug('cleanup');
  if (!this.xhr) {
    return;
  }
  this.removeAllListeners();
  utils.unloadDel(this.unloadRef);

  // IE needs this field to be a function
  this.xhr.onreadystatechange = function() {};
  if (this.xhr.ontimeout) {
    this.xhr.ontimeout = null;
  }

  if (abort) {
    try {
      this.xhr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xhr = null;
};

AbstractXHRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

AbstractXHRObject.enabled = !!XHR;
// override XMLHttpRequest for IE6/7
// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (!AbstractXHRObject.enabled && (axo in global)) {
  debug('overriding xmlhttprequest');
  XHR = function() {
    try {
      return new global[axo]('Microsoft.XMLHTTP');
    } catch (e) {
      return null;
    }
  };
  AbstractXHRObject.enabled = !!new XHR();
}

var cors = false;
try {
  cors = 'withCredentials' in new XHR();
} catch (ignored) {
  // intentionally empty
}

AbstractXHRObject.supportsCORS = cors;

module.exports = AbstractXHRObject;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/event":46,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],18:[function(require,module,exports){
(function (global){
module.exports = global.EventSource;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],19:[function(require,module,exports){
(function (global){
'use strict';

var Driver = global.WebSocket || global.MozWebSocket;
if (Driver) {
	module.exports = function WebSocketBrowserDriver(url) {
		return new Driver(url);
	};
} else {
	module.exports = undefined;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],20:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , EventSourceReceiver = require('./receiver/eventsource')
  , XHRCorsObject = require('./sender/xhr-cors')
  , EventSourceDriver = require('eventsource')
  ;

function EventSourceTransport(transUrl) {
  if (!EventSourceTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
}

inherits(EventSourceTransport, AjaxBasedTransport);

EventSourceTransport.enabled = function() {
  return !!EventSourceDriver;
};

EventSourceTransport.transportName = 'eventsource';
EventSourceTransport.roundTrips = 2;

module.exports = EventSourceTransport;

},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,"eventsource":18,"inherits":57}],21:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , HtmlfileReceiver = require('./receiver/htmlfile')
  , XHRLocalObject = require('./sender/xhr-local')
  , AjaxBasedTransport = require('./lib/ajax-based')
  ;

function HtmlFileTransport(transUrl) {
  if (!HtmlfileReceiver.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
}

inherits(HtmlFileTransport, AjaxBasedTransport);

HtmlFileTransport.enabled = function(info) {
  return HtmlfileReceiver.enabled && info.sameOrigin;
};

HtmlFileTransport.transportName = 'htmlfile';
HtmlFileTransport.roundTrips = 2;

module.exports = HtmlFileTransport;

},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,"inherits":57}],22:[function(require,module,exports){
(function (process){
'use strict';

// Few cool transports do work only for same-origin. In order to make
// them work cross-domain we shall use iframe, served from the
// remote domain. New browsers have capabilities to communicate with
// cross domain iframe using postMessage(). In IE it was implemented
// from IE 8+, but of course, IE got some details wrong:
//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
//    http://stevesouders.com/misc/test-postmessage.php

var inherits = require('inherits')
  , JSON3 = require('json3')
  , EventEmitter = require('events').EventEmitter
  , version = require('../version')
  , urlUtils = require('../utils/url')
  , iframeUtils = require('../utils/iframe')
  , eventUtils = require('../utils/event')
  , random = require('../utils/random')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:transport:iframe');
}

function IframeTransport(transport, transUrl, baseUrl) {
  if (!IframeTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  EventEmitter.call(this);

  var self = this;
  this.origin = urlUtils.getOrigin(baseUrl);
  this.baseUrl = baseUrl;
  this.transUrl = transUrl;
  this.transport = transport;
  this.windowId = random.string(8);

  var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
  debug(transport, transUrl, iframeUrl);

  this.iframeObj = iframeUtils.createIframe(iframeUrl, function(r) {
    debug('err callback');
    self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
    self.close();
  });

  this.onmessageCallback = this._message.bind(this);
  eventUtils.attachEvent('message', this.onmessageCallback);
}

inherits(IframeTransport, EventEmitter);

IframeTransport.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  if (this.iframeObj) {
    eventUtils.detachEvent('message', this.onmessageCallback);
    try {
      // When the iframe is not loaded, IE raises an exception
      // on 'contentWindow'.
      this.postMessage('c');
    } catch (x) {
      // intentionally empty
    }
    this.iframeObj.cleanup();
    this.iframeObj = null;
    this.onmessageCallback = this.iframeObj = null;
  }
};

IframeTransport.prototype._message = function(e) {
  debug('message', e.data);
  if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
    debug('not same origin', e.origin, this.origin);
    return;
  }

  var iframeMessage;
  try {
    iframeMessage = JSON3.parse(e.data);
  } catch (ignored) {
    debug('bad json', e.data);
    return;
  }

  if (iframeMessage.windowId !== this.windowId) {
    debug('mismatched window id', iframeMessage.windowId, this.windowId);
    return;
  }

  switch (iframeMessage.type) {
  case 's':
    this.iframeObj.loaded();
    // window global dependency
    this.postMessage('s', JSON3.stringify([
      version
    , this.transport
    , this.transUrl
    , this.baseUrl
    ]));
    break;
  case 't':
    this.emit('message', iframeMessage.data);
    break;
  case 'c':
    var cdata;
    try {
      cdata = JSON3.parse(iframeMessage.data);
    } catch (ignored) {
      debug('bad json', iframeMessage.data);
      return;
    }
    this.emit('close', cdata[0], cdata[1]);
    this.close();
    break;
  }
};

IframeTransport.prototype.postMessage = function(type, data) {
  debug('postMessage', type, data);
  this.iframeObj.post(JSON3.stringify({
    windowId: this.windowId
  , type: type
  , data: data || ''
  }), this.origin);
};

IframeTransport.prototype.send = function(message) {
  debug('send', message);
  this.postMessage('m', message);
};

IframeTransport.enabled = function() {
  return iframeUtils.iframeEnabled;
};

IframeTransport.transportName = 'iframe';
IframeTransport.roundTrips = 2;

module.exports = IframeTransport;

}).call(this,{ env: {} })

},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,"debug":55,"events":3,"inherits":57,"json3":58}],23:[function(require,module,exports){
(function (global){
'use strict';

// The simplest and most robust transport, using the well-know cross
// domain hack - JSONP. This transport is quite inefficient - one
// message could use up to one http request. But at least it works almost
// everywhere.
// Known limitations:
//   o you will get a spinning cursor
//   o for Konqueror a dumb timer is needed to detect errors

var inherits = require('inherits')
  , SenderReceiver = require('./lib/sender-receiver')
  , JsonpReceiver = require('./receiver/jsonp')
  , jsonpSender = require('./sender/jsonp')
  ;

function JsonPTransport(transUrl) {
  if (!JsonPTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
}

inherits(JsonPTransport, SenderReceiver);

JsonPTransport.enabled = function() {
  return !!global.document;
};

JsonPTransport.transportName = 'jsonp-polling';
JsonPTransport.roundTrips = 1;
JsonPTransport.needBody = true;

module.exports = JsonPTransport;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,"inherits":57}],24:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , urlUtils = require('../../utils/url')
  , SenderReceiver = require('./sender-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:ajax-based');
}

function createAjaxSender(AjaxObject) {
  return function(url, payload, callback) {
    debug('create ajax sender', url, payload);
    var opt = {};
    if (typeof payload === 'string') {
      opt.headers = {'Content-type': 'text/plain'};
    }
    var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
    var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
    xo.once('finish', function(status) {
      debug('finish', status);
      xo = null;

      if (status !== 200 && status !== 204) {
        return callback(new Error('http status ' + status));
      }
      callback();
    });
    return function() {
      debug('abort');
      xo.close();
      xo = null;

      var err = new Error('Aborted');
      err.code = 1000;
      callback(err);
    };
  };
}

function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
  SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
}

inherits(AjaxBasedTransport, SenderReceiver);

module.exports = AjaxBasedTransport;

}).call(this,{ env: {} })

},{"../../utils/url":52,"./sender-receiver":28,"debug":55,"inherits":57}],25:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:buffered-sender');
}

function BufferedSender(url, sender) {
  debug(url);
  EventEmitter.call(this);
  this.sendBuffer = [];
  this.sender = sender;
  this.url = url;
}

inherits(BufferedSender, EventEmitter);

BufferedSender.prototype.send = function(message) {
  debug('send', message);
  this.sendBuffer.push(message);
  if (!this.sendStop) {
    this.sendSchedule();
  }
};

// For polling transports in a situation when in the message callback,
// new message is being send. If the sending connection was started
// before receiving one, it is possible to saturate the network and
// timeout due to the lack of receiving socket. To avoid that we delay
// sending messages by some small time, in order to let receiving
// connection be started beforehand. This is only a halfmeasure and
// does not fix the big problem, but it does make the tests go more
// stable on slow networks.
BufferedSender.prototype.sendScheduleWait = function() {
  debug('sendScheduleWait');
  var self = this;
  var tref;
  this.sendStop = function() {
    debug('sendStop');
    self.sendStop = null;
    clearTimeout(tref);
  };
  tref = setTimeout(function() {
    debug('timeout');
    self.sendStop = null;
    self.sendSchedule();
  }, 25);
};

BufferedSender.prototype.sendSchedule = function() {
  debug('sendSchedule', this.sendBuffer.length);
  var self = this;
  if (this.sendBuffer.length > 0) {
    var payload = '[' + this.sendBuffer.join(',') + ']';
    this.sendStop = this.sender(this.url, payload, function(err) {
      self.sendStop = null;
      if (err) {
        debug('error', err);
        self.emit('close', err.code || 1006, 'Sending error: ' + err);
        self.close();
      } else {
        self.sendScheduleWait();
      }
    });
    this.sendBuffer = [];
  }
};

BufferedSender.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

BufferedSender.prototype.close = function() {
  debug('close');
  this._cleanup();
  if (this.sendStop) {
    this.sendStop();
    this.sendStop = null;
  }
};

module.exports = BufferedSender;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],26:[function(require,module,exports){
(function (global){
'use strict';

var inherits = require('inherits')
  , IframeTransport = require('../iframe')
  , objectUtils = require('../../utils/object')
  ;

module.exports = function(transport) {

  function IframeWrapTransport(transUrl, baseUrl) {
    IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
  }

  inherits(IframeWrapTransport, IframeTransport);

  IframeWrapTransport.enabled = function(url, info) {
    if (!global.document) {
      return false;
    }

    var iframeInfo = objectUtils.extend({}, info);
    iframeInfo.sameOrigin = true;
    return transport.enabled(iframeInfo) && IframeTransport.enabled();
  };

  IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
  IframeWrapTransport.needBody = true;
  IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)

  IframeWrapTransport.facadeTransport = transport;

  return IframeWrapTransport;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/object":49,"../iframe":22,"inherits":57}],27:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:polling');
}

function Polling(Receiver, receiveUrl, AjaxObject) {
  debug(receiveUrl);
  EventEmitter.call(this);
  this.Receiver = Receiver;
  this.receiveUrl = receiveUrl;
  this.AjaxObject = AjaxObject;
  this._scheduleReceiver();
}

inherits(Polling, EventEmitter);

Polling.prototype._scheduleReceiver = function() {
  debug('_scheduleReceiver');
  var self = this;
  var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);

  poll.on('message', function(msg) {
    debug('message', msg);
    self.emit('message', msg);
  });

  poll.once('close', function(code, reason) {
    debug('close', code, reason, self.pollIsClosing);
    self.poll = poll = null;

    if (!self.pollIsClosing) {
      if (reason === 'network') {
        self._scheduleReceiver();
      } else {
        self.emit('close', code || 1006, reason);
        self.removeAllListeners();
      }
    }
  });
};

Polling.prototype.abort = function() {
  debug('abort');
  this.removeAllListeners();
  this.pollIsClosing = true;
  if (this.poll) {
    this.poll.abort();
  }
};

module.exports = Polling;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],28:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , urlUtils = require('../../utils/url')
  , BufferedSender = require('./buffered-sender')
  , Polling = require('./polling')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender-receiver');
}

function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
  var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
  debug(pollUrl);
  var self = this;
  BufferedSender.call(this, transUrl, senderFunc);

  this.poll = new Polling(Receiver, pollUrl, AjaxObject);
  this.poll.on('message', function(msg) {
    debug('poll message', msg);
    self.emit('message', msg);
  });
  this.poll.once('close', function(code, reason) {
    debug('poll close', code, reason);
    self.poll = null;
    self.emit('close', code, reason);
    self.close();
  });
}

inherits(SenderReceiver, BufferedSender);

SenderReceiver.prototype.close = function() {
  BufferedSender.prototype.close.call(this);
  debug('close');
  this.removeAllListeners();
  if (this.poll) {
    this.poll.abort();
    this.poll = null;
  }
};

module.exports = SenderReceiver;

}).call(this,{ env: {} })

},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,"debug":55,"inherits":57}],29:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , EventSourceDriver = require('eventsource')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:eventsource');
}

function EventSourceReceiver(url) {
  debug(url);
  EventEmitter.call(this);

  var self = this;
  var es = this.es = new EventSourceDriver(url);
  es.onmessage = function(e) {
    debug('message', e.data);
    self.emit('message', decodeURI(e.data));
  };
  es.onerror = function(e) {
    debug('error', es.readyState, e);
    // ES on reconnection has readyState = 0 or 1.
    // on network error it's CLOSED = 2
    var reason = (es.readyState !== 2 ? 'network' : 'permanent');
    self._cleanup();
    self._close(reason);
  };
}

inherits(EventSourceReceiver, EventEmitter);

EventSourceReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

EventSourceReceiver.prototype._cleanup = function() {
  debug('cleanup');
  var es = this.es;
  if (es) {
    es.onmessage = es.onerror = null;
    es.close();
    this.es = null;
  }
};

EventSourceReceiver.prototype._close = function(reason) {
  debug('close', reason);
  var self = this;
  // Safari and chrome < 15 crash if we close window before
  // waiting for ES cleanup. See:
  // https://code.google.com/p/chromium/issues/detail?id=89155
  setTimeout(function() {
    self.emit('close', null, reason);
    self.removeAllListeners();
  }, 200);
};

module.exports = EventSourceReceiver;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"eventsource":18,"inherits":57}],30:[function(require,module,exports){
(function (process,global){
'use strict';

var inherits = require('inherits')
  , iframeUtils = require('../../utils/iframe')
  , urlUtils = require('../../utils/url')
  , EventEmitter = require('events').EventEmitter
  , random = require('../../utils/random')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:htmlfile');
}

function HtmlfileReceiver(url) {
  debug(url);
  EventEmitter.call(this);
  var self = this;
  iframeUtils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));

  debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
  var constructFunc = HtmlfileReceiver.htmlfileEnabled ?
      iframeUtils.createHtmlfile : iframeUtils.createIframe;

  global[iframeUtils.WPrefix][this.id] = {
    start: function() {
      debug('start');
      self.iframeObj.loaded();
    }
  , message: function(data) {
      debug('message', data);
      self.emit('message', data);
    }
  , stop: function() {
      debug('stop');
      self._cleanup();
      self._close('network');
    }
  };
  this.iframeObj = constructFunc(url, function() {
    debug('callback');
    self._cleanup();
    self._close('permanent');
  });
}

inherits(HtmlfileReceiver, EventEmitter);

HtmlfileReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

HtmlfileReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  if (this.iframeObj) {
    this.iframeObj.cleanup();
    this.iframeObj = null;
  }
  delete global[iframeUtils.WPrefix][this.id];
};

HtmlfileReceiver.prototype._close = function(reason) {
  debug('_close', reason);
  this.emit('close', null, reason);
  this.removeAllListeners();
};

HtmlfileReceiver.htmlfileEnabled = false;

// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (axo in global) {
  try {
    HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
  } catch (x) {
    // intentionally empty
  }
}

HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;

module.exports = HtmlfileReceiver;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],31:[function(require,module,exports){
(function (process,global){
'use strict';

var utils = require('../../utils/iframe')
  , random = require('../../utils/random')
  , browser = require('../../utils/browser')
  , urlUtils = require('../../utils/url')
  , inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:jsonp');
}

function JsonpReceiver(url) {
  debug(url);
  var self = this;
  EventEmitter.call(this);

  utils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));

  global[utils.WPrefix][this.id] = this._callback.bind(this);
  this._createScript(urlWithId);

  // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.
  this.timeoutId = setTimeout(function() {
    debug('timeout');
    self._abort(new Error('JSONP script loaded abnormally (timeout)'));
  }, JsonpReceiver.timeout);
}

inherits(JsonpReceiver, EventEmitter);

JsonpReceiver.prototype.abort = function() {
  debug('abort');
  if (global[utils.WPrefix][this.id]) {
    var err = new Error('JSONP user aborted read');
    err.code = 1000;
    this._abort(err);
  }
};

JsonpReceiver.timeout = 35000;
JsonpReceiver.scriptErrorTimeout = 1000;

JsonpReceiver.prototype._callback = function(data) {
  debug('_callback', data);
  this._cleanup();

  if (this.aborting) {
    return;
  }

  if (data) {
    debug('message', data);
    this.emit('message', data);
  }
  this.emit('close', null, 'network');
  this.removeAllListeners();
};

JsonpReceiver.prototype._abort = function(err) {
  debug('_abort', err);
  this._cleanup();
  this.aborting = true;
  this.emit('close', err.code, err.message);
  this.removeAllListeners();
};

JsonpReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  clearTimeout(this.timeoutId);
  if (this.script2) {
    this.script2.parentNode.removeChild(this.script2);
    this.script2 = null;
  }
  if (this.script) {
    var script = this.script;
    // Unfortunately, you can't really abort script loading of
    // the script.
    script.parentNode.removeChild(script);
    script.onreadystatechange = script.onerror =
        script.onload = script.onclick = null;
    this.script = null;
  }
  delete global[utils.WPrefix][this.id];
};

JsonpReceiver.prototype._scriptError = function() {
  debug('_scriptError');
  var self = this;
  if (this.errorTimer) {
    return;
  }

  this.errorTimer = setTimeout(function() {
    if (!self.loadedOkay) {
      self._abort(new Error('JSONP script loaded abnormally (onerror)'));
    }
  }, JsonpReceiver.scriptErrorTimeout);
};

JsonpReceiver.prototype._createScript = function(url) {
  debug('_createScript', url);
  var self = this;
  var script = this.script = global.document.createElement('script');
  var script2;  // Opera synchronous load trick.

  script.id = 'a' + random.string(8);
  script.src = url;
  script.type = 'text/javascript';
  script.charset = 'UTF-8';
  script.onerror = this._scriptError.bind(this);
  script.onload = function() {
    debug('onload');
    self._abort(new Error('JSONP script loaded abnormally (onload)'));
  };

  // IE9 fires 'error' event after onreadystatechange or before, in random order.
  // Use loadedOkay to determine if actually errored
  script.onreadystatechange = function() {
    debug('onreadystatechange', script.readyState);
    if (/loaded|closed/.test(script.readyState)) {
      if (script && script.htmlFor && script.onclick) {
        self.loadedOkay = true;
        try {
          // In IE, actually execute the script.
          script.onclick();
        } catch (x) {
          // intentionally empty
        }
      }
      if (script) {
        self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
      }
    }
  };
  // IE: event/htmlFor/onclick trick.
  // One can't rely on proper order for onreadystatechange. In order to
  // make sure, set a 'htmlFor' and 'event' properties, so that
  // script code will be installed as 'onclick' handler for the
  // script object. Later, onreadystatechange, manually execute this
  // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
  // set. For reference see:
  //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
  // Also, read on that about script ordering:
  //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order
  if (typeof script.async === 'undefined' && global.document.attachEvent) {
    // According to mozilla docs, in recent browsers script.async defaults
    // to 'true', so we may use it to detect a good browser:
    // https://developer.mozilla.org/en/HTML/Element/script
    if (!browser.isOpera()) {
      // Naively assume we're in IE
      try {
        script.htmlFor = script.id;
        script.event = 'onclick';
      } catch (x) {
        // intentionally empty
      }
      script.async = true;
    } else {
      // Opera, second sync script hack
      script2 = this.script2 = global.document.createElement('script');
      script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
      script.async = script2.async = false;
    }
  }
  if (typeof script.async !== 'undefined') {
    script.async = true;
  }

  var head = global.document.getElementsByTagName('head')[0];
  head.insertBefore(script, head.firstChild);
  if (script2) {
    head.insertBefore(script2, head.firstChild);
  }
};

module.exports = JsonpReceiver;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],32:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:xhr');
}

function XhrReceiver(url, AjaxObject) {
  debug(url);
  EventEmitter.call(this);
  var self = this;

  this.bufferPosition = 0;

  this.xo = new AjaxObject('POST', url, null);
  this.xo.on('chunk', this._chunkHandler.bind(this));
  this.xo.once('finish', function(status, text) {
    debug('finish', status, text);
    self._chunkHandler(status, text);
    self.xo = null;
    var reason = status === 200 ? 'network' : 'permanent';
    debug('close', reason);
    self.emit('close', null, reason);
    self._cleanup();
  });
}

inherits(XhrReceiver, EventEmitter);

XhrReceiver.prototype._chunkHandler = function(status, text) {
  debug('_chunkHandler', status);
  if (status !== 200 || !text) {
    return;
  }

  for (var idx = -1; ; this.bufferPosition += idx + 1) {
    var buf = text.slice(this.bufferPosition);
    idx = buf.indexOf('\n');
    if (idx === -1) {
      break;
    }
    var msg = buf.slice(0, idx);
    if (msg) {
      debug('message', msg);
      this.emit('message', msg);
    }
  }
};

XhrReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

XhrReceiver.prototype.abort = function() {
  debug('abort');
  if (this.xo) {
    this.xo.close();
    debug('close');
    this.emit('close', null, 'user');
    this.xo = null;
  }
  this._cleanup();
};

module.exports = XhrReceiver;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],33:[function(require,module,exports){
(function (process,global){
'use strict';

var random = require('../../utils/random')
  , urlUtils = require('../../utils/url')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender:jsonp');
}

var form, area;

function createIframe(id) {
  debug('createIframe', id);
  try {
    // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
    return global.document.createElement('<iframe name="' + id + '">');
  } catch (x) {
    var iframe = global.document.createElement('iframe');
    iframe.name = id;
    return iframe;
  }
}

function createForm() {
  debug('createForm');
  form = global.document.createElement('form');
  form.style.display = 'none';
  form.style.position = 'absolute';
  form.method = 'POST';
  form.enctype = 'application/x-www-form-urlencoded';
  form.acceptCharset = 'UTF-8';

  area = global.document.createElement('textarea');
  area.name = 'd';
  form.appendChild(area);

  global.document.body.appendChild(form);
}

module.exports = function(url, payload, callback) {
  debug(url, payload);
  if (!form) {
    createForm();
  }
  var id = 'a' + random.string(8);
  form.target = id;
  form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);

  var iframe = createIframe(id);
  iframe.id = id;
  iframe.style.display = 'none';
  form.appendChild(iframe);

  try {
    area.value = payload;
  } catch (e) {
    // seriously broken browsers get here
  }
  form.submit();

  var completed = function(err) {
    debug('completed', id, err);
    if (!iframe.onerror) {
      return;
    }
    iframe.onreadystatechange = iframe.onerror = iframe.onload = null;
    // Opera mini doesn't like if we GC iframe
    // immediately, thus this timeout.
    setTimeout(function() {
      debug('cleaning up', id);
      iframe.parentNode.removeChild(iframe);
      iframe = null;
    }, 500);
    area.value = '';
    // It is not possible to detect if the iframe succeeded or
    // failed to submit our form.
    callback(err);
  };
  iframe.onerror = function() {
    debug('onerror', id);
    completed();
  };
  iframe.onload = function() {
    debug('onload', id);
    completed();
  };
  iframe.onreadystatechange = function(e) {
    debug('onreadystatechange', id, iframe.readyState, e);
    if (iframe.readyState === 'complete') {
      completed();
    }
  };
  return function() {
    debug('aborted', id);
    completed(new Error('Aborted'));
  };
};

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/random":50,"../../utils/url":52,"debug":55}],34:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , eventUtils = require('../../utils/event')
  , browser = require('../../utils/browser')
  , urlUtils = require('../../utils/url')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender:xdr');
}

// References:
//   http://ajaxian.com/archives/100-line-ajax-wrapper
//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

function XDRObject(method, url, payload) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self._start(method, url, payload);
  }, 0);
}

inherits(XDRObject, EventEmitter);

XDRObject.prototype._start = function(method, url, payload) {
  debug('_start');
  var self = this;
  var xdr = new global.XDomainRequest();
  // IE caches even POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  xdr.onerror = function() {
    debug('onerror');
    self._error();
  };
  xdr.ontimeout = function() {
    debug('ontimeout');
    self._error();
  };
  xdr.onprogress = function() {
    debug('progress', xdr.responseText);
    self.emit('chunk', 200, xdr.responseText);
  };
  xdr.onload = function() {
    debug('load');
    self.emit('finish', 200, xdr.responseText);
    self._cleanup(false);
  };
  this.xdr = xdr;
  this.unloadRef = eventUtils.unloadAdd(function() {
    self._cleanup(true);
  });
  try {
    // Fails with AccessDenied if port number is bogus
    this.xdr.open(method, url);
    if (this.timeout) {
      this.xdr.timeout = this.timeout;
    }
    this.xdr.send(payload);
  } catch (x) {
    this._error();
  }
};

XDRObject.prototype._error = function() {
  this.emit('finish', 0, '');
  this._cleanup(false);
};

XDRObject.prototype._cleanup = function(abort) {
  debug('cleanup', abort);
  if (!this.xdr) {
    return;
  }
  this.removeAllListeners();
  eventUtils.unloadDel(this.unloadRef);

  this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;
  if (abort) {
    try {
      this.xdr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xdr = null;
};

XDRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

// IE 8/9 if the request target uses the same scheme - #79
XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());

module.exports = XDRObject;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],35:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , XhrDriver = require('../driver/xhr')
  ;

function XHRCorsObject(method, url, payload, opts) {
  XhrDriver.call(this, method, url, payload, opts);
}

inherits(XHRCorsObject, XhrDriver);

XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;

module.exports = XHRCorsObject;

},{"../driver/xhr":17,"inherits":57}],36:[function(require,module,exports){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  ;

function XHRFake(/* method, url, payload, opts */) {
  var self = this;
  EventEmitter.call(this);

  this.to = setTimeout(function() {
    self.emit('finish', 200, '{}');
  }, XHRFake.timeout);
}

inherits(XHRFake, EventEmitter);

XHRFake.prototype.close = function() {
  clearTimeout(this.to);
};

XHRFake.timeout = 2000;

module.exports = XHRFake;

},{"events":3,"inherits":57}],37:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , XhrDriver = require('../driver/xhr')
  ;

function XHRLocalObject(method, url, payload /*, opts */) {
  XhrDriver.call(this, method, url, payload, {
    noCredentials: true
  });
}

inherits(XHRLocalObject, XhrDriver);

XHRLocalObject.enabled = XhrDriver.enabled;

module.exports = XHRLocalObject;

},{"../driver/xhr":17,"inherits":57}],38:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('../utils/event')
  , urlUtils = require('../utils/url')
  , inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , WebsocketDriver = require('./driver/websocket')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:websocket');
}

function WebSocketTransport(transUrl, ignore, options) {
  if (!WebSocketTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  EventEmitter.call(this);
  debug('constructor', transUrl);

  var self = this;
  var url = urlUtils.addPath(transUrl, '/websocket');
  if (url.slice(0, 5) === 'https') {
    url = 'wss' + url.slice(5);
  } else {
    url = 'ws' + url.slice(4);
  }
  this.url = url;

  this.ws = new WebsocketDriver(this.url, [], options);
  this.ws.onmessage = function(e) {
    debug('message event', e.data);
    self.emit('message', e.data);
  };
  // Firefox has an interesting bug. If a websocket connection is
  // created after onunload, it stays alive even when user
  // navigates away from the page. In such situation let's lie -
  // let's not open the ws connection at all. See:
  // https://github.com/sockjs/sockjs-client/issues/28
  // https://bugzilla.mozilla.org/show_bug.cgi?id=696085
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload');
    self.ws.close();
  });
  this.ws.onclose = function(e) {
    debug('close event', e.code, e.reason);
    self.emit('close', e.code, e.reason);
    self._cleanup();
  };
  this.ws.onerror = function(e) {
    debug('error event', e);
    self.emit('close', 1006, 'WebSocket connection broken');
    self._cleanup();
  };
}

inherits(WebSocketTransport, EventEmitter);

WebSocketTransport.prototype.send = function(data) {
  var msg = '[' + data + ']';
  debug('send', msg);
  this.ws.send(msg);
};

WebSocketTransport.prototype.close = function() {
  debug('close');
  var ws = this.ws;
  this._cleanup();
  if (ws) {
    ws.close();
  }
};

WebSocketTransport.prototype._cleanup = function() {
  debug('_cleanup');
  var ws = this.ws;
  if (ws) {
    ws.onmessage = ws.onclose = ws.onerror = null;
  }
  utils.unloadDel(this.unloadRef);
  this.unloadRef = this.ws = null;
  this.removeAllListeners();
};

WebSocketTransport.enabled = function() {
  debug('enabled');
  return !!WebsocketDriver;
};
WebSocketTransport.transportName = 'websocket';

// In theory, ws should require 1 round trip. But in chrome, this is
// not very stable over SSL. Most likely a ws connection requires a
// separate SSL connection, in which case 2 round trips are an
// absolute minumum.
WebSocketTransport.roundTrips = 2;

module.exports = WebSocketTransport;

}).call(this,{ env: {} })

},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,"debug":55,"events":3,"inherits":57}],39:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XdrStreamingTransport = require('./xdr-streaming')
  , XhrReceiver = require('./receiver/xhr')
  , XDRObject = require('./sender/xdr')
  ;

function XdrPollingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
}

inherits(XdrPollingTransport, AjaxBasedTransport);

XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
XdrPollingTransport.transportName = 'xdr-polling';
XdrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrPollingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,"inherits":57}],40:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XDRObject = require('./sender/xdr')
  ;

// According to:
//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/

function XdrStreamingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
}

inherits(XdrStreamingTransport, AjaxBasedTransport);

XdrStreamingTransport.enabled = function(info) {
  if (info.cookie_needed || info.nullOrigin) {
    return false;
  }
  return XDRObject.enabled && info.sameScheme;
};

XdrStreamingTransport.transportName = 'xdr-streaming';
XdrStreamingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrStreamingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"inherits":57}],41:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XHRCorsObject = require('./sender/xhr-cors')
  , XHRLocalObject = require('./sender/xhr-local')
  ;

function XhrPollingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
}

inherits(XhrPollingTransport, AjaxBasedTransport);

XhrPollingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }

  if (XHRLocalObject.enabled && info.sameOrigin) {
    return true;
  }
  return XHRCorsObject.enabled;
};

XhrPollingTransport.transportName = 'xhr-polling';
XhrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XhrPollingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,"inherits":57}],42:[function(require,module,exports){
(function (global){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XHRCorsObject = require('./sender/xhr-cors')
  , XHRLocalObject = require('./sender/xhr-local')
  , browser = require('../utils/browser')
  ;

function XhrStreamingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
}

inherits(XhrStreamingTransport, AjaxBasedTransport);

XhrStreamingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }
  // Opera doesn't support xhr-streaming #60
  // But it might be able to #92
  if (browser.isOpera()) {
    return false;
  }

  return XHRCorsObject.enabled;
};

XhrStreamingTransport.transportName = 'xhr-streaming';
XhrStreamingTransport.roundTrips = 2; // preflight, ajax

// Safari gets confused when a streaming ajax request is started
// before onload. This causes the load indicator to spin indefinetely.
// Only require body when used in a browser
XhrStreamingTransport.needBody = !!global.document;

module.exports = XhrStreamingTransport;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,"inherits":57}],43:[function(require,module,exports){
(function (global){
'use strict';

if (global.crypto && global.crypto.getRandomValues) {
  module.exports.randomBytes = function(length) {
    var bytes = new Uint8Array(length);
    global.crypto.getRandomValues(bytes);
    return bytes;
  };
} else {
  module.exports.randomBytes = function(length) {
    var bytes = new Array(length);
    for (var i = 0; i < length; i++) {
      bytes[i] = Math.floor(Math.random() * 256);
    }
    return bytes;
  };
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],44:[function(require,module,exports){
(function (global){
'use strict';

module.exports = {
  isOpera: function() {
    return global.navigator &&
      /opera/i.test(global.navigator.userAgent);
  }

, isKonqueror: function() {
    return global.navigator &&
      /konqueror/i.test(global.navigator.userAgent);
  }

  // #187 wrap document.domain in try/catch because of WP8 from file:///
, hasDomain: function () {
    // non-browser client always has a domain
    if (!global.document) {
      return true;
    }

    try {
      return !!global.document.domain;
    } catch (e) {
      return false;
    }
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],45:[function(require,module,exports){
'use strict';

var JSON3 = require('json3');

// Some extra characters that Chrome gets wrong, and substitutes with
// something else on the wire.
// eslint-disable-next-line no-control-regex
var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g
  , extraLookup;

// This may be quite slow, so let's delay until user actually uses bad
// characters.
var unrollLookup = function(escapable) {
  var i;
  var unrolled = {};
  var c = [];
  for (i = 0; i < 65536; i++) {
    c.push( String.fromCharCode(i) );
  }
  escapable.lastIndex = 0;
  c.join('').replace(escapable, function(a) {
    unrolled[ a ] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    return '';
  });
  escapable.lastIndex = 0;
  return unrolled;
};

// Quote string, also taking care of unicode characters that browsers
// often break. Especially, take care of unicode surrogates:
// http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates
module.exports = {
  quote: function(string) {
    var quoted = JSON3.stringify(string);

    // In most cases this should be very fast and good enough.
    extraEscapable.lastIndex = 0;
    if (!extraEscapable.test(quoted)) {
      return quoted;
    }

    if (!extraLookup) {
      extraLookup = unrollLookup(extraEscapable);
    }

    return quoted.replace(extraEscapable, function(a) {
      return extraLookup[a];
    });
  }
};

},{"json3":58}],46:[function(require,module,exports){
(function (global){
'use strict';

var random = require('./random');

var onUnload = {}
  , afterUnload = false
    // detect google chrome packaged apps because they don't allow the 'unload' event
  , isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime
  ;

module.exports = {
  attachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.addEventListener(event, listener, false);
    } else if (global.document && global.attachEvent) {
      // IE quirks.
      // According to: http://stevesouders.com/misc/test-postmessage.php
      // the message gets delivered only to 'document', not 'window'.
      global.document.attachEvent('on' + event, listener);
      // I get 'window' for ie8.
      global.attachEvent('on' + event, listener);
    }
  }

, detachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.removeEventListener(event, listener, false);
    } else if (global.document && global.detachEvent) {
      global.document.detachEvent('on' + event, listener);
      global.detachEvent('on' + event, listener);
    }
  }

, unloadAdd: function(listener) {
    if (isChromePackagedApp) {
      return null;
    }

    var ref = random.string(8);
    onUnload[ref] = listener;
    if (afterUnload) {
      setTimeout(this.triggerUnloadCallbacks, 0);
    }
    return ref;
  }

, unloadDel: function(ref) {
    if (ref in onUnload) {
      delete onUnload[ref];
    }
  }

, triggerUnloadCallbacks: function() {
    for (var ref in onUnload) {
      onUnload[ref]();
      delete onUnload[ref];
    }
  }
};

var unloadTriggered = function() {
  if (afterUnload) {
    return;
  }
  afterUnload = true;
  module.exports.triggerUnloadCallbacks();
};

// 'unload' alone is not reliable in opera within an iframe, but we
// can't use `beforeunload` as IE fires it on javascript: links.
if (!isChromePackagedApp) {
  module.exports.attachEvent('unload', unloadTriggered);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./random":50}],47:[function(require,module,exports){
(function (process,global){
'use strict';

var eventUtils = require('./event')
  , JSON3 = require('json3')
  , browser = require('./browser')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:iframe');
}

module.exports = {
  WPrefix: '_jp'
, currentWindowId: null

, polluteGlobalNamespace: function() {
    if (!(module.exports.WPrefix in global)) {
      global[module.exports.WPrefix] = {};
    }
  }

, postMessage: function(type, data) {
    if (global.parent !== global) {
      global.parent.postMessage(JSON3.stringify({
        windowId: module.exports.currentWindowId
      , type: type
      , data: data || ''
      }), '*');
    } else {
      debug('Cannot postMessage, no parent window.', type, data);
    }
  }

, createIframe: function(iframeUrl, errorCallback) {
    var iframe = global.document.createElement('iframe');
    var tref, unloadRef;
    var unattach = function() {
      debug('unattach');
      clearTimeout(tref);
      // Explorer had problems with that.
      try {
        iframe.onload = null;
      } catch (x) {
        // intentionally empty
      }
      iframe.onerror = null;
    };
    var cleanup = function() {
      debug('cleanup');
      if (iframe) {
        unattach();
        // This timeout makes chrome fire onbeforeunload event
        // within iframe. Without the timeout it goes straight to
        // onunload.
        setTimeout(function() {
          if (iframe) {
            iframe.parentNode.removeChild(iframe);
          }
          iframe = null;
        }, 0);
        eventUtils.unloadDel(unloadRef);
      }
    };
    var onerror = function(err) {
      debug('onerror', err);
      if (iframe) {
        cleanup();
        errorCallback(err);
      }
    };
    var post = function(msg, origin) {
      debug('post', msg, origin);
      setTimeout(function() {
        try {
          // When the iframe is not loaded, IE raises an exception
          // on 'contentWindow'.
          if (iframe && iframe.contentWindow) {
            iframe.contentWindow.postMessage(msg, origin);
          }
        } catch (x) {
          // intentionally empty
        }
      }, 0);
    };

    iframe.src = iframeUrl;
    iframe.style.display = 'none';
    iframe.style.position = 'absolute';
    iframe.onerror = function() {
      onerror('onerror');
    };
    iframe.onload = function() {
      debug('onload');
      // `onload` is triggered before scripts on the iframe are
      // executed. Give it few seconds to actually load stuff.
      clearTimeout(tref);
      tref = setTimeout(function() {
        onerror('onload timeout');
      }, 2000);
    };
    global.document.body.appendChild(iframe);
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }

/* eslint no-undef: "off", new-cap: "off" */
, createHtmlfile: function(iframeUrl, errorCallback) {
    var axo = ['Active'].concat('Object').join('X');
    var doc = new global[axo]('htmlfile');
    var tref, unloadRef;
    var iframe;
    var unattach = function() {
      clearTimeout(tref);
      iframe.onerror = null;
    };
    var cleanup = function() {
      if (doc) {
        unattach();
        eventUtils.unloadDel(unloadRef);
        iframe.parentNode.removeChild(iframe);
        iframe = doc = null;
        CollectGarbage();
      }
    };
    var onerror = function(r) {
      debug('onerror', r);
      if (doc) {
        cleanup();
        errorCallback(r);
      }
    };
    var post = function(msg, origin) {
      try {
        // When the iframe is not loaded, IE raises an exception
        // on 'contentWindow'.
        setTimeout(function() {
          if (iframe && iframe.contentWindow) {
              iframe.contentWindow.postMessage(msg, origin);
          }
        }, 0);
      } catch (x) {
        // intentionally empty
      }
    };

    doc.open();
    doc.write('<html><s' + 'cript>' +
              'document.domain="' + global.document.domain + '";' +
              '</s' + 'cript></html>');
    doc.close();
    doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
    var c = doc.createElement('div');
    doc.body.appendChild(c);
    iframe = doc.createElement('iframe');
    c.appendChild(iframe);
    iframe.src = iframeUrl;
    iframe.onerror = function() {
      onerror('onerror');
    };
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }
};

module.exports.iframeEnabled = false;
if (global.document) {
  // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
  // huge delay, or not at all.
  module.exports.iframeEnabled = (typeof global.postMessage === 'function' ||
    typeof global.postMessage === 'object') && (!browser.isKonqueror());
}

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./browser":44,"./event":46,"debug":55,"json3":58}],48:[function(require,module,exports){
(function (global){
'use strict';

var logObject = {};
['log', 'debug', 'warn'].forEach(function (level) {
  var levelExists;

  try {
    levelExists = global.console && global.console[level] && global.console[level].apply;
  } catch(e) {
    // do nothing
  }

  logObject[level] = levelExists ? function () {
    return global.console[level].apply(global.console, arguments);
  } : (level === 'log' ? function () {} : logObject.log);
});

module.exports = logObject;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],49:[function(require,module,exports){
'use strict';

module.exports = {
  isObject: function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  }

, extend: function(obj) {
    if (!this.isObject(obj)) {
      return obj;
    }
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];
      for (prop in source) {
        if (Object.prototype.hasOwnProperty.call(source, prop)) {
          obj[prop] = source[prop];
        }
      }
    }
    return obj;
  }
};

},{}],50:[function(require,module,exports){
'use strict';

/* global crypto:true */
var crypto = require('crypto');

// This string has length 32, a power of 2, so the modulus doesn't introduce a
// bias.
var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
module.exports = {
  string: function(length) {
    var max = _randomStringChars.length;
    var bytes = crypto.randomBytes(length);
    var ret = [];
    for (var i = 0; i < length; i++) {
      ret.push(_randomStringChars.substr(bytes[i] % max, 1));
    }
    return ret.join('');
  }

, number: function(max) {
    return Math.floor(Math.random() * max);
  }

, numberString: function(max) {
    var t = ('' + (max - 1)).length;
    var p = new Array(t + 1).join('0');
    return (p + this.number(max)).slice(-t);
  }
};

},{"crypto":43}],51:[function(require,module,exports){
(function (process){
'use strict';

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:transport');
}

module.exports = function(availableTransports) {
  return {
    filterToEnabled: function(transportsWhitelist, info) {
      var transports = {
        main: []
      , facade: []
      };
      if (!transportsWhitelist) {
        transportsWhitelist = [];
      } else if (typeof transportsWhitelist === 'string') {
        transportsWhitelist = [transportsWhitelist];
      }

      availableTransports.forEach(function(trans) {
        if (!trans) {
          return;
        }

        if (trans.transportName === 'websocket' && info.websocket === false) {
          debug('disabled from server', 'websocket');
          return;
        }

        if (transportsWhitelist.length &&
            transportsWhitelist.indexOf(trans.transportName) === -1) {
          debug('not in whitelist', trans.transportName);
          return;
        }

        if (trans.enabled(info)) {
          debug('enabled', trans.transportName);
          transports.main.push(trans);
          if (trans.facadeTransport) {
            transports.facade.push(trans.facadeTransport);
          }
        } else {
          debug('disabled', trans.transportName);
        }
      });
      return transports;
    }
  };
};

}).call(this,{ env: {} })

},{"debug":55}],52:[function(require,module,exports){
(function (process){
'use strict';

var URL = require('url-parse');

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:url');
}

module.exports = {
  getOrigin: function(url) {
    if (!url) {
      return null;
    }

    var p = new URL(url);
    if (p.protocol === 'file:') {
      return null;
    }

    var port = p.port;
    if (!port) {
      port = (p.protocol === 'https:') ? '443' : '80';
    }

    return p.protocol + '//' + p.hostname + ':' + port;
  }

, isOriginEqual: function(a, b) {
    var res = this.getOrigin(a) === this.getOrigin(b);
    debug('same', a, b, res);
    return res;
  }

, isSchemeEqual: function(a, b) {
    return (a.split(':')[0] === b.split(':')[0]);
  }

, addPath: function (url, path) {
    var qs = url.split('?');
    return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
  }

, addQuery: function (url, q) {
    return url + (url.indexOf('?') === -1 ? ('?' + q) : ('&' + q));
  }
};

}).call(this,{ env: {} })

},{"debug":55,"url-parse":61}],53:[function(require,module,exports){
module.exports = '1.4.0';

},{}],54:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

},{}],55:[function(require,module,exports){
(function (process){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  var _console;

  // This hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return (typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {} // Swallow
  // XXX (@Qix-) should we be logging these?
  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = require('./common')(exports);
var formatters = module.exports.formatters;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};


}).call(this,{ env: {} })

},{"./common":56}],56:[function(require,module,exports){
"use strict";

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = require('ms');
  Object.keys(env).forEach(function (key) {
    createDebug[key] = env[key];
  });
  /**
  * Active `debug` instances.
  */

  createDebug.instances = [];
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    var hash = 0;

    for (var i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      // Disabled?
      if (!debug.enabled) {
        return;
      }

      var self = debug; // Set `diff` timestamp

      var curr = Number(new Date());
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return match;
        }

        index++;
        var formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          var val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      var logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend; // Debug.formatArgs = formatArgs;
    // debug.rawLog = rawLog;
    // env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    createDebug.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = createDebug.instances.indexOf(this);

    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }

    return false;
  }

  function extend(namespace, delimiter) {
    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < createDebug.instances.length; i++) {
      var instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  /**
  * Disable debug output.
  *
  * @api public
  */


  function disable() {
    createDebug.enable('');
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i;
    var len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;


},{"ms":54}],57:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],58:[function(require,module,exports){
(function (global){
/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
;(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = typeof define === "function" && define.amd;

  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
    "function": true,
    "object": true
  };

  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
    root = freeGlobal;
  }

  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root["Object"]());
    exports || (exports = root["Object"]());

    // Native constructor aliases.
    var Number = context["Number"] || root["Number"],
        String = context["String"] || root["String"],
        Object = context["Object"] || root["Object"],
        Date = context["Date"] || root["Date"],
        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
        TypeError = context["TypeError"] || root["TypeError"],
        Math = context["Math"] || root["Math"],
        nativeJSON = context["JSON"] || root["JSON"];

    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    // Convenience aliases.
    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty, forEach, undef;

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = exports.parse;
          if (typeof parse == "function") {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = objectProto.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = {
            // The *proto* property cannot be set multiple times in recent
            // versions of Firefox and SeaMonkey.
            "toString": 1
          }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = "\\u00";
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
                result += Escapes[charCode];
                break;
              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }
                result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }
          return result + '"';
        };

        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {}
          if (typeof value == "object" && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 864e5);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 864e5 + 864e5) % 864e5;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                  // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                  // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return "null";
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return "" + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote("" + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == "object") {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }
              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });
              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };

        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (objectTypes[typeof filter] && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;
              case 123: case 125: case 91: case 93: case 58: case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports["runInContext"] = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root["JSON3"],
        isRestored = false;

    var JSON3 = runInContext(root, (root["JSON3"] = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root["JSON3"] = previousJSON;
          nativeJSON = previousJSON = null;
        }
        return JSON3;
      }
    }));

    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    define(function () {
      return JSON3;
    });
  }
}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],59:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty;

/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String} The decoded string.
 * @api private
 */
function decode(input) {
  return decodeURIComponent(input.replace(/\+/g, ' '));
}

/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */
function querystring(query) {
  var parser = /([^=?&]+)=?([^&]*)/g
    , result = {}
    , part;

  while (part = parser.exec(query)) {
    var key = decode(part[1])
      , value = decode(part[2]);

    //
    // Prevent overriding of existing properties. This ensures that build-in
    // methods like `toString` or __proto__ are not overriden by malicious
    // querystrings.
    //
    if (key in result) continue;
    result[key] = value;
  }

  return result;
}

/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */
function querystringify(obj, prefix) {
  prefix = prefix || '';

  var pairs = [];

  //
  // Optionally prefix with a '?' if needed
  //
  if ('string' !== typeof prefix) prefix = '?';

  for (var key in obj) {
    if (has.call(obj, key)) {
      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
}

//
// Expose the module.
//
exports.stringify = querystringify;
exports.parse = querystring;

},{}],60:[function(require,module,exports){
'use strict';

/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */
module.exports = function required(port, protocol) {
  protocol = protocol.split(':')[0];
  port = +port;

  if (!port) return false;

  switch (protocol) {
    case 'http':
    case 'ws':
    return port !== 80;

    case 'https':
    case 'wss':
    return port !== 443;

    case 'ftp':
    return port !== 21;

    case 'gopher':
    return port !== 70;

    case 'file':
    return false;
  }

  return port !== 0;
};

},{}],61:[function(require,module,exports){
(function (global){
'use strict';

var required = require('requires-port')
  , qs = require('querystringify')
  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i
  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;

/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */
var rules = [
  ['#', 'hash'],                        // Extract from the back.
  ['?', 'query'],                       // Extract from the back.
  function sanitize(address) {          // Sanitize what is left of the address
    return address.replace('\\', '/');
  },
  ['/', 'pathname'],                    // Extract from the back.
  ['@', 'auth', 1],                     // Extract from the front.
  [NaN, 'host', undefined, 1, 1],       // Set left over value.
  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
];

/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */
var ignore = { hash: 1, query: 1 };

/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @public
 */
function lolcation(loc) {
  var location = global && global.location || {};
  loc = loc || location;

  var finaldestination = {}
    , type = typeof loc
    , key;

  if ('blob:' === loc.protocol) {
    finaldestination = new Url(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new Url(loc, {});
    for (key in ignore) delete finaldestination[key];
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
}

/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @return {ProtocolExtract} Extracted information.
 * @private
 */
function extractProtocol(address) {
  var match = protocolre.exec(address);

  return {
    protocol: match[1] ? match[1].toLowerCase() : '',
    slashes: !!match[2],
    rest: match[3]
  };
}

/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @private
 */
function resolve(relative, base) {
  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
    , i = path.length
    , last = path[i - 1]
    , unshift = false
    , up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');

  return path.join('/');
}

/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * It is worth noting that we should not use `URL` as class name to prevent
 * clashes with the global URL instance that got introduced in browsers.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} location Location defaults for relative paths.
 * @param {Boolean|Function} parser Parser for the query string.
 * @private
 */
function Url(address, location, parser) {
  if (!(this instanceof Url)) {
    return new Url(address, location, parser);
  }

  var relative, extracted, parse, instruction, index, key
    , instructions = rules.slice()
    , type = typeof location
    , url = this
    , i = 0;

  //
  // The following if statements allows this module two have compatibility with
  // 2 different API:
  //
  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
  //    where the boolean indicates that the query string should also be parsed.
  //
  // 2. The `URL` interface of the browser which accepts a URL, object as
  //    arguments. The supplied object will be used as default values / fall-back
  //    for relative paths.
  //
  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;

  location = lolcation(location);

  //
  // Extract protocol information before running the instructions.
  //
  extracted = extractProtocol(address || '');
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest;

  //
  // When the authority component is absent the URL starts with a path
  // component.
  //
  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

  for (; i < instructions.length; i++) {
    instruction = instructions[i];

    if (typeof instruction === 'function') {
      address = instruction(address);
      continue;
    }

    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if ((index = parse.exec(address))) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (
      relative && instruction[3] ? location[key] || '' : ''
    );

    //
    // Hostname, host and protocol should be lowercased so they can be used to
    // create a proper `origin`.
    //
    if (instruction[4]) url[key] = url[key].toLowerCase();
  }

  //
  // Also parse the supplied query string in to an object. If we're supplied
  // with a custom parser as function use that instead of the default build-in
  // parser.
  //
  if (parser) url.query = parser(url.query);

  //
  // If the URL is relative, resolve the pathname against the base URL.
  //
  if (
      relative
    && location.slashes
    && url.pathname.charAt(0) !== '/'
    && (url.pathname !== '' || location.pathname !== '')
  ) {
    url.pathname = resolve(url.pathname, location.pathname);
  }

  //
  // We should not add port numbers if they are already the default port number
  // for a given protocol. As the host also contains the port number we're going
  // override it with the hostname which contains no port number.
  //
  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  }

  //
  // Parse down the `auth` for the username and password.
  //
  url.username = url.password = '';
  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  //
  // The href is just the compiled result.
  //
  url.href = url.toString();
}

/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL} URL instance for chaining.
 * @public
 */
function set(part, value, fn) {
  var url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;

    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname +':'+ value;
      }

      break;

    case 'hostname':
      url[part] = value;

      if (url.port) value += ':'+ url.port;
      url.host = value;
      break;

    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;

    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;

    case 'pathname':
    case 'hash':
      if (value) {
        var char = part === 'pathname' ? '/' : '#';
        url[part] = value.charAt(0) !== char ? char + value : value;
      } else {
        url[part] = value;
      }
      break;

    default:
      url[part] = value;
  }

  for (var i = 0; i < rules.length; i++) {
    var ins = rules[i];

    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  url.href = url.toString();

  return url;
}

/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String} Compiled version of the URL.
 * @public
 */
function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

  var query
    , url = this
    , protocol = url.protocol;

  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

  var result = protocol + (url.slashes ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':'+ url.password;
    result += '@';
  }

  result += url.host + url.pathname;

  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

  if (url.hash) result += url.hash;

  return result;
}

Url.prototype = { set: set, toString: toString };

//
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//
Url.extractProtocol = extractProtocol;
Url.location = lolcation;
Url.qs = qs;

module.exports = Url;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"querystringify":59,"requires-port":60}]},{},[1])(1)
});


//# sourceMappingURL=sockjs.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(/*! punycode */ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/url/util.js");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/BaseClient.js":
/*!*********************************************************!*\
  !*** (webpack)-dev-server/client/clients/BaseClient.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  function BaseClient() {
    _classCallCheck(this, BaseClient);
  }

  _createClass(BaseClient, null, [{
    key: "getClientPath",
    value: function getClientPath(options) {
      throw new Error('Client needs implementation');
    }
  }]);

  return BaseClient;
}();

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js":
/*!***********************************************************!*\
  !*** (webpack)-dev-server/client/clients/SockJSClient.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SockJS = __webpack_require__(/*! sockjs-client/dist/sockjs */ "./node_modules/sockjs-client/dist/sockjs.js");

var BaseClient = __webpack_require__(/*! ./BaseClient */ "./node_modules/webpack-dev-server/client/clients/BaseClient.js");

module.exports = /*#__PURE__*/function (_BaseClient) {
  _inherits(SockJSClient, _BaseClient);

  var _super = _createSuper(SockJSClient);

  function SockJSClient(url) {
    var _this;

    _classCallCheck(this, SockJSClient);

    _this = _super.call(this);
    _this.sock = new SockJS(url);

    _this.sock.onerror = function (err) {// TODO: use logger to log the error event once client and client-src
      // are reorganized to have the same directory structure
    };

    return _this;
  }

  _createClass(SockJSClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.sock.onopen = f;
    }
  }, {
    key: "onClose",
    value: function onClose(f) {
      this.sock.onclose = f;
    } // call f with the message string as the first argument

  }, {
    key: "onMessage",
    value: function onMessage(f) {
      this.sock.onmessage = function (e) {
        f(e.data);
      };
    }
  }], [{
    key: "getClientPath",
    value: function getClientPath(options) {
      return /*require.resolve*/(/*! ./SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
    }
  }]);

  return SockJSClient;
}(BaseClient);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/index.js?http://localhost:9000":
/*!*********************************************************!*\
  !*** (webpack)-dev-server/client?http://localhost:9000 ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__resourceQuery) {
/* global __resourceQuery WorkerGlobalScope self */

/* eslint prefer-destructuring: off */

var stripAnsi = __webpack_require__(/*! strip-ansi */ "./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js");

var socket = __webpack_require__(/*! ./socket */ "./node_modules/webpack-dev-server/client/socket.js");

var overlay = __webpack_require__(/*! ./overlay */ "./node_modules/webpack-dev-server/client/overlay.js");

var _require = __webpack_require__(/*! ./utils/log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log,
    setLogLevel = _require.setLogLevel;

var sendMessage = __webpack_require__(/*! ./utils/sendMessage */ "./node_modules/webpack-dev-server/client/utils/sendMessage.js");

var reloadApp = __webpack_require__(/*! ./utils/reloadApp */ "./node_modules/webpack-dev-server/client/utils/reloadApp.js");

var createSocketUrl = __webpack_require__(/*! ./utils/createSocketUrl */ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js");

var status = {
  isUnloading: false,
  currentHash: ''
};
var options = {
  hot: false,
  hotReload: true,
  liveReload: false,
  initial: true,
  useWarningOverlay: false,
  useErrorOverlay: false,
  useProgress: false
};
var socketUrl = createSocketUrl(__resourceQuery);
self.addEventListener('beforeunload', function () {
  status.isUnloading = true;
});

if (typeof window !== 'undefined') {
  var qs = window.location.search.toLowerCase();
  options.hotReload = qs.indexOf('hotreload=false') === -1;
}

var onSocketMessage = {
  hot: function hot() {
    options.hot = true;
    log.info('[WDS] Hot Module Replacement enabled.');
  },
  liveReload: function liveReload() {
    options.liveReload = true;
    log.info('[WDS] Live Reloading enabled.');
  },
  invalid: function invalid() {
    log.info('[WDS] App updated. Recompiling...'); // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('Invalid');
  },
  hash: function hash(_hash) {
    status.currentHash = _hash;
  },
  'still-ok': function stillOk() {
    log.info('[WDS] Nothing changed.');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('StillOk');
  },
  'log-level': function logLevel(level) {
    var hotCtx = __webpack_require__("./node_modules/webpack/hot sync ^\\.\\/log$");

    if (hotCtx.keys().indexOf('./log') !== -1) {
      hotCtx('./log').setLogLevel(level);
    }

    setLogLevel(level);
  },
  overlay: function overlay(value) {
    if (typeof document !== 'undefined') {
      if (typeof value === 'boolean') {
        options.useWarningOverlay = false;
        options.useErrorOverlay = value;
      } else if (value) {
        options.useWarningOverlay = value.warnings;
        options.useErrorOverlay = value.errors;
      }
    }
  },
  progress: function progress(_progress) {
    if (typeof document !== 'undefined') {
      options.useProgress = _progress;
    }
  },
  'progress-update': function progressUpdate(data) {
    if (options.useProgress) {
      log.info("[WDS] ".concat(data.percent, "% - ").concat(data.msg, "."));
    }

    sendMessage('Progress', data);
  },
  ok: function ok() {
    sendMessage('Ok');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  'content-changed': function contentChanged() {
    log.info('[WDS] Content base changed. Reloading...');
    self.location.reload();
  },
  warnings: function warnings(_warnings) {
    log.warn('[WDS] Warnings while compiling.');

    var strippedWarnings = _warnings.map(function (warning) {
      return stripAnsi(warning);
    });

    sendMessage('Warnings', strippedWarnings);

    for (var i = 0; i < strippedWarnings.length; i++) {
      log.warn(strippedWarnings[i]);
    }

    if (options.useWarningOverlay) {
      overlay.showMessage(_warnings);
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  errors: function errors(_errors) {
    log.error('[WDS] Errors while compiling. Reload prevented.');

    var strippedErrors = _errors.map(function (error) {
      return stripAnsi(error);
    });

    sendMessage('Errors', strippedErrors);

    for (var i = 0; i < strippedErrors.length; i++) {
      log.error(strippedErrors[i]);
    }

    if (options.useErrorOverlay) {
      overlay.showMessage(_errors);
    }

    options.initial = false;
  },
  error: function error(_error) {
    log.error(_error);
  },
  close: function close() {
    log.error('[WDS] Disconnected!');
    sendMessage('Close');
  }
};
socket(socketUrl, onSocketMessage);
/* WEBPACK VAR INJECTION */}.call(this, "?http://localhost:9000"))

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/overlay.js":
/*!**********************************************!*\
  !*** (webpack)-dev-server/client/overlay.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).

var ansiHTML = __webpack_require__(/*! ansi-html */ "./node_modules/ansi-html/index.js");

var _require = __webpack_require__(/*! html-entities */ "./node_modules/html-entities/lib/index.js"),
    AllHtmlEntities = _require.AllHtmlEntities;

var entities = new AllHtmlEntities();
var colors = {
  reset: ['transparent', 'transparent'],
  black: '181818',
  red: 'E36049',
  green: 'B3CB74',
  yellow: 'FFD080',
  blue: '7CAFC2',
  magenta: '7FACCA',
  cyan: 'C3C2EF',
  lightgrey: 'EBE7E3',
  darkgrey: '6D7891'
};
var overlayIframe = null;
var overlayDiv = null;
var lastOnOverlayDivReady = null;
ansiHTML.setColors(colors);

function createOverlayIframe(onIframeLoad) {
  var iframe = document.createElement('iframe');
  iframe.id = 'webpack-dev-server-client-overlay';
  iframe.src = 'about:blank';
  iframe.style.position = 'fixed';
  iframe.style.left = 0;
  iframe.style.top = 0;
  iframe.style.right = 0;
  iframe.style.bottom = 0;
  iframe.style.width = '100vw';
  iframe.style.height = '100vh';
  iframe.style.border = 'none';
  iframe.style.zIndex = 9999999999;
  iframe.onload = onIframeLoad;
  return iframe;
}

function addOverlayDivTo(iframe) {
  var div = iframe.contentDocument.createElement('div');
  div.id = 'webpack-dev-server-client-overlay-div';
  div.style.position = 'fixed';
  div.style.boxSizing = 'border-box';
  div.style.left = 0;
  div.style.top = 0;
  div.style.right = 0;
  div.style.bottom = 0;
  div.style.width = '100vw';
  div.style.height = '100vh';
  div.style.backgroundColor = 'rgba(0, 0, 0, 0.85)';
  div.style.color = '#E8E8E8';
  div.style.fontFamily = 'Menlo, Consolas, monospace';
  div.style.fontSize = 'large';
  div.style.padding = '2rem';
  div.style.lineHeight = '1.2';
  div.style.whiteSpace = 'pre-wrap';
  div.style.overflow = 'auto';
  iframe.contentDocument.body.appendChild(div);
  return div;
}

function ensureOverlayDivExists(onOverlayDivReady) {
  if (overlayDiv) {
    // Everything is ready, call the callback right away.
    onOverlayDivReady(overlayDiv);
    return;
  } // Creating an iframe may be asynchronous so we'll schedule the callback.
  // In case of multiple calls, last callback wins.


  lastOnOverlayDivReady = onOverlayDivReady;

  if (overlayIframe) {
    // We've already created it.
    return;
  } // Create iframe and, when it is ready, a div inside it.


  overlayIframe = createOverlayIframe(function () {
    overlayDiv = addOverlayDivTo(overlayIframe); // Now we can talk!

    lastOnOverlayDivReady(overlayDiv);
  }); // Zalgo alert: onIframeLoad() will be called either synchronously
  // or asynchronously depending on the browser.
  // We delay adding it so `overlayIframe` is set when `onIframeLoad` fires.

  document.body.appendChild(overlayIframe);
} // Successful compilation.


function clear() {
  if (!overlayDiv) {
    // It is not there in the first place.
    return;
  } // Clean up and reset internal state.


  document.body.removeChild(overlayIframe);
  overlayDiv = null;
  overlayIframe = null;
  lastOnOverlayDivReady = null;
} // Compilation with errors (e.g. syntax error or missing modules).


function showMessage(messages) {
  ensureOverlayDivExists(function (div) {
    // Make it look similar to our terminal.
    div.innerHTML = "<span style=\"color: #".concat(colors.red, "\">Failed to compile.</span><br><br>").concat(ansiHTML(entities.encode(messages[0])));
  });
}

module.exports = {
  clear: clear,
  showMessage: showMessage
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/*!*********************************************!*\
  !*** (webpack)-dev-server/client/socket.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__webpack_dev_server_client__) {
/* global __webpack_dev_server_client__ */

/* eslint-disable
  camelcase
*/
// this SockJSClient is here as a default fallback, in case inline mode
// is off or the client is not injected. This will be switched to
// WebsocketClient when it becomes the default
// important: the path to SockJSClient here is made to work in the 'client'
// directory, but is updated via the webpack compilation when compiled from
// the 'client-src' directory

var Client = typeof __webpack_dev_server_client__ !== 'undefined' ? __webpack_dev_server_client__ : // eslint-disable-next-line import/no-unresolved
__webpack_require__(/*! ./clients/SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
var retries = 0;
var client = null;

var socket = function initSocket(url, handlers) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;
  });
  client.onClose(function () {
    if (retries === 0) {
      handlers.close();
    } // Try to reconnect.


    client = null; // After 10 retries stop trying, to prevent logspam.

    if (retries <= 10) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-mixed-operators, no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      setTimeout(function () {
        socket(url, handlers);
      }, retryInMs);
    }
  });
  client.onMessage(function (data) {
    var msg = JSON.parse(data);

    if (handlers[msg.type]) {
      handlers[msg.type](msg.data);
    }
  });
};

module.exports = socket;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! (webpack)-dev-server/client/clients/SockJSClient.js */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js")))

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":
/*!************************************************************!*\
  !*** (webpack)-dev-server/client/utils/createSocketUrl.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global self */

var url = __webpack_require__(/*! url */ "./node_modules/url/url.js");

var getCurrentScriptSource = __webpack_require__(/*! ./getCurrentScriptSource */ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");

function createSocketUrl(resourceQuery, currentLocation) {
  var urlParts;

  if (typeof resourceQuery === 'string' && resourceQuery !== '') {
    // If this bundle is inlined, use the resource query to get the correct url.
    // format is like `?http://0.0.0.0:8096&sockPort=8097&sockHost=localhost`
    urlParts = url.parse(resourceQuery // strip leading `?` from query string to get a valid URL
    .substr(1) // replace first `&` with `?` to have a valid query string
    .replace('&', '?'), true);
  } else {
    // Else, get the url from the <script> this file was called with.
    var scriptHost = getCurrentScriptSource();
    urlParts = url.parse(scriptHost || '/', true, true);
  } // Use parameter to allow passing location in unit tests


  if (typeof currentLocation === 'string' && currentLocation !== '') {
    currentLocation = url.parse(currentLocation);
  } else {
    currentLocation = self.location;
  }

  return getSocketUrl(urlParts, currentLocation);
}
/*
 * Gets socket URL based on Script Source/Location
 * (scriptSrc: URL, location: URL) -> URL
 */


function getSocketUrl(urlParts, loc) {
  var auth = urlParts.auth,
      query = urlParts.query;
  var hostname = urlParts.hostname,
      protocol = urlParts.protocol,
      port = urlParts.port;

  if (!port || port === '0') {
    port = loc.port;
  } // check ipv4 and ipv6 `all hostname`
  // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384


  if ((hostname === '0.0.0.0' || hostname === '::') && loc.hostname && loc.protocol.indexOf('http') === 0) {
    hostname = loc.hostname;
  } // `hostname` can be empty when the script path is relative. In that case, specifying
  // a protocol would result in an invalid URL.
  // When https is used in the app, secure websockets are always necessary
  // because the browser doesn't accept non-secure websockets.


  if (hostname && hostname !== '127.0.0.1' && (loc.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {
    protocol = loc.protocol;
  } // all of these sock url params are optionally passed in through
  // resourceQuery, so we need to fall back to the default if
  // they are not provided


  var sockHost = query.sockHost || hostname;
  var sockPath = query.sockPath || '/sockjs-node';
  var sockPort = query.sockPort || port;

  if (sockPort === 'location') {
    sockPort = loc.port;
  }

  return url.format({
    protocol: protocol,
    auth: auth,
    hostname: sockHost,
    port: sockPort,
    // If sockPath is provided it'll be passed in via the resourceQuery as a
    // query param so it has to be parsed out of the querystring in order for the
    // client to open the socket to the correct location.
    pathname: sockPath
  });
}

module.exports = createSocketUrl;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
/*!*******************************************************************!*\
  !*** (webpack)-dev-server/client/utils/getCurrentScriptSource.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) {
    return document.currentScript.getAttribute('src');
  } // Fall back to getting all scripts in the document.


  var scriptElements = document.scripts || [];
  var currentScript = scriptElements[scriptElements.length - 1];

  if (currentScript) {
    return currentScript.getAttribute('src');
  } // Fail as there was no script to use.


  throw new Error('[WDS] Failed to get current script source.');
}

module.exports = getCurrentScriptSource;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/log.js":
/*!************************************************!*\
  !*** (webpack)-dev-server/client/utils/log.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var log = __webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js").getLogger('webpack-dev-server');

var INFO = 'info';
var WARN = 'warn';
var ERROR = 'error';
var DEBUG = 'debug';
var TRACE = 'trace';
var SILENT = 'silent'; // deprecated
// TODO: remove these at major released
// https://github.com/webpack/webpack-dev-server/pull/1825

var WARNING = 'warning';
var NONE = 'none'; // Set the default log level

log.setDefaultLevel(INFO);

function setLogLevel(level) {
  switch (level) {
    case INFO:
    case WARN:
    case ERROR:
    case DEBUG:
    case TRACE:
      log.setLevel(level);
      break;
    // deprecated

    case WARNING:
      // loglevel's warning name is different from webpack's
      log.setLevel('warn');
      break;
    // deprecated

    case NONE:
    case SILENT:
      log.disableAll();
      break;

    default:
      log.error("[WDS] Unknown clientLogLevel '".concat(level, "'"));
  }
}

module.exports = {
  log: log,
  setLogLevel: setLogLevel
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/reloadApp.js":
/*!******************************************************!*\
  !*** (webpack)-dev-server/client/utils/reloadApp.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global WorkerGlobalScope self */

var _require = __webpack_require__(/*! ./log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log;

function reloadApp(_ref, _ref2) {
  var hotReload = _ref.hotReload,
      hot = _ref.hot,
      liveReload = _ref.liveReload;
  var isUnloading = _ref2.isUnloading,
      currentHash = _ref2.currentHash;

  if (isUnloading || !hotReload) {
    return;
  }

  if (hot) {
    log.info('[WDS] App hot update...');

    var hotEmitter = __webpack_require__(/*! webpack/hot/emitter */ "./node_modules/webpack/hot/emitter.js");

    hotEmitter.emit('webpackHotUpdate', currentHash);

    if (typeof self !== 'undefined' && self.window) {
      // broadcast update to window
      self.postMessage("webpackHotUpdate".concat(currentHash), '*');
    }
  } // allow refreshing the page only if liveReload isn't disabled
  else if (liveReload) {
      var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)

      var intervalId = self.setInterval(function () {
        if (rootWindow.location.protocol !== 'about:') {
          // reload immediately if protocol is valid
          applyReload(rootWindow, intervalId);
        } else {
          rootWindow = rootWindow.parent;

          if (rootWindow.parent === rootWindow) {
            // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
            applyReload(rootWindow, intervalId);
          }
        }
      });
    }

  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    log.info('[WDS] App updated. Reloading...');
    rootWindow.location.reload();
  }
}

module.exports = reloadApp;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!********************************************************!*\
  !*** (webpack)-dev-server/client/utils/sendMessage.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global __resourceQuery WorkerGlobalScope self */
// Send messages to the outside, so plugins can consume it.

function sendMsg(type, data) {
  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {
    self.postMessage({
      type: "webpack".concat(type),
      data: data
    }, '*');
  }
}

module.exports = sendMsg;

/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js":
/*!*************************************************************!*\
  !*** (webpack)-dev-server/node_modules/ansi-regex/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function () {
	return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g;
};


/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js":
/*!*************************************************************!*\
  !*** (webpack)-dev-server/node_modules/strip-ansi/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ansiRegex = __webpack_require__(/*! ansi-regex */ "./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js")();

module.exports = function (str) {
	return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./node_modules/webpack/hot sync ^\\.\\/log$":
/*!*************************************************!*\
  !*** (webpack)/hot sync nonrecursive ^\.\/log$ ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./log": "./node_modules/webpack/hot/log.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/webpack/hot sync ^\\.\\/log$";

/***/ }),

/***/ "./node_modules/webpack/hot/emitter.js":
/*!********************************!*\
  !*** (webpack)/hot/emitter.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js");
module.exports = new EventEmitter();


/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/*!****************************!*\
  !*** (webpack)/hot/log.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

var logLevel = "info";

function dummy() {}

function shouldLog(level) {
	var shouldLog =
		(logLevel === "info" && level === "info") ||
		(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning") ||
		(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error");
	return shouldLog;
}

function logGroup(logFn) {
	return function(level, msg) {
		if (shouldLog(level)) {
			logFn(msg);
		}
	};
}

module.exports = function(level, msg) {
	if (shouldLog(level)) {
		if (level === "info") {
			console.log(msg);
		} else if (level === "warning") {
			console.warn(msg);
		} else if (level === "error") {
			console.error(msg);
		}
	}
};

/* eslint-disable node/no-unsupported-features/node-builtins */
var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;
/* eslint-enable node/no-unsupported-features/node-builtins */

module.exports.group = logGroup(group);

module.exports.groupCollapsed = logGroup(groupCollapsed);

module.exports.groupEnd = logGroup(groupEnd);

module.exports.setLogLevel = function(level) {
	logLevel = level;
};

module.exports.formatError = function(err) {
	var message = err.message;
	var stack = err.stack;
	if (!stack) {
		return message;
	} else if (stack.indexOf(message) < 0) {
		return message + "\n" + stack;
	} else {
		return stack;
	}
};


/***/ }),

/***/ "./src/i18n/translation_en.json":
/*!**************************************!*\
  !*** ./src/i18n/translation_en.json ***!
  \**************************************/
/*! exports provided: time, achievements, tournaments, leaderboard, miniLeaderboard, rewards, messages, global, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"time\":{\"days\":\"d\",\"hours\":\"h\",\"minutesShortHand\":\"min\",\"minutes\":\"m\",\"seconds\":\"s\"},\"achievements\":{\"label\":\"Achievements\",\"more\":\"More\",\"complete\":\"complete 100%\"},\"tournaments\":{\"label\":\"Tournaments\",\"enter\":\"Enter Tournament\",\"readyCompetitions\":\"Upcoming Tournaments\",\"activeCompetitions\":\"Active Tournaments\",\"finishedCompetitions\":\"Finished Tournaments\",\"finishing\":\"Finishing\",\"finished\":\"Finished\",\"registered\":\"Registered\",\"noAvailableCompetitions\":\"No available competition\"},\"leaderboard\":{\"rank\":\"Rank\",\"name\":\"Name\",\"points\":\"Points\",\"prize\":\"Prize\",\"you\":\"You\"},\"miniLeaderboard\":{\"highScore\":\"High Score\",\"lastScore\":\"Last Score\",\"rank\":\"Rank\",\"startsIn\":\"Starting In\",\"starting\":\"starting\",\"finishing\":\"finishing\",\"finished\":\"finished\"},\"rewards\":{\"label\":\"Rewards\",\"claim\":\"Claim Now\",\"claimed\":\"Claimed\",\"availableRewards\":\"Available Rewards\",\"rewards\":\"Claimed Rewards\",\"expiredRewards\":\"Expired Rewards\"},\"messages\":{\"label\":\"Messages\"},\"global\":{\"copy\":\"Powered By CompetitionLabs\"}}");

/***/ }),

/***/ "./src/javascript/leaderboard.v3.js":
/*!******************************************!*\
  !*** ./src/javascript/leaderboard.v3.js ***!
  \******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _polyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfills */ "./src/javascript/polyfills/index.js");
/* harmony import */ var _polyfills__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_polyfills__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _modules_setTimeoutGlobal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/setTimeoutGlobal */ "./src/javascript/modules/setTimeoutGlobal.js");
/* harmony import */ var _modules_setTimeoutGlobal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_modules_setTimeoutGlobal__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _modules_LbWidget__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/LbWidget */ "./src/javascript/modules/LbWidget.js");
/*
 COMPETITION LABS LTD v1.0.5
 (c) 2015-2020 Aleksandr Bernotas
 License: www.competitionlabs.com/terms-of-service
*/




(function () {
  if (typeof window._CLLBV3Opt === 'undefined') {
    window._CLLBV3Opt = {
      autoStart: false
    };
  }

  if (typeof window._clLeaderBoardV3 === 'undefined') {
    window._clLeaderBoardV3 = new _modules_LbWidget__WEBPACK_IMPORTED_MODULE_2__["LbWidget"](window._CLLBV3Opt);
  } else {
    console.warn('window._clLeaderBoardV3 is already defined, widget is configured to run as a single instance');
  }
})();

/***/ }),

/***/ "./src/javascript/modules/Ajax.js":
/*!****************************************!*\
  !*** ./src/javascript/modules/Ajax.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _cLabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cLabs */ "./src/javascript/modules/cLabs.js");
/* harmony import */ var _utils_sizeof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/sizeof */ "./src/javascript/utils/sizeof.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }



/**
 * Ajax method
 *
 * @class Ajax
 * @constructor
 */

_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].Ajax = function () {
  this.xhr = new XMLHttpRequest();
};

_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].Ajax.prototype.createCORSRequest = function (method, url) {
  var obj = this;

  if ('withCredentials' in obj.xhr) {
    // Most browsers.
    obj.xhr.open(method, url, true);
  } else if (typeof XDomainRequest !== 'undefined') {
    // IE8 & IE9

    /* eslint no-undef: "off" */
    obj.xhr = new XDomainRequest();
    url = url.indexOf('https') > -1 && location.protocol !== 'https:' ? url.replace('https', 'http') : url;
    obj.xhr.open(method, url);
  } else {
    // CORS not supported.
    obj.xhr = null;
  }

  return obj.xhr;
};

_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].Ajax.prototype.abort = function () {
  var _this = this;

  if (_this.xhr && typeof _this.xhr.readyState !== 'undefined' && _this.xhr.readyState !== 4 && _this.xhr.readyState > 0) {
    // console.error("aborting Ajax", _this.xhr.readyState, _this.xhr);
    _this.xhr.abort();
  }

  return _this;
};
/**
 * Retrieves data from a URL without page refresh
 *
 * @method getData
 * @param {Object} configuration object
 *  - object contains: HTTP method "type: POST, GET", url: to send the request to, data: {object}
 * @return {String} in success object
 */


_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].Ajax.prototype.getData = function (data) {
  var obj = this;

  try {
    data.type = data.type !== undefined && typeof data.type === 'string' && data.type.length > 0 ? data.type : 'POST';
    data.data = data.data !== undefined && _typeof(data.data) === 'object' ? data.data : {};
    data.url = data.url !== undefined && typeof data.url === 'string' && data.url.length > 0 ? data.url : '';
    data.success = data.success !== undefined ? data.success : function () {};
    data.error = data.error !== undefined ? data.error : function () {};
    data.headers = data.headers !== undefined ? data.headers : {};
    data.extraCallback = data.extraCallback !== undefined ? data.extraCallback : function () {}; // cross browser CORS support

    obj.xhr = this.createCORSRequest(data.type, data.url);

    obj.xhr.onload = function () {
      data.extraCallback(data, obj.xhr);
      data.success(obj.xhr.responseText, data, obj.xhr);
    };

    obj.xhr.onerror = function () {
      data.error(obj.xhr.status);
    };

    if (typeof XDomainRequest === 'undefined') {
      if (Object(_utils_sizeof__WEBPACK_IMPORTED_MODULE_1__["default"])(data.headers) > 0) {
        var item;

        for (item in data.headers) {
          obj.xhr.setRequestHeader(item, data.headers[item]);
        }
      } else if ((data.type === 'POST' || data.type === 'PUT') && Object(_utils_sizeof__WEBPACK_IMPORTED_MODULE_1__["default"])(data.headers) === 0) {
        obj.xhr.setRequestHeader('Content-Type', 'application/json');
      } else {
        obj.xhr.setRequestHeader('Content-Type', 'text/plain');
      }
    }

    obj.xhr.send(JSON.stringify(data.data));
    return obj.xhr;
  } catch (err) {
    console.log(err);
  }
};

/***/ }),

/***/ "./src/javascript/modules/LbWidget.js":
/*!********************************************!*\
  !*** ./src/javascript/modules/LbWidget.js ***!
  \********************************************/
/*! exports provided: LbWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LbWidget", function() { return LbWidget; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var identicon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! identicon.js */ "./node_modules/identicon.js/identicon.js");
/* harmony import */ var identicon_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(identicon_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jssha__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jssha */ "./node_modules/jssha/dist/sha.mjs");
/* harmony import */ var _utils_mergeObjects__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/mergeObjects */ "./src/javascript/utils/mergeObjects.js");
/* harmony import */ var _utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/formatNumberLeadingZeros */ "./src/javascript/utils/formatNumberLeadingZeros.js");
/* harmony import */ var _utils_stringContains__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/stringContains */ "./src/javascript/utils/stringContains.js");
/* harmony import */ var _utils_objectIterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/objectIterator */ "./src/javascript/utils/objectIterator.js");
/* harmony import */ var _utils_query__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/query */ "./src/javascript/utils/query.js");
/* harmony import */ var _utils_hasClass__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/hasClass */ "./src/javascript/utils/hasClass.js");
/* harmony import */ var _utils_addClass__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/addClass */ "./src/javascript/utils/addClass.js");
/* harmony import */ var _utils_removeClass__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/removeClass */ "./src/javascript/utils/removeClass.js");
/* harmony import */ var _utils_closest__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/closest */ "./src/javascript/utils/closest.js");
/* harmony import */ var _utils_isMobileTablet__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/isMobileTablet */ "./src/javascript/utils/isMobileTablet.js");
/* harmony import */ var _cLabs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./cLabs */ "./src/javascript/modules/cLabs.js");
/* harmony import */ var _Ajax__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Ajax */ "./src/javascript/modules/Ajax.js");
/* harmony import */ var _Notifications__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Notifications */ "./src/javascript/modules/Notifications.js");
/* harmony import */ var _MiniScoreBoard__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./MiniScoreBoard */ "./src/javascript/modules/MiniScoreBoard.js");
/* harmony import */ var _MainWidget__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./MainWidget */ "./src/javascript/modules/MainWidget.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }




















var translation = __webpack_require__(/*! ../../i18n/translation_en.json */ "./src/i18n/translation_en.json");
/**
 * Main leaderboard widget, controls all actions and initiation logic.
 * Main responsibility is to control the interactions between different widgets/plugins and user even actions
 * @param options {Object} setting parameters used to overwrite the default settings
 * @constructor
 */


var LbWidget = function LbWidget(options) {
  this.settings = {
    debug: true,
    bindContainer: document.body,
    autoStart: true,
    sseMessaging: null,
    notifications: null,
    miniScoreBoard: null,
    enableNotifications: true,
    mainWidget: null,
    globalAjax: new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax(),
    checkAjax: new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax(),
    language: "en",
    currency: '',
    spaceName: '',
    memberId: '',
    groups: '',
    gameId: '',
    enforceGameLookup: true,
    // tournament lookup will include/exclude game only requests
    apiKey: '',
    member: null,
    competition: {
      activeCompetitionId: null,
      activeContestId: null,
      activeCompetition: null,
      activeContest: null,
      refreshInterval: null,
      refreshIntervalMillis: 10000,
      extractImageHeader: true // will extract the first found image inside the body tag and move it on top

    },
    achievements: {
      list: [],
      availableRewards: [],
      rewards: [],
      expiredRewards: [],
      extractImageHeader: true // will extract the first found image inside the body tag and move it on top

    },
    rewards: {
      availableRewards: [],
      rewards: [],
      expiredRewards: [],
      rewardFormatter: function rewardFormatter(reward) {
        var defaultRewardValue = reward.value;

        if (typeof reward.unitOfMeasure !== 'undefined' && typeof reward.unitOfMeasure.symbol !== 'undefined' && reward.unitOfMeasure.symbol !== null) {
          defaultRewardValue = reward.unitOfMeasure.symbol + reward.value;
        }

        return defaultRewardValue;
      }
    },
    messages: {
      enable: true,
      messages: []
    },
    tournaments: {
      activeCompetitionId: null,
      readyCompetitions: [],
      // statusCode 3
      activeCompetitions: [],
      // statusCode 5
      finishedCompetitions: [] // statusCode 7

    },
    leaderboard: {
      fullLeaderboardSize: 100,
      refreshIntervalMillis: 5000,
      refreshInterval: null,
      refreshLbDataInterval: null,
      leaderboardData: [],
      loadLeaderboardHistory: {}
    },
    uri: {
      gatewayDomain: _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].api.url,
      members: '/api/v1/:space/members/reference/:id',
      assets: '/assets/attachments/:attachmentId',
      memberSSE: '/api/v1/:space/sse/reference/:id',
      memberSSEHeartbeat: '/api/v1/:space/sse/reference/:id/heartbeat',
      competitions: '/api/v1/:space/competitions',
      competitionById: '/api/v1/:space/competitions/:id',
      contestLeaderboard: '/api/v1/:space/contests/:id/leaderboard',
      achievement: '/api/v1/:space/achievements/:id',
      achievements: '/api/v1/:space/achievements/members/reference/:id',
      // achievements: "/api/v1/:space/achievements",
      achievementsProgression: '/api/v1/:space/members/reference/:id/achievements',
      achievementsIssued: '/api/v1/:space/members/reference/:id/achievements/issued',
      messages: '/api/v1/:space/members/reference/:id/messages',
      messageById: '/api/v1/:space/members/reference/:id/messages/:messageId',
      memberReward: '/api/v1/:space/members/reference/:id/award/:awardId',
      memberRewardClaim: '/api/v1/:space/members/reference/:id/award/:awardId/award',
      memberCompetitions: '/api/v1/:space/members/reference/:id/competitions',
      memberCompetitionById: '/api/v1/:space/members/reference/:id/competition/:competitionId',
      memberCompetitionOptIn: '/api/v1/:space/members/reference/:id/competition/:competitionId/optin',
      memberCompetitionOptInCheck: '/api/v1/:space/members/reference/:id/competition/:competitionId/optin-check',
      translationPath: '' // ../i18n/translation_:language.json

    },
    loadTranslations: true,
    translation: translation,
    resources: [_cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].api.url + '/assets/widgets/leaderboard_v3/css/style.css?t=' + new Date().getTime(), _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].api.url + '/assets/widgets/leaderboard_v3/css/fonts.css?t=' + new Date().getTime()],
    layoutBuildCallback: function layoutBuildCallback(layout, instance) {}
  };

  if (typeof options !== 'undefined') {
    this.settings = Object(_utils_mergeObjects__WEBPACK_IMPORTED_MODULE_3__["default"])(this.settings, options);
  }

  this.log = function (message) {
    if (this.settings.debug) {
      console.error(message);
    }
  };
  /**
   * Format duration of Date Time from moment() object
   * @param duration {moment}
   * @returns {string}
   */


  this.formatDateTime = function (duration) {
    var _this = this;

    var largeResult = [];
    var result = [];
    if (duration.days()) largeResult.push(duration.days() + '<span class="time-ind">' + _this.settings.translation.time.days + '</span>');

    if (duration.hours() || duration.days() > 0) {
      result.push(Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_4__["default"])(duration.hours(), 2) + '<span class="time-ind">' + _this.settings.translation.time.hours + '</span>');
    } else result.push('00<span class="time-ind">' + _this.settings.translation.time.hours + '</span>');

    if (duration.minutes() || duration.hours() > 0 || duration.days() > 0) {
      result.push(Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_4__["default"])(duration.minutes(), 2) + (duration.days() > 0 ? '<span class="time-ind">' + _this.settings.translation.time.minutes + '</span>' : '<span class="time-ind">' + _this.settings.translation.time.minutesShortHand + '</span>'));
    } else result.push('00' + (duration.days() > 0 ? '<span class="time-ind">' + _this.settings.translation.time.minutes + '</span>' : '<span class="time-ind">' + _this.settings.translation.time.minutesShortHand + '</span>')); // if (duration.seconds() && duration.days() === 0){ result.push( formatNumberLeadingZeros(duration.seconds(), 2) + '<span class="time-ind">s</span>' ) }else if(duration.days() === 0){result.push( '00<span class="time-ind">s</span>' )};


    result.push(Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_4__["default"])(duration.seconds(), 2) + '<span class="time-ind">' + _this.settings.translation.time.seconds + '</span>');
    return largeResult.length > 0 ? largeResult.join(' ') + ' ' + result.join(':') : result.join(':');
  };

  this.populateIdenticonBase64Image = function (str) {
    if (str.length > 0) {
      /* eslint new-cap: "off" */
      var shaObj = new jssha__WEBPACK_IMPORTED_MODULE_2__["default"]('SHA-512', 'TEXT');
      shaObj.update(str);
      var hash = shaObj.getHash('HEX', 1);
      var data = new identicon_js__WEBPACK_IMPORTED_MODULE_1___default.a(hash, {
        background: [255, 255, 255, 255],
        // rgba white
        margin: 0.1,
        // 20% margin
        size: 22,
        // 420px square
        format: 'svg' // use SVG instead of PNG

      }).toString();
      var icon = 'data:image/svg+xml;base64,' + data;
      return icon;
    } else {
      return '';
    }
  };
  /**
   * get a list of available competition filtered by provided global criteria
   * @param callback {Function}
   */


  var competitionCheckAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax();

  this.checkForAvailableCompetitions = function (callback, ajaxInstance) {
    var _this = this;

    var url = _this.settings.memberId.length === 0 ? _this.settings.uri.competitions.replace(':space', _this.settings.spaceName) : _this.settings.uri.memberCompetitions.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId);
    var filters = ['statusCode>==3', 'statusCode<==5', '_sortByFields=options.scheduledDates.end:desc', '_lang=' + _this.settings.language];
    var ajaxInstanceToUse = typeof ajaxInstance !== 'undefined' && ajaxInstance !== null ? ajaxInstance : competitionCheckAjax;

    if (typeof _this.settings.currency === 'string' && _this.settings.currency.length > 0) {
      filters.push('_uomKey=' + _this.settings.currency);
    }

    if (_this.settings.gameId.length > 0 && _this.settings.enforceGameLookup) {
      filters.push('options.products.productRefId=' + _this.settings.gameId);
    }

    if (_this.settings.groups.length > 0 && _this.settings.memberId.length === 0) {
      filters.push('options.limitEntrantsTo=' + _this.settings.groups);
    }

    ajaxInstanceToUse.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + '?' + filters.join('&'),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var json = JSON.parse(response);
          _this.settings.tournaments.readyCompetitions = [];
          _this.settings.tournaments.activeCompetitions = [];
          window.mapObject(json.data, function (comp) {
            if (comp.statusCode === 3) {
              _this.settings.tournaments.readyCompetitions.push(comp);
            } else if (comp.statusCode === 5) {
              _this.settings.tournaments.activeCompetitions.push(comp);
            }
          });

          _this.checkForFinishedCompetitions(callback, ajaxInstance);
        } else {
          _this.log('failed to checkForActiveCompetitions ' + response);
        }
      }
    });
  };
  /**
   * get a list of finished competition filtered by provided global criteria
   * @param callback {Function}
   */


  var competitionFinishedCheckAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax();

  this.checkForFinishedCompetitions = function (callback, ajaxInstance) {
    var _this = this;

    var url = _this.settings.memberId.length === 0 ? _this.settings.uri.competitions.replace(':space', _this.settings.spaceName) : _this.settings.uri.memberCompetitions.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId);
    var filters = ['statusCode=7', '_limit=10', '_sortByFields=options.scheduledDates.end:desc', '_lang=' + _this.settings.language];
    var ajaxInstanceToUse = typeof ajaxInstance !== 'undefined' && ajaxInstance !== null ? ajaxInstance : competitionFinishedCheckAjax;

    if (typeof _this.settings.currency === 'string' && _this.settings.currency.length > 0) {
      filters.push('_uomKey=' + _this.settings.currency);
    }

    if (_this.settings.gameId.length > 0 && _this.settings.enforceGameLookup) {
      filters.push('options.products.productRefId=' + _this.settings.gameId);
    }

    if (_this.settings.groups.length > 0 && _this.settings.memberId.length === 0) {
      filters.push('options.limitEntrantsTo=' + _this.settings.groups);
    }

    ajaxInstanceToUse.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + '?' + filters.join('&'),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var json = JSON.parse(response);
          _this.settings.tournaments.finishedCompetitions = [];
          window.mapObject(json.data, function (comp) {
            if (comp.statusCode === 7) {
              _this.settings.tournaments.finishedCompetitions.push(comp);
            }
          });

          if (typeof callback === 'function') {
            callback();
          }
        } else {
          _this.log('failed to checkForFinishedCompetitions ' + response);
        }
      }
    });
  };

  this.prepareActiveCompetition = function (callback) {
    var _this = this;

    var activeCompetition = null;
    var activeCompetitionId = null;

    if (_this.settings.tournaments.activeCompetitionId !== null) {
      window.mapObject(_this.settings.tournaments.activeCompetitions, function (comp) {
        if (comp.id === _this.settings.tournaments.activeCompetitionId) {
          activeCompetition = comp;
        }
      });
      window.mapObject(_this.settings.tournaments.readyCompetitions, function (comp) {
        if (comp.id === _this.settings.tournaments.activeCompetitionId) {
          activeCompetition = comp;
        }
      });
      window.mapObject(_this.settings.tournaments.finishedCompetitions, function (comp) {
        if (comp.id === _this.settings.tournaments.activeCompetitionId) {
          activeCompetition = comp;
        }
      });

      if (activeCompetition !== null) {
        activeCompetitionId = _this.settings.tournaments.activeCompetitionId;
      } else {
        _this.settings.tournaments.activeCompetitionId = null;
      }
    }

    if (activeCompetition === null && _this.settings.tournaments.activeCompetitions.length > 0) {
      activeCompetition = _this.settings.tournaments.activeCompetitions[0];
      activeCompetitionId = activeCompetition.id;
    } else if (activeCompetition === null && _this.settings.tournaments.readyCompetitions.length > 0) {
      activeCompetition = _this.settings.tournaments.readyCompetitions[0];
      activeCompetitionId = activeCompetition.id;
    } // no competitions found


    if (activeCompetitionId === null && _this.settings.tournaments.finishedCompetitions.length <= 0) {
      // deactivation requires closing & opening of the mainWidget.
      _this.deactivateCompetitionsAndLeaderboards();
    } else {
      if (_this.settings.competition.activeCompetitionId !== activeCompetitionId && activeCompetitionId !== null) {
        _this.settings.competition.activeCompetition = activeCompetition;
        _this.settings.competition.activeCompetitionId = activeCompetitionId;
      } // load active competition


      if (activeCompetitionId !== null) {
        _this.loadActiveCompetition(function (json) {
          _this.setActiveCompetition(json, callback);
        });
      } else if (typeof callback === 'function') {
        callback();
      }
    }
  };

  this.loadActiveCompetition = function (callback) {
    var _this = this;

    var url = _this.settings.memberId.length === 0 ? _this.settings.uri.competitionById.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.competition.activeCompetitionId) : _this.settings.uri.memberCompetitionById.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId).replace(':competitionId', _this.settings.competition.activeCompetitionId);
    var filters = ['_include=strategy', '_lang=' + _this.settings.language];

    if (typeof _this.settings.currency === 'string' && _this.settings.currency.length > 0) {
      filters.push('_uomKey=' + _this.settings.currency);
    }

    _this.settings.globalAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + '?' + filters.join('&'),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var json = JSON.parse(response);

          if (typeof callback === 'function') {
            callback(json);
          }
        } else {
          _this.log('failed to loadActiveCompetition ' + response);
        }
      }
    });
  };

  this.setActiveCompetition = function (json, callback) {
    var _this = this;

    _this.settings.competition.activeCompetition = json.data;
    _this.settings.competition.activeContest = null;
    _this.settings.competition.activeContestId = null;

    if (typeof json.data.contests !== 'undefined' && json.data.contests.length > 0) {
      window.mapObject(json.data.contests, function (contest) {
        if (contest.statusCode < 7 && _this.settings.competition.activeContest === null) {
          _this.settings.competition.activeContest = contest;
          _this.settings.competition.activeContestId = contest.id;

          if (typeof _this.settings.competition.activeContest.rewards === 'undefined') {
            _this.settings.competition.activeContest.rewards = [];
          }

          var rewards = [];
          window.mapObject(_this.settings.competition.activeContest.rewards, function (reward) {
            if (typeof reward.rewardRank === 'string') {
              var rankParts = reward.rewardRank.split(',');
              var rewardRank = [];
              window.mapObject(rankParts, function (part) {
                if (Object(_utils_stringContains__WEBPACK_IMPORTED_MODULE_5__["default"])(part, '-')) {
                  var rankRange = part.split('-');
                  var rageStart = parseInt(rankRange[0]);
                  var rangeEnd = parseInt(rankRange[1]);

                  for (var i = rageStart; i <= rangeEnd; i++) {
                    rewardRank.push(i);
                  }
                } else {
                  rewardRank.push(parseInt(part));
                }
              });
              reward.rewardRank = rewardRank;
            }

            rewards.push(reward);
          });
          _this.settings.competition.activeContest.rewards = rewards;
        }
      });
    }

    if (typeof callback === 'function') {
      callback();
    }
  };

  this.getLeaderboardData = function (count, callback) {
    if (this.settings.competition.activeContestId !== null) {
      var _this = this;

      var url = _this.settings.uri.contestLeaderboard.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.competition.activeContestId);

      var filters = ['_limit=' + count, 'rankings=2'];

      if (typeof _this.settings.memberId === 'string' && _this.settings.memberId.length > 0) {
        filters.push('memberId=' + _this.settings.memberId);
      }

      _this.settings.globalAjax.abort().getData({
        type: 'GET',
        url: _this.settings.uri.gatewayDomain + url + '?' + filters.join('&'),
        headers: {
          'X-API-KEY': _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            var json = JSON.parse(response); // if(
            //   typeof _this.settings.loadLeaderboardHistory[_this.settings.competition.activeContestId] === "undefined"
            //   ||
            //   (
            //     typeof _this.settings.loadLeaderboardHistory[_this.settings.competition.activeContestId] !== "undefined"
            //     &&
            //     _this.settings.loadLeaderboardHistory[_this.settings.competition.activeContestId] !== data
            //   )
            // ) {
            //   _this.settings.loadLeaderboardHistory[_this.settings.competition.activeContestId] = {
            //     changed: true,
            //     data: JSON.stringify(json.data)
            //   };
            // }
            // we need to mask competitor's names. We will replace last 4 characters with "*"
            // also first 4 chars are replaced with "*"

            _this.maskNames(json.data, _this.settings.memberId);

            _this.settings.leaderboard.leaderboardData = json.data;
            callback(json.data);
          } else {
            _this.log('failed to getLeaderboardData ' + response);
          }
        }
      });
    } else {
      callback();
    }
  }; // function masks names of users


  this.maskNames = function (data, myname) {
    // myname --> _this.settings.memberId
    var _iterator = _createForOfIteratorHelper(data),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var leadboard = _step.value;

        if (leadboard.name !== myname) {
          // split casino and player name
          var separated = leadboard.name.split(':');
          var casName = this.maskWord(separated[0]);
          var playerName = this.maskWord(separated[1]);
          leadboard.name = casName + ':' + playerName;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }; // take string as input and put first 4 chars as "*"


  this.maskWord = function (word) {
    var ret = ''; // replace last 4

    if (word.length >= 4) {
      ret = word.substring(0, word.length - 4);
      ret += '****'; // replace all
    } else {
      ret = word.replace(/./g, '*');
    }

    return ret;
  };

  var checkAchievementsAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax();

  this.checkForAvailableAchievements = function (callback) {
    var _this = this;

    var url = _this.settings.uri.achievements.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId);

    var filters = ['_limit=100', '_include=rewards,products', '_lang=' + _this.settings.language];
    var withGroups = false;

    if (typeof _this.settings.currency === 'string' && _this.settings.currency.length > 0) {
      filters.push('_uomKey=' + _this.settings.currency);
    }

    if (typeof _this.settings.member.groups !== 'undefined' && _this.settings.member.groups.length > 0) {
      withGroups = true;
      filters.push('memberGroups=' + _this.settings.member.groups.join(','));
    }

    checkAchievementsAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + '?_lang=' + _this.settings.language + '&_uomKey=' + _this.settings.currency,
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var jsonForAll = JSON.parse(response); // clear achievements list

          _this.settings.achievements.list = [];
          /*
          window.mapObject(jsonForAll.data, function (ach) {
            // here we add first achievements
            _this.settings.achievements.list.push(ach);
          });
          */

          if (withGroups) {
            checkAchievementsAjax.abort().getData({
              type: 'GET',
              url: _this.settings.uri.gatewayDomain + url + '?' + filters.join('&'),
              headers: {
                'X-API-KEY': _this.settings.apiKey
              },
              success: function success(response, dataObj, xhr) {
                if (xhr.status === 200) {
                  var json = JSON.parse(response);
                  window.mapObject(json.data, function (ach) {
                    // we show the achievement only if it's active for the current game (product)
                    _this.filterAchievementByProduct(ach, _this.settings.gameId, _this);
                  });
                  if (typeof callback === 'function') callback(_this.settings.achievements.list);
                } else {
                  _this.log('failed to checkForAvailableAchievements ' + response);
                }
              }
            });
          } else {
            if (typeof callback === 'function') callback(jsonForAll.data);
          }
        } else {
          _this.log('failed to checkForAvailableAchievements ' + response);
        }
      }
    });
  }; // filter achievement if enabled for current game
  // we show the achievement only if it's active for the current game (product)
  // _this.settings.gameId="55"
  // ach.products = [{name: "Eddie Dundee", productGroups: ["gameart"], productRefId: "55", productType: "slot"}]


  this.filterAchievementByProduct = function (ach, gameid, self) {
    // no product filtering enabled in backoffice
    if (ach.products.length === 0) {
      self.settings.achievements.list.push(ach); // check if achievement enabled for this current game (product)
    } else {
      var _iterator2 = _createForOfIteratorHelper(ach.products),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var prod = _step2.value;

          if (prod.productRefId === self.settings.gameId) {
            // add to achievements list
            self.settings.achievements.list.push(ach);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  };

  var getAchievementsAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax();

  this.getAchievement = function (achievementId, callback) {
    var _this = this;

    getAchievementsAjax.abort().getData({
      url: _this.settings.uri.gatewayDomain + _this.settings.uri.achievement.replace(':space', _this.settings.spaceName).replace(':id', achievementId) + '?_lang=' + _this.settings.language + '&_uomKey=' + _this.settings.currency,
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      type: 'GET',
      success: function success(response, dataObj, xhr) {
        var json = null;

        if (xhr.status === 200) {
          try {
            json = JSON.parse(response);
          } catch (e) {}
        }

        if (typeof callback === 'function') {
          callback(json);
        }
      },
      error: function error() {
        if (typeof callback === 'function') {
          callback(null);
        }
      }
    });
  };

  var getRewardAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax();

  this.getReward = function (rewardId, callback) {
    var _this = this;

    getRewardAjax.abort().getData({
      url: _this.settings.uri.gatewayDomain + _this.settings.uri.memberReward.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId).replace(':awardId', rewardId),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      type: 'GET',
      success: function success(response, dataObj, xhr) {
        var json = null;

        if (xhr.status === 200) {
          try {
            json = JSON.parse(response);
          } catch (e) {}
        }

        if (typeof callback === 'function') {
          callback(json);
        }
      },
      error: function error() {
        if (typeof callback === 'function') {
          callback(null);
        }
      }
    });
  };

  var getMessageAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax();

  this.getMessage = function (messageId, callback) {
    var _this = this;

    getMessageAjax.abort().getData({
      url: _this.settings.uri.gatewayDomain + _this.settings.uri.messageById.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId).replace(':messageId', messageId),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      type: 'GET',
      success: function success(response, dataObj, xhr) {
        var json = null;

        if (xhr.status === 200) {
          try {
            json = JSON.parse(response);
          } catch (e) {}
        }

        if (typeof callback === 'function') {
          callback(json);
        }
      },
      error: function error() {
        if (typeof callback === 'function') {
          callback(null);
        }
      }
    });
  };

  var claimRewardAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax();

  this.claimReward = function (rewardId, callback) {
    var _this = this;

    claimRewardAjax.abort().getData({
      url: _this.settings.uri.gatewayDomain + _this.settings.uri.memberRewardClaim.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId).replace(':awardId', rewardId),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      type: 'POST',
      success: function success(response, dataObj, xhr) {
        var json = null;

        if (xhr.status === 200) {
          try {
            json = JSON.parse(response);
          } catch (e) {}
        }

        if (typeof callback === 'function') {
          callback(json);
        }
      },
      error: function error() {
        if (typeof callback === 'function') {
          callback(null);
        }
      }
    });
  };

  var checkForMemberAchievementsAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax();

  this.checkForMemberAchievementsIssued = function (callback) {
    var _this = this;

    var url = _this.settings.uri.achievementsIssued.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId);

    checkForMemberAchievementsAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url,
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var json = JSON.parse(response);
          var idList = [];

          if (typeof json.aggregations !== 'undefined' && json.aggregations.length > 0) {
            window.mapObject(json.aggregations[0].items, function (item) {
              idList.push(item.value);
            });
          }

          if (typeof callback === 'function') callback(idList);
        } else {
          _this.log('failed to checkForMemberAchievementsIssued ' + response);
        }
      }
    });
  };

  var checkForMemberAchievementsProgressionAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax();

  this.checkForMemberAchievementsProgression = function (idList, callback) {
    var _this = this;

    var url = _this.settings.uri.achievementsProgression.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId);

    checkForMemberAchievementsProgressionAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + (idList.length > 0 ? '?id=' + idList.join(',') : ''),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var json = JSON.parse(response);
          if (typeof callback === 'function') callback(json.data);
        } else {
          _this.log('failed to checkForMemberAchievementsProgression ' + response);
        }
      }
    });
  };

  var checkForAvailableRewardsAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax();

  this.checkForAvailableRewards = function (callback) {
    var _this = this;

    var url = _this.settings.uri.messages.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId); // claimed rewards


    checkForAvailableRewardsAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + '?_sortByFields=created:desc&messageType=Reward&prize.claimed=true&_hasValuesFor=prize&_limit=100',
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var jsonForAll = JSON.parse(response);
          _this.settings.rewards.rewards = [];
          _this.settings.rewards.availableRewards = [];
          _this.settings.rewards.expiredRewards = [];
          window.mapObject(jsonForAll.data, function (message) {
            var expired = typeof message.expiry === 'undefined' ? false : moment__WEBPACK_IMPORTED_MODULE_0___default()(message.expiry).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()()) < 0;

            if (!expired) {
              _this.settings.rewards.rewards.push(message);
            }
          }); // not-claimed rewards

          checkForAvailableRewardsAjax.abort().getData({
            type: 'GET',
            url: _this.settings.uri.gatewayDomain + url + '?_sortByFields=created:desc&messageType=Reward&prize.claimed=false&_hasValuesFor=prize&_limit=100',
            headers: {
              'X-API-KEY': _this.settings.apiKey
            },
            success: function success(response, dataObj, xhr) {
              if (xhr.status === 200) {
                var jsonForAll = JSON.parse(response);
                window.mapObject(jsonForAll.data, function (message) {
                  var expired = typeof message.expiry === 'undefined' ? false : moment__WEBPACK_IMPORTED_MODULE_0___default()(message.expiry).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()()) < 0;

                  if (!expired) {
                    _this.settings.rewards.availableRewards.push(message);
                  }
                }); // expired rewards

                var date = new Date();
                var utcDate = date.getUTCFullYear() + '-' + Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_4__["default"])(date.getUTCMonth() + 1, 2) + '-' + Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_4__["default"])(date.getUTCDate(), 2) + 'T' + Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_4__["default"])(date.getUTCHours(), 2) + ':' + Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_4__["default"])(date.getUTCMinutes(), 2) + ':00';

                _this.settings.globalAjax.abort().getData({
                  type: 'GET',
                  url: _this.settings.uri.gatewayDomain + url + '?_sortByFields=created:desc&_limit=100&messageType=Reward&_hasValuesFor=expiry&expiry<==' + utcDate,
                  headers: {
                    'X-API-KEY': _this.settings.apiKey
                  },
                  success: function success(response, dataObj, xhr) {
                    if (xhr.status === 200) {
                      var jsonForAll = JSON.parse(response);
                      window.mapObject(jsonForAll.data, function (message) {
                        _this.settings.rewards.expiredRewards.push(message);
                      });
                      if (typeof callback === 'function') callback(_this.settings.rewards.rewards, _this.settings.rewards.availableRewards, _this.settings.rewards.expiredRewards);
                    } else {
                      _this.log('failed to checkForAvailableRewards expired ' + response);
                    }
                  }
                });
              } else {
                _this.log('failed to checkForAvailableRewards not-claimed ' + response);
              }
            }
          });
        } else {
          _this.log('failed to checkForAvailableRewards claimed ' + response);
        }
      }
    });
  };

  var checkForAvailableMessagesAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax();

  this.checkForAvailableMessages = function (callback) {
    var _this = this;

    var url = _this.settings.uri.messages.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId);

    var date = new Date();
    date.setDate(date.getMonth() - 1);
    var createdDateFilter = date.getFullYear() + '-' + Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_4__["default"])(date.getMonth() + 1, 2) + '-' + Object(_utils_formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_4__["default"])(date.getDate(), 2);
    checkForAvailableMessagesAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url + '?_sortByFields=created:desc&_hasNoValuesFor=prize&_limit=100&created>==' + createdDateFilter,
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var jsonForAll = JSON.parse(response);
          _this.settings.messages.messages = [];
          window.mapObject(jsonForAll.data, function (message) {
            _this.settings.messages.messages.push(message);
          });
          if (typeof callback === 'function') callback(_this.settings.messages.messages);
        } else {
          _this.log('failed to checkForAvailableMessages ' + response);
        }
      }
    });
  };

  var optInMemberAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax();

  this.optInMemberToActiveCompetition = function (callback) {
    var _this = this;

    var url = _this.settings.uri.memberCompetitionOptIn.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId).replace(':competitionId', _this.settings.competition.activeCompetitionId);

    optInMemberAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + url,
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          callback();
        } else {
          _this.log('failed to optInMemberToActiveCompetition ' + response);
        }
      }
    });
  };

  var revalidationCount = 0;

  this.revalidateIfSuccessfullOptIn = function (callback) {
    var _this = this;

    _this.loadActiveCompetition(function (competitionJson) {
      if (typeof competitionJson.data.optin === 'boolean' && !competitionJson.data.optin) {
        revalidationCount++;

        if (revalidationCount < 5) {
          setTimeout(function () {
            _this.revalidateIfSuccessfullOptIn(callback);
          }, 100);
        } else {
          revalidationCount = 0;
        }
      } else if (typeof competitionJson.data.optin === 'boolean' && competitionJson.data.optin) {
        callback(competitionJson);
      }
    });
  };

  this.leaderboardDataRefresh = function () {
    var _this = this;

    if (_this.settings.leaderboard.refreshLbDataInterval) {
      clearTimeout(_this.settings.leaderboard.refreshLbDataInterval);
    }

    if (_this.settings.competition.activeCompetition !== null && typeof _this.settings.competition.activeCompetition.optinRequired === 'boolean' && !_this.settings.competition.activeCompetition.optinRequired || typeof _this.settings.competition.activeCompetition.optin === 'boolean' && _this.settings.competition.activeCompetition.optin) {
      var count = _this.settings.miniScoreBoard.settings.active ? 0 : _this.settings.leaderboard.fullLeaderboardSize;

      _this.getLeaderboardData(count, function (data) {
        if (_this.settings.miniScoreBoard.settings.active) _this.settings.miniScoreBoard.loadScoreBoard();
        if (_this.settings.mainWidget.settings.active) _this.settings.mainWidget.loadLeaderboard();
      });
    }

    _this.settings.leaderboard.refreshLbDataInterval = setTimeout(function () {
      _this.leaderboardDataRefresh();
    }, _this.settings.leaderboard.refreshIntervalMillis);
  };

  this.activeCompetitionDataRefresh = function (callback) {
    var _this = this;

    if (_this.settings.competition.refreshInterval) {
      clearTimeout(_this.settings.competition.refreshInterval);
    }

    _this.checkForAvailableCompetitions(function () {
      _this.prepareActiveCompetition(function () {
        var count = _this.settings.miniScoreBoard.settings.active ? 0 : _this.settings.leaderboard.fullLeaderboardSize; // clear to not clash with LB refresh that could happen at same time

        if (_this.settings.leaderboard.refreshInterval) {
          clearTimeout(_this.settings.leaderboard.refreshInterval);
        }

        if (_this.settings.miniScoreBoard.settings.active || _this.settings.mainWidget.settings.active) {
          if (_this.settings.competition.activeCompetition !== null && typeof _this.settings.competition.activeCompetition.optinRequired === 'boolean' && !_this.settings.competition.activeCompetition.optinRequired || _this.settings.competition.activeCompetition !== null && typeof _this.settings.competition.activeCompetition.optin === 'boolean' && _this.settings.competition.activeCompetition.optin) {
            _this.getLeaderboardData(count, function (data) {
              if (_this.settings.miniScoreBoard.settings.active) _this.settings.miniScoreBoard.loadScoreBoard();
              if (_this.settings.mainWidget.settings.active) _this.settings.mainWidget.loadLeaderboard(); // re-start leaderboard refresh

              _this.leaderboardDataRefresh();

              if (typeof callback === 'function') {
                callback();
              }
            });
          } else {
            if (_this.settings.miniScoreBoard.settings.active) _this.settings.miniScoreBoard.loadScoreBoard();

            if (_this.settings.mainWidget.settings.active) {
              _this.getLeaderboardData(count, function (data) {
                _this.settings.mainWidget.loadLeaderboard();
              });
            } // restart leaderboard refresh


            _this.leaderboardDataRefresh();

            if (typeof callback === 'function') {
              callback();
            }
          }
        } else {
          if (_this.settings.miniScoreBoard.settings.active) _this.settings.miniScoreBoard.loadScoreBoard();

          if (typeof callback === 'function') {
            callback();
          }
        }
      });
    });

    _this.settings.competition.refreshInterval = setTimeout(function () {
      _this.activeCompetitionDataRefresh();
    }, _this.settings.competition.refreshIntervalMillis);
  };

  this.deactivateCompetitionsAndLeaderboards = function (callback) {
    var _this = this;

    if (_this.settings.leaderboard.refreshInterval) {
      clearTimeout(_this.settings.leaderboard.refreshInterval);
    }

    _this.settings.miniScoreBoard.clearAll();

    _this.settings.mainWidget.clearAll();

    if (typeof callback === 'function') {
      callback();
    }
  };

  this.stopActivity = function (callback) {
    var _this = this;

    if (_this.settings.leaderboard.refreshInterval) {
      clearTimeout(_this.settings.leaderboard.refreshInterval);
      clearInterval(_this.settings.leaderboard.refreshInterval);
    }

    if (_this.settings.leaderboard.refreshLbDataInterval) {
      clearTimeout(_this.settings.leaderboard.refreshLbDataInterval);
      clearInterval(_this.settings.leaderboard.refreshLbDataInterval);
    }

    if (_this.settings.miniScoreBoard.settings.updateInterval) {
      clearTimeout(_this.settings.miniScoreBoard.settings.updateInterval);
      clearInterval(_this.settings.leaderboard.refreshInterval);
    }

    if (typeof callback === 'function') {
      callback();
    }
  };

  this.restartActivity = function (callback) {
    var _this = this;

    _this.activeCompetitionDataRefresh();

    _this.settings.miniScoreBoard.updateScoreBoard();

    if (typeof callback === 'function') {
      callback();
    }
  };

  this.loadMember = function (callback) {
    var _this = this;

    _this.settings.globalAjax.abort().getData({
      type: 'GET',
      url: _this.settings.uri.gatewayDomain + _this.settings.uri.members.replace(':space', _this.settings.spaceName).replace(':id', _this.settings.memberId),
      headers: {
        'X-API-KEY': _this.settings.apiKey
      },
      success: function success(response, dataObj, xhr) {
        if (xhr.status === 200) {
          var json = JSON.parse(response);
          _this.settings.member = json.data;
          callback(json.data);
        } else {
          _this.log('failed to loadMember ' + response); // if user not found, we can retry later to see if it was inserted.
          // normally the spin events will automatically insert the user


          if (xhr.status === 404) {
            // retry in 5 secs
            setTimeout(function () {
              _this.init();
            }, 5000);
          }
        }
      }
    });
  };

  this.loadWidgetTranslations = function (callback) {
    var _this = this;

    if (typeof _this.settings.uri.translationPath === 'string' && _this.settings.uri.translationPath.length > 0 && _this.settings.loadTranslations) {
      _this.settings.globalAjax.abort().getData({
        type: 'GET',
        // translation path must be absolute URL
        url: _this.settings.uri.translationPath.replace(':language', _this.settings.language).toString(),
        headers: {
          'X-API-KEY': _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            var json = JSON.parse(response);
            _this.settings.translation = Object(_utils_mergeObjects__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.settings.translation, json);
            callback();
          } else {
            _this.log('no translation found ' + response);

            callback();
          }
        },
        error: function error(xhr, ajaxOptions, thrownError) {
          _this.log('Translation File Request Error');
        }
      });
    } else {
      callback();
    }
  };

  this.startup = function () {
    var _this = this;

    _this.settings.miniScoreBoard.initLayout(function () {
      _this.settings.miniScoreBoard.settings.active = true;

      _this.activeCompetitionDataRefresh();

      if (_this.settings.enableNotifications) {
        _this.settings.notifications.init();
      }

      _this.cleanup();
    });
  };

  var _cleanupInstance;

  this.cleanup = function () {
    var _this = this;

    if (_cleanupInstance) {
      clearTimeout(_cleanupInstance);
    }

    _cleanupInstance = setTimeout(function () {
      _this.settings.mainWidget.preLoaderRerun();

      _this.cleanup();
    }, 3000);
  };

  this.loadStylesheet = function (callback) {
    var _this = this;

    var createdResources = false;
    var availableLinks = [];
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_6__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_7__["default"])('link'), function (link) {
      if (link !== null) {
        availableLinks.push(link.href);
      }
    });
    window.mapObject(_this.settings.resources, function (resource, key, count) {
      var exists = false;
      window.mapObject(availableLinks, function (link) {
        if (link === resource) {
          exists = true;
        }
      });

      if (!exists) {
        var link = document.createElement('link');
        link.setAttribute('rel', 'stylesheet');
        link.setAttribute('type', 'text/css');
        link.setAttribute('href', resource);

        if (count === 0) {
          link.onload = function () {
            if (typeof callback === 'function') {
              callback();
            }
          };

          link.onerror = function (e) {
            if (typeof callback === 'function') {
              callback();
            }
          };
        }

        document.body.appendChild(link);
        createdResources = true;
      }
    });

    if (!createdResources && typeof callback === 'function') {
      callback();
    }
  };

  this.clickedMiniScoreBoard = function () {
    var _this = this;

    if (!_this.settings.miniScoreBoard.settings.dragging) {
      _this.deactivateCompetitionsAndLeaderboards(function () {
        _this.settings.leaderboard.leaderboardData = [];

        _this.settings.mainWidget.initLayout(function () {
          _this.activeCompetitionDataRefresh();
        });

        setTimeout(function () {
          _this.settings.miniScoreBoard.settings.container.style.display = 'none';
        }, 200);
      });
    }
  };
  /**
   * Open main widget and open specific tab and loads relevant action
   * @param tab String
   * @param actionCallback Function
   */


  this.openWithTabAndAction = function (tab, actionCallback) {
    var _this = this;

    if (_this.settings.mainWidget.settings.active) {
      var loadTab = Object(_utils_query__WEBPACK_IMPORTED_MODULE_7__["default"])(_this.settings.mainWidget.settings.container, tab);

      _this.settings.mainWidget.navigationSwitch(loadTab, function () {
        _this.activeCompetitionDataRefresh();

        if (typeof actionCallback === 'function') {
          actionCallback();
        }
      });

      setTimeout(function () {
        _this.settings.miniScoreBoard.settings.container.style.display = 'none';
      }, 200);
    } else {
      _this.deactivateCompetitionsAndLeaderboards(function () {
        _this.settings.mainWidget.initLayout(function () {
          _this.settings.mainWidget.navigationSwitch(Object(_utils_query__WEBPACK_IMPORTED_MODULE_7__["default"])(_this.settings.mainWidget.settings.container, tab), function () {
            _this.activeCompetitionDataRefresh();

            if (typeof actionCallback === 'function') {
              actionCallback();
            }
          });
        });

        setTimeout(function () {
          _this.settings.miniScoreBoard.settings.container.style.display = 'none';
        }, 200);
      });
    }
  };

  var loadCompetitionListAjax = new _cLabs__WEBPACK_IMPORTED_MODULE_13__["default"].Ajax();

  this.eventHandlers = function (el) {
    var _this = this; // mini scoreboard opt-in action


    if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-widget-ms-optin-action') && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'checking')) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_9__["default"])(el, 'checking');

      _this.optInMemberToActiveCompetition(function () {
        _this.revalidateIfSuccessfullOptIn(function (competitionJson) {
          _this.settings.competition.activeCompetition = competitionJson.data; // _this.getLeaderboardData(1, function( data ){
          //  _this.settings.miniScoreBoard.loadScoreBoard( data );
          // });
          // extra action to load competition details on mini scoreboard opt-in - Product request

          _this.deactivateCompetitionsAndLeaderboards(function () {
            _this.settings.leaderboard.leaderboardData = [];

            _this.settings.mainWidget.initLayout(function () {
              _this.activeCompetitionDataRefresh();

              _this.settings.mainWidget.loadCompetitionDetails(function () {});
            });

            setTimeout(function () {
              _this.settings.miniScoreBoard.settings.container.style.display = 'none';
            }, 200);
          });

          Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'checking');
        });
      }); // Leaderboard details opt-in action

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-lb-details-optin-action') && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'checking')) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_9__["default"])(el, 'checking');

      _this.optInMemberToActiveCompetition(function () {
        _this.revalidateIfSuccessfullOptIn(function (competitionJson) {
          _this.settings.competition.activeCompetition = competitionJson.data;

          _this.settings.mainWidget.competitionDetailsOptInButtonState();

          Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'checking');
        });
      }); // Leaderboard details opt-in action

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-lb-optin-action') && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'checking')) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_9__["default"])(el, 'checking');

      _this.optInMemberToActiveCompetition(function () {
        _this.revalidateIfSuccessfullOptIn(function (competitionJson) {
          _this.settings.competition.activeCompetition = competitionJson.data;

          _this.settings.mainWidget.loadCompetitionDetails(function () {});

          Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'checking');
          el.parentNode.style.display = 'none';
        });
      }); // close mini scoreboard info area

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-widget-ms-information-close') && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'checking')) {
      _this.settings.miniScoreBoard.clearAll(); // close notification window

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-widget-notif-information-close') && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'checking')) {
      _this.settings.notifications.hideNotification(); // close leaderboard window

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-lb-header-close') || Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-ach-header-close') || Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-reward-header-close') || Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-inbox-header-close')) {
      _this.settings.mainWidget.hide(function () {
        _this.settings.miniScoreBoard.settings.active = true;
        _this.settings.miniScoreBoard.settings.container.style.display = 'block';

        _this.activeCompetitionDataRefresh();
      }); // load competition details

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-lb-details-content-label')) {
      if (_this.settings.competition.activeContest !== null) {
        _this.settings.mainWidget.loadCompetitionDetails(function () {});
      } // load achievement details

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-ach-list-more')) {
      _this.getAchievement(el.dataset.id, function (data) {
        _this.settings.mainWidget.loadAchievementDetails(data, function () {});
      }); // leaderboard details back button

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-lb-details-back-btn')) {
      _this.settings.mainWidget.hideCompetitionDetails(); // achievements details back button

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-ach-details-back-btn')) {
      _this.settings.mainWidget.hideAchievementDetails(function () {}); // rewards details back button

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-reward-details-back-btn')) {
      _this.settings.mainWidget.hideRewardDetails(function () {}); // messages details back button

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-inbox-details-back-btn')) {
      _this.settings.mainWidget.hideMessageDetails(function () {}); // load rewards details

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-rew-list-item') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_11__["default"])(el, '.cl-rew-list-item') !== null) {
      var rewardId = Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-rew-list-item') ? el.dataset.rewardId : Object(_utils_closest__WEBPACK_IMPORTED_MODULE_11__["default"])(el, '.cl-rew-list-item').dataset.rewardId;

      _this.getReward(rewardId, function (data) {
        _this.settings.mainWidget.loadRewardDetails(data, function () {});
      }); // load inbox details

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-inbox-list-item') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_11__["default"])(el, '.cl-inbox-list-item') !== null) {
      var messageId = Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-inbox-list-item') ? el.dataset.rewardId : Object(_utils_closest__WEBPACK_IMPORTED_MODULE_11__["default"])(el, '.cl-inbox-list-item').dataset.id;

      _this.getMessage(messageId, function (data) {
        _this.settings.mainWidget.loadMessageDetails(data, function () {});
      }); // claim reward

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-reward-claim-btn')) {
      _this.claimReward(el.dataset.id, function (data) {
        if (data.data.claimed) {
          _this.settings.mainWidget.loadRewards();

          Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_9__["default"])(el, 'cl-claimed');
          el.innerHTML = _this.settings.translation.rewards.claimed;
        } else {
          Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_10__["default"])(el, 'cl-claimed');
          el.innerHTML = _this.settings.translation.rewards.claim;
        }
      }); // load achievement details window from notification window

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-widget-notif-information-details-wrapper') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_11__["default"])(el, '.cl-widget-notif-information-details-wrapper') !== null) {
      _this.openWithTabAndAction('.cl-main-widget-navigation-ach-icon', function () {
        var id = Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-widget-notif-information-details-wrapper') ? el.dataset.id : Object(_utils_closest__WEBPACK_IMPORTED_MODULE_11__["default"])(el, '.cl-widget-notif-information-details-wrapper').dataset.id;

        _this.settings.notifications.hideNotification();

        _this.settings.mainWidget.hideAchievementDetails(function () {
          _this.getAchievement(id, function (data) {
            _this.settings.mainWidget.loadAchievementDetails(data);
          });
        });
      }); // primary widget navigation

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-navigation-item')) {
      _this.settings.mainWidget.navigationSwitch(el); // competition list

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-lb-header-list-icon')) {
      if (_this.settings.leaderboard.refreshInterval) {
        clearTimeout(_this.settings.leaderboard.refreshInterval);
      }

      _this.settings.mainWidget.loadCompetitionList(function () {
        _this.activeCompetitionDataRefresh();
      }, loadCompetitionListAjax); // load competition

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-tour-list-item') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_11__["default"])(el, '.cl-tour-list-item') !== null) {
      var tournamentId = Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-tour-list-item') ? el.dataset.id : Object(_utils_closest__WEBPACK_IMPORTED_MODULE_11__["default"])(el, '.cl-tour-list-item').dataset.id;

      var preLoader = _this.settings.mainWidget.preloader();

      preLoader.show(function () {
        _this.settings.mainWidget.settings.active = true;
        _this.settings.tournaments.activeCompetitionId = tournamentId;

        _this.activeCompetitionDataRefresh(function () {
          _this.settings.mainWidget.hideCompetitionList(function () {
            preLoader.hide();
          });
        });
      }); // hide competition list view
    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-main-widget-tournaments-back-btn')) {
      _this.settings.mainWidget.hideCompetitionList(); // mini scoreboard action to open primary widget

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-widget-ms-icon-wrapper') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_11__["default"])(el, '.cl-widget-ms-icon-wrapper') !== null || Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-widget-ms-information-wrapper') || Object(_utils_closest__WEBPACK_IMPORTED_MODULE_11__["default"])(el, '.cl-widget-ms-information-wrapper') !== null) {
      _this.clickedMiniScoreBoard(); // accordion navigation

    } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_8__["default"])(el, 'cl-accordion-label')) {
      _this.settings.mainWidget.accordionNavigation(el);
    }
  };

  this.eventListeners = function () {
    var _this = this;

    document.body.addEventListener('keyup', function (event) {
      switch (event.keyCode) {
        case 27:
          // on escape
          if (_this.settings.mainWidget.settings.active) {
            _this.settings.mainWidget.hide(function () {
              _this.settings.miniScoreBoard.settings.active = true;
              _this.settings.miniScoreBoard.settings.container.style.display = 'block';

              _this.activeCompetitionDataRefresh();
            });
          }

          break;
      }
    });

    if (_this.isMobile()) {
      document.body.addEventListener('touchend', function (event) {
        var el = event.target;

        if (!_this.settings.miniScoreBoard.settings.dragging) {
          _this.eventHandlers(el);
        }
      });
    } else {
      document.body.addEventListener('click', function (event) {
        var el = event.target;

        _this.eventHandlers(el);
      });
    }
  };

  this.closeEverything = function () {
    var _this = this;

    _this.deactivateCompetitionsAndLeaderboards(function () {
      _this.settings.leaderboard.leaderboardData = [];

      _this.settings.mainWidget.initLayout(function () {
        _this.activeCompetitionDataRefresh();
      });

      setTimeout(function () {
        _this.settings.miniScoreBoard.settings.container.style.display = 'none';
      }, 200);
    });

    _this.settings.mainWidget.hide();

    _this.settings.mainWidget.settings.preLoader.preLoaderActive = false;
  };

  this.isMobile = function () {
    return Object(_utils_isMobileTablet__WEBPACK_IMPORTED_MODULE_12__["default"])();
  };

  this.init = function () {
    var _this = this;

    _this.loadStylesheet(function () {
      _this.loadMember(function (member) {
        _this.loadWidgetTranslations(function () {
          if (_this.settings.miniScoreBoard === null) {
            _this.settings.notifications = new _Notifications__WEBPACK_IMPORTED_MODULE_15__["Notifications"]();
            _this.settings.miniScoreBoard = new _MiniScoreBoard__WEBPACK_IMPORTED_MODULE_16__["MiniScoreBoard"]({
              active: true
            });
            _this.settings.mainWidget = new _MainWidget__WEBPACK_IMPORTED_MODULE_17__["MainWidget"]();
            _this.settings.notifications.settings.lbWidget = _this;
            _this.settings.miniScoreBoard.settings.lbWidget = _this;
            _this.settings.mainWidget.settings.lbWidget = _this;

            _this.startup();

            _this.eventListeners();
          } else {
            _this.settings.mainWidget.hide(function () {
              _this.deactivateCompetitionsAndLeaderboards(function () {
                _this.settings.miniScoreBoard.settings.active = true;
                _this.settings.miniScoreBoard.settings.container.style.display = 'block';

                _this.startup();
              });
            });
          }
        });
      });
    });
  };

  if (this.settings.autoStart) {
    this.init();
  }
};

/***/ }),

/***/ "./src/javascript/modules/MainWidget.js":
/*!**********************************************!*\
  !*** ./src/javascript/modules/MainWidget.js ***!
  \**********************************************/
/*! exports provided: MainWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MainWidget", function() { return MainWidget; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_hasClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/hasClass */ "./src/javascript/utils/hasClass.js");
/* harmony import */ var _utils_removeClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/removeClass */ "./src/javascript/utils/removeClass.js");
/* harmony import */ var _utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/objectIterator */ "./src/javascript/utils/objectIterator.js");
/* harmony import */ var _utils_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/query */ "./src/javascript/utils/query.js");
/* harmony import */ var _utils_closest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/closest */ "./src/javascript/utils/closest.js");
/* harmony import */ var _utils_addClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/addClass */ "./src/javascript/utils/addClass.js");
/* harmony import */ var _utils_remove__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/remove */ "./src/javascript/utils/remove.js");
/* harmony import */ var _utils_appendNext__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/appendNext */ "./src/javascript/utils/appendNext.js");
/* harmony import */ var _utils_stripHtml__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/stripHtml */ "./src/javascript/utils/stripHtml.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }











var MainWidget = function MainWidget(options) {
  this.settings = {
    lbWidget: null,
    container: null,
    navigation: null,
    section: null,
    detailsContainer: null,
    tournamentListContainer: null,
    headerDate: null,
    preLoader: {
      preLoaderActive: false,
      preLoaderlastAttempt: null,
      preloaderCallbackRecovery: function preloaderCallbackRecovery() {}
    },
    achievement: {
      container: null,
      detailsContainer: null
    },
    reward: {
      container: null,
      detailsContainer: null
    },
    messages: {
      container: null,
      detailsContainer: null
    },
    leaderboard: {
      defaultEmptyList: 20,
      topResultSize: 3,
      header: null,
      container: null,
      list: null,
      topResults: null,
      timerInterval: null
    },
    tournamentsSection: {
      accordionLayout: [{
        label: 'Upcoming Tournaments',
        type: 'readyCompetitions',
        show: false,
        showTopResults: 1
      }, {
        label: 'Active Tournaments',
        type: 'activeCompetitions',
        show: true,
        showTopResults: 1
      }, {
        label: 'Finished Tournaments',
        type: 'finishedCompetitions',
        show: false,
        showTopResults: 1
      }]
    },
    rewardsSection: {
      accordionLayout: [{
        label: 'Available Rewards',
        type: 'availableRewards',
        show: true,
        showTopResults: 1
      }, {
        label: 'Claimed Rewards',
        type: 'rewards',
        show: false,
        showTopResults: 1
      }, {
        label: 'Expired Rewards',
        type: 'expiredRewards',
        show: false,
        showTopResults: 1
      }]
    },
    active: false,
    navigationSwitchLastAtempt: new Date().getTime(),
    navigationSwitchInProgress: false
  };

  if (typeof options !== 'undefined') {
    for (var opt in options) {
      if (options.hasOwnProperty(opt)) {
        this.settings[opt] = options[opt];
      }
    }
  }
  /**
   * Accordion style layout
   * - parameters:
   *      - label: String "Available rewards"
   *      - type: String "available-rewards"
   *      - shown: Boolean true/false
   * @param data Array
   * @param onLayout Function
   */


  this.accordionStyle = function (data, onLayout) {
    var _this = this;

    var accordionWrapper = document.createElement('div');
    accordionWrapper.setAttribute('class', 'cl-main-accordion-container');
    window.mapObject(data, function (entry) {
      var accordionSection = document.createElement('div');
      var accordionLabel = document.createElement('div');
      var topShownEntry = document.createElement('div');
      var accordionListContainer = document.createElement('div');
      var accordionList = document.createElement('div');
      accordionSection.setAttribute('class', 'cl-accordion ' + entry.type + (typeof entry.show === 'boolean' && entry.show ? ' cl-shown' : ''));
      accordionLabel.setAttribute('class', 'cl-accordion-label');
      topShownEntry.setAttribute('class', 'cl-accordion-entry');
      accordionListContainer.setAttribute('class', 'cl-accordion-list-container');
      accordionList.setAttribute('class', 'cl-accordion-list');

      if (typeof _this.settings.lbWidget.settings.translation.rewards[entry.type] !== 'undefined') {
        accordionLabel.innerHTML = _this.settings.lbWidget.settings.translation.rewards[entry.type];
      } else if (typeof _this.settings.lbWidget.settings.translation.tournaments[entry.type] !== 'undefined') {
        accordionLabel.innerHTML = _this.settings.lbWidget.settings.translation.tournaments[entry.type];
      } else {
        accordionLabel.innerHTML = entry.label;
      }

      if (typeof onLayout === 'function') {
        onLayout(accordionSection, accordionList, topShownEntry, entry);
      }

      accordionListContainer.appendChild(accordionList);
      accordionSection.appendChild(accordionLabel);
      accordionSection.appendChild(topShownEntry);
      accordionSection.appendChild(accordionListContainer);
      accordionWrapper.appendChild(accordionSection);
    });
    return accordionWrapper;
  };

  this.accordionNavigation = function (element) {
    // var _this = this;
    var parentEl = element.parentNode;

    if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_1__["default"])(parentEl, 'cl-shown')) {
      Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(parentEl, 'cl-shown');
    } else {
      Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_closest__WEBPACK_IMPORTED_MODULE_5__["default"])(parentEl, '.cl-main-accordion-container'), '.cl-shown'), function (obj) {
        Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(obj, 'cl-shown');
      });
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(parentEl, 'cl-shown');
    }
  };

  this.layout = function () {
    var _this = this;

    var wrapper = document.createElement('div');
    var innerWrapper = document.createElement('div');
    var navigationContainer = document.createElement('div');
    var navigationItems = document.createElement('div');
    var navigationItemLB = document.createElement('div');
    var navigationItemLBIcon = document.createElement('div');
    var navigationItemACH = document.createElement('div');
    var navigationItemACHIcon = document.createElement('div');
    var navigationItemRewards = document.createElement('div');
    var navigationItemRewardsIcon = document.createElement('div');
    var navigationItemInbox = document.createElement('div');
    var navigationItemInboxIcon = document.createElement('div');
    var mainSectionContainer = document.createElement('div');
    var preLoaderContainer = document.createElement('div');
    var preLoaderContent = document.createElement('div');
    var preLoaderBar1 = document.createElement('div');
    var preLoaderBar2 = document.createElement('div');
    var preLoaderBar3 = document.createElement('div');

    var sectionLB = _this.leaderboardAreaLayout();

    var sectionACH = _this.achievementsAreaLayout();

    var sectionRewards = _this.rewardsAreaLayout();

    var sectionInbox = _this.inboxAreaLayout();

    wrapper.setAttribute('class', 'cl-main-widget-wrapper');
    innerWrapper.setAttribute('class', 'cl-main-widget-inner-wrapper');
    navigationContainer.setAttribute('class', 'cl-main-widget-navigation-container');
    navigationItems.setAttribute('class', 'cl-main-widget-navigation-items');
    navigationItemLB.setAttribute('class', 'cl-main-widget-navigation-lb cl-active-nav');
    navigationItemLBIcon.setAttribute('class', 'cl-main-widget-navigation-lb-icon cl-main-navigation-item');
    navigationItemACH.setAttribute('class', 'cl-main-widget-navigation-ach');
    navigationItemACHIcon.setAttribute('class', 'cl-main-widget-navigation-ach-icon cl-main-navigation-item');
    navigationItemRewards.setAttribute('class', 'cl-main-widget-navigation-rewards');
    navigationItemRewardsIcon.setAttribute('class', 'cl-main-widget-navigation-rewards-icon cl-main-navigation-item');
    mainSectionContainer.setAttribute('class', 'cl-main-widget-section-container');
    preLoaderContainer.setAttribute('class', 'cl-main-widget-pre-loader');
    preLoaderContent.setAttribute('class', 'cl-main-widget-pre-loader-content');
    preLoaderBar1.setAttribute('class', 'cl-pre-loader-bar');
    preLoaderBar2.setAttribute('class', 'cl-pre-loader-bar');
    preLoaderBar3.setAttribute('class', 'cl-pre-loader-bar');
    preLoaderContent.appendChild(preLoaderBar1);
    preLoaderContent.appendChild(preLoaderBar2);
    preLoaderContent.appendChild(preLoaderBar3);
    preLoaderContainer.appendChild(preLoaderContent);
    navigationItemLB.appendChild(navigationItemLBIcon);
    navigationItems.appendChild(navigationItemLB);
    navigationItemACH.appendChild(navigationItemACHIcon);
    navigationItems.appendChild(navigationItemACH);
    navigationItemRewards.appendChild(navigationItemRewardsIcon);
    navigationItems.appendChild(navigationItemRewards);

    if (_this.settings.lbWidget.settings.messages.enable) {
      navigationItemInbox.setAttribute('class', 'cl-main-widget-navigation-inbox');
      navigationItemInboxIcon.setAttribute('class', 'cl-main-widget-navigation-inbox-icon cl-main-navigation-item');
      navigationItemInbox.appendChild(navigationItemInboxIcon);
      navigationItems.appendChild(navigationItemInbox);
    }

    navigationContainer.appendChild(navigationItems);
    mainSectionContainer.appendChild(sectionLB);
    mainSectionContainer.appendChild(sectionACH);
    mainSectionContainer.appendChild(sectionRewards);
    mainSectionContainer.appendChild(sectionInbox);
    mainSectionContainer.appendChild(preLoaderContainer);
    innerWrapper.appendChild(navigationContainer);
    innerWrapper.appendChild(mainSectionContainer);
    wrapper.appendChild(innerWrapper);
    return wrapper;
  };

  this.leaderboardAreaLayout = function () {
    var _this = this;

    var sectionLB = document.createElement('div');
    var sectionLBHeader = document.createElement('div');
    var sectionLBHeaderList = document.createElement('div');
    var sectionLBHeaderListIcon = document.createElement('div');
    var sectionLBHeaderLabel = document.createElement('div');
    var sectionLBHeaderDate = document.createElement('div');
    var sectionLBHeaderClose = document.createElement('div');
    var sectionLBDetails = document.createElement('div');
    var sectionLBDetailsInfo = document.createElement('div');
    var sectionLBDetailsInfoIcon = document.createElement('div');
    var sectionLBDetailsContentContainer = document.createElement('div');
    var sectionLBDetailsContentContainerLabel = document.createElement('div');
    var sectionLBDetailsContentContainerDate = document.createElement('div');
    var sectionLBLeaderboard = document.createElement('div');
    var sectionLBLeaderboardHeader = document.createElement('div');
    var sectionLBLeaderboardHeaderLabels = document.createElement('div');
    var sectionLBLeaderboardHeaderTopResults = document.createElement('div');
    var sectionLBLeaderboardBody = document.createElement('div');
    var sectionLBLeaderboardBodyResults = document.createElement('div');
    var sectionLBMissingMember = document.createElement('div');
    var sectionLBOptInContainer = document.createElement('div');
    var sectionLBOptInAction = document.createElement('a');
    var sectionLBFooter = document.createElement('div');
    var sectionLBFooterContent = document.createElement('div');
    var sectionTournamentDetailsContainer = document.createElement('div');
    var sectionTournamentDetailsHeader = document.createElement('div');
    var sectionTournamentDetailsHeaderLabel = document.createElement('div');
    var sectionTournamentDetailsHeaderDate = document.createElement('div');
    var sectionTournamentDetailsBackBtn = document.createElement('a');
    var sectionTournamentDetailsBodyContainer = document.createElement('div');
    var sectionTournamentDetailsBodyImageContainer = document.createElement('div');
    var sectionTournamentDetailsBody = document.createElement('div');
    var sectionTournamentDetailsOptInContainer = document.createElement('div');
    var sectionTournamentDetailsOptInAction = document.createElement('a');
    var sectionTournamentList = document.createElement('div');
    var sectionTournamentListBody = document.createElement('div');
    var sectionTournamentListBodyResults = document.createElement('div');
    var sectionTournamentBackAction = document.createElement('a');
    sectionLB.setAttribute('class', 'cl-main-widget-lb cl-main-section-item cl-main-active-section');
    sectionLBHeader.setAttribute('class', 'cl-main-widget-lb-header');
    sectionLBHeaderList.setAttribute('class', 'cl-main-widget-lb-header-list');
    sectionLBHeaderListIcon.setAttribute('class', 'cl-main-widget-lb-header-list-icon');
    sectionLBHeaderLabel.setAttribute('class', 'cl-main-widget-lb-header-label');
    sectionLBHeaderDate.setAttribute('class', 'cl-main-widget-lb-header-date');
    sectionLBHeaderClose.setAttribute('class', 'cl-main-widget-lb-header-close');
    sectionLBDetails.setAttribute('class', 'cl-main-widget-lb-details');
    sectionLBDetailsInfo.setAttribute('class', 'cl-main-widget-lb-details-info');
    sectionLBDetailsInfoIcon.setAttribute('class', 'cl-main-widget-lb-details-info-icon');
    sectionLBDetailsContentContainer.setAttribute('class', 'cl-main-widget-lb-details-content');
    sectionLBDetailsContentContainerLabel.setAttribute('class', 'cl-main-widget-lb-details-content-label');
    sectionLBDetailsContentContainerDate.setAttribute('class', 'cl-main-widget-lb-details-content-date'); // Leaderboard result container

    sectionLBLeaderboard.setAttribute('class', 'cl-main-widget-lb-leaderboard');
    sectionLBLeaderboardHeader.setAttribute('class', 'cl-main-widget-lb-leaderboard-header');
    sectionLBLeaderboardHeaderLabels.setAttribute('class', 'cl-main-widget-lb-leaderboard-header-labels');
    sectionLBLeaderboardHeaderTopResults.setAttribute('class', 'cl-main-widget-lb-leaderboard-header-top-res');
    sectionLBLeaderboardBody.setAttribute('class', 'cl-main-widget-lb-leaderboard-body');
    sectionLBLeaderboardBodyResults.setAttribute('class', 'cl-main-widget-lb-leaderboard-body-res');
    sectionLBMissingMember.setAttribute('class', 'cl-main-widget-lb-missing-member'); // footer

    sectionLBFooter.setAttribute('class', 'cl-main-widget-lb-footer');
    sectionLBFooterContent.setAttribute('class', 'cl-main-widget-lb-footer-content'); // details section

    sectionTournamentDetailsContainer.setAttribute('class', 'cl-main-widget-lb-details-container');
    sectionTournamentDetailsHeader.setAttribute('class', 'cl-main-widget-lb-details-header');
    sectionTournamentDetailsHeaderLabel.setAttribute('class', 'cl-main-widget-lb-details-header-label');
    sectionTournamentDetailsHeaderDate.setAttribute('class', 'cl-main-widget-lb-details-header-date');
    sectionTournamentDetailsBackBtn.setAttribute('class', 'cl-main-widget-lb-details-back-btn');
    sectionTournamentDetailsBodyContainer.setAttribute('class', 'cl-main-widget-lb-details-body-container');
    sectionTournamentDetailsBodyImageContainer.setAttribute('class', 'cl-main-widget-lb-details-body-image-cont');
    sectionTournamentDetailsBody.setAttribute('class', 'cl-main-widget-lb-details-body');
    sectionTournamentDetailsOptInContainer.setAttribute('class', 'cl-main-widget-lb-details-optin-container');
    sectionTournamentDetailsOptInAction.setAttribute('class', 'cl-main-widget-lb-details-optin-action');
    sectionTournamentList.setAttribute('class', 'cl-main-widget-tournaments-list');
    sectionTournamentBackAction.setAttribute('class', 'cl-main-widget-tournaments-back-btn');
    sectionTournamentListBody.setAttribute('class', 'cl-main-widget-tournaments-list-body');
    sectionTournamentListBodyResults.setAttribute('class', 'cl-main-widget-tournaments-list-body-res');
    sectionLBOptInContainer.setAttribute('class', 'cl-main-widget-lb-optin-container');
    sectionLBOptInAction.setAttribute('class', 'cl-main-widget-lb-optin-action');
    sectionLBHeaderLabel.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.label;
    sectionLBFooterContent.innerHTML = _this.settings.lbWidget.settings.translation.global.copy;
    sectionTournamentDetailsOptInAction.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
    sectionTournamentDetailsOptInAction.href = 'javascript:void(0);';
    sectionLBOptInAction.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
    sectionLBOptInAction.href = 'javascript:void(0);';
    sectionLBHeaderList.appendChild(sectionLBHeaderListIcon);
    sectionLBHeader.appendChild(sectionLBHeaderList);
    sectionLBHeader.appendChild(sectionLBHeaderLabel);
    sectionLBHeader.appendChild(sectionLBHeaderDate);
    sectionLBHeader.appendChild(sectionLBHeaderClose);
    sectionLBDetailsInfo.appendChild(sectionLBDetailsInfoIcon);
    sectionLBDetailsContentContainer.appendChild(sectionLBDetailsContentContainerLabel);
    sectionLBDetailsContentContainer.appendChild(sectionLBDetailsContentContainerDate);
    sectionLBDetails.appendChild(sectionLBDetailsInfo);
    sectionLBDetails.appendChild(sectionLBDetailsContentContainer);
    sectionLBLeaderboardHeader.appendChild(sectionLBLeaderboardHeaderLabels);
    sectionLBLeaderboard.appendChild(sectionLBLeaderboardHeader);
    sectionLBLeaderboard.appendChild(sectionLBLeaderboardHeaderTopResults);
    sectionLBLeaderboardBody.appendChild(sectionLBLeaderboardBodyResults);
    sectionLBLeaderboard.appendChild(sectionLBLeaderboardBody);
    sectionLBFooter.appendChild(sectionLBFooterContent);
    sectionTournamentListBody.appendChild(sectionTournamentListBodyResults);
    sectionTournamentList.appendChild(sectionTournamentListBody);
    sectionTournamentList.appendChild(sectionTournamentBackAction);
    sectionTournamentDetailsHeader.appendChild(sectionTournamentDetailsHeaderLabel);
    sectionTournamentDetailsHeader.appendChild(sectionTournamentDetailsHeaderDate);
    sectionTournamentDetailsContainer.appendChild(sectionTournamentDetailsHeader);
    sectionTournamentDetailsContainer.appendChild(sectionTournamentDetailsBackBtn);
    sectionTournamentDetailsBodyContainer.appendChild(sectionTournamentDetailsBodyImageContainer);
    sectionTournamentDetailsBodyContainer.appendChild(sectionTournamentDetailsBody);
    sectionTournamentDetailsContainer.appendChild(sectionTournamentDetailsBodyContainer);
    sectionTournamentDetailsOptInContainer.appendChild(sectionTournamentDetailsOptInAction);
    sectionTournamentDetailsContainer.appendChild(sectionTournamentDetailsOptInContainer);
    sectionLBOptInContainer.appendChild(sectionLBOptInAction);
    sectionLB.appendChild(sectionLBHeader);
    sectionLB.appendChild(sectionLBDetails);
    sectionLB.appendChild(sectionLBLeaderboard);
    sectionLB.appendChild(sectionLBMissingMember);
    sectionLB.appendChild(sectionLBOptInContainer);
    sectionLB.appendChild(sectionLBFooter);
    sectionLB.appendChild(sectionTournamentDetailsContainer);
    sectionLB.appendChild(sectionTournamentList);
    return sectionLB;
  };

  this.achievementsAreaLayout = function () {
    var _this = this;

    var sectionACH = document.createElement('div');
    var sectionACHHeader = document.createElement('div');
    var sectionACHHeaderLabel = document.createElement('div');
    var sectionACHHeaderDate = document.createElement('div');
    var sectionACHHeaderClose = document.createElement('div');
    var sectionACHDetails = document.createElement('div');
    var sectionACHDetailsInfo = document.createElement('div');
    var sectionACHDetailsInfoIcon = document.createElement('div');
    var sectionACHDetailsContentContainer = document.createElement('div');
    var sectionACHDetailsContentContainerLabel = document.createElement('div');
    var sectionACHDetailsContentContainerDate = document.createElement('div');
    var sectionACHList = document.createElement('div');
    var sectionACHListBody = document.createElement('div');
    var sectionACHListBodyResults = document.createElement('div');
    var sectionACHFooter = document.createElement('div');
    var sectionACHFooterContent = document.createElement('div');
    var sectionAchievementDetailsContainer = document.createElement('div');
    var sectionAchievementDetailsHeader = document.createElement('div');
    var sectionAchievementDetailsHeaderLabel = document.createElement('div');
    var sectionAchievementDetailsHeaderDate = document.createElement('div');
    var sectionAchievementDetailsBackBtn = document.createElement('a');
    var sectionAchievementDetailsBodyContainer = document.createElement('div');
    var sectionAchievementDetailsBodyImageContainer = document.createElement('div');
    var sectionAchievementDetailsBody = document.createElement('div');
    sectionACH.setAttribute('class', 'cl-main-widget-section-ach cl-main-section-item');
    sectionACHHeader.setAttribute('class', 'cl-main-widget-ach-header');
    sectionACHHeaderLabel.setAttribute('class', 'cl-main-widget-ach-header-label');
    sectionACHHeaderDate.setAttribute('class', 'cl-main-widget-ach-header-date');
    sectionACHHeaderClose.setAttribute('class', 'cl-main-widget-ach-header-close');
    sectionACHDetails.setAttribute('class', 'cl-main-widget-ach-details');
    sectionACHDetailsInfo.setAttribute('class', 'cl-main-widget-ach-details-info');
    sectionACHDetailsInfoIcon.setAttribute('class', 'cl-main-widget-ach-details-info-icon');
    sectionACHDetailsContentContainer.setAttribute('class', 'cl-main-widget-ach-details-content');
    sectionACHDetailsContentContainerLabel.setAttribute('class', 'cl-main-widget-ach-details-content-label');
    sectionACHDetailsContentContainerDate.setAttribute('class', 'cl-main-widget-ach-details-content-date'); // Leaderboard result container

    sectionACHList.setAttribute('class', 'cl-main-widget-ach-list');
    sectionACHListBody.setAttribute('class', 'cl-main-widget-ach-list-body');
    sectionACHListBodyResults.setAttribute('class', 'cl-main-widget-ach-list-body-res'); // footer

    sectionACHFooter.setAttribute('class', 'cl-main-widget-ach-footer');
    sectionACHFooterContent.setAttribute('class', 'cl-main-widget-ach-footer-content'); // details section

    sectionAchievementDetailsContainer.setAttribute('class', 'cl-main-widget-ach-details-container');
    sectionAchievementDetailsHeader.setAttribute('class', 'cl-main-widget-ach-details-header');
    sectionAchievementDetailsHeaderLabel.setAttribute('class', 'cl-main-widget-ach-details-header-label');
    sectionAchievementDetailsHeaderDate.setAttribute('class', 'cl-main-widget-ach-details-header-date');
    sectionAchievementDetailsBackBtn.setAttribute('class', 'cl-main-widget-ach-details-back-btn');
    sectionAchievementDetailsBodyContainer.setAttribute('class', 'cl-main-widget-ach-details-body-container');
    sectionAchievementDetailsBodyImageContainer.setAttribute('class', 'cl-main-widget-ach-details-body-image-cont');
    sectionAchievementDetailsBody.setAttribute('class', 'cl-main-widget-ach-details-body');
    sectionACHHeaderLabel.innerHTML = _this.settings.lbWidget.settings.translation.achievements.label;
    sectionACHFooterContent.innerHTML = _this.settings.lbWidget.settings.translation.global.copy;
    sectionAchievementDetailsHeader.appendChild(sectionAchievementDetailsHeaderLabel);
    sectionAchievementDetailsHeader.appendChild(sectionAchievementDetailsHeaderDate);
    sectionAchievementDetailsContainer.appendChild(sectionAchievementDetailsHeader);
    sectionAchievementDetailsContainer.appendChild(sectionAchievementDetailsBackBtn);
    sectionAchievementDetailsBodyContainer.appendChild(sectionAchievementDetailsBodyImageContainer);
    sectionAchievementDetailsBodyContainer.appendChild(sectionAchievementDetailsBody);
    sectionAchievementDetailsContainer.appendChild(sectionAchievementDetailsBodyContainer);
    sectionACHHeader.appendChild(sectionACHHeaderLabel);
    sectionACHHeader.appendChild(sectionACHHeaderDate);
    sectionACHHeader.appendChild(sectionACHHeaderClose);
    sectionACHDetailsInfo.appendChild(sectionACHDetailsInfoIcon);
    sectionACHDetailsContentContainer.appendChild(sectionACHDetailsContentContainerLabel);
    sectionACHDetailsContentContainer.appendChild(sectionACHDetailsContentContainerDate);
    sectionACHDetails.appendChild(sectionACHDetailsInfo);
    sectionACHDetails.appendChild(sectionACHDetailsContentContainer);
    sectionACHListBody.appendChild(sectionACHListBodyResults);
    sectionACHList.appendChild(sectionACHListBody);
    sectionACHFooter.appendChild(sectionACHFooterContent);
    sectionACH.appendChild(sectionACHHeader);
    sectionACH.appendChild(sectionACHDetails);
    sectionACH.appendChild(sectionACHList);
    sectionACH.appendChild(sectionACHFooter);
    sectionACH.appendChild(sectionAchievementDetailsContainer);
    return sectionACH;
  };

  this.rewardsAreaLayout = function () {
    var _this = this;

    var sectionRewards = document.createElement('div');
    var sectionRewardsHeader = document.createElement('div');
    var sectionRewardsHeaderLabel = document.createElement('div');
    var sectionRewardsHeaderDate = document.createElement('div');
    var sectionRewardsHeaderClose = document.createElement('div');
    var sectionRewardsDetails = document.createElement('div');
    var sectionRewardsDetailsInfo = document.createElement('div');
    var sectionRewardsDetailsInfoIcon = document.createElement('div');
    var sectionRewardsDetailsContentContainer = document.createElement('div');
    var sectionRewardsDetailsContentContainerLabel = document.createElement('div');
    var sectionRewardsDetailsContentContainerDate = document.createElement('div');
    var sectionRewardsList = document.createElement('div');
    var sectionRewardsListBody = document.createElement('div');
    var sectionRewardsListBodyResults = document.createElement('div');
    var sectionRewardsFooter = document.createElement('div');
    var sectionRewardsFooterContent = document.createElement('div');
    var sectionRewardsDetailsContainer = document.createElement('div');
    var sectionRewardsDetailsHeader = document.createElement('div');
    var sectionRewardsDetailsHeaderLabel = document.createElement('div');
    var sectionRewardsDetailsHeaderDate = document.createElement('div');
    var sectionRewardsDetailsBackBtn = document.createElement('a');
    var sectionRewardsDetailsBodyContainer = document.createElement('div');
    var sectionRewardsDetailsBodyImageContainer = document.createElement('div');
    var sectionRewardsDetailsBody = document.createElement('div');
    var sectionRewardsWinningsContainer = document.createElement('div');
    var sectionRewardsWinningsIcon = document.createElement('div');
    var sectionRewardsWinningsValue = document.createElement('div');
    var sectionRewardsClaimContainer = document.createElement('div');
    var sectionRewardsClaimBtn = document.createElement('a');
    sectionRewards.setAttribute('class', 'cl-main-widget-section-reward cl-main-section-item');
    sectionRewardsHeader.setAttribute('class', 'cl-main-widget-reward-header');
    sectionRewardsHeaderLabel.setAttribute('class', 'cl-main-widget-reward-header-label');
    sectionRewardsHeaderDate.setAttribute('class', 'cl-main-widget-reward-header-date');
    sectionRewardsHeaderClose.setAttribute('class', 'cl-main-widget-reward-header-close');
    sectionRewardsDetails.setAttribute('class', 'cl-main-widget-reward-details');
    sectionRewardsDetailsInfo.setAttribute('class', 'cl-main-widget-reward-details-info');
    sectionRewardsDetailsInfoIcon.setAttribute('class', 'cl-main-widget-reward-details-info-icon');
    sectionRewardsDetailsContentContainer.setAttribute('class', 'cl-main-widget-reward-details-content');
    sectionRewardsDetailsContentContainerLabel.setAttribute('class', 'cl-main-widget-reward-details-content-label');
    sectionRewardsDetailsContentContainerDate.setAttribute('class', 'cl-main-widget-reward-details-content-date'); // Leaderboard result container

    sectionRewardsList.setAttribute('class', 'cl-main-widget-reward-list');
    sectionRewardsListBody.setAttribute('class', 'cl-main-widget-reward-list-body');
    sectionRewardsListBodyResults.setAttribute('class', 'cl-main-widget-reward-list-body-res'); // footer

    sectionRewardsFooter.setAttribute('class', 'cl-main-widget-reward-footer');
    sectionRewardsFooterContent.setAttribute('class', 'cl-main-widget-reward-footer-content'); // details section

    sectionRewardsDetailsContainer.setAttribute('class', 'cl-main-widget-reward-details-container');
    sectionRewardsDetailsHeader.setAttribute('class', 'cl-main-widget-reward-details-header');
    sectionRewardsDetailsHeaderLabel.setAttribute('class', 'cl-main-widget-reward-details-header-label');
    sectionRewardsDetailsHeaderDate.setAttribute('class', 'cl-main-widget-reward-details-header-date');
    sectionRewardsDetailsBackBtn.setAttribute('class', 'cl-main-widget-reward-details-back-btn');
    sectionRewardsDetailsBodyContainer.setAttribute('class', 'cl-main-widget-reward-details-body-container');
    sectionRewardsDetailsBodyImageContainer.setAttribute('class', 'cl-main-widget-reward-details-body-image-cont');
    sectionRewardsDetailsBody.setAttribute('class', 'cl-main-widget-reward-details-body');
    sectionRewardsWinningsContainer.setAttribute('class', 'cl-main-widget-reward-winnings-container');
    sectionRewardsWinningsIcon.setAttribute('class', 'cl-main-widget-reward-winnings-icon');
    sectionRewardsWinningsValue.setAttribute('class', 'cl-main-widget-reward-winnings-value');
    sectionRewardsClaimContainer.setAttribute('class', 'cl-main-widget-reward-claim-container');
    sectionRewardsClaimBtn.setAttribute('class', 'cl-main-widget-reward-claim-btn');
    sectionRewardsHeaderLabel.innerHTML = _this.settings.lbWidget.settings.translation.rewards.label;
    sectionRewardsFooterContent.innerHTML = _this.settings.lbWidget.settings.translation.global.copy;
    sectionRewardsClaimBtn.innerHTML = _this.settings.lbWidget.settings.translation.rewards.claim;
    sectionRewardsWinningsContainer.appendChild(sectionRewardsWinningsIcon);
    sectionRewardsWinningsContainer.appendChild(sectionRewardsWinningsValue);
    sectionRewardsClaimContainer.appendChild(sectionRewardsClaimBtn);
    sectionRewardsDetailsHeader.appendChild(sectionRewardsDetailsHeaderLabel);
    sectionRewardsDetailsHeader.appendChild(sectionRewardsDetailsHeaderDate);
    sectionRewardsDetailsContainer.appendChild(sectionRewardsDetailsHeader);
    sectionRewardsDetailsContainer.appendChild(sectionRewardsDetailsBackBtn);
    sectionRewardsDetailsBodyContainer.appendChild(sectionRewardsDetailsBodyImageContainer);
    sectionRewardsDetailsBodyContainer.appendChild(sectionRewardsDetailsBody);
    sectionRewardsDetailsBodyContainer.appendChild(sectionRewardsWinningsContainer);
    sectionRewardsDetailsContainer.appendChild(sectionRewardsDetailsBodyContainer);
    sectionRewardsDetailsContainer.appendChild(sectionRewardsClaimContainer);
    sectionRewardsHeader.appendChild(sectionRewardsHeaderLabel);
    sectionRewardsHeader.appendChild(sectionRewardsHeaderDate);
    sectionRewardsHeader.appendChild(sectionRewardsHeaderClose);
    sectionRewardsDetailsInfo.appendChild(sectionRewardsDetailsInfoIcon);
    sectionRewardsDetailsContentContainer.appendChild(sectionRewardsDetailsContentContainerLabel);
    sectionRewardsDetailsContentContainer.appendChild(sectionRewardsDetailsContentContainerDate);
    sectionRewardsDetails.appendChild(sectionRewardsDetailsInfo);
    sectionRewardsDetails.appendChild(sectionRewardsDetailsContentContainer);
    sectionRewardsListBody.appendChild(sectionRewardsListBodyResults);
    sectionRewardsList.appendChild(sectionRewardsListBody);
    sectionRewardsFooter.appendChild(sectionRewardsFooterContent);
    sectionRewards.appendChild(sectionRewardsHeader);
    sectionRewards.appendChild(sectionRewardsDetails);
    sectionRewards.appendChild(sectionRewardsList);
    sectionRewards.appendChild(sectionRewardsFooter);
    sectionRewards.appendChild(sectionRewardsDetailsContainer);
    return sectionRewards;
  };

  this.inboxAreaLayout = function () {
    var _this = this;

    var sectionInbox = document.createElement('div');
    var sectionInboxHeader = document.createElement('div');
    var sectionInboxHeaderLabel = document.createElement('div');
    var sectionInboxHeaderDate = document.createElement('div');
    var sectionInboxHeaderClose = document.createElement('div');
    var sectionInboxDetails = document.createElement('div');
    var sectionInboxDetailsInfo = document.createElement('div');
    var sectionInboxDetailsInfoIcon = document.createElement('div');
    var sectionInboxDetailsContentContainer = document.createElement('div');
    var sectionInboxDetailsContentContainerLabel = document.createElement('div');
    var sectionInboxDetailsContentContainerDate = document.createElement('div');
    var sectionInboxList = document.createElement('div');
    var sectionInboxListBody = document.createElement('div');
    var sectionInboxListBodyResults = document.createElement('div');
    var sectionInboxFooter = document.createElement('div');
    var sectionInboxFooterContent = document.createElement('div');
    var sectionInboxDetailsContainer = document.createElement('div');
    var sectionInboxDetailsHeader = document.createElement('div');
    var sectionInboxDetailsHeaderLabel = document.createElement('div');
    var sectionInboxDetailsHeaderDate = document.createElement('div');
    var sectionInboxDetailsBackBtn = document.createElement('a');
    var sectionInboxDetailsBodyContainer = document.createElement('div');
    var sectionInboxDetailsBody = document.createElement('div');
    sectionInbox.setAttribute('class', 'cl-main-widget-section-inbox cl-main-section-item');
    sectionInboxHeader.setAttribute('class', 'cl-main-widget-inbox-header');
    sectionInboxHeaderLabel.setAttribute('class', 'cl-main-widget-inbox-header-label');
    sectionInboxHeaderDate.setAttribute('class', 'cl-main-widget-inbox-header-date');
    sectionInboxHeaderClose.setAttribute('class', 'cl-main-widget-inbox-header-close');
    sectionInboxDetails.setAttribute('class', 'cl-main-widget-inbox-details');
    sectionInboxDetailsInfo.setAttribute('class', 'cl-main-widget-inbox-details-info');
    sectionInboxDetailsInfoIcon.setAttribute('class', 'cl-main-widget-inbox-details-info-icon');
    sectionInboxDetailsContentContainer.setAttribute('class', 'cl-main-widget-inbox-details-content');
    sectionInboxDetailsContentContainerLabel.setAttribute('class', 'cl-main-widget-inbox-details-content-label');
    sectionInboxDetailsContentContainerDate.setAttribute('class', 'cl-main-widget-inbox-details-content-date'); // Leaderboard result container

    sectionInboxList.setAttribute('class', 'cl-main-widget-inbox-list');
    sectionInboxListBody.setAttribute('class', 'cl-main-widget-inbox-list-body');
    sectionInboxListBodyResults.setAttribute('class', 'cl-main-widget-inbox-list-body-res'); // footer

    sectionInboxFooter.setAttribute('class', 'cl-main-widget-inbox-footer');
    sectionInboxFooterContent.setAttribute('class', 'cl-main-widget-inbox-footer-content'); // details section

    sectionInboxDetailsContainer.setAttribute('class', 'cl-main-widget-inbox-details-container');
    sectionInboxDetailsHeader.setAttribute('class', 'cl-main-widget-inbox-details-header');
    sectionInboxDetailsHeaderLabel.setAttribute('class', 'cl-main-widget-inbox-details-header-label');
    sectionInboxDetailsHeaderDate.setAttribute('class', 'cl-main-widget-inbox-details-header-date');
    sectionInboxDetailsBackBtn.setAttribute('class', 'cl-main-widget-inbox-details-back-btn');
    sectionInboxDetailsBodyContainer.setAttribute('class', 'cl-main-widget-inbox-details-body-container');
    sectionInboxDetailsBody.setAttribute('class', 'cl-main-widget-inbox-details-body');
    sectionInboxHeaderLabel.innerHTML = _this.settings.lbWidget.settings.translation.messages.label;
    sectionInboxFooterContent.innerHTML = _this.settings.lbWidget.settings.translation.global.copy;
    sectionInboxHeader.appendChild(sectionInboxHeaderLabel);
    sectionInboxHeader.appendChild(sectionInboxHeaderDate);
    sectionInboxHeader.appendChild(sectionInboxHeaderClose);
    sectionInboxDetailsInfo.appendChild(sectionInboxDetailsInfoIcon);
    sectionInboxDetailsContentContainer.appendChild(sectionInboxDetailsContentContainerLabel);
    sectionInboxDetailsContentContainer.appendChild(sectionInboxDetailsContentContainerDate);
    sectionInboxDetails.appendChild(sectionInboxDetailsInfo);
    sectionInboxDetails.appendChild(sectionInboxDetailsContentContainer);
    sectionInboxListBody.appendChild(sectionInboxListBodyResults);
    sectionInboxList.appendChild(sectionInboxListBody);
    sectionInboxDetailsHeader.appendChild(sectionInboxDetailsHeaderLabel);
    sectionInboxDetailsHeader.appendChild(sectionInboxDetailsHeaderDate);
    sectionInboxDetailsContainer.appendChild(sectionInboxDetailsHeader);
    sectionInboxDetailsContainer.appendChild(sectionInboxDetailsBackBtn);
    sectionInboxDetailsBodyContainer.appendChild(sectionInboxDetailsBody);
    sectionInboxDetailsContainer.appendChild(sectionInboxDetailsBodyContainer);
    sectionInboxFooter.appendChild(sectionInboxFooterContent);
    sectionInbox.appendChild(sectionInboxHeader);
    sectionInbox.appendChild(sectionInboxDetails);
    sectionInbox.appendChild(sectionInboxList);
    sectionInbox.appendChild(sectionInboxFooter);
    sectionInbox.appendChild(sectionInboxDetailsContainer);
    return sectionInbox;
  };

  this.leaderboardHeader = function () {
    var _this = this;

    var rankCol = document.createElement('div');
    var iconCol = document.createElement('div');
    var nameCol = document.createElement('div');
    var growthCol = document.createElement('div');
    var pointsCol = document.createElement('div');
    rankCol.setAttribute('class', 'cl-rank-col cl-col');
    iconCol.setAttribute('class', 'cl-icon-col cl-col');
    nameCol.setAttribute('class', 'cl-name-col cl-col');
    growthCol.setAttribute('class', 'cl-growth-col cl-col');
    pointsCol.setAttribute('class', 'cl-points-col cl-col');
    rankCol.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.rank;
    iconCol.innerHTML = '';
    nameCol.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.name;
    growthCol.innerHTML = '';
    pointsCol.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.points;

    _this.settings.leaderboard.header.appendChild(rankCol);

    _this.settings.leaderboard.header.appendChild(iconCol);

    _this.settings.leaderboard.header.appendChild(nameCol);

    _this.settings.leaderboard.header.appendChild(growthCol);

    _this.settings.leaderboard.header.appendChild(pointsCol);

    var rewardCol = document.createElement('div');
    var rewardEnabled = typeof _this.settings.lbWidget.settings.competition.activeContest !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest !== null && typeof _this.settings.lbWidget.settings.competition.activeContest.rewards !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest.rewards.length > 0;
    rewardCol.setAttribute('class', 'cl-reward-col cl-col' + (rewardEnabled ? ' cl-col-reward-enabled' : ''));
    rewardCol.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.prize;
    Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(_this.settings.leaderboard.header, 'cl-reward-enabled');

    _this.settings.leaderboard.header.appendChild(rewardCol);
  };

  this.leaderboardRow = function (rank, icon, name, change, growth, points, reward, count, memberFound) {
    var _this = this;

    var cellWrapper = document.createElement('div');
    var rankCel = document.createElement('div');
    var rankCelValue = document.createElement('div');
    var iconCel = document.createElement('div');
    var iconCelImg = new Image();
    var nameCel = document.createElement('div');
    var growthCel = document.createElement('div');
    var pointsCel = document.createElement('div');
    var memberFoundClass = memberFound ? ' cl-lb-member-row' : '';
    cellWrapper.setAttribute('class', 'cl-lb-row cl-lb-rank-' + rank + ' cl-lb-count-' + count + memberFoundClass);
    rankCel.setAttribute('class', 'cl-rank-col cl-col cl-rank-' + rank);
    rankCelValue.setAttribute('class', 'cl-rank-col-value');
    iconCel.setAttribute('class', 'cl-icon-col cl-col');
    iconCelImg.setAttribute('class', 'cl-icon-col-img');
    nameCel.setAttribute('class', 'cl-name-col cl-col');
    growthCel.setAttribute('class', 'cl-growth-col cl-col');
    pointsCel.setAttribute('class', 'cl-points-col cl-col');
    cellWrapper.dataset.rank = rank;
    rankCelValue.innerHTML = rank;
    nameCel.innerHTML = name;
    growthCel.dataset.growth = change < 0 ? 'down' : change > 0 ? 'up' : 'same';
    growthCel.dataset.change = change;
    growthCel.innerHTML = growth;
    pointsCel.innerHTML = points;

    if (icon.length > 0) {
      iconCelImg.src = icon;
      iconCelImg.alt = name;
    } else {
      iconCelImg.style.display = 'none';
    }

    rankCel.appendChild(rankCelValue);
    cellWrapper.appendChild(rankCel);
    iconCel.appendChild(iconCelImg);
    cellWrapper.appendChild(iconCel);
    cellWrapper.appendChild(nameCel);
    cellWrapper.appendChild(growthCel);
    cellWrapper.appendChild(pointsCel);
    var rewardCel = document.createElement('div');
    var rewardEnabled = typeof _this.settings.lbWidget.settings.competition.activeContest !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest !== null && typeof _this.settings.lbWidget.settings.competition.activeContest.rewards !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest.rewards.length > 0;
    rewardCel.setAttribute('class', 'cl-reward-col cl-col' + (rewardEnabled ? ' cl-col-reward-enabled' : ''));
    rewardCel.innerHTML = typeof reward !== 'undefined' && reward !== null ? reward : '';
    Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(cellWrapper, 'cl-reward-enabled');
    cellWrapper.appendChild(rewardCel);
    return cellWrapper;
  };

  this.leaderboardRowUpdate = function (rank, icon, name, change, growth, points, reward, count, memberFound, onMissing) {
    var _this = this;

    var cellRow = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.container, '.cl-lb-rank-' + rank + '.cl-lb-count-' + count);

    if (cellRow === null) {
      onMissing(rank, icon, name, change, growth, points, reward, count, memberFound);
    } else {
      var rankCel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(cellRow, '.cl-rank-col-value');
      var iconCel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(cellRow, '.cl-icon-col-img');
      var nameCel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(cellRow, '.cl-name-col');
      var growthCel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(cellRow, '.cl-growth-col');
      var pointsCel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(cellRow, '.cl-points-col');
      var memberFoundClass = 'cl-lb-member-row';
      var rowHasClass = Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_1__["default"])(cellRow, memberFoundClass);

      if (count > 0 && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_1__["default"])(cellRow, 'cl-shared-rank')) {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(cellRow, 'cl-shared-rank');
      }

      if (memberFound && !rowHasClass) {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(cellRow, memberFoundClass);
      } else if (!memberFound && rowHasClass) {
        Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(cellRow, memberFoundClass);
      }

      cellRow.dataset.rank = rank;
      rankCel.innerHTML = rank;
      nameCel.innerHTML = name;
      growthCel.dataset.growth = change < 0 ? 'down' : change > 0 ? 'up' : 'same';
      growthCel.dataset.change = change;
      growthCel.innerHTML = growth;
      pointsCel.innerHTML = points;

      if (icon.length > 0) {
        iconCel.src = icon;
        iconCel.alt = name;
        iconCel.style.display = 'block';
      } else {
        iconCel.style.display = 'none';
      }

      if (typeof _this.settings.lbWidget.settings.competition.activeContest !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest !== null && typeof _this.settings.lbWidget.settings.competition.activeContest.rewards !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest.rewards.length > 0) {
        var rewardCel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(cellRow, '.cl-reward-col');

        if (rewardCel !== null) {
          rewardCel.innerHTML = typeof reward !== 'undefined' && reward !== null ? reward : '';
        }
      }
    }
  };

  this.populateLeaderboardResultsWithDefaultEntries = function () {
    var _this = this;

    var topResults = [];
    var remainingResults = [];

    for (var i = 0; i < _this.settings.leaderboard.topResultSize; i++) {
      var rank = i + 1;
      topResults.push({
        name: '--',
        rank: rank,
        points: '--',
        memberId: '',
        memberRefId: ''
      });
    }

    for (var s = _this.settings.leaderboard.topResultSize; s < _this.settings.leaderboard.defaultEmptyList; s++) {
      var _rank = s + 1;

      remainingResults.push({
        name: '--',
        rank: _rank,
        points: '--',
        memberId: '',
        memberRefId: ''
      });
    }

    _this.updateLeaderboardTopResults(topResults);

    _this.updateLeaderboardResults(remainingResults);
  };

  this.updateLeaderboardTopResults = function (topResults) {
    var _this = this;

    var rankCheck = [];
    var cleanupRankCheck = []; // cleanup

    window.mapObject(topResults, function (lb) {
      cleanupRankCheck.push(lb.rank);
      Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.topResults, '.cl-lb-rank-' + lb.rank + '.cl-shared-rank'), function (obj) {
        Object(_utils_remove__WEBPACK_IMPORTED_MODULE_7__["default"])(obj);
      });
    });
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.topResults, '.cl-lb-row'), function (obj) {
      var rank = parseInt(obj.dataset.rank);

      if (cleanupRankCheck.indexOf(rank) === -1 && rank > _this.settings.leaderboard.defaultEmptyList) {
        Object(_utils_remove__WEBPACK_IMPORTED_MODULE_7__["default"])(obj);
      }
    });
    window.mapObject(topResults, function (lb) {
      var count = 0;

      var icon = _this.settings.lbWidget.populateIdenticonBase64Image(lb.memberId);

      var memberFound = _this.settings.lbWidget.settings.memberId === lb.memberId || _this.settings.lbWidget.settings.memberId === lb.memberRefId;
      var memberName = memberFound ? _this.settings.lbWidget.settings.translation.leaderboard.you : lb.name;

      var reward = _this.getReward(lb.rank);

      var change = typeof lb.change === 'undefined' ? 0 : lb.change;
      var growthType = change < 0 ? 'down' : change > 0 ? 'up' : 'same';
      var growthIcon = "<span class='cl-growth-icon cl-growth-" + growthType + "'></span>";

      if (rankCheck.indexOf(lb.rank) !== -1) {
        for (var rc = 0; rc < rankCheck.length; rc++) {
          if (lb.rank === rankCheck[rc]) {
            count++;
          }
        }
      }

      _this.leaderboardRowUpdate(lb.rank, icon, // icon
      memberName, change, growthIcon, // growth
      lb.points, reward, // reward
      count, memberFound, function (rank, icon, name, change, growth, points, reward, count, memberFound) {
        var newRow = _this.leaderboardRow(rank, icon, name, change, growth, points, reward, count, memberFound);

        var prevCellRow = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.container, '.cl-lb-rank-' + rank + '.cl-lb-count-' + (count - 1));

        if (prevCellRow !== null && typeof prevCellRow.length === 'undefined') {
          Object(_utils_appendNext__WEBPACK_IMPORTED_MODULE_8__["default"])(prevCellRow, newRow);
        } else {
          _this.settings.leaderboard.topResults.appendChild(newRow);
        }
      });

      rankCheck.push(lb.rank);
    });
  };

  this.getReward = function (rank) {
    var _this = this;

    var rewardResponse = [];

    if (typeof _this.settings.lbWidget.settings.competition.activeContest !== 'undefined' && _this.settings.lbWidget.settings.competition.activeContest !== null) {
      window.mapObject(_this.settings.lbWidget.settings.competition.activeContest.rewards, function (reward) {
        if (reward.rewardRank instanceof Array && reward.rewardRank.indexOf(rank) !== -1) {
          rewardResponse.push(_this.settings.lbWidget.settings.rewards.rewardFormatter(reward));
        }
      });
    }

    return rewardResponse.join(', ');
  };

  this.updateLeaderboardResults = function (remainingResults) {
    var _this = this;

    var rankCheck = [];
    var cleanupRankCheck = []; // cleanup

    window.mapObject(remainingResults, function (lb) {
      cleanupRankCheck.push(lb.rank);
      Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.list, '.cl-lb-rank-' + lb.rank + '.cl-shared-rank'), function (obj) {
        Object(_utils_remove__WEBPACK_IMPORTED_MODULE_7__["default"])(obj);
      });
    });
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.container, '.cl-lb-row'), function (obj) {
      try {
        var rank = parseInt(obj.dataset.rank);

        if (cleanupRankCheck.indexOf(rank) === -1 && rank > _this.settings.leaderboard.defaultEmptyList) {
          Object(_utils_remove__WEBPACK_IMPORTED_MODULE_7__["default"])(obj);
        }
      } catch (e) {
        console.log(obj.dataset, obj.attributes, obj);
        console.error(e);
      }
    });
    window.mapObject(remainingResults, function (lb) {
      var count = 0;

      var icon = _this.settings.lbWidget.populateIdenticonBase64Image(lb.memberId);

      var memberFound = _this.settings.lbWidget.settings.memberId === lb.memberId || _this.settings.lbWidget.settings.memberId === lb.memberRefId;
      var memberName = memberFound ? _this.settings.lbWidget.settings.translation.leaderboard.you : lb.name;

      var reward = _this.getReward(lb.rank);

      var change = typeof lb.change === 'undefined' ? 0 : lb.change;
      var growthType = change < 0 ? 'down' : change > 0 ? 'up' : 'same';
      var growthIcon = "<span class='cl-growth-icon cl-growth-" + growthType + "'></span>";

      if (rankCheck.indexOf(lb.rank) !== -1) {
        for (var rc = 0; rc < rankCheck.length; rc++) {
          if (lb.rank === rankCheck[rc]) {
            count++;
          }
        }
      }

      _this.leaderboardRowUpdate(lb.rank, icon, // icon
      memberName, change, growthIcon, // growth
      lb.points, reward, count, memberFound, function (rank, icon, name, change, growth, points, reward, count, memberFound) {
        var newRow = _this.leaderboardRow(rank, icon, name, name, growth, points, reward, count, memberFound);

        var prevCellRow = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.container, '.cl-lb-rank-' + rank + '.cl-lb-count-' + (count - 1));

        if (prevCellRow !== null && typeof prevCellRow.length === 'undefined') {
          Object(_utils_appendNext__WEBPACK_IMPORTED_MODULE_8__["default"])(prevCellRow, newRow);
        } else {
          _this.settings.leaderboard.list.appendChild(newRow);
        }
      });

      rankCheck.push(lb.rank);
    });
  };

  this.updateLeaderboard = function () {
    var _this = this;

    var topResults = [];
    var remainingResults = [];

    _this.populateLeaderboardResultsWithDefaultEntries();

    window.mapObject(_this.settings.lbWidget.settings.leaderboard.leaderboardData, function (lb) {
      if (lb.rank <= _this.settings.leaderboard.topResultSize) {
        topResults.push(lb);
      } else {
        remainingResults.push(lb);
      }
    });

    _this.updateLeaderboardTopResults(topResults);

    _this.updateLeaderboardResults(remainingResults);

    var member = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.list, '.cl-lb-member-row');

    if (member !== null) {
      _this.missingMember(_this.isElementVisibleInView(member, _this.settings.leaderboard.list.parentNode));
    }
  };

  this.updateLeaderboardTime = function () {
    var _this = this;

    var diff = moment__WEBPACK_IMPORTED_MODULE_0___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledStart).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()());

    var date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));

    if (_this.settings.leaderboard.timerInterval) {
      clearTimeout(_this.settings.leaderboard.timerInterval);
    }

    if (diff < 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode === 0) {
      date = '';
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode > 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode < 3) {
      diff = moment__WEBPACK_IMPORTED_MODULE_0___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledEnd).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()());
      date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 3) {
      date = _this.settings.lbWidget.settings.translation.tournaments.finishing;
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode >= 4) {
      date = _this.settings.lbWidget.settings.translation.tournaments.finished;
    }

    _this.settings.headerDate.innerHTML = date;
    _this.settings.detailsContainerDate.innerHTML = date;
    _this.settings.leaderboard.timerInterval = setTimeout(function () {
      _this.updateLeaderboardTime();
    }, 1000);
  };

  this.leaderboardDetailsUpdate = function () {
    var _this = this;

    var mainLabel = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.section, '.cl-main-widget-lb-details-content-label');
    mainLabel.innerHTML = _this.settings.lbWidget.settings.competition.activeContest !== null ? _this.settings.lbWidget.settings.competition.activeContest.label : _this.settings.lbWidget.settings.translation.tournaments.noAvailableCompetitions;
  };

  this.leaderboardOptInCheck = function () {
    var _this = this;

    var optIn = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.section, '.cl-main-widget-lb-optin-action');

    if (typeof _this.settings.lbWidget.settings.competition.activeCompetition !== 'undefined' && _this.settings.lbWidget.settings.competition.activeCompetition !== null && typeof _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired === 'boolean' && _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired) {
      if (typeof _this.settings.lbWidget.settings.competition.activeCompetition.optin === 'boolean' && !_this.settings.lbWidget.settings.competition.activeCompetition.optin) {
        optIn.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
        optIn.parentNode.style.display = 'block';
      } else {
        optIn.parentNode.style.display = 'none';
      }
    } else {
      optIn.parentNode.style.display = 'none';
    }
  }; // cleanup/recover activity


  this.preLoaderRerun = function () {
    var _this = this;

    if (_this.settings.preLoader.preLoaderActive && _this.settings.preLoader.preloaderCallbackRecovery !== null && _this.settings.preLoader.preLoaderlastAttempt !== null && typeof _this.settings.preLoader.preLoaderlastAttempt === 'number' && _this.settings.preLoader.preLoaderlastAttempt + 8000 < new Date().getTime()) {
      _this.settings.preLoader.preloaderCallbackRecovery();
    }
  };

  this.preloader = function () {
    var _this = this;

    var preLoader = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.section, '.cl-main-widget-pre-loader'); // var content = query(_this.settings.section, '.cl-main-widget-pre-loader-content');

    return {
      show: function show(callback) {
        _this.settings.preLoader.preLoaderActive = true;
        _this.settings.preLoader.preLoaderlastAttempt = new Date().getTime();
        preLoader.style.display = 'block';
        setTimeout(function () {
          preLoader.style.opacity = 1;
        }, 20);

        if (_this.settings.preLoader.preloaderCallbackRecovery === null && typeof callback === 'function') {
          _this.settings.preLoader.preloaderCallbackRecovery = callback;
        }

        callback();
      },
      hide: function hide() {
        _this.settings.preLoader.preLoaderActive = false;
        _this.settings.preLoader.preLoaderlastAttempt = null;
        preLoader.style.opacity = 0;

        if (_this.settings.preLoader.preloaderCallbackRecovery !== null) {
          _this.settings.preLoader.preloaderCallbackRecovery = null;
        }

        setTimeout(function () {
          preLoader.style.display = 'none';
        }, 200);
      }
    };
  };

  this.loadLeaderboard = function (callback) {
    var _this = this;

    if (_this.settings.container === null) {
      _this.settings.container = _this.settings.lbWidget.settings.bindContainer.appendChild(_this.layout());
      _this.settings.navigation = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-navigation-container');
      _this.settings.section = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-section-container');
      _this.settings.leaderboard.container = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.section, '.cl-main-widget-lb-leaderboard');
      _this.settings.leaderboard.header = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.container, '.cl-main-widget-lb-leaderboard-header-labels');
      _this.settings.leaderboard.list = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.container, '.cl-main-widget-lb-leaderboard-body-res');
      _this.settings.leaderboard.topResults = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.container, '.cl-main-widget-lb-leaderboard-header-top-res');
      _this.settings.detailsContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-lb-details-container');
      _this.settings.tournamentListContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-tournaments-list');
      _this.settings.detailsContainerDate = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-lb-details-header-date');
      _this.settings.headerDate = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-lb-header-date');
      _this.settings.achievement.container = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-section-ach');
      _this.settings.achievement.detailsContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-ach-details-container');
      _this.settings.reward.container = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-section-reward');
      _this.settings.reward.detailsContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-reward-details-container');
      _this.settings.messages.container = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-section-inbox');
      _this.settings.messages.detailsContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-inbox-details-container');

      _this.leaderboardHeader();

      _this.eventListeners();
    }

    _this.leaderboardOptInCheck();

    _this.leaderboardDetailsUpdate();

    _this.updateLeaderboard();

    if (_this.settings.lbWidget.settings.competition.activeContest !== null) {
      _this.updateLeaderboardTime();
    }

    if (typeof callback === 'function') {
      callback();
    }
  };

  this.clearAll = function () {
    var _this = this;

    _this.settings.active = false;

    if (_this.settings.leaderboard.timerInterval) {
      clearTimeout(_this.settings.leaderboard.timerInterval);
    }

    _this.settings.preLoader.preLoaderActive = false;
  };

  this.hide = function (callback) {
    var _this = this;

    _this.clearAll();

    if (_this.settings.container !== null) {
      Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.container, 'cl-show');
      setTimeout(function () {
        _this.settings.container.style.display = 'none';

        _this.hideCompetitionDetails();

        _this.hideAchievementDetails();

        if (typeof callback === 'function') {
          callback();
        }
      }, 30);
    } else if (typeof callback === 'function') {
      callback();
    }
  };

  this.missingMember = function (isVisible) {
    var _this = this;

    var area = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-lb-missing-member');

    if (!isVisible) {
      var member = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.list, '.cl-lb-member-row');

      if (area !== null && member !== null) {
        area.innerHTML = member.innerHTML;
        area.style.display = 'block';
      } else {
        area.style.display = 'none';
      }
    } else {
      area.style.display = 'none';
    }
  };

  this.isElementVisibleInView = function (el, container) {
    var position = el.getBoundingClientRect();
    var elemContainer = container.getBoundingClientRect();
    var elemTop = position.top;
    var elemBottom = position.bottom;
    var elemHeight = position.height;
    return elemTop <= elemContainer.top ? elemContainer.top - elemTop <= elemHeight : elemBottom - elemContainer.bottom <= elemHeight;
  };

  this.eventListeners = function () {
    var _this = this;

    _this.settings.leaderboard.list.parentNode.onscroll = function (evt) {
      evt.preventDefault();
      var member = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.list, '.cl-lb-member-row');

      if (member !== null) {
        _this.missingMember(_this.isElementVisibleInView(member, evt.target));
      }
    };

    window.onresize = function (evt) {
      var member = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.list, '.cl-lb-member-row');

      if (member !== null) {
        _this.missingMember(_this.isElementVisibleInView(member, _this.settings.leaderboard.list.parentNode));
      }
    };
  }; // this.checkLeaderboardScrollContainer = function(){
  //  var _this = this,
  //    lbScrollContainer = query(_this.settings.leaderboard.container, ".cl-main-widget-lb-leaderboard-body");
  //
  //  if( scrollEnabled(lbScrollContainer) ){
  //    addClass(lbScrollContainer, "cl-element-scrollable");
  //  }else{
  //    removeClass(lbScrollContainer, "cl-element-scrollable");
  //  }
  // };


  this.competitionDetailsOptInButtonState = function () {
    var _this = this;

    var optIn = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.detailsContainer, '.cl-main-widget-lb-details-optin-action');

    if (typeof _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired === 'boolean' && _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired) {
      if (typeof _this.settings.lbWidget.settings.competition.activeCompetition.optin === 'boolean' && !_this.settings.lbWidget.settings.competition.activeCompetition.optin) {
        optIn.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
        Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(optIn, 'cl-disabled');
      } else {
        optIn.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.registered;
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(optIn, 'cl-disabled');
      }

      optIn.parentNode.style.display = 'block';
    } else {
      optIn.parentNode.style.display = 'none';
    }
  };

  this.loadCompetitionDetails = function (callback) {
    var _this = this;

    var label = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.detailsContainer, '.cl-main-widget-lb-details-header-label'); // var date = query(_this.settings.detailsContainer, '.cl-main-widget-lb-details-header-date');

    var body = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.detailsContainer, '.cl-main-widget-lb-details-body');
    var image = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.detailsContainer, '.cl-main-widget-lb-details-body-image-cont');
    image.innerHTML = '';
    label.innerHTML = _this.settings.lbWidget.settings.competition.activeContest.label.length > 0 ? _this.settings.lbWidget.settings.competition.activeContest.label : _this.settings.lbWidget.settings.competition.activeCompetition.label;
    body.innerHTML = _this.settings.lbWidget.settings.competition.activeContest.description.length > 0 ? _this.settings.lbWidget.settings.competition.activeContest.description : _this.settings.lbWidget.settings.competition.activeCompetition.description;

    _this.competitionDetailsOptInButtonState();

    _this.settings.detailsContainer.style.display = 'block';
    _this.settings.headerDate.style.display = 'none';

    if (_this.settings.lbWidget.settings.competition.extractImageHeader) {
      Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(body, 'img'), function (img, key, count) {
        if (count === 0) {
          var newImg = img.cloneNode(true);
          image.appendChild(newImg);
          Object(_utils_remove__WEBPACK_IMPORTED_MODULE_7__["default"])(img);
        }
      });
    }

    setTimeout(function () {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(_this.settings.detailsContainer, 'cl-show');
      if (typeof callback === 'function') callback();
    }, 50);
  };

  this.loadCompetitionList = function (callback, ajaxInstance) {
    var _this = this;

    var listResContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.tournamentListContainer, '.cl-main-widget-tournaments-list-body-res');

    var preLoader = _this.preloader();

    preLoader.show(function () {
      _this.settings.lbWidget.checkForAvailableCompetitions(function () {
        var accordionObj = _this.accordionStyle(_this.settings.tournamentsSection.accordionLayout, function (accordionSection, listContainer, topEntryContainer, layout) {
          var tournamentData = _this.settings.lbWidget.settings.tournaments[layout.type];

          if (typeof tournamentData !== 'undefined') {
            if (tournamentData.length === 0) {
              accordionSection.style.display = 'none';
            }

            window.mapObject(tournamentData, function (tournament, key, count) {
              if (count + 1 <= layout.showTopResults && Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(topEntryContainer, '.cl-tournament-' + tournament.id) === null) {
                var topEntryContaineRlistItem = _this.tournamentItem(tournament);

                topEntryContainer.appendChild(topEntryContaineRlistItem);
              }

              if (Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(listContainer, '.cl-tournament-' + tournament.id) === null) {
                var listItem = _this.tournamentItem(tournament);

                listContainer.appendChild(listItem);
              }
            });
          }
        });

        listResContainer.innerHTML = '';
        listResContainer.appendChild(accordionObj);
        _this.settings.tournamentListContainer.style.display = 'block';
        setTimeout(function () {
          Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(_this.settings.tournamentListContainer, 'cl-show');
          if (typeof callback === 'function') callback();
          preLoader.hide();
        }, 50);
      }, ajaxInstance);
    });
  };

  this.hideCompetitionList = function (callback) {
    var _this = this;

    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.tournamentListContainer, 'cl-show');
    setTimeout(function () {
      _this.settings.tournamentListContainer.style.display = 'none';
      if (typeof callback === 'function') callback();
    }, 200);
  };

  this.hideCompetitionDetails = function (callback) {
    var _this = this;

    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.detailsContainer, 'cl-show');
    setTimeout(function () {
      _this.settings.detailsContainer.style.display = 'none';
      _this.settings.headerDate.style.display = 'block';
      if (typeof callback === 'function') callback();
    }, 200);
  };

  this.achievementItem = function (ach, achieved, perc) {
    var _this = this;

    var listItem = document.createElement('div');
    var detailsContainer = document.createElement('div');
    var detailsWrapper = document.createElement('div');
    var label = document.createElement('div');
    var category = document.createElement('div');
    var description = document.createElement('div');
    var progressionWrapper = document.createElement('div');
    var progressionBox = document.createElement('div'); // box with container & bar & percentage

    var progressionCont = document.createElement('div'); // container

    var progressionBar = document.createElement('div');
    var progressionPercent = document.createElement('div');
    var issuedBox = document.createElement('div');
    var issuedBoxCount = document.createElement('div');
    var issuedBoxCheck = document.createElement('img');
    var moreButton = document.createElement('a');
    var rewardName = document.createElement('div');
    var cpomntainsImage = typeof ach.icon !== 'undefined' && ach.icon.length > 0;
    listItem.setAttribute('class', 'cl-ach-list-item cl-ach-' + ach.id + (cpomntainsImage ? ' cl-ach-with-image' : ''));
    detailsContainer.setAttribute('class', 'cl-ach-list-details-cont');
    detailsWrapper.setAttribute('class', 'cl-ach-list-details-wrap');
    label.setAttribute('class', 'cl-ach-list-details-label');
    category.setAttribute('class', 'cl-ach-list-details-category');
    description.setAttribute('class', 'cl-ach-list-details-description');
    progressionWrapper.setAttribute('class', 'cl-ach-list-progression');
    progressionBox.setAttribute('class', 'cl-ach-list-progression-box');
    progressionCont.setAttribute('class', 'cl-ach-list-progression-cont');
    progressionBar.setAttribute('class', 'cl-ach-list-progression-bar');
    progressionPercent.setAttribute('class', 'cl-ach-list-percent-number');
    issuedBox.setAttribute('class', 'cl-ach-list-issued-box');
    issuedBoxCount.setAttribute('class', 'cl-ach-list-issued-box-count');
    issuedBoxCheck.setAttribute('class', 'cl-ach-list-issued-box-check');
    moreButton.setAttribute('class', 'cl-ach-list-more');
    rewardName.setAttribute('class', 'cl-ach-list-details-reward'); // start with 0

    progressionPercent.innerHTML = '0%'; // count number

    issuedBoxCount.innerHTML = '0';
    rewardName.innerHTML = '';
    moreButton.dataset.id = ach.id;
    moreButton.innerHTML = _this.settings.lbWidget.settings.translation.achievements.more;
    moreButton.href = 'javascript:void(0);';
    listItem.dataset.id = ach.id;
    label.innerHTML = ach.name;
    category.innerHTML = ach.category.join(', ');
    detailsWrapper.appendChild(label);
    detailsWrapper.appendChild(category);
    detailsWrapper.appendChild(description);

    if (cpomntainsImage) {
      var image = new Image();
      var imageIconWrapper = document.createElement('div');
      imageIconWrapper.setAttribute('class', 'cl-ach-list-item-img-wrapper');
      image.setAttribute('class', 'cl-ach-list-item-img');
      image.src = _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.assets.replace(':attachmentId', ach.icon);
      image.alt = ach.name; // image.onload = function(){
      // };

      imageIconWrapper.appendChild(image);
      detailsContainer.appendChild(imageIconWrapper);
    }

    detailsContainer.appendChild(detailsWrapper); // progression container has bar inside

    progressionCont.appendChild(progressionBar); // progression box has container + percent number

    progressionBox.appendChild(progressionCont);
    progressionBox.appendChild(progressionPercent); // issued box has number, unchecked or checked box

    issuedBox.appendChild(issuedBoxCount);
    issuedBox.appendChild(issuedBoxCheck); // wrapper has box, counter and button

    progressionWrapper.appendChild(progressionBox);
    progressionWrapper.appendChild(issuedBox);
    progressionWrapper.appendChild(moreButton);
    progressionWrapper.appendChild(rewardName);
    listItem.appendChild(detailsContainer);
    listItem.appendChild(progressionWrapper);
    return listItem;
  };

  this.achievementListLayout = function (achievementData) {
    var _this = this;

    var achList = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.section, '.cl-main-widget-section-ach .cl-main-widget-ach-list-body-res');
    window.mapObject(achievementData, function (ach) {
      if (Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(achList, '.cl-ach-' + ach.id) === null) {
        var listItem = _this.achievementItem(ach);

        achList.appendChild(listItem);
      }
    });
  };

  this.loadAchievementDetails = function (data, callback) {
    var _this = this;

    var label = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.achievement.detailsContainer, '.cl-main-widget-ach-details-header-label');
    var body = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.achievement.detailsContainer, '.cl-main-widget-ach-details-body');
    var image = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.achievement.detailsContainer, '.cl-main-widget-ach-details-body-image-cont');
    image.innerHTML = '';
    label.innerHTML = data.data.name;
    body.innerHTML = data.data.description;

    if (_this.settings.lbWidget.settings.achievements.extractImageHeader) {
      var imageLookup = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(body, 'img');
      Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__["default"])(imageLookup, function (img, key, count) {
        if (count === 0) {
          var newImg = img.cloneNode(true);
          image.appendChild(newImg);
          Object(_utils_remove__WEBPACK_IMPORTED_MODULE_7__["default"])(img);
        }
      });
    }

    _this.settings.achievement.detailsContainer.style.display = 'block';
    setTimeout(function () {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(_this.settings.achievement.detailsContainer, 'cl-show');
      if (typeof callback === 'function') callback();
    }, 50);
  };

  this.hideAchievementDetails = function (callback) {
    var _this = this;

    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.achievement.detailsContainer, 'cl-show');
    setTimeout(function () {
      _this.settings.achievement.detailsContainer.style.display = 'none';
      if (typeof callback === 'function') callback();
    }, 200);
  };

  this.loadRewardDetails = function (data, callback) {
    var _this = this;

    var label = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.reward.detailsContainer, '.cl-main-widget-reward-details-header-label');
    var body = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.reward.detailsContainer, '.cl-main-widget-reward-details-body');
    var image = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.reward.detailsContainer, '.cl-main-widget-reward-details-body-image-cont');
    var claimBtn = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.reward.detailsContainer, '.cl-main-widget-reward-claim-btn');
    var icon = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.reward.detailsContainer, '.cl-main-widget-reward-winnings-icon');
    var value = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.reward.detailsContainer, '.cl-main-widget-reward-winnings-value');
    label.innerHTML = data.data.reward.rewardName;
    body.innerHTML = data.data.reward.description;
    value.innerHTML = _this.settings.lbWidget.settings.rewards.rewardFormatter(data.data.reward);
    claimBtn.dataset.id = data.data.id;

    if (data.data.claimed) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(claimBtn, 'cl-claimed');
      claimBtn.innerHTML = _this.settings.lbWidget.settings.translation.rewards.claimed;
    } else {
      Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(claimBtn, 'cl-claimed');
      claimBtn.innerHTML = _this.settings.lbWidget.settings.translation.rewards.claim;
    }

    if (typeof data.data.reward.icon !== 'undefined') {
      icon.innerHTML = '';

      var _image = new Image();

      var imageIconWrapper = document.createElement('div');
      imageIconWrapper.setAttribute('class', 'cl-reward-list-item-img-wrapper');

      _image.setAttribute('class', 'cl-reward-list-item-img');

      _image.src = _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.assets.replace(':attachmentId', data.data.reward.icon);
      _image.alt = _this.settings.lbWidget.settings.rewards.rewardFormatter(data.data.reward);
      icon.appendChild(_image);
    } else {
      icon.innerHTML = "<span class='cl-place-holder-reward-image'></span>";
    }

    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(body, 'img'), function (img, key, count) {
      if (count === 0) {
        var newImg = img.cloneNode(true);
        image.innerHTML = '';
        image.appendChild(newImg);
        Object(_utils_remove__WEBPACK_IMPORTED_MODULE_7__["default"])(img);
      }
    });
    _this.settings.reward.detailsContainer.style.display = 'block';
    setTimeout(function () {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(_this.settings.reward.detailsContainer, 'cl-show');
      if (typeof callback === 'function') callback();
    }, 50);
  };

  this.loadMessageDetails = function (data, callback) {
    var _this = this;

    var label = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.messages.detailsContainer, '.cl-main-widget-inbox-details-header-label');
    var body = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.messages.detailsContainer, '.cl-main-widget-inbox-details-body');
    label.innerHTML = data.data.subject;
    body.innerHTML = data.data.body;
    _this.settings.messages.detailsContainer.style.display = 'block';
    setTimeout(function () {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(_this.settings.messages.detailsContainer, 'cl-show');
      if (typeof callback === 'function') callback();
    }, 50);
  };

  this.hideRewardDetails = function (callback) {
    var _this = this;

    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.reward.detailsContainer, 'cl-show');
    setTimeout(function () {
      _this.settings.reward.detailsContainer.style.display = 'none';
      if (typeof callback === 'function') callback();
    }, 200);
  };

  this.hideMessageDetails = function (callback) {
    var _this = this;

    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.messages.detailsContainer, 'cl-show');
    setTimeout(function () {
      _this.settings.messages.detailsContainer.style.display = 'none';
      if (typeof callback === 'function') callback();
    }, 200);
  };

  this.getAchievementInfo = function (id) {
    var _this = this;

    var _iterator = _createForOfIteratorHelper(_this.settings.lbWidget.settings.achievements.list),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var ach = _step.value;
        if (ach.id === id) return ach;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };

  this.updateAchievementProgressionAndIssued = function (issued, progression) {
    var _this = this;

    var achList = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.section, '.cl-main-widget-section-ach .cl-main-widget-ach-list-body-res');
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(achList, '.cl-ach-list-item'), function (ach) {
      var id = ach.dataset.id; // var issuedStatus = (issued.indexOf(id) !== -1);

      var achInfo = _this.getAchievementInfo(id);

      var perc = 0;
      var issuedCnt = '';
      var issuedChck = '../leaderboard_v3/src/images/ach-giftbox.svg';
      var reward = '';

      if (Array.isArray(achInfo.rewards) && achInfo.rewards.length >> 0) {
        reward = achInfo.rewards[0].rewardName.toString();
      }

      window.mapObject(progression, function (pr) {
        if (pr.achievementId === id) {
          // progress bar
          if (achInfo.scheduling.scheduleType === 'Once' && pr.issued > 0) {
            perc = 100;
          } else {
            perc = (parseFloat(pr.goalPercentageComplete) * 100).toFixed(1);
          } // issue count


          if (achInfo.scheduling.scheduleType === 'Repeatedly') {
            issuedCnt = pr.issued.toString();
          }

          if (achInfo.scheduling.scheduleType === 'Once') {
            issuedChck = pr.issued > 0 ? '../leaderboard_v3/src/images/ach-issued.svg' : '../leaderboard_v3/src/images/ach-not-issued.svg';
          }
        }
      });

      if (ach !== null) {
        var bar = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(ach, '.cl-ach-list-progression-bar');
        var percentNum = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(ach, '.cl-ach-list-percent-number');
        var issuedCount = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(ach, '.cl-ach-list-issued-box-count');
        var issuedCheck = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(ach, '.cl-ach-list-issued-box-check');
        var rewardName = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(ach, '.cl-ach-list-details-reward');
        bar.style.width = (perc > 1 || perc === 0 ? perc : 1) + '%';
        percentNum.innerHTML = (perc > 1 || perc === 0 ? Math.round(perc) : 1) + '%';
        issuedCount.innerHTML = issuedCnt;
        issuedCheck.src = issuedChck;
        rewardName.innerHTML = reward;
        /*
        var image = new Image();
        var imageIconWrapper = document.createElement('div');
        image.setAttribute('class', 'cl-ach-list-issued-box');
        image.src = 'C:/Programiranje/jurepetrovic/leaderboard_v3/src/images/ach-issued.png';
        imageIconWrapper.appendChild(image);
        //  detailsContainer.appendChild(imageIconWrapper);
        */

        /*
        if (issuedStatus) {
          addClass(bar, 'cl-ach-complete');
          bar.innerHTML = _this.settings.lbWidget.settings.translation.achievements.complete;
          bar.style.width = '100%';
        } else {
          bar.style.width = ((perc > 1 || perc === 0) ? perc : 1) + '%';
        }
        */
      }
    });
  };

  this.loadAchievements = function (callback) {
    var _this = this;

    _this.settings.lbWidget.checkForAvailableAchievements(function (achievementData) {
      _this.achievementListLayout(achievementData);

      var idList = [];
      window.mapObject(_this.settings.lbWidget.settings.achievements.list, function (ach) {
        idList.push(ach.id);
      });
      setTimeout(function () {
        _this.settings.lbWidget.checkForMemberAchievementsIssued(function (issued) {
          _this.settings.lbWidget.checkForMemberAchievementsProgression(idList, function (progression) {
            _this.updateAchievementProgressionAndIssued(issued, progression);
          });
        });
      }, 400);

      if (typeof callback === 'function') {
        callback();
      }
    });
  };

  this.rewardItem = function (rew) {
    var _this = this;

    var listItem = document.createElement('div');
    var detailsContainer = document.createElement('div');
    var detailsWrapper = document.createElement('div');
    var label = document.createElement('div');
    var description = document.createElement('div');
    listItem.setAttribute('class', 'cl-rew-list-item cl-rew-' + rew.id);
    detailsContainer.setAttribute('class', 'cl-rew-list-details-cont');
    detailsWrapper.setAttribute('class', 'cl-rew-list-details-wrap');
    label.setAttribute('class', 'cl-rew-list-details-label');
    description.setAttribute('class', 'cl-rew-list-details-description');
    listItem.dataset.id = rew.id;
    var labelText = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_9__["default"])(rew.subject);
    var descriptionText = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_9__["default"])(rew.body);

    if (typeof rew.prize !== 'undefined') {
      listItem.dataset.rewardId = rew.prize.id;
      labelText = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_9__["default"])(rew.subject + ' - ' + rew.prize.reward.rewardName + ' (' + _this.settings.lbWidget.settings.rewards.rewardFormatter(rew.prize.reward) + ')');
      descriptionText = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_9__["default"])(typeof rew.prize.reward.description !== 'undefined' && rew.prize.reward.description.length > 0 ? rew.prize.reward.description : rew.body);
    }

    label.innerHTML = labelText.length > 80 ? labelText.substr(0, 80) + '...' : labelText;
    description.innerHTML = descriptionText.length > 200 ? descriptionText.substr(0, 200) + '...' : descriptionText;
    detailsWrapper.appendChild(label);
    detailsWrapper.appendChild(description);
    detailsContainer.appendChild(detailsWrapper);
    listItem.appendChild(detailsContainer);
    return listItem;
  };

  this.messageItem = function (inbox) {
    // var _this = this;
    var listItem = document.createElement('div');
    var detailsContainer = document.createElement('div');
    var detailsWrapper = document.createElement('div');
    var label = document.createElement('div');
    var description = document.createElement('div');
    var content = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_9__["default"])(inbox.body);
    listItem.setAttribute('class', 'cl-inbox-list-item cl-inbox-' + inbox.id);
    detailsContainer.setAttribute('class', 'cl-inbox-list-details-cont');
    detailsWrapper.setAttribute('class', 'cl-inbox-list-details-wrap');
    label.setAttribute('class', 'cl-inbox-list-details-label');
    description.setAttribute('class', 'cl-inbox-list-details-description');
    listItem.dataset.id = inbox.id;
    label.innerHTML = inbox.subject.length > 36 ? inbox.subject.substr(0, 36) + '...' : inbox.subject;
    description.innerHTML = content.length > 60 ? content.substr(0, 60) + '...' : content;
    detailsWrapper.appendChild(label);
    detailsWrapper.appendChild(description);
    detailsContainer.appendChild(detailsWrapper);
    listItem.appendChild(detailsContainer);
    return listItem;
  };

  this.tournamentItem = function (tournament) {
    // var _this = this;
    var listItem = document.createElement('div');
    var detailsContainer = document.createElement('div');
    var detailsWrapper = document.createElement('div');
    var label = document.createElement('div');
    var description = document.createElement('div');
    var descriptionContent = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_9__["default"])(tournament.description);
    listItem.setAttribute('class', 'cl-tour-list-item cl-tour-' + tournament.id);
    detailsContainer.setAttribute('class', 'cl-tour-list-details-cont');
    detailsWrapper.setAttribute('class', 'cl-tour-list-details-wrap');
    label.setAttribute('class', 'cl-tour-list-details-label');
    description.setAttribute('class', 'cl-tour-list-details-description');
    listItem.dataset.id = tournament.id;
    label.innerHTML = tournament.label;
    description.innerHTML = descriptionContent.length > 100 ? descriptionContent.substr(0, 100) + '...' : descriptionContent;
    detailsWrapper.appendChild(label);
    detailsWrapper.appendChild(description);
    detailsContainer.appendChild(detailsWrapper);
    listItem.appendChild(detailsContainer);
    return listItem;
  };

  this.rewardsListLayout = function (rewards, availableRewards, expiredRewards) {
    var _this = this;

    var rewardList = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.section, '.cl-main-widget-section-reward .cl-main-widget-reward-list-body-res');

    var accordionObj = _this.accordionStyle(_this.settings.rewardsSection.accordionLayout, function (accordionSection, listContainer, topEntryContainer, layout) {
      var rewardData = _this.settings.lbWidget.settings.rewards[layout.type];

      if (typeof rewardData !== 'undefined') {
        if (rewardData.length === 0) {
          accordionSection.style.display = 'none';
        }

        window.mapObject(rewardData, function (rew, key, count) {
          if (count + 1 <= layout.showTopResults && Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(topEntryContainer, '.cl-reward-' + rew.id) === null) {
            var topEntryContaineRlistItem = _this.rewardItem(rew);

            topEntryContainer.appendChild(topEntryContaineRlistItem);
          }

          if (Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(listContainer, '.cl-reward-' + rew.id) === null) {
            var listItem = _this.rewardItem(rew);

            listContainer.appendChild(listItem);
          }
        });
      }
    });

    rewardList.innerHTML = '';
    rewardList.appendChild(accordionObj); // mapObject(rewardData, function(rew){
    //   if( query(rewardList, ".cl-reward-" + rew.id) === null ) {
    //     var listItem = _this.rewardItem(rew);
    //
    //     rewardList.appendChild(listItem);
    //   }
    // });
  };

  this.messagesListLayout = function (rewards, availableRewards, expiredRewards) {
    var _this = this;

    var messageList = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.section, '.cl-main-widget-section-inbox .cl-main-widget-inbox-list-body-res');
    messageList.innerHTML = '';
    window.mapObject(_this.settings.lbWidget.settings.messages.messages, function (inboxItem, key, count) {
      var listItem = _this.messageItem(inboxItem);

      messageList.appendChild(listItem);
    });
  };

  this.loadRewards = function (callback) {
    var _this = this;

    _this.settings.lbWidget.checkForAvailableRewards(function (rewards, availableRewards, expiredRewards) {
      _this.rewardsListLayout(rewards, availableRewards, expiredRewards);

      if (typeof callback === 'function') {
        callback();
      }
    });
  };

  this.loadMessages = function (callback) {
    var _this = this;

    _this.settings.lbWidget.checkForAvailableMessages(function (rewards, availableRewards, expiredRewards) {
      _this.messagesListLayout(rewards, availableRewards, expiredRewards);

      if (typeof callback === 'function') {
        callback();
      }
    });
  };

  var changeInterval;
  var changeContainerInterval;

  this.navigationSwitch = function (target, callback) {
    var _this = this;

    var preLoader = _this.preloader();

    if (_this.settings.navigationSwitchInProgress && _this.settings.navigationSwitchLastAtempt + 3000 < new Date().getTime()) {
      _this.settings.navigationSwitchInProgress = false;
    }

    if (!_this.settings.navigationSwitchInProgress) {
      _this.settings.navigationSwitchInProgress = true;
      _this.settings.navigationSwitchLastAtempt = new Date().getTime();

      if (!Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_1__["default"])(target.parentNode, 'cl-active-nav')) {
        preLoader.show(function () {
          if (changeInterval) clearTimeout(changeInterval);
          if (changeContainerInterval) clearTimeout(changeContainerInterval);
          Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-navigation-items .cl-active-nav'), function (obj) {
            Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(obj, 'cl-active-nav');
          });
          Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-section-container .cl-main-active-section'), function (obj) {
            Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(obj, 'cl-main-active-section');
            setTimeout(function () {
              obj.style.display = 'none';
            }, 150);
          });
          changeContainerInterval = setTimeout(function () {
            if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_1__["default"])(target, 'cl-main-widget-navigation-lb-icon')) {
              _this.loadLeaderboard(function () {
                var lbContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-section-container .cl-main-widget-lb');
                lbContainer.style.display = 'block';
                changeInterval = setTimeout(function () {
                  Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(lbContainer, 'cl-main-active-section');
                }, 30);

                if (typeof callback === 'function') {
                  callback();
                }

                preLoader.hide();
                _this.settings.navigationSwitchInProgress = false;
              });
            } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_1__["default"])(target, 'cl-main-widget-navigation-ach-icon')) {
              _this.loadAchievements(function () {
                var achContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-section-container .cl-main-widget-section-ach');
                _this.settings.achievement.detailsContainer.style.display = 'none';
                achContainer.style.display = 'block';
                changeInterval = setTimeout(function () {
                  Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(achContainer, 'cl-main-active-section');

                  if (typeof callback === 'function') {
                    callback();
                  }
                }, 30);
                preLoader.hide();
                _this.settings.navigationSwitchInProgress = false;
              });
            } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_1__["default"])(target, 'cl-main-widget-navigation-rewards-icon')) {
              _this.loadRewards(function () {
                var rewardsContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-section-container .cl-main-widget-section-reward');
                rewardsContainer.style.display = 'block';
                changeInterval = setTimeout(function () {
                  Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(rewardsContainer, 'cl-main-active-section');
                }, 30);

                if (typeof callback === 'function') {
                  callback();
                }

                preLoader.hide();
                _this.settings.navigationSwitchInProgress = false;
              });
            } else if (Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_1__["default"])(target, 'cl-main-widget-navigation-inbox-icon')) {
              _this.loadMessages(function () {
                var inboxContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-section-container .cl-main-widget-section-inbox');
                inboxContainer.style.display = 'block';
                changeInterval = setTimeout(function () {
                  Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(inboxContainer, 'cl-main-active-section');
                }, 30);
                preLoader.hide();
                _this.settings.navigationSwitchInProgress = false;
              });
            }
          }, 250);
          Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(target.parentNode, 'cl-active-nav');
        });
      } else if (typeof callback === 'function') {
        _this.settings.navigationSwitchInProgress = false;
        callback();
      }
    }
  };

  this.resetNavigation = function (callback) {
    var _this = this;

    var lbContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-section-container .cl-main-widget-lb');
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-navigation-items .cl-active-nav'), function (obj) {
      Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(obj, 'cl-active-nav');
    });
    Object(_utils_objectIterator__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-section-container .cl-main-active-section'), function (obj) {
      obj.style.display = 'none';
      Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_2__["default"])(obj, 'cl-main-active-section');
    });
    Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, '.cl-main-widget-navigation-items .cl-main-widget-navigation-lb'), 'cl-active-nav');
    setTimeout(function () {
      lbContainer.style.display = 'block';
      setTimeout(function () {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(lbContainer, 'cl-main-active-section');
        if (typeof callback !== 'undefined') callback();
      }, 30);
    }, 40);
  };

  this.initLayout = function (callback) {
    var _this = this;

    _this.settings.active = true;

    _this.loadLeaderboard();

    _this.settings.container.style.display = 'block';
    setTimeout(function () {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_6__["default"])(_this.settings.container, 'cl-show');
      var member = Object(_utils_query__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.leaderboard.list, '.cl-lb-member-row');

      if (member !== null) {
        _this.missingMember(_this.isElementVisibleInView(member, _this.settings.leaderboard.list.parentNode));
      }

      _this.resetNavigation(callback);
    }, 30);
  };
};

/***/ }),

/***/ "./src/javascript/modules/Messaging.js":
/*!*********************************************!*\
  !*** ./src/javascript/modules/Messaging.js ***!
  \*********************************************/
/*! exports provided: Messaging */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Messaging", function() { return Messaging; });
/* harmony import */ var _cLabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cLabs */ "./src/javascript/modules/cLabs.js");

/**
 * SSE Messaging
 * @param options
 * @constructor
 */

var Messaging = function Messaging(options) {
  this.settings = {
    source: null,
    ajax: {
      url: null,
      apiKey: undefined,
      errorCallback: function errorCallback() {}
    },
    sseUrl: null,
    heartbeat: null,
    lastHeartbeat: null,
    mainAjax: new _cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].Ajax(),
    heartBeatAjax: new _cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].Ajax(),
    heartWaitTime: 25000,
    messageQueue: [],
    messageInterval: 1000,
    startupCheck: true,
    active: false,
    debug: false,
    callback: function callback(data) {},
    onStartupError: function onStartupError() {}
  };

  if (typeof options !== 'undefined') {
    for (var opt in options) {
      if (options.hasOwnProperty(opt)) {
        this.settings[opt] = options[opt];
      }
    }
  }

  this.intervalInstance = null;
  this.heartbeatIntervalInstance = null;

  this.lookupData = function () {
    var _this = this;

    if (_this.settings.messageQueue.length > 0) {
      var data = _this.settings.messageQueue[0];

      var index = _this.settings.messageQueue.indexOf(data);

      if (index > -1) {
        _this.settings.messageQueue.splice(index, 1);
      }

      if (typeof _this.settings.ajax.url === 'string' && _this.settings.ajax.url.length > 0) {
        _this.getData(data);
      } else {
        _this.settings.callback(data);
      }
    }
  };

  this.setInterval = function () {
    var _this = this;

    _this.intervalInstance = setInterval(function () {
      _this.lookupData();
    }, _this.settings.messageInterval);

    if (_this.settings.heartbeat !== null) {
      _this.settings.lastHeartbeat = new Date();
      _this.heartbeatIntervalInstance = setInterval(function () {
        var currentTime = new Date();
        var diff = _this.settings.lastHeartbeat.getTime() - currentTime.getTime();

        if (_this.settings.source.readyState === 0 && diff > _this.settings.heartWaitTime) {
          _this.closeChanel();
        }

        _this.hearBeatCheck();
      }, _this.settings.heartWaitTime);
    }
  };
  /**
   * Request a heartbeat
   * - if the request is failing close the connection
   * - if the request is successful but the connection is closed reopen and call for a heartbeat again
   */


  this.hearBeatCheck = function () {
    var _this = this;

    var dataObj = {
      url: _this.settings.heartbeat,
      headers: _this.settings.ajax.apiKey,
      type: 'GET',
      success: function success(response, dataObject, xhr) {
        if (xhr.status !== 200 && _this.settings.source.readyState === 0) {
          if (_this.settings.debug) console.log('[Msg] SSE Closing connection');

          _this.closeChanel();
        } else if (xhr.status === 200 && _this.settings.source.readyState === 2) {
          if (_this.settings.debug) console.log('[Msg] SSE Trying to re-open the connection');

          _this.openChanel();

          setTimeout(function () {
            _this.hearBeatCheck();
          }, 200);
        }
      }
    };

    if (typeof _this.settings.ajax.apiKey !== 'undefined') {
      dataObj.headers = _this.settings.ajax.apiKey;
    }

    _this.settings.heartBeatAjax.abort().getData(dataObj);
  };

  this.getData = function () {
    var _this = this;

    var dataObj = {
      url: _this.settings.ajax.url,
      type: 'GET',
      success: function success(response, dataObject, xhr) {
        var json = {};

        try {
          json = JSON.parse(response);
        } catch (e) {
          if (_this.settings.debug) console.log(e, _this.settings);
        }

        if (xhr.status === 200) {
          _this.settings.callback(json);
        } else {
          _this.settings.ajax.errorCallback(json);
        }
      }
    };

    if (typeof _this.settings.ajax.apiKey !== 'undefined') {
      dataObj.headers = _this.settings.ajax.apiKey;
    }

    _this.settings.mainAjax.abort().getData(dataObj);
  };

  this.openChanel = function () {
    var _this = this;

    _this.settings.source = new EventSource(_this.settings.sseUrl, {
      withCredentials: true
    });

    _this.serverSideEventListeners(_this.settings.source);
  };

  this.serverSideEventListeners = function (source) {
    var _this = this;

    source.addEventListener('open', function (e) {
      _this.settings.active = true;
      if (_this.settings.debug) console.log('[Msg] connection opened', e);
    }, false);
    source.addEventListener('message', function (e) {
      if (_this.settings.debug) {
        console.log('[Msg] message check', _this.settings.sseUrl);
        console.log(e.data);
      }

      var data = e.data;
      var json = null;

      try {
        json = JSON.parse(data);
      } catch (e) {}

      if (_this.settings.heartbeat !== null) {
        _this.settings.lastHeartbeat = new Date();
      }

      if (json !== null && typeof json.heartbeat === 'undefined') {
        _this.settings.messageQueue.push(json);
      }
    }, false);
    source.addEventListener('error', function (e) {
      if (_this.settings.debug) {
        console.log('[Msg] error check', _this.settings.sseUrl);
      }
      /* eslint eqeqeq: "off" */


      if (e.readyState == EventSource.CLOSED) {
        if (_this.settings.debug) console.warn('[Msg] connection closed', e);
      } else {
        if (_this.settings.debug) console.log(e, e.readyState);
      }

      _this.closeChanel();

      _this.settings.startupCheck = false;
    }, false);
  };

  this.closeChanel = function () {
    this.settings.active = false;
    this.settings.source.close();
  };

  this.sseFailed = function () {
    var _this = this;

    _this.settings.heartbeat = null;
    _this.settings.active = false;

    if (_this.heartbeatIntervalInstance !== null) {
      clearInterval(_this.heartbeatIntervalInstance);
    }

    _this.settings.onStartupError(_this.settings);
  };

  this.windowActivity = function () {
    var _this = this;

    (function () {
      var hidden = 'hidden'; // Standards:

      if (hidden in document) {
        document.addEventListener('visibilitychange', onchange);
      } else if ((hidden = 'mozHidden') in document) {
        document.addEventListener('mozvisibilitychange', onchange);
      } else if ((hidden = 'webkitHidden') in document) {
        document.addEventListener('webkitvisibilitychange', onchange);
      } else if ((hidden = 'msHidden') in document) {
        document.addEventListener('msvisibilitychange', onchange);
      } else if ('onfocusin' in document) {
        // IE 9 and lower:
        document.onfocusin = document.onfocusout = onchange;
      } else {
        // All others:
        window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;
      }

      function onchange(evt) {
        var status = '';
        var v = 'visible';
        var h = 'hidden';
        var evtMap = {
          focus: v,
          focusin: v,
          pageshow: v,
          blur: h,
          focusout: h,
          pagehide: h
        };
        evt = evt || window.event;

        if (evt.type in evtMap) {
          status = evtMap[evt.type];
        } else {
          status = this[hidden] ? 'hidden' : 'visible';
        }

        if (status === 'visible' && _this.settings.source.readyState !== 0 && _this.settings.source.readyState !== 1) {
          _this.openChanel();
        } else if (status === 'hidden' && (_this.settings.source.readyState === 0 || _this.settings.source.readyState === 1)) {
          _this.closeChanel();
        }
      } // set the initial state (but only if browser supports the Page Visibility API)


      if (document[hidden] !== undefined) {
        onchange({
          type: document[hidden] ? 'blur' : 'focus'
        });
      }
    })();
  };

  this.init = function () {
    var _this = this;

    try {
      if (_this.settings.debug) console.log('[Msg] SSE starting', _this.settings.sseUrl, new Date());

      _this.openChanel();

      if (_this.settings.debug) console.log('[Msg] SSE started', _this.settings.sseUrl, new Date(), _this.settings.source.readyState);

      _this.setInterval();

      _this.windowActivity();

      setTimeout(function () {
        if (!_this.settings.startupCheck) {
          console.log('sse failed');

          _this.sseFailed();
        }
      }, 2000);
      window.addEventListener('unload', function (event) {
        if (_this.settings.debug) console.log('[Msg] closing messaging service', new Date());

        _this.settings.source.close();

        _this.settings.active = false;

        _this.settings.heartBeatAjax.abort();

        if (_this.intervalInstance) {
          clearInterval(_this.intervalInstance);
        }
      });
      window.addEventListener('beforeunload', function (event) {
        if (_this.settings.debug) console.log('[Msg] closing messaging service');

        _this.settings.source.close();

        _this.settings.heartBeatAjax.abort();

        if (_this.intervalInstance) {
          clearInterval(_this.intervalInstance);
        }
      });
    } catch (e) {
      if (_this.settings.debug) console.log('EventSource failed');

      _this.sseFailed();
    }
  };

  this.init();
};

/***/ }),

/***/ "./src/javascript/modules/MiniScoreBoard.js":
/*!**************************************************!*\
  !*** ./src/javascript/modules/MiniScoreBoard.js ***!
  \**************************************************/
/*! exports provided: MiniScoreBoard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MiniScoreBoard", function() { return MiniScoreBoard; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/query */ "./src/javascript/utils/query.js");
/* harmony import */ var _utils_addClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/addClass */ "./src/javascript/utils/addClass.js");
/* harmony import */ var _utils_hasClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/hasClass */ "./src/javascript/utils/hasClass.js");
/* harmony import */ var _utils_removeClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/removeClass */ "./src/javascript/utils/removeClass.js");
/* harmony import */ var _utils_remove__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/remove */ "./src/javascript/utils/remove.js");
/* harmony import */ var _dragElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dragElement */ "./src/javascript/modules/dragElement.js");







var MiniScoreBoard = function MiniScoreBoard(options) {
  this.settings = {
    lbWidget: null,
    container: null,
    overlayContainer: null,
    infoContainer: null,
    updateInterval: null,
    updateIntervalTime: 1000,
    active: false,
    enableDragging: true,
    dragging: false
  };

  if (typeof options !== 'undefined') {
    for (var opt in options) {
      if (options.hasOwnProperty(opt)) {
        this.settings[opt] = options[opt];
      }
    }
  }

  this.layout = function () {
    var wrapper = document.createElement('div');
    var iconWrapper = document.createElement('div');
    var icon = document.createElement('div');
    var informationWrapper = document.createElement('div');
    var informationTopWrapper = document.createElement('div');
    var informationWrapperClose = document.createElement('div');
    var informationClose = document.createElement('a');
    wrapper.setAttribute('class', 'cl-widget-ms-wrapper');
    iconWrapper.setAttribute('class', 'cl-widget-ms-icon-wrapper');
    icon.setAttribute('class', 'cl-widget-ms-icon');
    informationTopWrapper.setAttribute('class', 'cl-widget-ms-information-top-wrapper');
    informationWrapper.setAttribute('class', 'cl-widget-ms-information-wrapper');
    informationWrapperClose.setAttribute('class', 'cl-widget-ms-information-close-wrapper');
    informationClose.setAttribute('class', 'cl-widget-ms-information-close');
    informationClose.href = 'javascript:void(0);';
    informationClose.innerHTML = 'x';
    informationWrapperClose.appendChild(informationClose);
    informationWrapper.appendChild(informationWrapperClose);
    informationTopWrapper.appendChild(informationWrapper);
    iconWrapper.appendChild(icon);
    wrapper.appendChild(iconWrapper);
    wrapper.appendChild(informationTopWrapper);
    return wrapper;
  };

  this.overlayLayout = function () {
    var wrapper = document.createElement('div');
    wrapper.setAttribute('class', 'cl-widget-ms-overlay-wrapper');
    return wrapper;
  };

  this.timeManagement = function () {
    var _this = this;

    var diff = 0;
    var label = '';
    var date = '';
    var dateObj = '';
    var inverse = false;

    if (_this.settings.lbWidget.settings.competition.activeContest !== null) {
      diff = moment__WEBPACK_IMPORTED_MODULE_0___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledStart).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()());
      label = _this.settings.lbWidget.settings.translation.miniLeaderboard.startsIn;
      date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));
      dateObj = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));
      inverse = false;

      if (diff < 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode === 0) {
        label = _this.settings.lbWidget.settings.translation.miniLeaderboard.starting;
        date = '';
      } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode > 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode < 3) {
        diff = moment__WEBPACK_IMPORTED_MODULE_0___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledEnd).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()());
        dateObj = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));
        label = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));
        date = _this.settings.lbWidget.settings.translation.miniLeaderboard.rank;
        inverse = true;
      } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 3) {
        label = _this.settings.lbWidget.settings.translation.miniLeaderboard.finishing;
        date = _this.settings.lbWidget.settings.translation.miniLeaderboard.rank;
        inverse = true;
      } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode >= 4) {
        label = _this.settings.lbWidget.settings.translation.miniLeaderboard.finished;
        date = _this.settings.lbWidget.settings.translation.miniLeaderboard.rank;
        inverse = true;
      }
    }

    return {
      label: label,
      diff: diff,
      date: date,
      dateObj: dateObj,
      inverse: inverse
    };
  };

  this.layoutDefaultOrEmptyEntry = function () {
    var lbResultsMemEntry = document.createElement('div');
    var lbResultsMemLabel = document.createElement('div');
    var lbResultsMemRank = document.createElement('div');
    var lbResultsMemIcon = document.createElement('div');
    var lbResultsMemImg = document.createElement('img');
    var lbResultsMemPoints = document.createElement('div');
    lbResultsMemEntry.setAttribute('class', 'cl-widget-ms-default-mem-entry');
    lbResultsMemLabel.setAttribute('class', 'cl-widget-ms-default-mem-label');
    lbResultsMemRank.setAttribute('class', 'cl-widget-ms-default-mem-rank');
    lbResultsMemIcon.setAttribute('class', 'cl-widget-ms-default-mem-icon');
    lbResultsMemImg.setAttribute('class', 'cl-widget-ms-default-mem-img');
    lbResultsMemImg.style.display = 'none';
    lbResultsMemPoints.setAttribute('class', 'cl-widget-ms-default-mem-points');
    lbResultsMemEntry.appendChild(lbResultsMemLabel);
    lbResultsMemEntry.appendChild(lbResultsMemRank);
    lbResultsMemIcon.appendChild(lbResultsMemImg);
    lbResultsMemEntry.appendChild(lbResultsMemIcon);
    lbResultsMemEntry.appendChild(lbResultsMemPoints);
    return lbResultsMemEntry;
  };

  this.layoutFirstToOrEmptyEntry = function () {
    var lbResultsMemEntry = document.createElement('div');
    var lbResultsMemLabel = document.createElement('div');
    var lbResultsMemRank = document.createElement('div');
    var lbResultsMemIcon = document.createElement('div');
    var lbResultsMemImg = document.createElement('img');
    var lbResultsMemPoints = document.createElement('div');
    lbResultsMemEntry.setAttribute('class', 'cl-widget-ms-first-to-mem-entry');
    lbResultsMemLabel.setAttribute('class', 'cl-widget-ms-first-to-mem-label');
    lbResultsMemRank.setAttribute('class', 'cl-widget-ms-first-to-mem-rank');
    lbResultsMemIcon.setAttribute('class', 'cl-widget-ms-first-to-mem-icon');
    lbResultsMemImg.setAttribute('class', 'cl-widget-ms-first-to-mem-img');
    lbResultsMemImg.style.display = 'none';
    lbResultsMemPoints.setAttribute('class', 'cl-widget-ms-first-to-mem-points');
    lbResultsMemEntry.appendChild(lbResultsMemLabel);
    lbResultsMemEntry.appendChild(lbResultsMemRank);
    lbResultsMemIcon.appendChild(lbResultsMemImg);
    lbResultsMemEntry.appendChild(lbResultsMemIcon);
    lbResultsMemEntry.appendChild(lbResultsMemPoints);
    return lbResultsMemEntry;
  }; // let testLive = false;


  this.layoutDefaultOrEmpty = function () {
    var _this = this;

    var timeManagement = _this.timeManagement(); // var diff = timeManagement.diff;


    var label = timeManagement.label;
    var date = timeManagement.date;
    var dateObj = timeManagement.dateObj;
    var wrapperDomObj = _this.settings.infoContainer;
    var defaultDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-wrapper');
    var inverse = timeManagement.inverse;

    if (defaultDomObj === null) {
      _this.removeUnusedElements();

      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.container, 'cl-ms-default-style');
      var lbWrapper = document.createElement('div');
      var lbDateWrapper = document.createElement('div');
      var lbDateLabel = document.createElement('div');
      var lbDate = document.createElement('div');
      var lbResultsWrapper = document.createElement('div');
      var lbResultsList = document.createElement('div');
      var lbHeaders = document.createElement('div');
      var lbHeadersRank = document.createElement('div');
      var lbHeadersPoints = document.createElement('div');

      var lbResultsMemEntry = _this.layoutDefaultOrEmptyEntry();

      var img = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbResultsMemEntry, '.cl-widget-ms-default-mem-img');
      lbWrapper.setAttribute('class', 'cl-widget-ms-default-wrapper');
      lbDateLabel.setAttribute('class', 'cl-widget-ms-default-date-label');
      lbDate.setAttribute('class', 'cl-widget-ms-default-date');
      lbDateWrapper.setAttribute('class', 'cl-widget-ms-default-date-wrapper');
      lbResultsWrapper.setAttribute('class', 'cl-widget-ms-default-results-wrapper');
      lbResultsList.setAttribute('class', 'cl-widget-ms-default-results-list');
      lbHeaders.setAttribute('class', 'cl-widget-ms-default-results-headers');
      lbHeadersRank.setAttribute('class', 'cl-widget-ms-default-results-header-rank');
      lbHeadersPoints.setAttribute('class', 'cl-widget-ms-default-results-header-points');
      lbResultsMemEntry.setAttribute('class', 'cl-widget-ms-default-mem-entry'); // lbDateLabel.innerHTML = label;

      lbDate.innerHTML = dateObj;
      lbDateWrapper.appendChild(lbDateLabel);
      lbDateWrapper.appendChild(lbDate);
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbResultsMemEntry, '.cl-widget-ms-default-mem-rank').innerHTML = '--';
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbResultsMemEntry, '.cl-widget-ms-default-mem-points').innerHTML = '--';
      img.src = '';
      img.alt = '';
      img.style.display = 'block';
      lbHeadersRank.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.rank;
      lbHeadersPoints.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.points;
      lbHeaders.appendChild(lbHeadersRank);
      lbHeaders.appendChild(lbHeadersPoints);
      lbResultsList.appendChild(lbResultsMemEntry);
      lbResultsWrapper.appendChild(lbHeaders);
      lbResultsWrapper.appendChild(lbResultsList);
      lbWrapper.appendChild(lbDateWrapper);
      lbWrapper.appendChild(lbResultsWrapper);
      defaultDomObj = wrapperDomObj.appendChild(lbWrapper);
      setTimeout(function () {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(wrapperDomObj, 'cl-show');
      }, 200);
    } else {
      if (!Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_3__["default"])(wrapperDomObj, 'cl-show')) {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(wrapperDomObj, 'cl-show');
      }

      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-date-label').innerHTML = label;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-date').innerHTML = date;
    }

    window.mapObject(_this.settings.lbWidget.settings.leaderboard.leaderboardData, function (lbEntry) {
      if ((lbEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbEntry.memberId === _this.settings.lbWidget.settings.memberId) && typeof lbEntry.rankings !== 'undefined') {
        var scoreArea = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(defaultDomObj, '.cl-widget-ms-default-results-list');
        scoreArea.innerHTML = '';
        Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-date-label').innerHTML = '';
        Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-date').innerHTML = dateObj;
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-date-wrapper'), 'cl-widget-ms-default-date-only');
        window.mapObject(lbEntry.rankings, function (lbRankingEntry) {
          var icon = _this.settings.lbWidget.populateIdenticonBase64Image(lbRankingEntry.memberId);

          var lbWrapper = _this.layoutDefaultOrEmptyEntry();

          var img = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-default-mem-img');
          var selfMember = lbRankingEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbRankingEntry.memberId === _this.settings.lbWidget.settings.memberId;
          img.src = icon;
          img.alt = '';
          img.style.display = 'block';

          if (selfMember) {
            Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(lbWrapper, 'cl-widget-ms-default-mem-self');
          }

          Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-default-mem-label').innerHTML = selfMember ? 'YOU' : '';
          Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-default-mem-rank').innerHTML = "<span class='cl-mem-rank-label'>" + _this.settings.lbWidget.settings.translation.leaderboard.rank + "</span><span class='cl-mem-rank'>" + lbRankingEntry.rank + '</span>';
          Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-default-mem-points').innerHTML = "<span class='cl-mem-points-label'>" + _this.settings.lbWidget.settings.translation.leaderboard.points + "</span><span class='cl-mem-points'>" + lbRankingEntry.points + '</span>';
          scoreArea.appendChild(lbWrapper);
        }); // testLive = true;
        //  var lastScore = query(_this.settings.container, ".cl-widget-ms-default-last-score").innerHTML,
        //  highScore = query(_this.settings.container, ".cl-widget-ms-default-high-score").innerHTML,
        //  rank = query(_this.settings.container, ".cl-widget-ms-default-rank-value"),
        //  change = (lbEntry.change < 0) ? "down" : ( lbEntry.change > 0 ? "up" : "same" ),
        //  rankValue = lbEntry.rank;
        //
        // if( lastScore !== String(lbEntry.points) && String(lbEntry.points) !== highScore ){
        //  query(_this.settings.container, ".cl-widget-ms-default-last-score").innerHTML = highScore;
        // }
        //
        // query(_this.settings.container, ".cl-widget-ms-default-high-score").innerHTML = lbEntry.points;
        //
        // removeClass(rank, "cl-ms-rank-up");
        // removeClass(rank, "cl-ms-rank-down");
        // removeClass(rank, "cl-ms-rank-same");
        //
        // addClass(rank, "cl-ms-rank-" + change);
        //
        // rank.innerHTML = rankValue;
      }
    });

    if (inverse && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_3__["default"])(defaultDomObj, 'cl-inverse')) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(defaultDomObj, 'cl-inverse');
    }
  };

  this.layoutFirstToOrEmpty = function (strategy) {
    var _this = this;

    var timeManagement = _this.timeManagement(); // var diff = timeManagement.diff;


    var label = timeManagement.label;
    var date = timeManagement.date;
    var dateObj = timeManagement.dateObj;
    var wrapperDomObj = _this.settings.infoContainer;
    var defaultDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-wrapper');
    var inverse = timeManagement.inverse;

    if (defaultDomObj === null) {
      _this.removeUnusedElements();

      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.container, 'cl-ms-first-to-style');
      var lbWrapper = document.createElement('div');
      var lbDateWrapper = document.createElement('div');
      var lbDateLabel = document.createElement('div');
      var lbDate = document.createElement('div');
      var lbResultsWrapper = document.createElement('div');
      var lbResultsList = document.createElement('div');
      var lbHeaders = document.createElement('div');
      var lbHeadersRank = document.createElement('div');
      var lbHeadersPoints = document.createElement('div');

      var lbResultsMemEntry = _this.layoutFirstToOrEmptyEntry();

      var img = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbResultsMemEntry, '.cl-widget-ms-first-to-mem-img');
      lbWrapper.setAttribute('class', 'cl-widget-ms-first-to-wrapper');
      lbDateLabel.setAttribute('class', 'cl-widget-ms-first-to-date-label');
      lbDate.setAttribute('class', 'cl-widget-ms-first-to-date');
      lbDateWrapper.setAttribute('class', 'cl-widget-ms-first-to-date-wrapper');
      lbResultsWrapper.setAttribute('class', 'cl-widget-ms-first-to-results-wrapper');
      lbResultsList.setAttribute('class', 'cl-widget-ms-first-to-results-list');
      lbHeaders.setAttribute('class', 'cl-widget-ms-first-to-results-headers');
      lbHeadersRank.setAttribute('class', 'cl-widget-ms-first-to-results-header-rank');
      lbHeadersPoints.setAttribute('class', 'cl-widget-ms-first-to-results-header-points');
      lbResultsMemEntry.setAttribute('class', 'cl-widget-ms-first-to-mem-entry'); // lbDateLabel.innerHTML = label;

      lbDate.innerHTML = dateObj;
      lbDateWrapper.appendChild(lbDateLabel);
      lbDateWrapper.appendChild(lbDate);
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbResultsMemEntry, '.cl-widget-ms-first-to-mem-rank').innerHTML = '--';
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbResultsMemEntry, '.cl-widget-ms-first-to-mem-points').innerHTML = '--/' + strategy.recordTimeWhenSumReaches;
      img.src = '';
      img.alt = '';
      img.style.display = 'block';
      lbHeadersRank.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.rank;
      lbHeadersPoints.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.points;
      lbHeaders.appendChild(lbHeadersRank);
      lbHeaders.appendChild(lbHeadersPoints);
      lbResultsList.appendChild(lbResultsMemEntry);
      lbResultsWrapper.appendChild(lbHeaders);
      lbResultsWrapper.appendChild(lbResultsList);
      lbWrapper.appendChild(lbDateWrapper);
      lbWrapper.appendChild(lbResultsWrapper);
      defaultDomObj = wrapperDomObj.appendChild(lbWrapper);
      setTimeout(function () {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(wrapperDomObj, 'cl-show');
      }, 200);
    } else {
      if (!Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_3__["default"])(wrapperDomObj, 'cl-show')) {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(wrapperDomObj, 'cl-show');
      }

      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-date-label').innerHTML = label;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-date').innerHTML = date;
    }

    window.mapObject(_this.settings.lbWidget.settings.leaderboard.leaderboardData, function (lbEntry) {
      if ((lbEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbEntry.memberId === _this.settings.lbWidget.settings.memberId) && typeof lbEntry.rankings !== 'undefined') {
        var scoreArea = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(defaultDomObj, '.cl-widget-ms-first-to-results-list');
        scoreArea.innerHTML = '';
        Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-date-label').innerHTML = '';
        Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-date').innerHTML = dateObj;
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-date-wrapper'), 'cl-widget-ms-first-to-date-only');
        window.mapObject(lbEntry.rankings, function (lbRankingEntry) {
          var icon = _this.settings.lbWidget.populateIdenticonBase64Image(lbRankingEntry.memberId);

          var lbWrapper = _this.layoutFirstToOrEmptyEntry();

          var img = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-first-to-mem-img');
          var selfMember = lbRankingEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbRankingEntry.memberId === _this.settings.lbWidget.settings.memberId;

          if (selfMember) {
            Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(lbWrapper, 'cl-widget-ms-first-to-mem-self');
          }

          img.src = icon;
          img.alt = '';
          img.style.display = 'block';
          Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-first-to-mem-label').innerHTML = selfMember ? 'YOU' : '';
          Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-first-to-mem-rank').innerHTML = "<span class='cl-mem-rank-label'>" + _this.settings.lbWidget.settings.translation.leaderboard.rank + "</span><span class='cl-mem-rank'>" + lbRankingEntry.rank + '</span>';
          Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(lbWrapper, '.cl-widget-ms-first-to-mem-points').innerHTML = "<span class='cl-mem-points-label'>" + _this.settings.lbWidget.settings.translation.leaderboard.points + "</span><span class='cl-mem-points'>" + lbRankingEntry.points + '/' + strategy.recordTimeWhenSumReaches + '</span>';
          scoreArea.appendChild(lbWrapper);
        });
      }
    });

    if (inverse && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_3__["default"])(defaultDomObj, 'cl-inverse')) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(defaultDomObj, 'cl-inverse');
    }
  };

  this.layoutSumBestOf = function () {
    var _this = this;

    var timeManagement = _this.timeManagement(); // var diff = timeManagement.diff;


    var label = timeManagement.label;
    var date = timeManagement.date;
    var wrapperDomObj = _this.settings.infoContainer;
    var sumBestDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-wrapper');
    var inverse = timeManagement.inverse;

    if (sumBestDomObj === null) {
      _this.removeUnusedElements();

      var lbWrapper = document.createElement('div');
      var lbDateWrapper = document.createElement('div');
      var lbDateLabel = document.createElement('div');
      var lbDate = document.createElement('div');
      var lbResultsWrapper = document.createElement('div');
      var lbResultsScoreArea = document.createElement('div');
      var lbResultsScoreAreaHigh = document.createElement('div');
      var lbResultsScoreAreaHighLabel = document.createElement('div');
      var lbResultsScoreAreaHighScore = document.createElement('div');
      var lbResultsScoreAreaLast = document.createElement('div');
      var lbResultsScoreAreaLastLabel = document.createElement('div');
      var lbResultsScoreAreaLastScore = document.createElement('div');
      var lbResultsRankArea = document.createElement('div');
      var lbResultsRankValue = document.createElement('span');
      lbWrapper.setAttribute('class', 'cl-widget-ms-sum-best-wrapper');
      lbDateLabel.setAttribute('class', 'cl-widget-ms-sum-best-date-label');
      lbDate.setAttribute('class', 'cl-widget-ms-sum-best-date');
      lbDateWrapper.setAttribute('class', 'cl-widget-ms-sum-best-date-wrapper');
      lbResultsWrapper.setAttribute('class', 'cl-widget-ms-sum-best-results-wrapper');
      lbResultsScoreArea.setAttribute('class', 'cl-widget-ms-sum-best-area');
      lbResultsScoreAreaHigh.setAttribute('class', 'cl-widget-ms-sum-best-high-area');
      lbResultsScoreAreaHighLabel.setAttribute('class', 'cl-widget-ms-sum-best-high-label');
      lbResultsScoreAreaHighScore.setAttribute('class', 'cl-widget-ms-sum-best-high-score');
      lbResultsScoreAreaLast.setAttribute('class', 'cl-widget-ms-sum-best-last-area');
      lbResultsScoreAreaLastLabel.setAttribute('class', 'cl-widget-ms-sum-best-last-label');
      lbResultsScoreAreaLastScore.setAttribute('class', 'cl-widget-ms-sum-best-last-score');
      lbResultsRankArea.setAttribute('class', 'cl-widget-ms-sum-best-rank-area');
      lbResultsRankValue.setAttribute('class', 'cl-widget-ms-sum-best-rank-value');
      lbDateLabel.innerHTML = label;
      lbDate.innerHTML = date;
      lbResultsScoreAreaHighLabel.innerHTML = _this.settings.lbWidget.settings.translation.miniLeaderboard.highScore;
      lbResultsScoreAreaHighScore.innerHTML = '--';
      lbResultsScoreAreaHigh.appendChild(lbResultsScoreAreaHighLabel);
      lbResultsScoreAreaHigh.appendChild(lbResultsScoreAreaHighScore);
      lbResultsScoreArea.appendChild(lbResultsScoreAreaHigh);
      lbResultsScoreAreaLastLabel.innerHTML = _this.settings.lbWidget.settings.translation.miniLeaderboard.lastScore;
      lbResultsScoreAreaLastScore.innerHTML = '--';
      lbResultsScoreAreaLast.appendChild(lbResultsScoreAreaLastLabel);
      lbResultsScoreAreaLast.appendChild(lbResultsScoreAreaLastScore);
      lbResultsScoreArea.appendChild(lbResultsScoreAreaLast);
      lbResultsRankValue.innerHTML = '--';
      lbResultsRankArea.appendChild(lbResultsRankValue);
      lbResultsWrapper.appendChild(lbResultsScoreArea);
      lbResultsWrapper.appendChild(lbResultsRankArea);
      lbDateWrapper.appendChild(lbDateLabel);
      lbDateWrapper.appendChild(lbDate);
      lbWrapper.appendChild(lbDateWrapper);
      lbWrapper.appendChild(lbResultsWrapper);
      sumBestDomObj = wrapperDomObj.appendChild(lbWrapper);
      setTimeout(function () {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(wrapperDomObj, 'cl-show');
      }, 200);
    } else {
      if (!Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_3__["default"])(wrapperDomObj, 'cl-show')) {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(wrapperDomObj, 'cl-show');
      }

      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-date-label').innerHTML = label;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-date').innerHTML = date;
    }

    window.mapObject(_this.settings.lbWidget.settings.leaderboard.leaderboardData, function (lbEntry) {
      if (lbEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbEntry.memberId === _this.settings.lbWidget.settings.memberId) {
        var lastScore = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-last-score').innerHTML;
        var highScore = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-high-score').innerHTML;
        var rank = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-rank-value');
        var change = lbEntry.change < 0 ? 'down' : lbEntry.change > 0 ? 'up' : 'same';
        var rankValue = lbEntry.rank;

        if (lastScore !== String(lbEntry.points) && String(lbEntry.points) !== highScore) {
          Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-last-score').innerHTML = highScore;
        }

        Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-high-score').innerHTML = lbEntry.points;
        Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_4__["default"])(rank, 'cl-ms-rank-up');
        Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_4__["default"])(rank, 'cl-ms-rank-down');
        Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_4__["default"])(rank, 'cl-ms-rank-same');
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(rank, 'cl-ms-rank-' + change);
        rank.innerHTML = rankValue;
      }
    });

    if (inverse && !Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_3__["default"])(sumBestDomObj, 'cl-inverse')) {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(sumBestDomObj, 'cl-inverse');
    }
  };

  this.layoutRequiresOptIn = function () {
    var _this = this;

    var diff = moment__WEBPACK_IMPORTED_MODULE_0___default()(_this.settings.lbWidget.settings.competition.activeCompetition.scheduledStart).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()());
    var label = 'Starting In';
    var wrapperDomObj = _this.settings.infoContainer;

    var date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));

    if (diff < 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode === 0) {
      label = 'starting';
      date = '';
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode > 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode < 3) {
      diff = moment__WEBPACK_IMPORTED_MODULE_0___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledEnd).diff(moment__WEBPACK_IMPORTED_MODULE_0___default()());
      label = 'started';
      date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_0___default.a.duration(diff));
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 3) {
      label = 'finishing';
      date = '';
    } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode >= 4) {
      label = 'finished';
      date = '';
    }

    if (Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-optin-wrapper') === null) {
      _this.removeUnusedElements();

      var optInWrapper = document.createElement('div');
      var optInDateWrapper = document.createElement('div');
      var optInDateLabel = document.createElement('div');
      var optInDate = document.createElement('div');
      var optInDateActionWrapper = document.createElement('div');
      var optInDateAction = document.createElement('a');
      optInWrapper.setAttribute('class', 'cl-widget-ms-optin-wrapper');
      optInDateLabel.setAttribute('class', 'cl-widget-ms-optin-date-label');
      optInDate.setAttribute('class', 'cl-widget-ms-optin-date');
      optInDateWrapper.setAttribute('class', 'cl-widget-ms-optin-date-wrapper');
      optInDateActionWrapper.setAttribute('class', 'cl-widget-ms-optin-action-wrapper');
      optInDateAction.setAttribute('class', 'cl-widget-ms-optin-action');
      optInDateLabel.innerHTML = label;
      optInDate.innerHTML = date;
      optInDateAction.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
      optInDateWrapper.appendChild(optInDateLabel);
      optInDateWrapper.appendChild(optInDate);
      optInDateActionWrapper.appendChild(optInDateAction);
      optInWrapper.appendChild(optInDateWrapper);
      optInWrapper.appendChild(optInDateActionWrapper);
      wrapperDomObj.appendChild(optInWrapper);
      setTimeout(function () {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(wrapperDomObj, 'cl-show');
      }, 200);
    } else {
      if (!Object(_utils_hasClass__WEBPACK_IMPORTED_MODULE_3__["default"])(wrapperDomObj, 'cl-show')) {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(wrapperDomObj, 'cl-show');
      }

      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-optin-date-label').innerHTML = label;
      Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-optin-date').innerHTML = date;
    }
  };

  this.removeUnusedElements = function () {
    var _this = this;

    var defaultLayoutWrapperDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-wrapper');
    var optInWrapperDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-optin-wrapper');
    var sumBestDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-sum-best-wrapper');
    var firstToDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-first-to-wrapper');
    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, 'cl-ms-default-style');
    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, 'cl-ms-optin-style');
    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, 'cl-ms-sum-best-style');
    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, 'cl-ms-first-to-style');

    if (defaultLayoutWrapperDomObj !== null) {
      Object(_utils_remove__WEBPACK_IMPORTED_MODULE_5__["default"])(defaultLayoutWrapperDomObj);
    }

    if (optInWrapperDomObj !== null) {
      Object(_utils_remove__WEBPACK_IMPORTED_MODULE_5__["default"])(optInWrapperDomObj);
    }

    if (sumBestDomObj !== null) {
      Object(_utils_remove__WEBPACK_IMPORTED_MODULE_5__["default"])(sumBestDomObj);
    }

    if (firstToDomObj !== null) {
      Object(_utils_remove__WEBPACK_IMPORTED_MODULE_5__["default"])(firstToDomObj);
    }
  };

  this.clearAll = function () {
    var _this = this;

    if (_this.settings.updateInterval) {
      clearTimeout(_this.settings.updateInterval);
    }

    _this.removeInfoArea();

    _this.settings.active = false;
  };

  this.removeInfoArea = function () {
    var _this = this;

    var wrapperDomObj = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-show');
    var layout = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-default-wrapper');
    if (wrapperDomObj !== null) Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_4__["default"])(wrapperDomObj, 'cl-show');

    if (layout !== null) {
      setTimeout(function () {
        Object(_utils_remove__WEBPACK_IMPORTED_MODULE_5__["default"])(layout);
      }, 300);
    }
  };

  this.updateScoreBoard = function () {
    var _this = this;

    if (_this.settings.updateInterval) {
      clearTimeout(_this.settings.updateInterval);
    }

    _this.settings.updateInterval = setTimeout(function () {
      _this.loadInfoArea(function () {
        _this.updateScoreBoard();
      });
    }, _this.settings.updateIntervalTime);
  };

  this.loadInfoArea = function (callback) {
    var _this = this;

    if (_this.settings.active && _this.settings.lbWidget.settings.competition.activeCompetition !== null && _this.settings.lbWidget.settings.competition.activeCompetition.statusCode < 7) {
      if (typeof _this.settings.lbWidget.settings.competition.activeCompetition.optin === 'boolean' && !_this.settings.lbWidget.settings.competition.activeCompetition.optin) {
        _this.layoutRequiresOptIn();

        callback();
      } else if (_this.settings.lbWidget.settings.competition.activeContest !== null && _this.settings.lbWidget.settings.competition.activeContest.strategy.type === 'SumBest') {
        _this.layoutSumBestOf();

        callback();
      } else if (_this.settings.lbWidget.settings.competition.activeContest !== null && _this.settings.lbWidget.settings.competition.activeContest.strategy.type === 'FirstTo') {
        _this.layoutFirstToOrEmpty(_this.settings.lbWidget.settings.competition.activeContest.strategy);

        callback();
      } else if (_this.settings.lbWidget.settings.competition.activeContestId !== null) {
        _this.layoutDefaultOrEmpty();

        callback();
      } else {
        _this.layoutDefaultOrEmpty();
      }
    } else {
      _this.clearAll();
    }
  };

  this.eventListeners = function () {
    var _this = this;

    Object(_dragElement__WEBPACK_IMPORTED_MODULE_6__["default"])(_this.settings.container, Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-icon'), _this.settings.overlayContainer, _this.settings.lbWidget.settings.bindContainer, function (newTop, newLeft) {
      _this.settings.lbWidget.stopActivity();

      if (newTop <= 5) {
        Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.container, 'cl-vertical-mini');
      } else if (newLeft <= 5) {
        Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_4__["default"])(_this.settings.container, 'cl-vertical-mini');
      }

      _this.settings.dragging = true;
    }, function () {
      _this.settings.lbWidget.restartActivity();

      setTimeout(function () {
        _this.settings.dragging = false;
      }, 200);
    }, function () {
      _this.settings.lbWidget.clickedMiniScoreBoard();
    });
  };

  this.initLayout = function (callback) {
    var _this = this;

    if (_this.settings.container === null) {
      _this.settings.active = true;
      _this.settings.container = _this.settings.lbWidget.settings.bindContainer.appendChild(_this.layout());
      _this.settings.overlayContainer = _this.settings.lbWidget.settings.bindContainer.appendChild(_this.overlayLayout());
      _this.settings.infoContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.settings.container, '.cl-widget-ms-information-wrapper');

      _this.eventListeners();
    }

    if (typeof callback === 'function') {
      callback();
    }
  };

  this.loadScoreBoard = function () {
    var _this = this;

    _this.initLayout(function () {
      _this.loadInfoArea(function () {
        _this.updateScoreBoard();
      });

      setTimeout(function () {
        _this.updateScoreBoard();
      }, 1000);
    });
  };
};

/***/ }),

/***/ "./src/javascript/modules/Notifications.js":
/*!*************************************************!*\
  !*** ./src/javascript/modules/Notifications.js ***!
  \*************************************************/
/*! exports provided: Notifications */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Notifications", function() { return Notifications; });
/* harmony import */ var _Messaging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Messaging */ "./src/javascript/modules/Messaging.js");
/* harmony import */ var _utils_removeClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/removeClass */ "./src/javascript/utils/removeClass.js");
/* harmony import */ var _utils_query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/query */ "./src/javascript/utils/query.js");
/* harmony import */ var _utils_stripHtml__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/stripHtml */ "./src/javascript/utils/stripHtml.js");
/* harmony import */ var _utils_addClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/addClass */ "./src/javascript/utils/addClass.js");





var Notifications = function Notifications(options) {
  this.settings = {
    container: null,
    detailsContainer: null,
    lbWidget: null,
    eventStream: [],
    checkTimeout: 2000,
    onDisplayCheckTimeout: 10000,
    checkInterval: null,
    autoNotificationHideInterval: null,
    autoNotificationHideTime: 10000,
    displayInProgress: false
  };

  if (typeof options !== 'undefined') {
    for (var opt in options) {
      if (options.hasOwnProperty(opt)) {
        this.settings[opt] = options[opt];
      }
    }
  }

  this.layoutWrapper = function () {
    var wrapper = document.createElement('div');
    var iconWrapper = document.createElement('div');
    var icon = document.createElement('div');
    var informationWrapper = document.createElement('div');
    var informationTopWrapper = document.createElement('div');
    var informationDetailsContainer = document.createElement('div');
    var informationDetailsLabel = document.createElement('div');
    var informationDetailsDescription = document.createElement('div');
    var informationWrapperClose = document.createElement('div');
    var informationClose = document.createElement('a');
    wrapper.setAttribute('class', 'cl-widget-notif-wrapper');
    iconWrapper.setAttribute('class', 'cl-widget-notif-icon-wrapper');
    icon.setAttribute('class', 'cl-widget-notif-icon');
    informationTopWrapper.setAttribute('class', 'cl-widget-notif-information-top-wrapper');
    informationWrapper.setAttribute('class', 'cl-widget-notif-information-wrapper');
    informationDetailsContainer.setAttribute('class', 'cl-widget-notif-information-details-wrapper');
    informationDetailsLabel.setAttribute('class', 'cl-widget-notif-information-details-label');
    informationDetailsDescription.setAttribute('class', 'cl-widget-notif-information-details-description');
    informationWrapperClose.setAttribute('class', 'cl-widget-notif-information-close-wrapper');
    informationClose.setAttribute('class', 'cl-widget-notif-information-close');
    informationClose.href = 'javascript:void(0);';
    informationClose.innerHTML = 'x';
    informationDetailsContainer.appendChild(informationDetailsLabel);
    informationDetailsContainer.appendChild(informationDetailsDescription);
    informationWrapperClose.appendChild(informationClose);
    informationWrapper.appendChild(informationWrapperClose);
    informationWrapper.appendChild(informationDetailsContainer);
    informationTopWrapper.appendChild(informationWrapper);
    iconWrapper.appendChild(icon);
    wrapper.appendChild(iconWrapper);
    wrapper.appendChild(informationTopWrapper);
    return wrapper;
  };

  var processed = {};

  this.startSSE = function () {
    var _this = this;

    _this.settings.sseInstance = new _Messaging__WEBPACK_IMPORTED_MODULE_0__["Messaging"]({
      sseUrl: _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.memberSSE.replace(':space', _this.settings.lbWidget.settings.spaceName).replace(':id', _this.settings.lbWidget.settings.memberId),
      heartbeat: _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.memberSSEHeartbeat.replace(':space', _this.settings.lbWidget.settings.spaceName).replace(':id', _this.settings.lbWidget.settings.memberId),
      ajax: {
        url: null,
        apiKey: {
          'X-API-KEY': _this.settings.lbWidget.settings.apiKey
        }
      },
      callback: function callback(data) {
        var dataKey = JSON.stringify(data);
        var currentTime = new Date().getTime();

        if (typeof processed[dataKey] === 'undefined' || typeof processed[dataKey] !== 'undefined' && processed[dataKey] + 10000 < currentTime) {
          processed[JSON.stringify(data)] = currentTime;

          _this.settings.eventStream.push(data);
        }
      },
      onStartupError: function onStartupError(settings) {},
      debug: true
    });
  };

  this.autoNotificationHide = function () {
    var _this = this;

    if (_this.settings.autoNotificationHideInterval) {
      clearTimeout(_this.settings.autoNotificationHideInterval);
    }

    _this.settings.autoNotificationHideInterval = setTimeout(function () {
      _this.hideNotification();
    }, _this.settings.autoNotificationHideTime);
  };

  this.hideNotification = function () {
    var _this = this;

    if (_this.settings.autoNotificationHideInterval) {
      clearTimeout(_this.settings.autoNotificationHideInterval);
    }

    _this.settings.displayInProgress = false;
    Object(_utils_removeClass__WEBPACK_IMPORTED_MODULE_1__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.container, '.cl-widget-notif-information-wrapper'), 'cl-show');
    setTimeout(function () {
      _this.settings.container.style.display = 'none';
    }, 200);
  };

  this.showAchievementNotification = function (data) {
    var _this = this;

    var label = Object(_utils_query__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.detailsContainer, '.cl-widget-notif-information-details-label');
    var description = Object(_utils_query__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.detailsContainer, '.cl-widget-notif-information-details-description');
    var descriptionText = Object(_utils_stripHtml__WEBPACK_IMPORTED_MODULE_3__["default"])(data.data.description);
    label.innerHTML = data.data.name.length > 23 ? data.data.name.substr(0, 23) + '...' : data.data.name;
    description.innerHTML = descriptionText.length > 60 ? descriptionText.substr(0, 60) + '...' : descriptionText;
    _this.settings.detailsContainer.dataset.id = data.data.id;
    _this.settings.container.style.display = 'block';
    setTimeout(function () {
      Object(_utils_addClass__WEBPACK_IMPORTED_MODULE_4__["default"])(Object(_utils_query__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.container, '.cl-widget-notif-information-wrapper'), 'cl-show');
    }, 200);

    _this.autoNotificationHide();
  };

  this.eventStreamCheck = function () {
    var _this = this;

    if (_this.settings.checkInterval) {
      clearTimeout(_this.settings.checkInterval);
    }

    if (_this.settings.eventStream.length > 0 && !_this.settings.displayInProgress) {
      var data = _this.settings.eventStream[0];

      var index = _this.settings.eventStream.indexOf(data);

      if (typeof data.achievementId !== 'undefined') {
        _this.settings.displayInProgress = true;

        _this.settings.lbWidget.getAchievement(data.achievementId, function (data) {
          _this.showAchievementNotification(data);

          _this.settings.checkInterval = setTimeout(function () {
            _this.eventStreamCheck();
          }, _this.settings.onDisplayCheckTimeout);
        });

        _this.settings.eventStream.splice(index, 1);
      } else if (typeof data.notificationId !== 'undefined') {
        _this.settings.checkInterval = setTimeout(function () {
          _this.eventStreamCheck();
        }, _this.settings.checkTimeout);
      } else {
        _this.settings.checkInterval = setTimeout(function () {
          _this.eventStreamCheck();
        }, _this.settings.checkTimeout);
      }

      if (index > -1) {
        _this.settings.eventStream.splice(index, 1);
      }
    } else {
      _this.settings.checkInterval = setTimeout(function () {
        _this.eventStreamCheck();
      }, _this.settings.checkTimeout);
    }
  };

  this.init = function () {
    var _this = this;

    if (_this.settings.container === null) {
      _this.startSSE();

      _this.settings.container = _this.settings.lbWidget.settings.bindContainer.appendChild(_this.layoutWrapper());
      _this.settings.detailsContainer = Object(_utils_query__WEBPACK_IMPORTED_MODULE_2__["default"])(_this.settings.container, '.cl-widget-notif-information-details-wrapper');
    } else {
      // terminate SSE
      _this.settings.sseInstance.closeChanel(); // update the member


      _this.settings.sseInstance.settings.sseUrl = _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.memberSSE.replace(':space', _this.settings.lbWidget.settings.spaceName).replace(':id', _this.settings.lbWidget.settings.memberId);
      _this.settings.sseInstance.settings.heartbeat = _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.memberSSEHeartbeat.replace(':space', _this.settings.lbWidget.settings.spaceName).replace(':id', _this.settings.lbWidget.settings.memberId); // re-instantiate SSE

      _this.settings.sseInstance.openChanel();
    }

    _this.eventStreamCheck();
  };
};

/***/ }),

/***/ "./src/javascript/modules/cLabs.js":
/*!*****************************************!*\
  !*** ./src/javascript/modules/cLabs.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// default domain
// var apiURL = "http://192.168.1.8:9998";
var apiURL = 'https://gateway.competitionlabs.com';
var cLabs = {
  api: {
    url: apiURL
  },
  classSelector: /^\.([\w-]+)$/,
  // class string expression check
  idSelector: /^#[\w\d\-\_\&\!\@\*]+$/,
  // ID string expression check
  tagSelector: /^[\w-]+$/ // TAG string expression check

};
/* harmony default export */ __webpack_exports__["default"] = (cLabs);

/***/ }),

/***/ "./src/javascript/modules/dragElement.js":
/*!***********************************************!*\
  !*** ./src/javascript/modules/dragElement.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/javascript/utils/index.js");
 // var scrollObj2 = null;

var movementInterval;

var dragElement = function dragElement(elmnt, draggableEl, overlayContainer, container, dragging, finishDragging, mobileTouch) {
  var pos1 = 0;
  var pos2 = 0;
  var pos3 = 0;
  var pos4 = 0;
  var isMobile = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["isMobileTablet"])();
  var isiOS = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["isiOSDevice"])();
  var isParentWindow = elmnt.parentNode.nodeName === 'BODY';
  var maxLeft = isParentWindow ? window.innerWidth : container.offsetWidth;
  var maxTop = isParentWindow ? window.innerHeight : container.offsetHeight;
  var touchStart;
  var moving = null; // scrollObj2 = query(".scroll-res");

  if (movementInterval) {
    clearTimeout(movementInterval);
  }

  var onWindowChange = function onWindowChange() {
    var isVertical = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["hasClass"])(elmnt, 'cl-vertical-mini');
    var maxLeft = isParentWindow ? window.innerWidth : container.offsetWidth;
    var maxTop = isParentWindow ? window.innerHeight : container.offsetHeight;
    var offsetMaxLeft = maxLeft - parseInt(elmnt.offsetWidth + (isVertical ? draggableEl.offsetWidth / 7 : draggableEl.offsetWidth / 1.6));
    var offsetMaxTop = maxTop - parseInt(elmnt.offsetHeight + (isVertical ? draggableEl.offsetHeight / 1.2 : draggableEl.offsetHeight / 4));
    var elTop = parseInt(elmnt.style.top);
    var elLeft = parseInt(elmnt.style.left);

    if (elTop > offsetMaxTop && offsetMaxTop > 5) {
      elmnt.style.top = offsetMaxTop + 'px';
    }

    if (elLeft > offsetMaxLeft && offsetMaxLeft > 5) {
      elmnt.style.left = offsetMaxLeft + 'px';
    }
  };

  if (isMobile) {
    /* listen to the touchMove event,
      every time it fires, grab the location
      of touch and assign it to box */
    var justATouch = false;
    draggableEl.addEventListener('touchstart', function (e) {
      justATouch = true;
      if (touchStart) clearTimeout(touchStart);
      maxLeft = isParentWindow ? window.innerWidth : container.offsetWidth;
      maxTop = isParentWindow ? window.innerHeight : container.offsetHeight;
      touchStart = setTimeout(function () {
        justATouch = false;
      }, 100);
    }, {
      passive: isiOS
    });
    draggableEl.addEventListener('touchmove', function (e) {
      e.preventDefault();
      pos3 = e.targetTouches[0].pageX;
      pos4 = e.targetTouches[0].pageY; // moving = new Date().getTime();

      elementDrag(e);
    }, {
      passive: isiOS
    });
    draggableEl.addEventListener('touchend', function (e) {
      // e.preventDefault();
      // current box position.
      closeDragElement(e);
      moving = null;

      if (justATouch && typeof mobileTouch === 'function') {
        mobileTouch();
      }
    }, {
      passive: isiOS
    });
    window.addEventListener('orientationchange', function (e) {
      onWindowChange();
    }, true);
  } else {
    // if present, the header is where you move the DIV from:
    draggableEl.onmousedown = dragMouseDown;
    window.addEventListener('resize', function (e) {
      onWindowChange();
    }, true);
  }

  function dragMouseDown(e) {
    e = e || window.event;
    e.preventDefault();
    maxLeft = isParentWindow ? window.innerWidth : container.offsetWidth;
    maxTop = isParentWindow ? window.innerHeight : container.offsetHeight;
    overlayContainer.style.display = 'block'; // get the mouse cursor position at startup:

    pos3 = e.clientX;
    pos4 = e.clientY;
    document.onmouseup = closeDragElement; // call a function whenever the cursor moves:

    document.onmousemove = elementDrag;
  }
  /**
   * Adds additional offset to max left and top based on orientation and container width (will be affected by CSS styling so needs to be adjusted accordingly)
   * - elmnt => is the main container that has the positioning applied to
   * - draggableEl => key element that is mean for dragging
   */


  var checkMaxMinRestraints = function checkMaxMinRestraints(newTop, newLeft, offsetMaxLeft, offsetMaxTop) {
    var // minLeft = (isVertical ? elmnt.offsetWidth/4 : 0 ), // attempt to restrict the container to go out of bounds by a few pixels, needs some work
    minLeft = 0;
    var top = newTop <= 0 ? 0 : newTop;
    var left = newLeft <= minLeft ? minLeft : newLeft;

    if (left >= offsetMaxLeft) {
      left = offsetMaxLeft;
    }

    if (top >= offsetMaxTop) {
      top = offsetMaxTop;
    }

    return {
      top: top,
      left: left
    };
  };

  function elementDrag(e) {
    e = e || window.event;
    e.preventDefault(); // calculate the new cursor position:

    var posX = isMobile ? e.targetTouches[0].pageX : e.clientX;
    var posY = isMobile ? e.targetTouches[0].pageY : e.clientY;
    var isVertical = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["hasClass"])(elmnt, 'cl-vertical-mini');
    var offsetMaxLeft = maxLeft - parseInt(elmnt.offsetWidth + (isVertical ? draggableEl.offsetWidth / 7 : draggableEl.offsetWidth / 1.6));
    var offsetMaxTop = maxTop - parseInt(elmnt.offsetHeight + (isVertical ? draggableEl.offsetHeight / 1.2 : draggableEl.offsetHeight / 4));
    pos1 = pos3 - posX;
    pos2 = pos4 - posY;
    pos3 = parseInt(posX);
    pos4 = parseInt(posY);
    moving = new Date().getTime();
    checkMovement();
    if (!Object(_utils__WEBPACK_IMPORTED_MODULE_0__["hasClass"])(elmnt, 'cl-being-moved')) Object(_utils__WEBPACK_IMPORTED_MODULE_0__["addClass"])(elmnt, 'cl-being-moved');
    var newTop = isMobile ? posY - parseInt(draggableEl.offsetHeight / 2) : elmnt.offsetTop - pos2;
    var newLeft = isMobile ? posX - parseInt(draggableEl.offsetWidth / 2) : elmnt.offsetLeft - pos1;
    var leftTopCheck = checkMaxMinRestraints(newTop, newLeft, offsetMaxLeft, offsetMaxTop); // set the element's new position:
    // scrollObj2.innerHTML = leftTopCheck.top + "-" + leftTopCheck.left + " : "+ newTop + "-" + newLeft + " : " + (posX < 0 || posY < 0 || posX > maxLeft || posY > maxTop) + "-" + (newTop > offsetMaxTop || newLeft > offsetMaxLeft);
    // scrollObj2.innerHTML = leftTopCheck.top + "-" + leftTopCheck.left + " : "+ newTop +"-"+ newLeft + " : " + (posX < 0 || posY < 0 || posX > maxLeft || posY > maxTop) + "-" + (newTop > offsetMaxTop || newLeft > offsetMaxLeft);

    if (posX < 0 || posY < 0 || posX > maxLeft || posY > maxTop) {
      closeDragElement(e);
    } else if (newTop > offsetMaxTop || newLeft > offsetMaxLeft) {
      closeDragElement(e);
    } else if (leftTopCheck.top > offsetMaxTop || leftTopCheck.left > offsetMaxLeft) {
      closeDragElement(e);
    } else {
      elmnt.style.top = leftTopCheck.top + 'px';
      elmnt.style.left = leftTopCheck.left + 'px';
    }

    if (typeof dragging === 'function') dragging(newTop, newLeft);
  }

  function closeDragElement(e) {
    overlayContainer.style.display = 'none';

    if (isMobile) {
      e.preventDefault();
    } else {
      // stop moving when mouse button is released:
      document.onmouseup = null;
      document.onmousemove = null;
    }

    moving = null;
    Object(_utils__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(elmnt, 'cl-being-moved');
    if (typeof finishDragging === 'function') finishDragging();
  }

  function checkMovement() {
    if (movementInterval) {
      clearTimeout(movementInterval);
    }

    movementInterval = setTimeout(function () {
      if (moving !== null && moving + 3000 < new Date().getTime() && !isMobile) {
        closeDragElement();
      } else if (moving !== null) {
        checkMovement();
      }
    }, 3000);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (dragElement);

/***/ }),

/***/ "./src/javascript/modules/setTimeoutGlobal.js":
/*!****************************************************!*\
  !*** ./src/javascript/modules/setTimeoutGlobal.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// global timeout handling
try {
  if (typeof setTimeoutGlobal !== 'function') {
    window._setTimeoutGlobalRepository = [];

    window.setTimeoutGlobal = function (id, func, timer) {
      var exists = false;
      window.mapObject(window._setTimeoutGlobalRepository, function (instance, key, count) {
        if (id === instance.id) {
          exists = true;
        }
      });

      if (!exists) {
        var interval = setTimeout(function () {
          window.mapObject(window._setTimeoutGlobalRepository, function (instance, key, count) {
            if (id === instance.id) {
              window._setTimeoutGlobalRepository.splice(key, 1);
            }
          });

          if (typeof func === 'function') {
            func();
          }
        }, timer);

        window._setTimeoutGlobalRepository.push({
          id: id,
          func: func,
          timer: timer,
          interval: interval
        });

        return interval;
      } else {
        throw new Error('setTimeoutGlobal - ID [' + id + '] already in use');
      }
    };

    var closeTimeout = function closeTimeout() {
      if (window._setTimeoutGlobalRepository.length > 0) {
        window.mapObject(window._setTimeoutGlobalRepository, function (instance, key, count) {
          if (instance.interval) {
            clearInterval(instance.interval);
            instance.interval = null;
          }
        });
      }
    };

    var reEnableTimeouts = function reEnableTimeouts() {
      if (window._setTimeoutGlobalRepository.length > 0) {
        var tmp = [];
        window.mapObject(window._setTimeoutGlobalRepository, function (instance, key, count) {
          tmp.push(instance);
        });
        window._setTimeoutGlobalRepository = [];
        window.mapObject(tmp, function (instance, key, count) {
          window.setTimeoutGlobal(instance.id, instance.func, instance.timer);
        });
      }
    };

    var windowActivity = function windowActivity() {
      (function () {
        var hidden = 'hidden'; // Standards:

        if (hidden in document) {
          document.addEventListener('visibilitychange', onchange);
        } else if ((hidden = 'mozHidden') in document) {
          document.addEventListener('mozvisibilitychange', onchange);
        } else if ((hidden = 'webkitHidden') in document) {
          document.addEventListener('webkitvisibilitychange', onchange);
        } else if ((hidden = 'msHidden') in document) {
          document.addEventListener('msvisibilitychange', onchange);
        } else if ('onfocusin' in document) {
          // IE 9 and lower:
          document.onfocusin = document.onfocusout = onchange;
        } else {
          // All others:
          window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;
        }

        function onchange(evt) {
          var status = '';
          var v = 'visible';
          var h = 'hidden';
          var evtMap = {
            focus: v,
            focusin: v,
            pageshow: v,
            blur: h,
            focusout: h,
            pagehide: h
          };
          evt = evt || window.event;

          if (evt.type in evtMap) {
            status = evtMap[evt.type];
          } else {
            status = this[hidden] ? 'hidden' : 'visible';
          }

          if (status === 'visible') {
            reEnableTimeouts();
          } else if (status === 'hidden') {
            closeTimeout();
          }
        } // set the initial state (but only if browser supports the Page Visibility API)


        if (document[hidden] !== undefined) {
          onchange({
            type: document[hidden] ? 'blur' : 'focus'
          });
        }
      })();
    };

    windowActivity();
  }
} catch (err) {
  console.log(err);
}

/***/ }),

/***/ "./src/javascript/polyfills/index.js":
/*!*******************************************!*\
  !*** ./src/javascript/polyfills/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

//
if (!window.console) {
  window.console = function () {};

  if (typeof XDomainRequest !== 'undefined') {
    window.console.prototype.log = function (err) {
      throw new SyntaxError(err);
    };

    window.console.prototype.warn = function (err) {
      throw new SyntaxError(err);
    };

    window.console.prototype.error = function (err) {
      throw new SyntaxError(err);
    };
  }
} //


try {
  Event.prototype.preventDefault || (Event.prototype.preventDefault = function () {
    this.returnValue = !1;
  });
} catch (err) {
  console.log(err);
} //


try {
  Event.prototype.stopPropagation || (Event.prototype.stopPropagation = function () {
    this.cancelBubble = !0;
  });
} catch (err) {
  console.log(err);
} //


try {
  typeof mapObject !== 'function' && (window.mapObject = function (e, t) {
    if (e !== null) {
      var n = 0;

      for (var r in e) {
        e.hasOwnProperty(r) && (t(e[r], r, n), n++);
      }

      return !0;
    }

    return console.log('returned object is null', _typeof(e)), !1;
  });
} catch (err) {
  console.log(err);
} //


try {
  if (!Element.prototype.addEventListener) {
    var eventListeners = [];

    var addEventListener = function addEventListener(e, t) {
      var n;
      var r = this;

      if (n = function n(e) {
        e.target = e.srcElement, e.currentTarget = r, e.pageX = event.clientX + document.body.scrollLeft, e.pageY = event.clientY + document.body.scrollTop, t.handleEvent ? t.handleEvent(e) : t.call(r, e);
      }, e === 'DOMContentLoaded') {
        var o = function o(e) {
          document.readyState === 'complete' && n(e);
        };

        if (document.attachEvent('onreadystatechange', o), eventListeners.push({
          object: this,
          type: e,
          listener: t,
          wrapper: o
        }), document.readyState == 'complete') {
          var i = new Event();
          i.srcElement = window, o(i);
        }
      } else this.attachEvent('on' + e, n), eventListeners.push({
        object: this,
        type: e,
        listener: t,
        wrapper: n
      });
    };

    var removeEventListener = function removeEventListener(e, t) {
      for (var n = 0; n < eventListeners.length;) {
        var r = eventListeners[n];

        if (r.object == this && r.type == e && r.listener == t) {
          e == 'DOMContentLoaded' ? this.detachEvent('onreadystatechange', r.wrapper) : this.detachEvent('on' + e, r.wrapper);
          break;
        }

        ++n;
      }
    };

    Element.prototype.addEventListener = addEventListener, Element.prototype.removeEventListener = removeEventListener, HTMLDocument && (HTMLDocument.prototype.addEventListener = addEventListener, HTMLDocument.prototype.removeEventListener = removeEventListener), Window && (Window.prototype.addEventListener = addEventListener, Window.prototype.removeEventListener = removeEventListener);
  }

  Element.prototype.remove || (Element.prototype.remove = function () {
    this.parentElement.removeChild(this);
  }, NodeList.prototype.remove = HTMLCollection.prototype.remove = function () {
    for (var e = 0, t = this.length; t > e; e++) {
      this[e] && this[e].parentElement && this[e].parentElement.removeChild(this[e]);
    }
  });
} catch (err) {
  console.log(err);
}

typeof XDomainRequest !== 'undefined' && (_typeof(window.JSON) !== 'object' && (window.JSON = {}), function () {
  'use strict';

  function f(e) {
    return e < 10 ? '0' + e : e;
  }

  function quote(e) {
    return escapable.lastIndex = 0, escapable.test(e) ? '"' + e.replace(escapable, function (e) {
      var t = meta[e];
      return typeof t === 'string' ? t : "\\u" + ('0000' + e.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + e + '"';
  }

  function str(e, t) {
    var n;
    var r;
    var o;
    var i;
    var a;
    var p = gap;
    var u = t[e];

    switch (u && _typeof(u) === 'object' && typeof u.toJSON === 'function' && (u = u.toJSON(e)), typeof rep === 'function' && (u = rep.call(t, e, u)), _typeof(u)) {
      case 'string':
        return quote(u);

      case 'number':
        return isFinite(u) ? String(u) : 'null';

      case 'boolean':
      case 'null':
        return String(u);

      case 'object':
        if (!u) return 'null';

        if (gap += indent, a = [], Object.prototype.toString.apply(u) === '[object Array]') {
          for (i = u.length, n = 0; i > n; n += 1) {
            a[n] = str(n, u) || 'null';
          }

          return o = a.length === 0 ? '[]' : gap ? '[\n' + gap + a.join(',\n' + gap) + '\n' + p + ']' : '[' + a.join(',') + ']', gap = p, o;
        }

        if (rep && _typeof(rep) === 'object') for (i = rep.length, n = 0; i > n; n += 1) {
          typeof rep[n] === 'string' && (r = rep[n], o = str(r, u), o && a.push(quote(r) + (gap ? ': ' : ':') + o));
        } else for (r in u) {
          Object.prototype.hasOwnProperty.call(u, r) && (o = str(r, u), o && a.push(quote(r) + (gap ? ': ' : ':') + o));
        }
        return o = a.length === 0 ? '{}' : gap ? '{\n' + gap + a.join(',\n' + gap) + '\n' + p + '}' : '{' + a.join(',') + '}', gap = p, o;
    }
  }

  typeof Date.prototype.toJSON !== 'function' && (Date.prototype.toJSON = function () {
    return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;
  }, String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {
    return this.valueOf();
  });
  var cx, escapable, gap, indent, meta, rep;
  typeof window.JSON.stringify !== 'function' && (escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, meta = {
    '\b': '\\b',
    '	': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '"': '\\"',
    '\\': '\\\\'
  }, window.JSON.stringify = function (e, t, n) {
    var r;
    if (gap = '', indent = '', typeof n === 'number') for (r = 0; n > r; r += 1) {
      indent += ' ';
    } else typeof n === 'string' && (indent = n);
    if (rep = t, t && typeof t !== 'function' && (_typeof(t) !== 'object' || typeof t.length !== 'number')) throw new Error('JSON.stringify');
    return str('', {
      '': e
    });
  }), typeof window.JSON.parse !== 'function' && (cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, window.JSON.parse = function (text, reviver) {
    function walk(e, t) {
      var n;
      var r;
      var o = e[t];
      if (o && _typeof(o) === 'object') for (n in o) {
        Object.prototype.hasOwnProperty.call(o, n) && (r = walk(o, n), void 0 !== r ? o[n] = r : delete o[n]);
      }
      return reviver.call(e, t, o);
    }

    var j;
    if (text = String(text), cx.lastIndex = 0, cx.test(text) && (text = text.replace(cx, function (e) {
      return "\\u" + ('0000' + e.charCodeAt(0).toString(16)).slice(-4);
    })), /^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) return j = eval('(' + text + ')'), typeof reviver === 'function' ? walk({
      '': j
    }, '') : j;
    throw new SyntaxError('JSON.parse');
  });
}()); //

var _slice = Array.prototype.slice;

try {
  _slice.call(document.documentElement);
} catch (e) {
  Array.prototype.slice = function (t, e) {
    if (e = typeof e !== 'undefined' ? e : this.length, Object.prototype.toString.call(this) === '[object Array]') return _slice.call(this, t, e);
    var r;
    var i;
    var c = [];
    var l = this.length;
    var o = t || 0;
    o = o >= 0 ? o : l + o;
    var a = e || l;
    if (e < 0 && (a = l + e), i = a - o, i > 0) if (c = new Array(i), this.charAt) for (r = 0; i > r; r++) {
      c[r] = this.charAt(o + r);
    } else for (r = 0; i > r; r++) {
      c[r] = this[o + r];
    }
    return c;
  };
} // [EventSource] Polyfill fix: https://github.com/remy/polyfills/blob/master/EventSource.js


(function (global) {
  if ('EventSource' in global) return;
  var reTrim = /^(\s|\u00A0)+|(\s|\u00A0)+$/g;

  var EventSource = function EventSource(url) {
    var eventsource = this;
    var interval = 500;
    /* polling interval  */

    var lastEventId = null;
    var cache = '';

    if (!url || typeof url !== 'string') {
      throw new SyntaxError('Not enough arguments');
    }

    this.URL = url;
    this.readyState = this.CONNECTING;
    this._pollTimer = null;
    this._xhr = null;

    function pollAgain(interval) {
      eventsource._pollTimer = setTimeout(function () {
        poll.call(eventsource);
      }, interval);
    }

    function poll() {
      try {
        /* force hiding of the error message... insane? */
        if (eventsource.readyState === eventsource.CLOSED) return;
        /* NOTE: IE7 and upwards support */

        var xhr = new XMLHttpRequest();
        xhr.open('GET', eventsource.URL, true);
        xhr.setRequestHeader('Accept', 'text/event-stream');
        xhr.setRequestHeader('Cache-Control', 'no-cache');
        /* we must make use of this on the server side if we're working with Android - because they don't trigger readychange until the server connection is closed */

        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        if (lastEventId != null) xhr.setRequestHeader('Last-Event-ID', lastEventId);
        cache = '';
        xhr.timeout = 50000;

        xhr.onreadystatechange = function () {
          if (this.readyState == 3 || this.readyState == 4 && this.status == 200) {
            /* on success */
            if (eventsource.readyState == eventsource.CONNECTING) {
              eventsource.readyState = eventsource.OPEN;
              eventsource.dispatchEvent('open', {
                type: 'open'
              });
            }

            var responseText = '';

            try {
              responseText = this.responseText || '';
            } catch (e) {}
            /* process this.responseText */


            var parts = responseText.substr(cache.length).split('\n');
            var eventType = 'message';
            var data = [];
            var i = 0;
            var line = '';
            cache = responseText;
            /* TODO handle 'event' (for buffer name), retry */

            for (; i < parts.length; i++) {
              line = parts[i].replace(reTrim, '');

              if (line.indexOf('event') === 0) {
                eventType = line.replace(/event:?\s*/, '');
              } else if (line.indexOf('retry') === 0) {
                var retry = parseInt(line.replace(/retry:?\s*/, ''));

                if (!isNaN(retry)) {
                  interval = retry;
                }
              } else if (line.indexOf('data') === 0) {
                data.push(line.replace(/data:?\s*/, ''));
              } else if (line.indexOf('id:') === 0) {
                lastEventId = line.replace(/id:?\s*/, '');
              } else if (line.indexOf('id') === 0) {
                /* this resets the id */
                lastEventId = null;
              } else if (line === '') {
                if (data.length) {
                  var event = new MessageEvent(data.join('\n'), eventsource.url, lastEventId);
                  eventsource.dispatchEvent(eventType, event);
                  data = [];
                  eventType = 'message';
                }
              }
            }

            if (this.readyState === 4) pollAgain(interval);
            /* don't need to poll again, because we're long-loading */
          } else if (eventsource.readyState !== eventsource.CLOSED) {
            if (this.readyState === 4) {
              /* and some other status dispatch error */
              eventsource.readyState = eventsource.CONNECTING;
              eventsource.dispatchEvent('error', {
                type: 'error'
              });
              pollAgain(interval);
            } else if (this.readyState === 0) {
              /* likely aborted */
              pollAgain(interval);
            } else {}
          }
        };

        xhr.send();
        setTimeout(function () {
          if (true) xhr.abort();
        }, xhr.timeout);
        eventsource._xhr = xhr;
      } catch (e) {
        /* in an attempt to silence the errors */
        eventsource.dispatchEvent('error', {
          type: 'error',
          data: e.message
        });
        /* ??? */
      }
    }

    ;
    poll();
    /* init now */
  };

  EventSource.prototype = {
    close: function close() {
      /* closes the connection - disabling the polling */
      this.readyState = this.CLOSED;
      clearInterval(this._pollTimer);

      this._xhr.abort();
    },
    CONNECTING: 0,
    OPEN: 1,
    CLOSED: 2,
    dispatchEvent: function dispatchEvent(type, event) {
      var handlers = this['_' + type + 'Handlers'];

      if (handlers) {
        for (var i = 0; i < handlers.length; i++) {
          handlers[i].call(this, event);
        }
      }

      if (this['on' + type]) {
        this['on' + type].call(this, event);
      }
    },
    addEventListener: function addEventListener(type, handler) {
      if (!this['_' + type + 'Handlers']) {
        this['_' + type + 'Handlers'] = [];
      }

      this['_' + type + 'Handlers'].push(handler);
    },
    removeEventListener: function removeEventListener(type, handler) {
      var handlers = this['_' + type + 'Handlers'];

      if (!handlers) {
        return;
      }

      for (var i = handlers.length - 1; i >= 0; --i) {
        if (handlers[i] === handler) {
          handlers.splice(i, 1);
          break;
        }
      }
    },
    onerror: null,
    onmessage: null,
    onopen: null,
    readyState: 0,
    URL: ''
  };

  var MessageEvent = function MessageEvent(data, origin, lastEventId) {
    this.data = data;
    this.origin = origin;
    this.lastEventId = lastEventId || '';
  };

  MessageEvent.prototype = {
    data: null,
    type: 'message',
    lastEventId: '',
    origin: ''
  };
  if ('module' in global) module.exports = EventSource;
  global.EventSource = EventSource;
})(window);

/***/ }),

/***/ "./src/javascript/utils/addClass.js":
/*!******************************************!*\
  !*** ./src/javascript/utils/addClass.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * App/Append new class string to the provided DOM element
 * @param element
 * @param className
 * @returns {{classList}|*}
 */
var addClass = function addClass(element, className) {
  try {
    if (element.classList) {
      element.classList.add(className);
    } else {
      element.className += ' ' + className;
    }
  } catch (e) {
    console.trace();
  }

  return element;
};

/* harmony default export */ __webpack_exports__["default"] = (addClass);

/***/ }),

/***/ "./src/javascript/utils/appendNext.js":
/*!********************************************!*\
  !*** ./src/javascript/utils/appendNext.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var appendNext = function appendNext(el, newNode) {
  if (el.nextSibling) {
    el.parentNode.insertBefore(newNode, el.nextSibling);
  } else {
    el.parentNode.appendChild(newNode);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (appendNext);

/***/ }),

/***/ "./src/javascript/utils/closest.js":
/*!*****************************************!*\
  !*** ./src/javascript/utils/closest.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_cLabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/cLabs */ "./src/javascript/modules/cLabs.js");
/* harmony import */ var _hasClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hasClass */ "./src/javascript/utils/hasClass.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }



/**
 * Iterate up the tree of DOM elements to find the closes match
 * @param element
 * @param selector
 * @returns {null | ParentNode}
 */

var closest = function closest(element, selector) {
  if (_typeof(selector) === 'object') {
    var selectorClassString = selector.getAttribute('class');
    var selectorIdString = selector.id;

    if (selectorIdString !== null && selectorIdString.length > 0) {
      selector = '#' + selectorIdString;
    } else if (selectorClassString !== null && selectorClassString.length > 0) {
      selector = '.' + selectorClassString.split(' ')[0];
    } else {
      selector = selector.nodeName;
    }
  }

  function closest(element, selector) {
    try {
      element = element.parentNode;
    } catch (e) {
      console.log(element, selector);
      console.trace();
    }

    if (element !== null && _typeof(element) === 'object') {
      if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].classSelector) && Object(_hasClass__WEBPACK_IMPORTED_MODULE_1__["default"])(element, selector)) {
        return element;
      } else if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].idSelector) && element.id === selector.replace('#', '')) {
        return element;
      } else if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].tagSelector) && element.nodeName === selector.toUpperCase()) {
        return element;
      } else {
        return closest(element, selector);
      }
    } else {
      return null;
    }
  }

  if (_typeof(element) === 'object') {
    return closest(element, selector);
  } else {
    return null;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (closest);

/***/ }),

/***/ "./src/javascript/utils/formatNumberLeadingZeros.js":
/*!**********************************************************!*\
  !*** ./src/javascript/utils/formatNumberLeadingZeros.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Prepends 0 the provided number and returns the formated element as a string
 * @param num
 * @param size {number}
 * @returns {string} 1 => 001
 */
var formatNumberLeadingZeros = function formatNumberLeadingZeros(num, size) {
  var s = String(num);

  while (s.length < size) {
    s = '0' + s;
  }

  return s;
};

/* harmony default export */ __webpack_exports__["default"] = (formatNumberLeadingZeros);

/***/ }),

/***/ "./src/javascript/utils/getOffset.js":
/*!*******************************************!*\
  !*** ./src/javascript/utils/getOffset.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var getOffset = function getOffset(el) {
  var _x = 0;
  var _y = 0;

  while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
    _x += el.offsetLeft - el.scrollLeft;
    _y += el.offsetTop - el.scrollTop;
    el = el.offsetParent;
  }

  return {
    top: _y,
    left: _x
  };
};

/* harmony default export */ __webpack_exports__["default"] = (getOffset);

/***/ }),

/***/ "./src/javascript/utils/hasClass.js":
/*!******************************************!*\
  !*** ./src/javascript/utils/hasClass.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Provides an ability to check if a DOM element contains a class string
 * @param element
 * @param className
 * @returns {boolean}
 */
function _hasClass(element, className) {
  className = className.replace('.', '');

  try {
    if (element.classList) {
      return element.classList.contains(className);
    } else {
      return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
    }
  } catch (e) {
    if (typeof e.stack !== 'undefined') {
      console.log(e.stack);
    }

    console.log(e, element, className);
    return false;
  }
}

var hasClass = function hasClass(element, className) {
  if (typeof className === 'string') {
    return _hasClass(element, className);
  } else if (className instanceof Array) {
    var hasClass = false;

    for (var i in className) {
      if (typeof className[i] === 'string' && _hasClass(element, className[i])) {
        hasClass = true;
      }
    }

    return hasClass;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (hasClass);

/***/ }),

/***/ "./src/javascript/utils/index.js":
/*!***************************************!*\
  !*** ./src/javascript/utils/index.js ***!
  \***************************************/
/*! exports provided: sizeof, isElement, objectCount, remove, objectIterator, addClass, removeClass, hasClass, stringContains, formatNumberLeadingZeros, stripHtml, closest, isMobileTablet, getOffset, isiOSDevice, appendNext, query, trim, mergeObjects, scrollEnabled */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sizeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sizeof */ "./src/javascript/utils/sizeof.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sizeof", function() { return _sizeof__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _isElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isElement */ "./src/javascript/utils/isElement.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isElement", function() { return _isElement__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _objectCount__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./objectCount */ "./src/javascript/utils/objectCount.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "objectCount", function() { return _objectCount__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _remove__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./remove */ "./src/javascript/utils/remove.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "remove", function() { return _remove__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _objectIterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./objectIterator */ "./src/javascript/utils/objectIterator.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "objectIterator", function() { return _objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _addClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./addClass */ "./src/javascript/utils/addClass.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addClass", function() { return _addClass__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _removeClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./removeClass */ "./src/javascript/utils/removeClass.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "removeClass", function() { return _removeClass__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _hasClass__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hasClass */ "./src/javascript/utils/hasClass.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hasClass", function() { return _hasClass__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _stringContains__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./stringContains */ "./src/javascript/utils/stringContains.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stringContains", function() { return _stringContains__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony import */ var _formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./formatNumberLeadingZeros */ "./src/javascript/utils/formatNumberLeadingZeros.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "formatNumberLeadingZeros", function() { return _formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_9__["default"]; });

/* harmony import */ var _stripHtml__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./stripHtml */ "./src/javascript/utils/stripHtml.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stripHtml", function() { return _stripHtml__WEBPACK_IMPORTED_MODULE_10__["default"]; });

/* harmony import */ var _closest__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./closest */ "./src/javascript/utils/closest.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "closest", function() { return _closest__WEBPACK_IMPORTED_MODULE_11__["default"]; });

/* harmony import */ var _isMobileTablet__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./isMobileTablet */ "./src/javascript/utils/isMobileTablet.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isMobileTablet", function() { return _isMobileTablet__WEBPACK_IMPORTED_MODULE_12__["default"]; });

/* harmony import */ var _getOffset__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./getOffset */ "./src/javascript/utils/getOffset.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getOffset", function() { return _getOffset__WEBPACK_IMPORTED_MODULE_13__["default"]; });

/* harmony import */ var _isiOSDevice__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./isiOSDevice */ "./src/javascript/utils/isiOSDevice.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isiOSDevice", function() { return _isiOSDevice__WEBPACK_IMPORTED_MODULE_14__["default"]; });

/* harmony import */ var _appendNext__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./appendNext */ "./src/javascript/utils/appendNext.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "appendNext", function() { return _appendNext__WEBPACK_IMPORTED_MODULE_15__["default"]; });

/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./query */ "./src/javascript/utils/query.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "query", function() { return _query__WEBPACK_IMPORTED_MODULE_16__["default"]; });

/* harmony import */ var _trim__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./trim */ "./src/javascript/utils/trim.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trim", function() { return _trim__WEBPACK_IMPORTED_MODULE_17__["default"]; });

/* harmony import */ var _mergeObjects__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./mergeObjects */ "./src/javascript/utils/mergeObjects.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mergeObjects", function() { return _mergeObjects__WEBPACK_IMPORTED_MODULE_18__["default"]; });

/* harmony import */ var _scrollEnabled__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./scrollEnabled */ "./src/javascript/utils/scrollEnabled.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scrollEnabled", function() { return _scrollEnabled__WEBPACK_IMPORTED_MODULE_19__["default"]; });






















/***/ }),

/***/ "./src/javascript/utils/isElement.js":
/*!*******************************************!*\
  !*** ./src/javascript/utils/isElement.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Returns true if it is a DOM element
 *
 * @param o {Object}
 * @return {Boolean}
 */
var isElement = function isElement(o) {
  return (typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement)) === 'object' ? o instanceof HTMLElement :
  /* DOM2 */
  o && _typeof(o) === 'object' && o !== null && o.nodeType === 1 && typeof o.nodeName === 'string';
};

/* harmony default export */ __webpack_exports__["default"] = (isElement);

/***/ }),

/***/ "./src/javascript/utils/isMobileTablet.js":
/*!************************************************!*\
  !*** ./src/javascript/utils/isMobileTablet.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _stringContains__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stringContains */ "./src/javascript/utils/stringContains.js");
// a check to test if the device is a mobile or tablet


var isMobileTablet = function isMobileTablet() {
  var check = false;

  (function (a) {
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
  })(navigator.userAgent || navigator.vendor || window.opera); // custom solution because latest iOS 13 userAgent doesn't return correct mobile information


  if (!check) {
    check = Object(_stringContains__WEBPACK_IMPORTED_MODULE_0__["default"])(window.navigator.userAgent.toLowerCase(), 'macintosh') && 'ontouchend' in document;
  }

  return check;
};

/* harmony default export */ __webpack_exports__["default"] = (isMobileTablet);

/***/ }),

/***/ "./src/javascript/utils/isiOSDevice.js":
/*!*********************************************!*\
  !*** ./src/javascript/utils/isiOSDevice.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// check if iOS
var isiOSDevice = function isiOSDevice() {
  return !!navigator.platform && /iP(ad|hone|od)/.test(navigator.platform);
};

/* harmony default export */ __webpack_exports__["default"] = (isiOSDevice);

/***/ }),

/***/ "./src/javascript/utils/mergeObjects.js":
/*!**********************************************!*\
  !*** ./src/javascript/utils/mergeObjects.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sizeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sizeof */ "./src/javascript/utils/sizeof.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }



var mergeObjects = function mergeObjects(obj1, obj2, arrayType) {
  var obj3 = typeof arrayType === 'undefined' || arrayType === false ? {} : [];

  for (var i in obj1) {
    obj3[i] = obj1[i];
  }

  for (var k in obj2) {
    if (_typeof(obj1[k]) !== 'object') {
      obj3[k] = obj2[k];
    } else if (obj1[k] instanceof Array) {
      obj3[k] = obj2[k]; // arrays get overwritten and not extended
    } else if (typeof obj1[k] !== 'undefined' && _typeof(obj1[k]) === 'object' && obj1[k] !== null && typeof obj1[k].nodeType === 'undefined' && Object(_sizeof__WEBPACK_IMPORTED_MODULE_0__["default"])(obj1[k]) > 0) {
      obj3[k] = mergeObjects(obj1[k], obj2[k]);
    } else if (typeof obj1[k] !== 'undefined' && _typeof(obj1[k]) === 'object') {
      obj3[k] = obj2[k];
    } else {
      console.log('fail');
    }

    if (obj3[k] === undefined) {
      delete obj3[k];
    }
  }

  return obj3;
};

/* harmony default export */ __webpack_exports__["default"] = (mergeObjects);

/***/ }),

/***/ "./src/javascript/utils/objectCount.js":
/*!*********************************************!*\
  !*** ./src/javascript/utils/objectCount.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Returns a count of object from a query result
 * @paramobj  {Object} anything or Array object
 */
var objectCount = function objectCount(obj) {
  if (obj !== null && obj.length !== undefined && obj instanceof Array) {
    return obj.length;
  } else if (obj !== null) {
    return 1;
  } else {
    return 0;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (objectCount);

/***/ }),

/***/ "./src/javascript/utils/objectIterator.js":
/*!************************************************!*\
  !*** ./src/javascript/utils/objectIterator.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Returns true if it is a DOM element
 *
 * @param o {Object}
 * @return {Boolean}
 */
var isElement = function isElement(o) {
  return (typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement)) === 'object' ? o instanceof HTMLElement :
  /* DOM2 */
  o && _typeof(o) === 'object' && o !== null && o.nodeType === 1 && typeof o.nodeName === 'string';
};
/**
 * Object iterator - best usage is for a list of DOM elements
 * @param obj
 * @param callback
 */


var objectIterator = function objectIterator(obj, callback) {
  if (typeof obj !== 'undefined' && obj !== null && typeof obj.length !== 'undefined' && obj instanceof Array) {
    var count = 0;

    for (var key in obj) {
      // adding additional check to see if object is element or array
      if (isElement(obj[key])) {
        callback(obj[key], key, count, obj.length);
      }

      count++;
    }
  } else if (typeof obj !== 'undefined' && obj !== null) {
    // adding additional check to see if object is element or array
    if (isElement(obj)) {
      callback(obj, 0, 0, 1);
    }
  }
};

/* harmony default export */ __webpack_exports__["default"] = (objectIterator);

/***/ }),

/***/ "./src/javascript/utils/query.js":
/*!***************************************!*\
  !*** ./src/javascript/utils/query.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_cLabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/cLabs */ "./src/javascript/modules/cLabs.js");
/* harmony import */ var _trim__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./trim */ "./src/javascript/utils/trim.js");


/**
 * Query selector, supports CSS element selection
 *
 * Supports:
 *  - Class selection: ".element"
 *  - ID selection: "#element"
 *  - Tag selection: "div"
 *  - Multi depth selection: '.element ul li'
 *
 * @param {Object} "optional"
 * @param {String} CSS element selector
 * @returns {(Object|null|Array)} depending on the provided selector results can vary (null, node, NodeList array)
 */

var query = function query(doc, selector) {
  var result;
  var tmpDoc = doc;
  var tmpSelector = selector; // used for debug only

  if (typeof doc === 'string' && selector === undefined) {
    selector = doc;
    doc = document;
  }

  try {
    if (doc !== null) {
      selector = Object(_trim__WEBPACK_IMPORTED_MODULE_1__["default"])(selector); //

      if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].classSelector)) {
        result = doc.getElementsByClassName(selector.replace('.', ''));
      } else if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].idSelector)) {
        result = document.getElementById(selector.replace('#', ''));
      } else if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].tagSelector)) {
        result = doc.getElementsByTagName(selector);
      } else {
        result = doc.querySelectorAll(selector);
      }
    }

    if (result !== null && result !== undefined && result.nodeType) {
      return result;
    } else if (result !== null && result !== undefined && result.length === 1) {
      return result[0];
    } else if (result !== null && result !== undefined && result.length > 0) {
      return Array.prototype.slice.call(result);
    } else {
      return null;
    }
  } catch (e) {
    console.log(e);
    console.log(tmpSelector);
    console.log(tmpDoc);
    console.log(doc, selector);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (query);

/***/ }),

/***/ "./src/javascript/utils/remove.js":
/*!****************************************!*\
  !*** ./src/javascript/utils/remove.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Removes an HTML DOM element
 * @paramobj el {Object} DOM element
 */
var remove = function remove(el) {
  if (el !== null) {
    el.parentElement.removeChild(el);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (remove);

/***/ }),

/***/ "./src/javascript/utils/removeClass.js":
/*!*********************************************!*\
  !*** ./src/javascript/utils/removeClass.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Remove class string from provided DOM element
 * @param element
 * @param className
 * @returns {{classList}|*}
 */
var removeClass = function removeClass(element, className) {
  try {
    if (element.classList) {
      element.classList.remove(className);
    } else {
      element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    }
  } catch (e) {
    console.log(element, className); // console.error(e);
    // console.trace();
  }

  return element;
};

/* harmony default export */ __webpack_exports__["default"] = (removeClass);

/***/ }),

/***/ "./src/javascript/utils/scrollEnabled.js":
/*!***********************************************!*\
  !*** ./src/javascript/utils/scrollEnabled.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var scrollEnabled = function scrollEnabled(doc) {
  return doc !== null ? doc.scrollHeight > doc.offsetHeight : false;
};

/* harmony default export */ __webpack_exports__["default"] = (scrollEnabled);

/***/ }),

/***/ "./src/javascript/utils/sizeof.js":
/*!****************************************!*\
  !*** ./src/javascript/utils/sizeof.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _isElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isElement */ "./src/javascript/utils/isElement.js");

/**
 * returns the size of an Object or array
 *
 * @param obj {Object}
 * @return {Number}
 */

var sizeof = function sizeof(obj) {
  var size = 0;
  var key;

  for (key in obj) {
    if (obj.hasOwnProperty(key)) size++;
  }

  if (size === 0 && Object(_isElement__WEBPACK_IMPORTED_MODULE_0__["default"])(obj)) {
    size = 1;
  }

  return size;
};

/* harmony default export */ __webpack_exports__["default"] = (sizeof);

/***/ }),

/***/ "./src/javascript/utils/stringContains.js":
/*!************************************************!*\
  !*** ./src/javascript/utils/stringContains.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * A check if a string contains an entry of searched for term
 * @param str {string}
 * @param partial {string}
 * @returns {boolean}
 */
var stringContains = function stringContains(str, partial) {
  return str.indexOf(partial) > -1;
};

/* harmony default export */ __webpack_exports__["default"] = (stringContains);

/***/ }),

/***/ "./src/javascript/utils/stripHtml.js":
/*!*******************************************!*\
  !*** ./src/javascript/utils/stripHtml.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Removes HTML tags from the provided input and returns only the text
 * - this is a very basic implementation and should be used carefully
 * @param html {string}
 * @returns {string | string}
 */
var stripHtml = function stripHtml(html) {
  var tmp = document.createElement('DIV');
  tmp.innerHTML = html;
  return tmp.textContent || tmp.innerText || '';
};

/* harmony default export */ __webpack_exports__["default"] = (stripHtml);

/***/ }),

/***/ "./src/javascript/utils/trim.js":
/*!**************************************!*\
  !*** ./src/javascript/utils/trim.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var trim = function trim(string) {
  return string.replace(/^\s+|\s+$/g, '');
};

/* harmony default export */ __webpack_exports__["default"] = (trim);

/***/ }),

/***/ "./src/scss/style.scss":
/*!*****************************!*\
  !*** ./src/scss/style.scss ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "../css/style.css");

/***/ }),

/***/ 1:
/*!************************************************************************************************************************!*\
  !*** multi (webpack)-dev-server/client?http://localhost:9000 ./src/javascript/leaderboard.v3.js ./src/scss/style.scss ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! C:\Programiranje\jurepetrovic\leaderboard_v3\node_modules\webpack-dev-server\client\index.js?http://localhost:9000 */"./node_modules/webpack-dev-server/client/index.js?http://localhost:9000");
__webpack_require__(/*! ./src/javascript/leaderboard.v3.js */"./src/javascript/leaderboard.v3.js");
module.exports = __webpack_require__(/*! ./src/scss/style.scss */"./src/scss/style.scss");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fuc2ktaHRtbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL2h0bWw0LWVudGl0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9odG1sNS1lbnRpdGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL3htbC1lbnRpdGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWRlbnRpY29uLmpzL2lkZW50aWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWRlbnRpY29uLmpzL3BuZ2xpYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzaGEvZGlzdC9zaGEubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2dsZXZlbC9saWIvbG9nbGV2ZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9tb21lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGUtbGlicy1icm93c2VyL25vZGVfbW9kdWxlcy9wdW55Y29kZS9wdW55Y29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2RlY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2VuY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NranMtY2xpZW50L2Rpc3Qvc29ja2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91cmwvdXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91cmwvdXRpbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L2NsaWVudHMvQmFzZUNsaWVudC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L2NsaWVudHMvU29ja0pTQ2xpZW50LmpzIiwid2VicGFjazovLy8od2VicGFjayktZGV2LXNlcnZlci9jbGllbnQiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5LmpzIiwid2VicGFjazovLy8od2VicGFjayktZGV2LXNlcnZlci9jbGllbnQvc29ja2V0LmpzIiwid2VicGFjazovLy8od2VicGFjayktZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvY3JlYXRlU29ja2V0VXJsLmpzIiwid2VicGFjazovLy8od2VicGFjayktZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvZ2V0Q3VycmVudFNjcmlwdFNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2xvZy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3JlbG9hZEFwcC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3NlbmRNZXNzYWdlLmpzIiwid2VicGFjazovLy8od2VicGFjayktZGV2LXNlcnZlci9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvbm9kZV9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvaG90IHN5bmMgbm9ucmVjdXJzaXZlIF5cXC5cXC9sb2ckIiwid2VicGFjazovLy8od2VicGFjaykvaG90L2VtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9ob3QvbG9nLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L2xlYWRlcmJvYXJkLnYzLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L21vZHVsZXMvQWpheC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC9tb2R1bGVzL0xiV2lkZ2V0LmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L21vZHVsZXMvTWFpbldpZGdldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC9tb2R1bGVzL01lc3NhZ2luZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC9tb2R1bGVzL01pbmlTY29yZUJvYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L21vZHVsZXMvTm90aWZpY2F0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC9tb2R1bGVzL2NMYWJzLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L21vZHVsZXMvZHJhZ0VsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHQvbW9kdWxlcy9zZXRUaW1lb3V0R2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3BvbHlmaWxscy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9hZGRDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9hcHBlbmROZXh0LmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL2Nsb3Nlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHQvdXRpbHMvZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL2dldE9mZnNldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9oYXNDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9pc0VsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHQvdXRpbHMvaXNNb2JpbGVUYWJsZXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHQvdXRpbHMvaXNpT1NEZXZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHQvdXRpbHMvbWVyZ2VPYmplY3RzLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL29iamVjdENvdW50LmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL29iamVjdEl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL3F1ZXJ5LmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9yZW1vdmVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9zY3JvbGxFbmFibGVkLmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L3V0aWxzL3NpemVvZi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9zdHJpbmdDb250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdC91dGlscy9zdHJpcEh0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2phdmFzY3JpcHQvdXRpbHMvdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9zdHlsZS5zY3NzIl0sIm5hbWVzIjpbIndpbmRvdyIsIl9DTExCVjNPcHQiLCJhdXRvU3RhcnQiLCJfY2xMZWFkZXJCb2FyZFYzIiwiTGJXaWRnZXQiLCJjb25zb2xlIiwid2FybiIsImNMYWJzIiwiQWpheCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwicHJvdG90eXBlIiwiY3JlYXRlQ09SU1JlcXVlc3QiLCJtZXRob2QiLCJ1cmwiLCJvYmoiLCJvcGVuIiwiWERvbWFpblJlcXVlc3QiLCJpbmRleE9mIiwibG9jYXRpb24iLCJwcm90b2NvbCIsInJlcGxhY2UiLCJhYm9ydCIsIl90aGlzIiwicmVhZHlTdGF0ZSIsImdldERhdGEiLCJkYXRhIiwidHlwZSIsInVuZGVmaW5lZCIsImxlbmd0aCIsInN1Y2Nlc3MiLCJlcnJvciIsImhlYWRlcnMiLCJleHRyYUNhbGxiYWNrIiwib25sb2FkIiwicmVzcG9uc2VUZXh0Iiwib25lcnJvciIsInN0YXR1cyIsInNpemVvZiIsIml0ZW0iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnIiLCJsb2ciLCJ0cmFuc2xhdGlvbiIsInJlcXVpcmUiLCJvcHRpb25zIiwic2V0dGluZ3MiLCJkZWJ1ZyIsImJpbmRDb250YWluZXIiLCJkb2N1bWVudCIsImJvZHkiLCJzc2VNZXNzYWdpbmciLCJub3RpZmljYXRpb25zIiwibWluaVNjb3JlQm9hcmQiLCJlbmFibGVOb3RpZmljYXRpb25zIiwibWFpbldpZGdldCIsImdsb2JhbEFqYXgiLCJjaGVja0FqYXgiLCJsYW5ndWFnZSIsInByb2Nlc3MiLCJjdXJyZW5jeSIsInNwYWNlTmFtZSIsIm1lbWJlcklkIiwiZ3JvdXBzIiwiZ2FtZUlkIiwiZW5mb3JjZUdhbWVMb29rdXAiLCJhcGlLZXkiLCJtZW1iZXIiLCJjb21wZXRpdGlvbiIsImFjdGl2ZUNvbXBldGl0aW9uSWQiLCJhY3RpdmVDb250ZXN0SWQiLCJhY3RpdmVDb21wZXRpdGlvbiIsImFjdGl2ZUNvbnRlc3QiLCJyZWZyZXNoSW50ZXJ2YWwiLCJyZWZyZXNoSW50ZXJ2YWxNaWxsaXMiLCJleHRyYWN0SW1hZ2VIZWFkZXIiLCJhY2hpZXZlbWVudHMiLCJsaXN0IiwiYXZhaWxhYmxlUmV3YXJkcyIsInJld2FyZHMiLCJleHBpcmVkUmV3YXJkcyIsInJld2FyZEZvcm1hdHRlciIsInJld2FyZCIsImRlZmF1bHRSZXdhcmRWYWx1ZSIsInZhbHVlIiwidW5pdE9mTWVhc3VyZSIsInN5bWJvbCIsIm1lc3NhZ2VzIiwiZW5hYmxlIiwidG91cm5hbWVudHMiLCJyZWFkeUNvbXBldGl0aW9ucyIsImFjdGl2ZUNvbXBldGl0aW9ucyIsImZpbmlzaGVkQ29tcGV0aXRpb25zIiwibGVhZGVyYm9hcmQiLCJmdWxsTGVhZGVyYm9hcmRTaXplIiwicmVmcmVzaExiRGF0YUludGVydmFsIiwibGVhZGVyYm9hcmREYXRhIiwibG9hZExlYWRlcmJvYXJkSGlzdG9yeSIsInVyaSIsImdhdGV3YXlEb21haW4iLCJhcGkiLCJtZW1iZXJzIiwiYXNzZXRzIiwibWVtYmVyU1NFIiwibWVtYmVyU1NFSGVhcnRiZWF0IiwiY29tcGV0aXRpb25zIiwiY29tcGV0aXRpb25CeUlkIiwiY29udGVzdExlYWRlcmJvYXJkIiwiYWNoaWV2ZW1lbnQiLCJhY2hpZXZlbWVudHNQcm9ncmVzc2lvbiIsImFjaGlldmVtZW50c0lzc3VlZCIsIm1lc3NhZ2VCeUlkIiwibWVtYmVyUmV3YXJkIiwibWVtYmVyUmV3YXJkQ2xhaW0iLCJtZW1iZXJDb21wZXRpdGlvbnMiLCJtZW1iZXJDb21wZXRpdGlvbkJ5SWQiLCJtZW1iZXJDb21wZXRpdGlvbk9wdEluIiwibWVtYmVyQ29tcGV0aXRpb25PcHRJbkNoZWNrIiwidHJhbnNsYXRpb25QYXRoIiwibG9hZFRyYW5zbGF0aW9ucyIsInJlc291cmNlcyIsIkRhdGUiLCJnZXRUaW1lIiwibGF5b3V0QnVpbGRDYWxsYmFjayIsImxheW91dCIsImluc3RhbmNlIiwibWVyZ2VPYmplY3RzIiwibWVzc2FnZSIsImZvcm1hdERhdGVUaW1lIiwiZHVyYXRpb24iLCJsYXJnZVJlc3VsdCIsInJlc3VsdCIsImRheXMiLCJwdXNoIiwidGltZSIsImhvdXJzIiwiZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zIiwibWludXRlcyIsIm1pbnV0ZXNTaG9ydEhhbmQiLCJzZWNvbmRzIiwiam9pbiIsInBvcHVsYXRlSWRlbnRpY29uQmFzZTY0SW1hZ2UiLCJzdHIiLCJzaGFPYmoiLCJqc1NIQSIsInVwZGF0ZSIsImhhc2giLCJnZXRIYXNoIiwiSWRlbnRpY29uIiwiYmFja2dyb3VuZCIsIm1hcmdpbiIsInNpemUiLCJmb3JtYXQiLCJ0b1N0cmluZyIsImljb24iLCJjb21wZXRpdGlvbkNoZWNrQWpheCIsImNoZWNrRm9yQXZhaWxhYmxlQ29tcGV0aXRpb25zIiwiY2FsbGJhY2siLCJhamF4SW5zdGFuY2UiLCJmaWx0ZXJzIiwiYWpheEluc3RhbmNlVG9Vc2UiLCJyZXNwb25zZSIsImRhdGFPYmoiLCJqc29uIiwicGFyc2UiLCJtYXBPYmplY3QiLCJjb21wIiwic3RhdHVzQ29kZSIsImNoZWNrRm9yRmluaXNoZWRDb21wZXRpdGlvbnMiLCJjb21wZXRpdGlvbkZpbmlzaGVkQ2hlY2tBamF4IiwicHJlcGFyZUFjdGl2ZUNvbXBldGl0aW9uIiwiaWQiLCJkZWFjdGl2YXRlQ29tcGV0aXRpb25zQW5kTGVhZGVyYm9hcmRzIiwibG9hZEFjdGl2ZUNvbXBldGl0aW9uIiwic2V0QWN0aXZlQ29tcGV0aXRpb24iLCJjb250ZXN0cyIsImNvbnRlc3QiLCJyZXdhcmRSYW5rIiwicmFua1BhcnRzIiwic3BsaXQiLCJwYXJ0Iiwic3RyaW5nQ29udGFpbnMiLCJyYW5rUmFuZ2UiLCJyYWdlU3RhcnQiLCJwYXJzZUludCIsInJhbmdlRW5kIiwiaSIsImdldExlYWRlcmJvYXJkRGF0YSIsImNvdW50IiwibWFza05hbWVzIiwibXluYW1lIiwibGVhZGJvYXJkIiwibmFtZSIsInNlcGFyYXRlZCIsImNhc05hbWUiLCJtYXNrV29yZCIsInBsYXllck5hbWUiLCJ3b3JkIiwicmV0Iiwic3Vic3RyaW5nIiwiY2hlY2tBY2hpZXZlbWVudHNBamF4IiwiY2hlY2tGb3JBdmFpbGFibGVBY2hpZXZlbWVudHMiLCJ3aXRoR3JvdXBzIiwianNvbkZvckFsbCIsImFjaCIsImZpbHRlckFjaGlldmVtZW50QnlQcm9kdWN0IiwiZ2FtZWlkIiwic2VsZiIsInByb2R1Y3RzIiwicHJvZCIsInByb2R1Y3RSZWZJZCIsImdldEFjaGlldmVtZW50c0FqYXgiLCJnZXRBY2hpZXZlbWVudCIsImFjaGlldmVtZW50SWQiLCJlIiwiZ2V0UmV3YXJkQWpheCIsImdldFJld2FyZCIsInJld2FyZElkIiwiZ2V0TWVzc2FnZUFqYXgiLCJnZXRNZXNzYWdlIiwibWVzc2FnZUlkIiwiY2xhaW1SZXdhcmRBamF4IiwiY2xhaW1SZXdhcmQiLCJjaGVja0Zvck1lbWJlckFjaGlldmVtZW50c0FqYXgiLCJjaGVja0Zvck1lbWJlckFjaGlldmVtZW50c0lzc3VlZCIsImlkTGlzdCIsImFnZ3JlZ2F0aW9ucyIsIml0ZW1zIiwiY2hlY2tGb3JNZW1iZXJBY2hpZXZlbWVudHNQcm9ncmVzc2lvbkFqYXgiLCJjaGVja0Zvck1lbWJlckFjaGlldmVtZW50c1Byb2dyZXNzaW9uIiwiY2hlY2tGb3JBdmFpbGFibGVSZXdhcmRzQWpheCIsImNoZWNrRm9yQXZhaWxhYmxlUmV3YXJkcyIsImV4cGlyZWQiLCJleHBpcnkiLCJtb21lbnQiLCJkaWZmIiwiZGF0ZSIsInV0Y0RhdGUiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImNoZWNrRm9yQXZhaWxhYmxlTWVzc2FnZXNBamF4IiwiY2hlY2tGb3JBdmFpbGFibGVNZXNzYWdlcyIsInNldERhdGUiLCJnZXRNb250aCIsImNyZWF0ZWREYXRlRmlsdGVyIiwiZ2V0RnVsbFllYXIiLCJnZXREYXRlIiwib3B0SW5NZW1iZXJBamF4Iiwib3B0SW5NZW1iZXJUb0FjdGl2ZUNvbXBldGl0aW9uIiwicmV2YWxpZGF0aW9uQ291bnQiLCJyZXZhbGlkYXRlSWZTdWNjZXNzZnVsbE9wdEluIiwiY29tcGV0aXRpb25Kc29uIiwib3B0aW4iLCJzZXRUaW1lb3V0IiwibGVhZGVyYm9hcmREYXRhUmVmcmVzaCIsImNsZWFyVGltZW91dCIsIm9wdGluUmVxdWlyZWQiLCJhY3RpdmUiLCJsb2FkU2NvcmVCb2FyZCIsImxvYWRMZWFkZXJib2FyZCIsImFjdGl2ZUNvbXBldGl0aW9uRGF0YVJlZnJlc2giLCJjbGVhckFsbCIsInN0b3BBY3Rpdml0eSIsImNsZWFySW50ZXJ2YWwiLCJ1cGRhdGVJbnRlcnZhbCIsInJlc3RhcnRBY3Rpdml0eSIsInVwZGF0ZVNjb3JlQm9hcmQiLCJsb2FkTWVtYmVyIiwiaW5pdCIsImxvYWRXaWRnZXRUcmFuc2xhdGlvbnMiLCJhamF4T3B0aW9ucyIsInRocm93bkVycm9yIiwic3RhcnR1cCIsImluaXRMYXlvdXQiLCJjbGVhbnVwIiwiX2NsZWFudXBJbnN0YW5jZSIsInByZUxvYWRlclJlcnVuIiwibG9hZFN0eWxlc2hlZXQiLCJjcmVhdGVkUmVzb3VyY2VzIiwiYXZhaWxhYmxlTGlua3MiLCJvYmplY3RJdGVyYXRvciIsInF1ZXJ5IiwibGluayIsImhyZWYiLCJyZXNvdXJjZSIsImtleSIsImV4aXN0cyIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJhcHBlbmRDaGlsZCIsImNsaWNrZWRNaW5pU2NvcmVCb2FyZCIsImRyYWdnaW5nIiwiY29udGFpbmVyIiwic3R5bGUiLCJkaXNwbGF5Iiwib3BlbldpdGhUYWJBbmRBY3Rpb24iLCJ0YWIiLCJhY3Rpb25DYWxsYmFjayIsImxvYWRUYWIiLCJuYXZpZ2F0aW9uU3dpdGNoIiwibG9hZENvbXBldGl0aW9uTGlzdEFqYXgiLCJldmVudEhhbmRsZXJzIiwiZWwiLCJoYXNDbGFzcyIsImFkZENsYXNzIiwibG9hZENvbXBldGl0aW9uRGV0YWlscyIsInJlbW92ZUNsYXNzIiwiY29tcGV0aXRpb25EZXRhaWxzT3B0SW5CdXR0b25TdGF0ZSIsInBhcmVudE5vZGUiLCJoaWRlTm90aWZpY2F0aW9uIiwiaGlkZSIsImRhdGFzZXQiLCJsb2FkQWNoaWV2ZW1lbnREZXRhaWxzIiwiaGlkZUNvbXBldGl0aW9uRGV0YWlscyIsImhpZGVBY2hpZXZlbWVudERldGFpbHMiLCJoaWRlUmV3YXJkRGV0YWlscyIsImhpZGVNZXNzYWdlRGV0YWlscyIsImNsb3Nlc3QiLCJsb2FkUmV3YXJkRGV0YWlscyIsImxvYWRNZXNzYWdlRGV0YWlscyIsImNsYWltZWQiLCJsb2FkUmV3YXJkcyIsImlubmVySFRNTCIsImNsYWltIiwibG9hZENvbXBldGl0aW9uTGlzdCIsInRvdXJuYW1lbnRJZCIsInByZUxvYWRlciIsInByZWxvYWRlciIsInNob3ciLCJoaWRlQ29tcGV0aXRpb25MaXN0IiwiYWNjb3JkaW9uTmF2aWdhdGlvbiIsImV2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50Iiwia2V5Q29kZSIsImlzTW9iaWxlIiwidGFyZ2V0IiwiY2xvc2VFdmVyeXRoaW5nIiwicHJlTG9hZGVyQWN0aXZlIiwiaXNNb2JpbGVUYWJsZXQiLCJOb3RpZmljYXRpb25zIiwiTWluaVNjb3JlQm9hcmQiLCJNYWluV2lkZ2V0IiwibGJXaWRnZXQiLCJuYXZpZ2F0aW9uIiwic2VjdGlvbiIsImRldGFpbHNDb250YWluZXIiLCJ0b3VybmFtZW50TGlzdENvbnRhaW5lciIsImhlYWRlckRhdGUiLCJwcmVMb2FkZXJsYXN0QXR0ZW1wdCIsInByZWxvYWRlckNhbGxiYWNrUmVjb3ZlcnkiLCJkZWZhdWx0RW1wdHlMaXN0IiwidG9wUmVzdWx0U2l6ZSIsImhlYWRlciIsInRvcFJlc3VsdHMiLCJ0aW1lckludGVydmFsIiwidG91cm5hbWVudHNTZWN0aW9uIiwiYWNjb3JkaW9uTGF5b3V0IiwibGFiZWwiLCJzaG93VG9wUmVzdWx0cyIsInJld2FyZHNTZWN0aW9uIiwibmF2aWdhdGlvblN3aXRjaExhc3RBdGVtcHQiLCJuYXZpZ2F0aW9uU3dpdGNoSW5Qcm9ncmVzcyIsIm9wdCIsImhhc093blByb3BlcnR5IiwiYWNjb3JkaW9uU3R5bGUiLCJvbkxheW91dCIsImFjY29yZGlvbldyYXBwZXIiLCJlbnRyeSIsImFjY29yZGlvblNlY3Rpb24iLCJhY2NvcmRpb25MYWJlbCIsInRvcFNob3duRW50cnkiLCJhY2NvcmRpb25MaXN0Q29udGFpbmVyIiwiYWNjb3JkaW9uTGlzdCIsImVsZW1lbnQiLCJwYXJlbnRFbCIsIndyYXBwZXIiLCJpbm5lcldyYXBwZXIiLCJuYXZpZ2F0aW9uQ29udGFpbmVyIiwibmF2aWdhdGlvbkl0ZW1zIiwibmF2aWdhdGlvbkl0ZW1MQiIsIm5hdmlnYXRpb25JdGVtTEJJY29uIiwibmF2aWdhdGlvbkl0ZW1BQ0giLCJuYXZpZ2F0aW9uSXRlbUFDSEljb24iLCJuYXZpZ2F0aW9uSXRlbVJld2FyZHMiLCJuYXZpZ2F0aW9uSXRlbVJld2FyZHNJY29uIiwibmF2aWdhdGlvbkl0ZW1JbmJveCIsIm5hdmlnYXRpb25JdGVtSW5ib3hJY29uIiwibWFpblNlY3Rpb25Db250YWluZXIiLCJwcmVMb2FkZXJDb250YWluZXIiLCJwcmVMb2FkZXJDb250ZW50IiwicHJlTG9hZGVyQmFyMSIsInByZUxvYWRlckJhcjIiLCJwcmVMb2FkZXJCYXIzIiwic2VjdGlvbkxCIiwibGVhZGVyYm9hcmRBcmVhTGF5b3V0Iiwic2VjdGlvbkFDSCIsImFjaGlldmVtZW50c0FyZWFMYXlvdXQiLCJzZWN0aW9uUmV3YXJkcyIsInJld2FyZHNBcmVhTGF5b3V0Iiwic2VjdGlvbkluYm94IiwiaW5ib3hBcmVhTGF5b3V0Iiwic2VjdGlvbkxCSGVhZGVyIiwic2VjdGlvbkxCSGVhZGVyTGlzdCIsInNlY3Rpb25MQkhlYWRlckxpc3RJY29uIiwic2VjdGlvbkxCSGVhZGVyTGFiZWwiLCJzZWN0aW9uTEJIZWFkZXJEYXRlIiwic2VjdGlvbkxCSGVhZGVyQ2xvc2UiLCJzZWN0aW9uTEJEZXRhaWxzIiwic2VjdGlvbkxCRGV0YWlsc0luZm8iLCJzZWN0aW9uTEJEZXRhaWxzSW5mb0ljb24iLCJzZWN0aW9uTEJEZXRhaWxzQ29udGVudENvbnRhaW5lciIsInNlY3Rpb25MQkRldGFpbHNDb250ZW50Q29udGFpbmVyTGFiZWwiLCJzZWN0aW9uTEJEZXRhaWxzQ29udGVudENvbnRhaW5lckRhdGUiLCJzZWN0aW9uTEJMZWFkZXJib2FyZCIsInNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyIiwic2VjdGlvbkxCTGVhZGVyYm9hcmRIZWFkZXJMYWJlbHMiLCJzZWN0aW9uTEJMZWFkZXJib2FyZEhlYWRlclRvcFJlc3VsdHMiLCJzZWN0aW9uTEJMZWFkZXJib2FyZEJvZHkiLCJzZWN0aW9uTEJMZWFkZXJib2FyZEJvZHlSZXN1bHRzIiwic2VjdGlvbkxCTWlzc2luZ01lbWJlciIsInNlY3Rpb25MQk9wdEluQ29udGFpbmVyIiwic2VjdGlvbkxCT3B0SW5BY3Rpb24iLCJzZWN0aW9uTEJGb290ZXIiLCJzZWN0aW9uTEJGb290ZXJDb250ZW50Iiwic2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQ29udGFpbmVyIiwic2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyIiwic2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyTGFiZWwiLCJzZWN0aW9uVG91cm5hbWVudERldGFpbHNIZWFkZXJEYXRlIiwic2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQmFja0J0biIsInNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0JvZHlDb250YWluZXIiLCJzZWN0aW9uVG91cm5hbWVudERldGFpbHNCb2R5SW1hZ2VDb250YWluZXIiLCJzZWN0aW9uVG91cm5hbWVudERldGFpbHNCb2R5Iiwic2VjdGlvblRvdXJuYW1lbnREZXRhaWxzT3B0SW5Db250YWluZXIiLCJzZWN0aW9uVG91cm5hbWVudERldGFpbHNPcHRJbkFjdGlvbiIsInNlY3Rpb25Ub3VybmFtZW50TGlzdCIsInNlY3Rpb25Ub3VybmFtZW50TGlzdEJvZHkiLCJzZWN0aW9uVG91cm5hbWVudExpc3RCb2R5UmVzdWx0cyIsInNlY3Rpb25Ub3VybmFtZW50QmFja0FjdGlvbiIsImdsb2JhbCIsImNvcHkiLCJlbnRlciIsInNlY3Rpb25BQ0hIZWFkZXIiLCJzZWN0aW9uQUNISGVhZGVyTGFiZWwiLCJzZWN0aW9uQUNISGVhZGVyRGF0ZSIsInNlY3Rpb25BQ0hIZWFkZXJDbG9zZSIsInNlY3Rpb25BQ0hEZXRhaWxzIiwic2VjdGlvbkFDSERldGFpbHNJbmZvIiwic2VjdGlvbkFDSERldGFpbHNJbmZvSWNvbiIsInNlY3Rpb25BQ0hEZXRhaWxzQ29udGVudENvbnRhaW5lciIsInNlY3Rpb25BQ0hEZXRhaWxzQ29udGVudENvbnRhaW5lckxhYmVsIiwic2VjdGlvbkFDSERldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZSIsInNlY3Rpb25BQ0hMaXN0Iiwic2VjdGlvbkFDSExpc3RCb2R5Iiwic2VjdGlvbkFDSExpc3RCb2R5UmVzdWx0cyIsInNlY3Rpb25BQ0hGb290ZXIiLCJzZWN0aW9uQUNIRm9vdGVyQ29udGVudCIsInNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNDb250YWluZXIiLCJzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzSGVhZGVyIiwic2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0hlYWRlckxhYmVsIiwic2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0hlYWRlckRhdGUiLCJzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQmFja0J0biIsInNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5Q29udGFpbmVyIiwic2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0JvZHlJbWFnZUNvbnRhaW5lciIsInNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5Iiwic2VjdGlvblJld2FyZHNIZWFkZXIiLCJzZWN0aW9uUmV3YXJkc0hlYWRlckxhYmVsIiwic2VjdGlvblJld2FyZHNIZWFkZXJEYXRlIiwic2VjdGlvblJld2FyZHNIZWFkZXJDbG9zZSIsInNlY3Rpb25SZXdhcmRzRGV0YWlscyIsInNlY3Rpb25SZXdhcmRzRGV0YWlsc0luZm8iLCJzZWN0aW9uUmV3YXJkc0RldGFpbHNJbmZvSWNvbiIsInNlY3Rpb25SZXdhcmRzRGV0YWlsc0NvbnRlbnRDb250YWluZXIiLCJzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyTGFiZWwiLCJzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZSIsInNlY3Rpb25SZXdhcmRzTGlzdCIsInNlY3Rpb25SZXdhcmRzTGlzdEJvZHkiLCJzZWN0aW9uUmV3YXJkc0xpc3RCb2R5UmVzdWx0cyIsInNlY3Rpb25SZXdhcmRzRm9vdGVyIiwic2VjdGlvblJld2FyZHNGb290ZXJDb250ZW50Iiwic2VjdGlvblJld2FyZHNEZXRhaWxzQ29udGFpbmVyIiwic2VjdGlvblJld2FyZHNEZXRhaWxzSGVhZGVyIiwic2VjdGlvblJld2FyZHNEZXRhaWxzSGVhZGVyTGFiZWwiLCJzZWN0aW9uUmV3YXJkc0RldGFpbHNIZWFkZXJEYXRlIiwic2VjdGlvblJld2FyZHNEZXRhaWxzQmFja0J0biIsInNlY3Rpb25SZXdhcmRzRGV0YWlsc0JvZHlDb250YWluZXIiLCJzZWN0aW9uUmV3YXJkc0RldGFpbHNCb2R5SW1hZ2VDb250YWluZXIiLCJzZWN0aW9uUmV3YXJkc0RldGFpbHNCb2R5Iiwic2VjdGlvblJld2FyZHNXaW5uaW5nc0NvbnRhaW5lciIsInNlY3Rpb25SZXdhcmRzV2lubmluZ3NJY29uIiwic2VjdGlvblJld2FyZHNXaW5uaW5nc1ZhbHVlIiwic2VjdGlvblJld2FyZHNDbGFpbUNvbnRhaW5lciIsInNlY3Rpb25SZXdhcmRzQ2xhaW1CdG4iLCJzZWN0aW9uSW5ib3hIZWFkZXIiLCJzZWN0aW9uSW5ib3hIZWFkZXJMYWJlbCIsInNlY3Rpb25JbmJveEhlYWRlckRhdGUiLCJzZWN0aW9uSW5ib3hIZWFkZXJDbG9zZSIsInNlY3Rpb25JbmJveERldGFpbHMiLCJzZWN0aW9uSW5ib3hEZXRhaWxzSW5mbyIsInNlY3Rpb25JbmJveERldGFpbHNJbmZvSWNvbiIsInNlY3Rpb25JbmJveERldGFpbHNDb250ZW50Q29udGFpbmVyIiwic2VjdGlvbkluYm94RGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbCIsInNlY3Rpb25JbmJveERldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZSIsInNlY3Rpb25JbmJveExpc3QiLCJzZWN0aW9uSW5ib3hMaXN0Qm9keSIsInNlY3Rpb25JbmJveExpc3RCb2R5UmVzdWx0cyIsInNlY3Rpb25JbmJveEZvb3RlciIsInNlY3Rpb25JbmJveEZvb3RlckNvbnRlbnQiLCJzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGFpbmVyIiwic2VjdGlvbkluYm94RGV0YWlsc0hlYWRlciIsInNlY3Rpb25JbmJveERldGFpbHNIZWFkZXJMYWJlbCIsInNlY3Rpb25JbmJveERldGFpbHNIZWFkZXJEYXRlIiwic2VjdGlvbkluYm94RGV0YWlsc0JhY2tCdG4iLCJzZWN0aW9uSW5ib3hEZXRhaWxzQm9keUNvbnRhaW5lciIsInNlY3Rpb25JbmJveERldGFpbHNCb2R5IiwibGVhZGVyYm9hcmRIZWFkZXIiLCJyYW5rQ29sIiwiaWNvbkNvbCIsIm5hbWVDb2wiLCJncm93dGhDb2wiLCJwb2ludHNDb2wiLCJyYW5rIiwicG9pbnRzIiwicmV3YXJkQ29sIiwicmV3YXJkRW5hYmxlZCIsInByaXplIiwibGVhZGVyYm9hcmRSb3ciLCJjaGFuZ2UiLCJncm93dGgiLCJtZW1iZXJGb3VuZCIsImNlbGxXcmFwcGVyIiwicmFua0NlbCIsInJhbmtDZWxWYWx1ZSIsImljb25DZWwiLCJpY29uQ2VsSW1nIiwiSW1hZ2UiLCJuYW1lQ2VsIiwiZ3Jvd3RoQ2VsIiwicG9pbnRzQ2VsIiwibWVtYmVyRm91bmRDbGFzcyIsInNyYyIsImFsdCIsInJld2FyZENlbCIsImxlYWRlcmJvYXJkUm93VXBkYXRlIiwib25NaXNzaW5nIiwiY2VsbFJvdyIsInJvd0hhc0NsYXNzIiwicG9wdWxhdGVMZWFkZXJib2FyZFJlc3VsdHNXaXRoRGVmYXVsdEVudHJpZXMiLCJyZW1haW5pbmdSZXN1bHRzIiwibWVtYmVyUmVmSWQiLCJzIiwidXBkYXRlTGVhZGVyYm9hcmRUb3BSZXN1bHRzIiwidXBkYXRlTGVhZGVyYm9hcmRSZXN1bHRzIiwicmFua0NoZWNrIiwiY2xlYW51cFJhbmtDaGVjayIsImxiIiwicmVtb3ZlIiwibWVtYmVyTmFtZSIsInlvdSIsImdyb3d0aFR5cGUiLCJncm93dGhJY29uIiwicmMiLCJuZXdSb3ciLCJwcmV2Q2VsbFJvdyIsImFwcGVuZE5leHQiLCJyZXdhcmRSZXNwb25zZSIsIkFycmF5IiwiYXR0cmlidXRlcyIsInVwZGF0ZUxlYWRlcmJvYXJkIiwibWlzc2luZ01lbWJlciIsImlzRWxlbWVudFZpc2libGVJblZpZXciLCJ1cGRhdGVMZWFkZXJib2FyZFRpbWUiLCJzY2hlZHVsZWRTdGFydCIsInNjaGVkdWxlZEVuZCIsImZpbmlzaGluZyIsImZpbmlzaGVkIiwiZGV0YWlsc0NvbnRhaW5lckRhdGUiLCJsZWFkZXJib2FyZERldGFpbHNVcGRhdGUiLCJtYWluTGFiZWwiLCJub0F2YWlsYWJsZUNvbXBldGl0aW9ucyIsImxlYWRlcmJvYXJkT3B0SW5DaGVjayIsIm9wdEluIiwib3BhY2l0eSIsImlzVmlzaWJsZSIsImFyZWEiLCJwb3NpdGlvbiIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImVsZW1Db250YWluZXIiLCJlbGVtVG9wIiwidG9wIiwiZWxlbUJvdHRvbSIsImJvdHRvbSIsImVsZW1IZWlnaHQiLCJoZWlnaHQiLCJvbnNjcm9sbCIsImV2dCIsInByZXZlbnREZWZhdWx0Iiwib25yZXNpemUiLCJyZWdpc3RlcmVkIiwiaW1hZ2UiLCJkZXNjcmlwdGlvbiIsImltZyIsIm5ld0ltZyIsImNsb25lTm9kZSIsImxpc3RSZXNDb250YWluZXIiLCJhY2NvcmRpb25PYmoiLCJsaXN0Q29udGFpbmVyIiwidG9wRW50cnlDb250YWluZXIiLCJ0b3VybmFtZW50RGF0YSIsInRvdXJuYW1lbnQiLCJ0b3BFbnRyeUNvbnRhaW5lUmxpc3RJdGVtIiwidG91cm5hbWVudEl0ZW0iLCJsaXN0SXRlbSIsImFjaGlldmVtZW50SXRlbSIsImFjaGlldmVkIiwicGVyYyIsImRldGFpbHNXcmFwcGVyIiwiY2F0ZWdvcnkiLCJwcm9ncmVzc2lvbldyYXBwZXIiLCJwcm9ncmVzc2lvbkJveCIsInByb2dyZXNzaW9uQ29udCIsInByb2dyZXNzaW9uQmFyIiwicHJvZ3Jlc3Npb25QZXJjZW50IiwiaXNzdWVkQm94IiwiaXNzdWVkQm94Q291bnQiLCJpc3N1ZWRCb3hDaGVjayIsIm1vcmVCdXR0b24iLCJyZXdhcmROYW1lIiwiY3BvbW50YWluc0ltYWdlIiwibW9yZSIsImltYWdlSWNvbldyYXBwZXIiLCJhY2hpZXZlbWVudExpc3RMYXlvdXQiLCJhY2hpZXZlbWVudERhdGEiLCJhY2hMaXN0IiwiaW1hZ2VMb29rdXAiLCJjbGFpbUJ0biIsIl9pbWFnZSIsInN1YmplY3QiLCJnZXRBY2hpZXZlbWVudEluZm8iLCJ1cGRhdGVBY2hpZXZlbWVudFByb2dyZXNzaW9uQW5kSXNzdWVkIiwiaXNzdWVkIiwicHJvZ3Jlc3Npb24iLCJhY2hJbmZvIiwiaXNzdWVkQ250IiwiaXNzdWVkQ2hjayIsImlzQXJyYXkiLCJwciIsInNjaGVkdWxpbmciLCJzY2hlZHVsZVR5cGUiLCJwYXJzZUZsb2F0IiwiZ29hbFBlcmNlbnRhZ2VDb21wbGV0ZSIsInRvRml4ZWQiLCJiYXIiLCJwZXJjZW50TnVtIiwiaXNzdWVkQ291bnQiLCJpc3N1ZWRDaGVjayIsIndpZHRoIiwiTWF0aCIsInJvdW5kIiwibG9hZEFjaGlldmVtZW50cyIsInJld2FyZEl0ZW0iLCJyZXciLCJsYWJlbFRleHQiLCJzdHJpcEh0bWwiLCJkZXNjcmlwdGlvblRleHQiLCJzdWJzdHIiLCJtZXNzYWdlSXRlbSIsImluYm94IiwiY29udGVudCIsImRlc2NyaXB0aW9uQ29udGVudCIsInJld2FyZHNMaXN0TGF5b3V0IiwicmV3YXJkTGlzdCIsInJld2FyZERhdGEiLCJtZXNzYWdlc0xpc3RMYXlvdXQiLCJtZXNzYWdlTGlzdCIsImluYm94SXRlbSIsImxvYWRNZXNzYWdlcyIsImNoYW5nZUludGVydmFsIiwiY2hhbmdlQ29udGFpbmVySW50ZXJ2YWwiLCJsYkNvbnRhaW5lciIsImFjaENvbnRhaW5lciIsInJld2FyZHNDb250YWluZXIiLCJpbmJveENvbnRhaW5lciIsInJlc2V0TmF2aWdhdGlvbiIsIk1lc3NhZ2luZyIsInNvdXJjZSIsImFqYXgiLCJlcnJvckNhbGxiYWNrIiwic3NlVXJsIiwiaGVhcnRiZWF0IiwibGFzdEhlYXJ0YmVhdCIsIm1haW5BamF4IiwiaGVhcnRCZWF0QWpheCIsImhlYXJ0V2FpdFRpbWUiLCJtZXNzYWdlUXVldWUiLCJtZXNzYWdlSW50ZXJ2YWwiLCJzdGFydHVwQ2hlY2siLCJvblN0YXJ0dXBFcnJvciIsImludGVydmFsSW5zdGFuY2UiLCJoZWFydGJlYXRJbnRlcnZhbEluc3RhbmNlIiwibG9va3VwRGF0YSIsImluZGV4Iiwic3BsaWNlIiwic2V0SW50ZXJ2YWwiLCJjdXJyZW50VGltZSIsImNsb3NlQ2hhbmVsIiwiaGVhckJlYXRDaGVjayIsImRhdGFPYmplY3QiLCJvcGVuQ2hhbmVsIiwiRXZlbnRTb3VyY2UiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZXJ2ZXJTaWRlRXZlbnRMaXN0ZW5lcnMiLCJDTE9TRUQiLCJjbG9zZSIsInNzZUZhaWxlZCIsIndpbmRvd0FjdGl2aXR5IiwiaGlkZGVuIiwib25jaGFuZ2UiLCJvbmZvY3VzaW4iLCJvbmZvY3Vzb3V0Iiwib25wYWdlc2hvdyIsIm9ucGFnZWhpZGUiLCJvbmZvY3VzIiwib25ibHVyIiwidiIsImgiLCJldnRNYXAiLCJmb2N1cyIsImZvY3VzaW4iLCJwYWdlc2hvdyIsImJsdXIiLCJmb2N1c291dCIsInBhZ2VoaWRlIiwib3ZlcmxheUNvbnRhaW5lciIsImluZm9Db250YWluZXIiLCJ1cGRhdGVJbnRlcnZhbFRpbWUiLCJlbmFibGVEcmFnZ2luZyIsImljb25XcmFwcGVyIiwiaW5mb3JtYXRpb25XcmFwcGVyIiwiaW5mb3JtYXRpb25Ub3BXcmFwcGVyIiwiaW5mb3JtYXRpb25XcmFwcGVyQ2xvc2UiLCJpbmZvcm1hdGlvbkNsb3NlIiwib3ZlcmxheUxheW91dCIsInRpbWVNYW5hZ2VtZW50IiwiZGF0ZU9iaiIsImludmVyc2UiLCJtaW5pTGVhZGVyYm9hcmQiLCJzdGFydHNJbiIsInN0YXJ0aW5nIiwibGF5b3V0RGVmYXVsdE9yRW1wdHlFbnRyeSIsImxiUmVzdWx0c01lbUVudHJ5IiwibGJSZXN1bHRzTWVtTGFiZWwiLCJsYlJlc3VsdHNNZW1SYW5rIiwibGJSZXN1bHRzTWVtSWNvbiIsImxiUmVzdWx0c01lbUltZyIsImxiUmVzdWx0c01lbVBvaW50cyIsImxheW91dEZpcnN0VG9PckVtcHR5RW50cnkiLCJsYXlvdXREZWZhdWx0T3JFbXB0eSIsIndyYXBwZXJEb21PYmoiLCJkZWZhdWx0RG9tT2JqIiwicmVtb3ZlVW51c2VkRWxlbWVudHMiLCJsYldyYXBwZXIiLCJsYkRhdGVXcmFwcGVyIiwibGJEYXRlTGFiZWwiLCJsYkRhdGUiLCJsYlJlc3VsdHNXcmFwcGVyIiwibGJSZXN1bHRzTGlzdCIsImxiSGVhZGVycyIsImxiSGVhZGVyc1JhbmsiLCJsYkhlYWRlcnNQb2ludHMiLCJsYkVudHJ5IiwicmFua2luZ3MiLCJzY29yZUFyZWEiLCJsYlJhbmtpbmdFbnRyeSIsInNlbGZNZW1iZXIiLCJsYXlvdXRGaXJzdFRvT3JFbXB0eSIsInN0cmF0ZWd5IiwicmVjb3JkVGltZVdoZW5TdW1SZWFjaGVzIiwibGF5b3V0U3VtQmVzdE9mIiwic3VtQmVzdERvbU9iaiIsImxiUmVzdWx0c1Njb3JlQXJlYSIsImxiUmVzdWx0c1Njb3JlQXJlYUhpZ2giLCJsYlJlc3VsdHNTY29yZUFyZWFIaWdoTGFiZWwiLCJsYlJlc3VsdHNTY29yZUFyZWFIaWdoU2NvcmUiLCJsYlJlc3VsdHNTY29yZUFyZWFMYXN0IiwibGJSZXN1bHRzU2NvcmVBcmVhTGFzdExhYmVsIiwibGJSZXN1bHRzU2NvcmVBcmVhTGFzdFNjb3JlIiwibGJSZXN1bHRzUmFua0FyZWEiLCJsYlJlc3VsdHNSYW5rVmFsdWUiLCJoaWdoU2NvcmUiLCJsYXN0U2NvcmUiLCJyYW5rVmFsdWUiLCJTdHJpbmciLCJsYXlvdXRSZXF1aXJlc09wdEluIiwib3B0SW5XcmFwcGVyIiwib3B0SW5EYXRlV3JhcHBlciIsIm9wdEluRGF0ZUxhYmVsIiwib3B0SW5EYXRlIiwib3B0SW5EYXRlQWN0aW9uV3JhcHBlciIsIm9wdEluRGF0ZUFjdGlvbiIsImRlZmF1bHRMYXlvdXRXcmFwcGVyRG9tT2JqIiwib3B0SW5XcmFwcGVyRG9tT2JqIiwiZmlyc3RUb0RvbU9iaiIsInJlbW92ZUluZm9BcmVhIiwibG9hZEluZm9BcmVhIiwiZHJhZ0VsZW1lbnQiLCJuZXdUb3AiLCJuZXdMZWZ0IiwiZXZlbnRTdHJlYW0iLCJjaGVja1RpbWVvdXQiLCJvbkRpc3BsYXlDaGVja1RpbWVvdXQiLCJjaGVja0ludGVydmFsIiwiYXV0b05vdGlmaWNhdGlvbkhpZGVJbnRlcnZhbCIsImF1dG9Ob3RpZmljYXRpb25IaWRlVGltZSIsImRpc3BsYXlJblByb2dyZXNzIiwibGF5b3V0V3JhcHBlciIsImluZm9ybWF0aW9uRGV0YWlsc0NvbnRhaW5lciIsImluZm9ybWF0aW9uRGV0YWlsc0xhYmVsIiwiaW5mb3JtYXRpb25EZXRhaWxzRGVzY3JpcHRpb24iLCJwcm9jZXNzZWQiLCJzdGFydFNTRSIsInNzZUluc3RhbmNlIiwiZGF0YUtleSIsImF1dG9Ob3RpZmljYXRpb25IaWRlIiwic2hvd0FjaGlldmVtZW50Tm90aWZpY2F0aW9uIiwiZXZlbnRTdHJlYW1DaGVjayIsIm5vdGlmaWNhdGlvbklkIiwiYXBpVVJMIiwiY2xhc3NTZWxlY3RvciIsImlkU2VsZWN0b3IiLCJ0YWdTZWxlY3RvciIsIm1vdmVtZW50SW50ZXJ2YWwiLCJlbG1udCIsImRyYWdnYWJsZUVsIiwiZmluaXNoRHJhZ2dpbmciLCJtb2JpbGVUb3VjaCIsInBvczEiLCJwb3MyIiwicG9zMyIsInBvczQiLCJpc2lPUyIsImlzaU9TRGV2aWNlIiwiaXNQYXJlbnRXaW5kb3ciLCJub2RlTmFtZSIsIm1heExlZnQiLCJpbm5lcldpZHRoIiwib2Zmc2V0V2lkdGgiLCJtYXhUb3AiLCJpbm5lckhlaWdodCIsIm9mZnNldEhlaWdodCIsInRvdWNoU3RhcnQiLCJtb3ZpbmciLCJvbldpbmRvd0NoYW5nZSIsImlzVmVydGljYWwiLCJvZmZzZXRNYXhMZWZ0Iiwib2Zmc2V0TWF4VG9wIiwiZWxUb3AiLCJlbExlZnQiLCJsZWZ0IiwianVzdEFUb3VjaCIsInBhc3NpdmUiLCJ0YXJnZXRUb3VjaGVzIiwicGFnZVgiLCJwYWdlWSIsImVsZW1lbnREcmFnIiwiY2xvc2VEcmFnRWxlbWVudCIsIm9ubW91c2Vkb3duIiwiZHJhZ01vdXNlRG93biIsImNsaWVudFgiLCJjbGllbnRZIiwib25tb3VzZXVwIiwib25tb3VzZW1vdmUiLCJjaGVja01heE1pblJlc3RyYWludHMiLCJtaW5MZWZ0IiwicG9zWCIsInBvc1kiLCJjaGVja01vdmVtZW50Iiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsImxlZnRUb3BDaGVjayIsInNldFRpbWVvdXRHbG9iYWwiLCJfc2V0VGltZW91dEdsb2JhbFJlcG9zaXRvcnkiLCJmdW5jIiwidGltZXIiLCJpbnRlcnZhbCIsIkVycm9yIiwiY2xvc2VUaW1lb3V0IiwicmVFbmFibGVUaW1lb3V0cyIsInRtcCIsIlN5bnRheEVycm9yIiwiRXZlbnQiLCJyZXR1cm5WYWx1ZSIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInQiLCJuIiwiciIsIkVsZW1lbnQiLCJzcmNFbGVtZW50IiwiY3VycmVudFRhcmdldCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJoYW5kbGVFdmVudCIsImNhbGwiLCJvIiwiYXR0YWNoRXZlbnQiLCJvYmplY3QiLCJsaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsIkhUTUxEb2N1bWVudCIsIldpbmRvdyIsInBhcmVudEVsZW1lbnQiLCJyZW1vdmVDaGlsZCIsIk5vZGVMaXN0IiwiSFRNTENvbGxlY3Rpb24iLCJmIiwicXVvdGUiLCJlc2NhcGFibGUiLCJsYXN0SW5kZXgiLCJ0ZXN0IiwibWV0YSIsImNoYXJDb2RlQXQiLCJzbGljZSIsImEiLCJwIiwiZ2FwIiwidSIsInRvSlNPTiIsInJlcCIsImlzRmluaXRlIiwiaW5kZW50IiwiT2JqZWN0IiwiYXBwbHkiLCJ2YWx1ZU9mIiwiZ2V0VVRDU2Vjb25kcyIsIk51bWJlciIsIkJvb2xlYW4iLCJjeCIsInRleHQiLCJyZXZpdmVyIiwid2FsayIsImoiLCJldmFsIiwiX3NsaWNlIiwiZG9jdW1lbnRFbGVtZW50IiwiYyIsImwiLCJjaGFyQXQiLCJyZVRyaW0iLCJldmVudHNvdXJjZSIsImxhc3RFdmVudElkIiwiY2FjaGUiLCJVUkwiLCJDT05ORUNUSU5HIiwiX3BvbGxUaW1lciIsIl94aHIiLCJwb2xsQWdhaW4iLCJwb2xsIiwidGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIk9QRU4iLCJkaXNwYXRjaEV2ZW50IiwicGFydHMiLCJldmVudFR5cGUiLCJsaW5lIiwicmV0cnkiLCJpc05hTiIsIk1lc3NhZ2VFdmVudCIsImhhbmRsZXJzIiwiaGFuZGxlciIsIm9ubWVzc2FnZSIsIm9ub3BlbiIsIm9yaWdpbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJjbGFzc05hbWUiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0cmFjZSIsIm5ld05vZGUiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsInNlbGVjdG9yIiwic2VsZWN0b3JDbGFzc1N0cmluZyIsImdldEF0dHJpYnV0ZSIsInNlbGVjdG9ySWRTdHJpbmciLCJtYXRjaCIsInRvVXBwZXJDYXNlIiwibnVtIiwiZ2V0T2Zmc2V0IiwiX3giLCJfeSIsIm9mZnNldFBhcmVudCIsIl9oYXNDbGFzcyIsImNvbnRhaW5zIiwiUmVnRXhwIiwic3RhY2siLCJpc0VsZW1lbnQiLCJIVE1MRWxlbWVudCIsIm5vZGVUeXBlIiwiY2hlY2siLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ2ZW5kb3IiLCJvcGVyYSIsInRvTG93ZXJDYXNlIiwicGxhdGZvcm0iLCJvYmoxIiwib2JqMiIsImFycmF5VHlwZSIsIm9iajMiLCJrIiwib2JqZWN0Q291bnQiLCJkb2MiLCJ0bXBEb2MiLCJ0bXBTZWxlY3RvciIsInRyaW0iLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzY3JvbGxFbmFibGVkIiwic2Nyb2xsSGVpZ2h0IiwicGFydGlhbCIsImh0bWwiLCJ0ZXh0Q29udGVudCIsImlubmVyVGV4dCIsInN0cmluZyJdLCJtYXBwaW5ncyI6IjtRQUFBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMENBQTBDLGdDQUFnQztRQUMxRTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLHdEQUF3RCxrQkFBa0I7UUFDMUU7UUFDQSxpREFBaUQsY0FBYztRQUMvRDs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EseUNBQXlDLGlDQUFpQztRQUMxRSxnSEFBZ0gsbUJBQW1CLEVBQUU7UUFDckk7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwyQkFBMkIsMEJBQTBCLEVBQUU7UUFDdkQsaUNBQWlDLGVBQWU7UUFDaEQ7UUFDQTtRQUNBOztRQUVBO1FBQ0Esc0RBQXNELCtEQUErRDs7UUFFckg7UUFDQTs7O1FBR0E7UUFDQTs7Ozs7Ozs7Ozs7OztB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Q0FBQyxnREFBUztBQUMvQixjQUFjLG1CQUFPLENBQUMsZ0RBQVM7O0FBRS9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsbURBQW1EO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsVUFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELEVBQUU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQSxxQkFBcUIsZUFBZTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQsT0FBTztBQUM5RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVELE9BQU87QUFDOUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCLFNBQVM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLDZCQUE2QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixzQkFBc0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLElBQUk7QUFDL0I7O0FBRUE7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsSUFBSTs7QUFFaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsd0JBQXdCO0FBQ25EO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlCQUFpQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFFBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIsT0FBTztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLE9BQU87QUFDMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbUlBQWtDO0FBQ2xEO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxxQkFB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQThELElBQUksMERBQTBELElBQUkscUVBQXFFLEVBQUU7O0FBRXZNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLG1CQUFtQixtQkFBbUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0Esa0NBQWtDLGdCQUFnQjtBQUNsRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1QkFBdUIscUJBQXFCO0FBQzVDO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyw2QkFBNkI7QUFDdEM7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGNBQWM7QUFDeEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0EsNkRBQTZEO0FBQzdELHlEQUF5RDtBQUN6RCwrREFBK0Q7QUFDL0Qsd0RBQXdELE9BQU87QUFDL0Qsd0RBQXdELE9BQU87QUFDL0QsdURBQXVELE9BQU87QUFDOUQsbUVBQW1FLE9BQU87QUFDMUUscUVBQXFFLE9BQU87QUFDNUU7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMscUJBQXFCO0FBQ3hELFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHFCQUFxQjtBQUN4RCxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0I7QUFDeEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7O0FBR0w7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLG1CQUFtQjtBQUMzQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsbUJBQW1CO0FBQ3hDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0MsSUFBSTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLOztBQUVMOzs7QUFHQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRTs7QUFFeEIsQ0FBQyxFQUFFLHVJQUF1STtBQUMxSTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDLGFBQWEsUUFBUSxFQUFFOztBQUV4QixDQUFDLEVBQUUsbUVBQW1FO0FBQ3RFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxFQUFFLHNGQUFzRjtBQUN6RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUMsYUFBYSxRQUFRLEVBQUUsMEhBQTBIOztBQUVsSixDQUFDLEVBQUUsc0hBQXNIO0FBQ3pIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxDQUFDLGFBQWEsUUFBUSxFQUFFOztBQUV4QixDQUFDLEVBQUUsd05BQXdOO0FBQzNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDLHFJQUFxSTs7QUFFdEksQ0FBQyxHQUFHO0FBQ0o7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0RBQWdELFdBQVc7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxDQUFDLGFBQWEsUUFBUSxFQUFFLDBIQUEwSDs7QUFFbEosQ0FBQyxFQUFFLGdGQUFnRjtBQUNuRjtBQUNBOztBQUVBLENBQUMscUlBQXFJOztBQUV0SSxDQUFDLEdBQUc7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQSxDQUFDLHFJQUFxSTs7QUFFdEksQ0FBQyxHQUFHO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxFQUFFLHdHQUF3RztBQUMzRzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxDQUFDLEVBQUUscUZBQXFGO0FBQ3hGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUMsYUFBYSxRQUFRLEVBQUU7O0FBRXhCLENBQUMsRUFBRSxvRkFBb0Y7QUFDdkY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQSxDQUFDLGFBQWEsUUFBUSxFQUFFOztBQUV4QixDQUFDLEVBQUUscURBQXFEO0FBQ3hEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRSwwSEFBMEg7O0FBRWxKLENBQUMsRUFBRSx5R0FBeUc7QUFDNUc7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7O0FBRWQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDBCQUEwQixxREFBcUQsbUJBQW1CLFdBQVc7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFF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RUFBRSxpQ0FBaUM7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRTs7QUFFeEIsQ0FBQyxFQUFFLGtHQUFrRztBQUNyRzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxtQ0FBbUM7O0FBRW5DOztBQUVBLENBQUMsRUFBRSwrRkFBK0Y7QUFDbEc7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQzs7QUFFckM7O0FBRUEsQ0FBQyxFQUFFLDBFQUEwRTtBQUM3RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUM7O0FBRW5DOztBQUVBLENBQUMsRUFBRSx1R0FBdUc7QUFDMUc7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUMscUlBQXFJOztBQUV0SSxDQUFDLEVBQUUsNkhBQTZIO0FBQ2hJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxtQkFBbUIsWUFBWTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUMscUlBQXFJOztBQUV0SSxDQUFDLEdBQUc7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQyxxSUFBcUk7O0FBRXRJLENBQUMsR0FBRztBQUNKOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxDQUFDLEVBQUUsV0FBVztBQUNkO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQyxxSUFBcUk7O0FBRXRJLENBQUMsRUFBRSxjQUFjO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFL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QTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsT0FBTztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixtQkFBbUI7QUFDckM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGlCQUFpQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixRQUFRO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLE1BQU07QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNB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U0FBWkEsU0FBWSxDQUFVMFcsSUFBVixFQUFnQjtBQUNoQyxNQUFJekksR0FBRyxHQUFHMTBCLFFBQVEsQ0FBQ2lQLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBVjtBQUNBeWxCLEtBQUcsQ0FBQ3RqQixTQUFKLEdBQWdCK3JCLElBQWhCO0FBQ0EsU0FBT3pJLEdBQUcsQ0FBQzBJLFdBQUosSUFBbUIxSSxHQUFHLENBQUMySSxTQUF2QixJQUFvQyxFQUEzQztBQUNELENBSkQ7O0FBTWU1Vyx3RUFBZixFOzs7Ozs7Ozs7Ozs7QUNaQTtBQUFBLElBQU1rVyxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFVVyxNQUFWLEVBQWtCO0FBQzdCLFNBQU9BLE1BQU0sQ0FBQ3IvQixPQUFQLENBQWUsWUFBZixFQUE2QixFQUE3QixDQUFQO0FBQ0QsQ0FGRDs7QUFJZTArQixtRUFBZixFOzs7Ozs7Ozs7Ozs7QUNKQTtBQUFlLG9GQUF1QixxQkFBcUIsRSIsImZpbGUiOiJsZWFkZXJib2FyZC52My5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFuc2lIVE1MXG5cbi8vIFJlZmVyZW5jZSB0byBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2Fuc2ktcmVnZXhcbnZhciBfcmVnQU5TSSA9IC8oPzooPzpcXHUwMDFiXFxbKXxcXHUwMDliKSg/Oig/OlswLTldezEsM30pPyg/Oig/OjtbMC05XXswLDN9KSopP1tBLU18Zi1tXSl8XFx1MDAxYltBLU1dL1xuXG52YXIgX2RlZkNvbG9ycyA9IHtcbiAgcmVzZXQ6IFsnZmZmJywgJzAwMCddLCAvLyBbRk9SRUdST1VEX0NPTE9SLCBCQUNLR1JPVU5EX0NPTE9SXVxuICBibGFjazogJzAwMCcsXG4gIHJlZDogJ2ZmMDAwMCcsXG4gIGdyZWVuOiAnMjA5ODA1JyxcbiAgeWVsbG93OiAnZThiZjAzJyxcbiAgYmx1ZTogJzAwMDBmZicsXG4gIG1hZ2VudGE6ICdmZjAwZmYnLFxuICBjeWFuOiAnMDBmZmVlJyxcbiAgbGlnaHRncmV5OiAnZjBmMGYwJyxcbiAgZGFya2dyZXk6ICc4ODgnXG59XG52YXIgX3N0eWxlcyA9IHtcbiAgMzA6ICdibGFjaycsXG4gIDMxOiAncmVkJyxcbiAgMzI6ICdncmVlbicsXG4gIDMzOiAneWVsbG93JyxcbiAgMzQ6ICdibHVlJyxcbiAgMzU6ICdtYWdlbnRhJyxcbiAgMzY6ICdjeWFuJyxcbiAgMzc6ICdsaWdodGdyZXknXG59XG52YXIgX29wZW5UYWdzID0ge1xuICAnMSc6ICdmb250LXdlaWdodDpib2xkJywgLy8gYm9sZFxuICAnMic6ICdvcGFjaXR5OjAuNScsIC8vIGRpbVxuICAnMyc6ICc8aT4nLCAvLyBpdGFsaWNcbiAgJzQnOiAnPHU+JywgLy8gdW5kZXJzY29yZVxuICAnOCc6ICdkaXNwbGF5Om5vbmUnLCAvLyBoaWRkZW5cbiAgJzknOiAnPGRlbD4nIC8vIGRlbGV0ZVxufVxudmFyIF9jbG9zZVRhZ3MgPSB7XG4gICcyMyc6ICc8L2k+JywgLy8gcmVzZXQgaXRhbGljXG4gICcyNCc6ICc8L3U+JywgLy8gcmVzZXQgdW5kZXJzY29yZVxuICAnMjknOiAnPC9kZWw+JyAvLyByZXNldCBkZWxldGVcbn1cblxuO1swLCAyMSwgMjIsIDI3LCAyOCwgMzksIDQ5XS5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gIF9jbG9zZVRhZ3Nbbl0gPSAnPC9zcGFuPidcbn0pXG5cbi8qKlxuICogQ29udmVydHMgdGV4dCB3aXRoIEFOU0kgY29sb3IgY29kZXMgdG8gSFRNTCBtYXJrdXAuXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGFuc2lIVE1MICh0ZXh0KSB7XG4gIC8vIFJldHVybnMgdGhlIHRleHQgaWYgdGhlIHN0cmluZyBoYXMgbm8gQU5TSSBlc2NhcGUgY29kZS5cbiAgaWYgKCFfcmVnQU5TSS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuIHRleHRcbiAgfVxuXG4gIC8vIENhY2hlIG9wZW5lZCBzZXF1ZW5jZS5cbiAgdmFyIGFuc2lDb2RlcyA9IFtdXG4gIC8vIFJlcGxhY2Ugd2l0aCBtYXJrdXAuXG4gIHZhciByZXQgPSB0ZXh0LnJlcGxhY2UoL1xcMDMzXFxbKFxcZCspKm0vZywgZnVuY3Rpb24gKG1hdGNoLCBzZXEpIHtcbiAgICB2YXIgb3QgPSBfb3BlblRhZ3Nbc2VxXVxuICAgIGlmIChvdCkge1xuICAgICAgLy8gSWYgY3VycmVudCBzZXF1ZW5jZSBoYXMgYmVlbiBvcGVuZWQsIGNsb3NlIGl0LlxuICAgICAgaWYgKCEhfmFuc2lDb2Rlcy5pbmRleE9mKHNlcSkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1leHRyYS1ib29sZWFuLWNhc3RcbiAgICAgICAgYW5zaUNvZGVzLnBvcCgpXG4gICAgICAgIHJldHVybiAnPC9zcGFuPidcbiAgICAgIH1cbiAgICAgIC8vIE9wZW4gdGFnLlxuICAgICAgYW5zaUNvZGVzLnB1c2goc2VxKVxuICAgICAgcmV0dXJuIG90WzBdID09PSAnPCcgPyBvdCA6ICc8c3BhbiBzdHlsZT1cIicgKyBvdCArICc7XCI+J1xuICAgIH1cblxuICAgIHZhciBjdCA9IF9jbG9zZVRhZ3Nbc2VxXVxuICAgIGlmIChjdCkge1xuICAgICAgLy8gUG9wIHNlcXVlbmNlXG4gICAgICBhbnNpQ29kZXMucG9wKClcbiAgICAgIHJldHVybiBjdFxuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfSlcblxuICAvLyBNYWtlIHN1cmUgdGFncyBhcmUgY2xvc2VkLlxuICB2YXIgbCA9IGFuc2lDb2Rlcy5sZW5ndGhcbiAgOyhsID4gMCkgJiYgKHJldCArPSBBcnJheShsICsgMSkuam9pbignPC9zcGFuPicpKVxuXG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBDdXN0b21pemUgY29sb3JzLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbG9ycyByZWZlcmVuY2UgdG8gX2RlZkNvbG9yc1xuICovXG5hbnNpSFRNTC5zZXRDb2xvcnMgPSBmdW5jdGlvbiAoY29sb3JzKSB7XG4gIGlmICh0eXBlb2YgY29sb3JzICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBFcnJvcignYGNvbG9yc2AgcGFyYW1ldGVyIG11c3QgYmUgYW4gT2JqZWN0LicpXG4gIH1cblxuICB2YXIgX2ZpbmFsQ29sb3JzID0ge31cbiAgZm9yICh2YXIga2V5IGluIF9kZWZDb2xvcnMpIHtcbiAgICB2YXIgaGV4ID0gY29sb3JzLmhhc093blByb3BlcnR5KGtleSkgPyBjb2xvcnNba2V5XSA6IG51bGxcbiAgICBpZiAoIWhleCkge1xuICAgICAgX2ZpbmFsQ29sb3JzW2tleV0gPSBfZGVmQ29sb3JzW2tleV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmICgncmVzZXQnID09PSBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2YgaGV4ID09PSAnc3RyaW5nJykge1xuICAgICAgICBoZXggPSBbaGV4XVxuICAgICAgfVxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGhleCkgfHwgaGV4Lmxlbmd0aCA9PT0gMCB8fCBoZXguc29tZShmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGggIT09ICdzdHJpbmcnXG4gICAgICB9KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB2YWx1ZSBvZiBgJyArIGtleSArICdgIHByb3BlcnR5IG11c3QgYmUgYW4gQXJyYXkgYW5kIGVhY2ggaXRlbSBjb3VsZCBvbmx5IGJlIGEgaGV4IHN0cmluZywgZS5nLjogRkYwMDAwJylcbiAgICAgIH1cbiAgICAgIHZhciBkZWZIZXhDb2xvciA9IF9kZWZDb2xvcnNba2V5XVxuICAgICAgaWYgKCFoZXhbMF0pIHtcbiAgICAgICAgaGV4WzBdID0gZGVmSGV4Q29sb3JbMF1cbiAgICAgIH1cbiAgICAgIGlmIChoZXgubGVuZ3RoID09PSAxIHx8ICFoZXhbMV0pIHtcbiAgICAgICAgaGV4ID0gW2hleFswXV1cbiAgICAgICAgaGV4LnB1c2goZGVmSGV4Q29sb3JbMV0pXG4gICAgICB9XG5cbiAgICAgIGhleCA9IGhleC5zbGljZSgwLCAyKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIG9mIGAnICsga2V5ICsgJ2AgcHJvcGVydHkgbXVzdCBiZSBhIGhleCBzdHJpbmcsIGUuZy46IEZGMDAwMCcpXG4gICAgfVxuICAgIF9maW5hbENvbG9yc1trZXldID0gaGV4XG4gIH1cbiAgX3NldFRhZ3MoX2ZpbmFsQ29sb3JzKVxufVxuXG4vKipcbiAqIFJlc2V0IGNvbG9ycy5cbiAqL1xuYW5zaUhUTUwucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIF9zZXRUYWdzKF9kZWZDb2xvcnMpXG59XG5cbi8qKlxuICogRXhwb3NlIHRhZ3MsIGluY2x1ZGluZyBvcGVuIGFuZCBjbG9zZS5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmFuc2lIVE1MLnRhZ3MgPSB7fVxuXG5pZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhbnNpSFRNTC50YWdzLCAnb3BlbicsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9vcGVuVGFncyB9XG4gIH0pXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhbnNpSFRNTC50YWdzLCAnY2xvc2UnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfY2xvc2VUYWdzIH1cbiAgfSlcbn0gZWxzZSB7XG4gIGFuc2lIVE1MLnRhZ3Mub3BlbiA9IF9vcGVuVGFnc1xuICBhbnNpSFRNTC50YWdzLmNsb3NlID0gX2Nsb3NlVGFnc1xufVxuXG5mdW5jdGlvbiBfc2V0VGFncyAoY29sb3JzKSB7XG4gIC8vIHJlc2V0IGFsbFxuICBfb3BlblRhZ3NbJzAnXSA9ICdmb250LXdlaWdodDpub3JtYWw7b3BhY2l0eToxO2NvbG9yOiMnICsgY29sb3JzLnJlc2V0WzBdICsgJztiYWNrZ3JvdW5kOiMnICsgY29sb3JzLnJlc2V0WzFdXG4gIC8vIGludmVyc2VcbiAgX29wZW5UYWdzWyc3J10gPSAnY29sb3I6IycgKyBjb2xvcnMucmVzZXRbMV0gKyAnO2JhY2tncm91bmQ6IycgKyBjb2xvcnMucmVzZXRbMF1cbiAgLy8gZGFyayBncmV5XG4gIF9vcGVuVGFnc1snOTAnXSA9ICdjb2xvcjojJyArIGNvbG9ycy5kYXJrZ3JleVxuXG4gIGZvciAodmFyIGNvZGUgaW4gX3N0eWxlcykge1xuICAgIHZhciBjb2xvciA9IF9zdHlsZXNbY29kZV1cbiAgICB2YXIgb3JpQ29sb3IgPSBjb2xvcnNbY29sb3JdIHx8ICcwMDAnXG4gICAgX29wZW5UYWdzW2NvZGVdID0gJ2NvbG9yOiMnICsgb3JpQ29sb3JcbiAgICBjb2RlID0gcGFyc2VJbnQoY29kZSlcbiAgICBfb3BlblRhZ3NbKGNvZGUgKyAxMCkudG9TdHJpbmcoKV0gPSAnYmFja2dyb3VuZDojJyArIG9yaUNvbG9yXG4gIH1cbn1cblxuYW5zaUhUTUwucmVzZXQoKVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBldmVudExpc3RlbmVyKCkge1xuICAgICAgaWYgKGVycm9yTGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG4gICAgdmFyIGVycm9yTGlzdGVuZXI7XG5cbiAgICAvLyBBZGRpbmcgYW4gZXJyb3IgbGlzdGVuZXIgaXMgbm90IG9wdGlvbmFsIGJlY2F1c2VcbiAgICAvLyBpZiBhbiBlcnJvciBpcyB0aHJvd24gb24gYW4gZXZlbnQgZW1pdHRlciB3ZSBjYW5ub3RcbiAgICAvLyBndWFyYW50ZWUgdGhhdCB0aGUgYWN0dWFsIGV2ZW50IHdlIGFyZSB3YWl0aW5nIHdpbGxcbiAgICAvLyBiZSBmaXJlZC4gVGhlIHJlc3VsdCBjb3VsZCBiZSBhIHNpbGVudCB3YXkgdG8gY3JlYXRlXG4gICAgLy8gbWVtb3J5IG9yIGZpbGUgZGVzY3JpcHRvciBsZWFrcywgd2hpY2ggaXMgc29tZXRoaW5nXG4gICAgLy8gd2Ugc2hvdWxkIGF2b2lkLlxuICAgIGlmIChuYW1lICE9PSAnZXJyb3InKSB7XG4gICAgICBlcnJvckxpc3RlbmVyID0gZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCBldmVudExpc3RlbmVyKTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9O1xuXG4gICAgICBlbWl0dGVyLm9uY2UoJ2Vycm9yJywgZXJyb3JMaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgZW1pdHRlci5vbmNlKG5hbWUsIGV2ZW50TGlzdGVuZXIpO1xuICB9KTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEhUTUxfQUxQSEEgPSBbJ2Fwb3MnLCAnbmJzcCcsICdpZXhjbCcsICdjZW50JywgJ3BvdW5kJywgJ2N1cnJlbicsICd5ZW4nLCAnYnJ2YmFyJywgJ3NlY3QnLCAndW1sJywgJ2NvcHknLCAnb3JkZicsICdsYXF1bycsICdub3QnLCAnc2h5JywgJ3JlZycsICdtYWNyJywgJ2RlZycsICdwbHVzbW4nLCAnc3VwMicsICdzdXAzJywgJ2FjdXRlJywgJ21pY3JvJywgJ3BhcmEnLCAnbWlkZG90JywgJ2NlZGlsJywgJ3N1cDEnLCAnb3JkbScsICdyYXF1bycsICdmcmFjMTQnLCAnZnJhYzEyJywgJ2ZyYWMzNCcsICdpcXVlc3QnLCAnQWdyYXZlJywgJ0FhY3V0ZScsICdBY2lyYycsICdBdGlsZGUnLCAnQXVtbCcsICdBcmluZycsICdBZWxpZycsICdDY2VkaWwnLCAnRWdyYXZlJywgJ0VhY3V0ZScsICdFY2lyYycsICdFdW1sJywgJ0lncmF2ZScsICdJYWN1dGUnLCAnSWNpcmMnLCAnSXVtbCcsICdFVEgnLCAnTnRpbGRlJywgJ09ncmF2ZScsICdPYWN1dGUnLCAnT2NpcmMnLCAnT3RpbGRlJywgJ091bWwnLCAndGltZXMnLCAnT3NsYXNoJywgJ1VncmF2ZScsICdVYWN1dGUnLCAnVWNpcmMnLCAnVXVtbCcsICdZYWN1dGUnLCAnVEhPUk4nLCAnc3psaWcnLCAnYWdyYXZlJywgJ2FhY3V0ZScsICdhY2lyYycsICdhdGlsZGUnLCAnYXVtbCcsICdhcmluZycsICdhZWxpZycsICdjY2VkaWwnLCAnZWdyYXZlJywgJ2VhY3V0ZScsICdlY2lyYycsICdldW1sJywgJ2lncmF2ZScsICdpYWN1dGUnLCAnaWNpcmMnLCAnaXVtbCcsICdldGgnLCAnbnRpbGRlJywgJ29ncmF2ZScsICdvYWN1dGUnLCAnb2NpcmMnLCAnb3RpbGRlJywgJ291bWwnLCAnZGl2aWRlJywgJ29zbGFzaCcsICd1Z3JhdmUnLCAndWFjdXRlJywgJ3VjaXJjJywgJ3V1bWwnLCAneWFjdXRlJywgJ3Rob3JuJywgJ3l1bWwnLCAncXVvdCcsICdhbXAnLCAnbHQnLCAnZ3QnLCAnT0VsaWcnLCAnb2VsaWcnLCAnU2Nhcm9uJywgJ3NjYXJvbicsICdZdW1sJywgJ2NpcmMnLCAndGlsZGUnLCAnZW5zcCcsICdlbXNwJywgJ3RoaW5zcCcsICd6d25qJywgJ3p3aicsICdscm0nLCAncmxtJywgJ25kYXNoJywgJ21kYXNoJywgJ2xzcXVvJywgJ3JzcXVvJywgJ3NicXVvJywgJ2xkcXVvJywgJ3JkcXVvJywgJ2JkcXVvJywgJ2RhZ2dlcicsICdEYWdnZXInLCAncGVybWlsJywgJ2xzYXF1bycsICdyc2FxdW8nLCAnZXVybycsICdmbm9mJywgJ0FscGhhJywgJ0JldGEnLCAnR2FtbWEnLCAnRGVsdGEnLCAnRXBzaWxvbicsICdaZXRhJywgJ0V0YScsICdUaGV0YScsICdJb3RhJywgJ0thcHBhJywgJ0xhbWJkYScsICdNdScsICdOdScsICdYaScsICdPbWljcm9uJywgJ1BpJywgJ1JobycsICdTaWdtYScsICdUYXUnLCAnVXBzaWxvbicsICdQaGknLCAnQ2hpJywgJ1BzaScsICdPbWVnYScsICdhbHBoYScsICdiZXRhJywgJ2dhbW1hJywgJ2RlbHRhJywgJ2Vwc2lsb24nLCAnemV0YScsICdldGEnLCAndGhldGEnLCAnaW90YScsICdrYXBwYScsICdsYW1iZGEnLCAnbXUnLCAnbnUnLCAneGknLCAnb21pY3JvbicsICdwaScsICdyaG8nLCAnc2lnbWFmJywgJ3NpZ21hJywgJ3RhdScsICd1cHNpbG9uJywgJ3BoaScsICdjaGknLCAncHNpJywgJ29tZWdhJywgJ3RoZXRhc3ltJywgJ3Vwc2loJywgJ3BpdicsICdidWxsJywgJ2hlbGxpcCcsICdwcmltZScsICdQcmltZScsICdvbGluZScsICdmcmFzbCcsICd3ZWllcnAnLCAnaW1hZ2UnLCAncmVhbCcsICd0cmFkZScsICdhbGVmc3ltJywgJ2xhcnInLCAndWFycicsICdyYXJyJywgJ2RhcnInLCAnaGFycicsICdjcmFycicsICdsQXJyJywgJ3VBcnInLCAnckFycicsICdkQXJyJywgJ2hBcnInLCAnZm9yYWxsJywgJ3BhcnQnLCAnZXhpc3QnLCAnZW1wdHknLCAnbmFibGEnLCAnaXNpbicsICdub3RpbicsICduaScsICdwcm9kJywgJ3N1bScsICdtaW51cycsICdsb3dhc3QnLCAncmFkaWMnLCAncHJvcCcsICdpbmZpbicsICdhbmcnLCAnYW5kJywgJ29yJywgJ2NhcCcsICdjdXAnLCAnaW50JywgJ3RoZXJlNCcsICdzaW0nLCAnY29uZycsICdhc3ltcCcsICduZScsICdlcXVpdicsICdsZScsICdnZScsICdzdWInLCAnc3VwJywgJ25zdWInLCAnc3ViZScsICdzdXBlJywgJ29wbHVzJywgJ290aW1lcycsICdwZXJwJywgJ3Nkb3QnLCAnbGNlaWwnLCAncmNlaWwnLCAnbGZsb29yJywgJ3JmbG9vcicsICdsYW5nJywgJ3JhbmcnLCAnbG96JywgJ3NwYWRlcycsICdjbHVicycsICdoZWFydHMnLCAnZGlhbXMnXTtcbnZhciBIVE1MX0NPREVTID0gWzM5LCAxNjAsIDE2MSwgMTYyLCAxNjMsIDE2NCwgMTY1LCAxNjYsIDE2NywgMTY4LCAxNjksIDE3MCwgMTcxLCAxNzIsIDE3MywgMTc0LCAxNzUsIDE3NiwgMTc3LCAxNzgsIDE3OSwgMTgwLCAxODEsIDE4MiwgMTgzLCAxODQsIDE4NSwgMTg2LCAxODcsIDE4OCwgMTg5LCAxOTAsIDE5MSwgMTkyLCAxOTMsIDE5NCwgMTk1LCAxOTYsIDE5NywgMTk4LCAxOTksIDIwMCwgMjAxLCAyMDIsIDIwMywgMjA0LCAyMDUsIDIwNiwgMjA3LCAyMDgsIDIwOSwgMjEwLCAyMTEsIDIxMiwgMjEzLCAyMTQsIDIxNSwgMjE2LCAyMTcsIDIxOCwgMjE5LCAyMjAsIDIyMSwgMjIyLCAyMjMsIDIyNCwgMjI1LCAyMjYsIDIyNywgMjI4LCAyMjksIDIzMCwgMjMxLCAyMzIsIDIzMywgMjM0LCAyMzUsIDIzNiwgMjM3LCAyMzgsIDIzOSwgMjQwLCAyNDEsIDI0MiwgMjQzLCAyNDQsIDI0NSwgMjQ2LCAyNDcsIDI0OCwgMjQ5LCAyNTAsIDI1MSwgMjUyLCAyNTMsIDI1NCwgMjU1LCAzNCwgMzgsIDYwLCA2MiwgMzM4LCAzMzksIDM1MiwgMzUzLCAzNzYsIDcxMCwgNzMyLCA4MTk0LCA4MTk1LCA4MjAxLCA4MjA0LCA4MjA1LCA4MjA2LCA4MjA3LCA4MjExLCA4MjEyLCA4MjE2LCA4MjE3LCA4MjE4LCA4MjIwLCA4MjIxLCA4MjIyLCA4MjI0LCA4MjI1LCA4MjQwLCA4MjQ5LCA4MjUwLCA4MzY0LCA0MDIsIDkxMywgOTE0LCA5MTUsIDkxNiwgOTE3LCA5MTgsIDkxOSwgOTIwLCA5MjEsIDkyMiwgOTIzLCA5MjQsIDkyNSwgOTI2LCA5MjcsIDkyOCwgOTI5LCA5MzEsIDkzMiwgOTMzLCA5MzQsIDkzNSwgOTM2LCA5MzcsIDk0NSwgOTQ2LCA5NDcsIDk0OCwgOTQ5LCA5NTAsIDk1MSwgOTUyLCA5NTMsIDk1NCwgOTU1LCA5NTYsIDk1NywgOTU4LCA5NTksIDk2MCwgOTYxLCA5NjIsIDk2MywgOTY0LCA5NjUsIDk2NiwgOTY3LCA5NjgsIDk2OSwgOTc3LCA5NzgsIDk4MiwgODIyNiwgODIzMCwgODI0MiwgODI0MywgODI1NCwgODI2MCwgODQ3MiwgODQ2NSwgODQ3NiwgODQ4MiwgODUwMSwgODU5MiwgODU5MywgODU5NCwgODU5NSwgODU5NiwgODYyOSwgODY1NiwgODY1NywgODY1OCwgODY1OSwgODY2MCwgODcwNCwgODcwNiwgODcwNywgODcwOSwgODcxMSwgODcxMiwgODcxMywgODcxNSwgODcxOSwgODcyMSwgODcyMiwgODcyNywgODczMCwgODczMywgODczNCwgODczNiwgODc0MywgODc0NCwgODc0NSwgODc0NiwgODc0NywgODc1NiwgODc2NCwgODc3MywgODc3NiwgODgwMCwgODgwMSwgODgwNCwgODgwNSwgODgzNCwgODgzNSwgODgzNiwgODgzOCwgODgzOSwgODg1MywgODg1NSwgODg2OSwgODkwMSwgODk2OCwgODk2OSwgODk3MCwgODk3MSwgOTAwMSwgOTAwMiwgOTY3NCwgOTgyNCwgOTgyNywgOTgyOSwgOTgzMF07XG52YXIgYWxwaGFJbmRleCA9IHt9O1xudmFyIG51bUluZGV4ID0ge307XG4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gSFRNTF9BTFBIQS5sZW5ndGg7XG4gICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGEgPSBIVE1MX0FMUEhBW2ldO1xuICAgICAgICB2YXIgYyA9IEhUTUxfQ09ERVNbaV07XG4gICAgICAgIGFscGhhSW5kZXhbYV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xuICAgICAgICBudW1JbmRleFtjXSA9IGE7XG4gICAgICAgIGkrKztcbiAgICB9XG59KSgpO1xudmFyIEh0bWw0RW50aXRpZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSHRtbDRFbnRpdGllcygpIHtcbiAgICB9XG4gICAgSHRtbDRFbnRpdGllcy5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvJigjP1tcXHdcXGRdKyk7Py9nLCBmdW5jdGlvbiAocywgZW50aXR5KSB7XG4gICAgICAgICAgICB2YXIgY2hyO1xuICAgICAgICAgICAgaWYgKGVudGl0eS5jaGFyQXQoMCkgPT09IFwiI1wiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBlbnRpdHkuY2hhckF0KDEpLnRvTG93ZXJDYXNlKCkgPT09ICd4JyA/XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGVudGl0eS5zdWJzdHIoMiksIDE2KSA6XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGVudGl0eS5zdWJzdHIoMSkpO1xuICAgICAgICAgICAgICAgIGlmICghKGlzTmFOKGNvZGUpIHx8IGNvZGUgPCAtMzI3NjggfHwgY29kZSA+IDY1NTM1KSkge1xuICAgICAgICAgICAgICAgICAgICBjaHIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNociA9IGFscGhhSW5kZXhbZW50aXR5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaHIgfHwgcztcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBIdG1sNEVudGl0aWVzLmRlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdG1sNEVudGl0aWVzKCkuZGVjb2RlKHN0cik7XG4gICAgfTtcbiAgICBIdG1sNEVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHN0ckxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGFscGhhID0gbnVtSW5kZXhbc3RyLmNoYXJDb2RlQXQoaSldO1xuICAgICAgICAgICAgcmVzdWx0ICs9IGFscGhhID8gXCImXCIgKyBhbHBoYSArIFwiO1wiIDogc3RyLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgSHRtbDRFbnRpdGllcy5lbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbDRFbnRpdGllcygpLmVuY29kZShzdHIpO1xuICAgIH07XG4gICAgSHRtbDRFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlTm9uVVRGID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgdmFyIGFscGhhID0gbnVtSW5kZXhbY2NdO1xuICAgICAgICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiJlwiICsgYWxwaGEgKyBcIjtcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNjIDwgMzIgfHwgY2MgPiAxMjYpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCImI1wiICsgY2MgKyBcIjtcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBIdG1sNEVudGl0aWVzLmVuY29kZU5vblVURiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdG1sNEVudGl0aWVzKCkuZW5jb2RlTm9uVVRGKHN0cik7XG4gICAgfTtcbiAgICBIdG1sNEVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGVOb25BU0NJSSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgc3RyTGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgaWYgKGMgPD0gMjU1KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0cltpKytdO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBjICsgJzsnO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBIdG1sNEVudGl0aWVzLmVuY29kZU5vbkFTQ0lJID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWw0RW50aXRpZXMoKS5lbmNvZGVOb25BU0NJSShzdHIpO1xuICAgIH07XG4gICAgcmV0dXJuIEh0bWw0RW50aXRpZXM7XG59KCkpO1xuZXhwb3J0cy5IdG1sNEVudGl0aWVzID0gSHRtbDRFbnRpdGllcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEVOVElUSUVTID0gW1snQWFjdXRlJywgWzE5M11dLCBbJ2FhY3V0ZScsIFsyMjVdXSwgWydBYnJldmUnLCBbMjU4XV0sIFsnYWJyZXZlJywgWzI1OV1dLCBbJ2FjJywgWzg3NjZdXSwgWydhY2QnLCBbODc2N11dLCBbJ2FjRScsIFs4NzY2LCA4MTldXSwgWydBY2lyYycsIFsxOTRdXSwgWydhY2lyYycsIFsyMjZdXSwgWydhY3V0ZScsIFsxODBdXSwgWydBY3knLCBbMTA0MF1dLCBbJ2FjeScsIFsxMDcyXV0sIFsnQUVsaWcnLCBbMTk4XV0sIFsnYWVsaWcnLCBbMjMwXV0sIFsnYWYnLCBbODI4OV1dLCBbJ0FmcicsIFsxMjAwNjhdXSwgWydhZnInLCBbMTIwMDk0XV0sIFsnQWdyYXZlJywgWzE5Ml1dLCBbJ2FncmF2ZScsIFsyMjRdXSwgWydhbGVmc3ltJywgWzg1MDFdXSwgWydhbGVwaCcsIFs4NTAxXV0sIFsnQWxwaGEnLCBbOTEzXV0sIFsnYWxwaGEnLCBbOTQ1XV0sIFsnQW1hY3InLCBbMjU2XV0sIFsnYW1hY3InLCBbMjU3XV0sIFsnYW1hbGcnLCBbMTA4MTVdXSwgWydhbXAnLCBbMzhdXSwgWydBTVAnLCBbMzhdXSwgWydhbmRhbmQnLCBbMTA4MzddXSwgWydBbmQnLCBbMTA4MzVdXSwgWydhbmQnLCBbODc0M11dLCBbJ2FuZGQnLCBbMTA4NDRdXSwgWydhbmRzbG9wZScsIFsxMDg0MF1dLCBbJ2FuZHYnLCBbMTA4NDJdXSwgWydhbmcnLCBbODczNl1dLCBbJ2FuZ2UnLCBbMTA2NjBdXSwgWydhbmdsZScsIFs4NzM2XV0sIFsnYW5nbXNkYWEnLCBbMTA2NjRdXSwgWydhbmdtc2RhYicsIFsxMDY2NV1dLCBbJ2FuZ21zZGFjJywgWzEwNjY2XV0sIFsnYW5nbXNkYWQnLCBbMTA2NjddXSwgWydhbmdtc2RhZScsIFsxMDY2OF1dLCBbJ2FuZ21zZGFmJywgWzEwNjY5XV0sIFsnYW5nbXNkYWcnLCBbMTA2NzBdXSwgWydhbmdtc2RhaCcsIFsxMDY3MV1dLCBbJ2FuZ21zZCcsIFs4NzM3XV0sIFsnYW5ncnQnLCBbODczNV1dLCBbJ2FuZ3J0dmInLCBbODg5NF1dLCBbJ2FuZ3J0dmJkJywgWzEwNjUzXV0sIFsnYW5nc3BoJywgWzg3MzhdXSwgWydhbmdzdCcsIFsxOTddXSwgWydhbmd6YXJyJywgWzkwODRdXSwgWydBb2dvbicsIFsyNjBdXSwgWydhb2dvbicsIFsyNjFdXSwgWydBb3BmJywgWzEyMDEyMF1dLCBbJ2FvcGYnLCBbMTIwMTQ2XV0sIFsnYXBhY2lyJywgWzEwODYzXV0sIFsnYXAnLCBbODc3Nl1dLCBbJ2FwRScsIFsxMDg2NF1dLCBbJ2FwZScsIFs4Nzc4XV0sIFsnYXBpZCcsIFs4Nzc5XV0sIFsnYXBvcycsIFszOV1dLCBbJ0FwcGx5RnVuY3Rpb24nLCBbODI4OV1dLCBbJ2FwcHJveCcsIFs4Nzc2XV0sIFsnYXBwcm94ZXEnLCBbODc3OF1dLCBbJ0FyaW5nJywgWzE5N11dLCBbJ2FyaW5nJywgWzIyOV1dLCBbJ0FzY3InLCBbMTE5OTY0XV0sIFsnYXNjcicsIFsxMTk5OTBdXSwgWydBc3NpZ24nLCBbODc4OF1dLCBbJ2FzdCcsIFs0Ml1dLCBbJ2FzeW1wJywgWzg3NzZdXSwgWydhc3ltcGVxJywgWzg3ODFdXSwgWydBdGlsZGUnLCBbMTk1XV0sIFsnYXRpbGRlJywgWzIyN11dLCBbJ0F1bWwnLCBbMTk2XV0sIFsnYXVtbCcsIFsyMjhdXSwgWydhd2NvbmludCcsIFs4NzU1XV0sIFsnYXdpbnQnLCBbMTA3NjldXSwgWydiYWNrY29uZycsIFs4NzgwXV0sIFsnYmFja2Vwc2lsb24nLCBbMTAxNF1dLCBbJ2JhY2twcmltZScsIFs4MjQ1XV0sIFsnYmFja3NpbScsIFs4NzY1XV0sIFsnYmFja3NpbWVxJywgWzg5MDldXSwgWydCYWNrc2xhc2gnLCBbODcyNl1dLCBbJ0JhcnYnLCBbMTA5ODNdXSwgWydiYXJ2ZWUnLCBbODg5M11dLCBbJ2JhcndlZCcsIFs4OTY1XV0sIFsnQmFyd2VkJywgWzg5NjZdXSwgWydiYXJ3ZWRnZScsIFs4OTY1XV0sIFsnYmJyaycsIFs5MTQxXV0sIFsnYmJya3RicmsnLCBbOTE0Ml1dLCBbJ2Jjb25nJywgWzg3ODBdXSwgWydCY3knLCBbMTA0MV1dLCBbJ2JjeScsIFsxMDczXV0sIFsnYmRxdW8nLCBbODIyMl1dLCBbJ2JlY2F1cycsIFs4NzU3XV0sIFsnYmVjYXVzZScsIFs4NzU3XV0sIFsnQmVjYXVzZScsIFs4NzU3XV0sIFsnYmVtcHR5dicsIFsxMDY3Ml1dLCBbJ2JlcHNpJywgWzEwMTRdXSwgWydiZXJub3UnLCBbODQ5Ml1dLCBbJ0Jlcm5vdWxsaXMnLCBbODQ5Ml1dLCBbJ0JldGEnLCBbOTE0XV0sIFsnYmV0YScsIFs5NDZdXSwgWydiZXRoJywgWzg1MDJdXSwgWydiZXR3ZWVuJywgWzg4MTJdXSwgWydCZnInLCBbMTIwMDY5XV0sIFsnYmZyJywgWzEyMDA5NV1dLCBbJ2JpZ2NhcCcsIFs4ODk4XV0sIFsnYmlnY2lyYycsIFs5NzExXV0sIFsnYmlnY3VwJywgWzg4OTldXSwgWydiaWdvZG90JywgWzEwNzUyXV0sIFsnYmlnb3BsdXMnLCBbMTA3NTNdXSwgWydiaWdvdGltZXMnLCBbMTA3NTRdXSwgWydiaWdzcWN1cCcsIFsxMDc1OF1dLCBbJ2JpZ3N0YXInLCBbOTczM11dLCBbJ2JpZ3RyaWFuZ2xlZG93bicsIFs5NjYxXV0sIFsnYmlndHJpYW5nbGV1cCcsIFs5NjUxXV0sIFsnYmlndXBsdXMnLCBbMTA3NTZdXSwgWydiaWd2ZWUnLCBbODg5N11dLCBbJ2JpZ3dlZGdlJywgWzg4OTZdXSwgWydia2Fyb3cnLCBbMTA1MDldXSwgWydibGFja2xvemVuZ2UnLCBbMTA3MzFdXSwgWydibGFja3NxdWFyZScsIFs5NjQyXV0sIFsnYmxhY2t0cmlhbmdsZScsIFs5NjUyXV0sIFsnYmxhY2t0cmlhbmdsZWRvd24nLCBbOTY2Ml1dLCBbJ2JsYWNrdHJpYW5nbGVsZWZ0JywgWzk2NjZdXSwgWydibGFja3RyaWFuZ2xlcmlnaHQnLCBbOTY1Nl1dLCBbJ2JsYW5rJywgWzkyNTFdXSwgWydibGsxMicsIFs5NjE4XV0sIFsnYmxrMTQnLCBbOTYxN11dLCBbJ2JsazM0JywgWzk2MTldXSwgWydibG9jaycsIFs5NjA4XV0sIFsnYm5lJywgWzYxLCA4NDIxXV0sIFsnYm5lcXVpdicsIFs4ODAxLCA4NDIxXV0sIFsnYk5vdCcsIFsxMDk4OV1dLCBbJ2Jub3QnLCBbODk3Nl1dLCBbJ0JvcGYnLCBbMTIwMTIxXV0sIFsnYm9wZicsIFsxMjAxNDddXSwgWydib3QnLCBbODg2OV1dLCBbJ2JvdHRvbScsIFs4ODY5XV0sIFsnYm93dGllJywgWzg5MDRdXSwgWydib3hib3gnLCBbMTA2OTddXSwgWydib3hkbCcsIFs5NDg4XV0sIFsnYm94ZEwnLCBbOTU1N11dLCBbJ2JveERsJywgWzk1NThdXSwgWydib3hETCcsIFs5NTU5XV0sIFsnYm94ZHInLCBbOTQ4NF1dLCBbJ2JveGRSJywgWzk1NTRdXSwgWydib3hEcicsIFs5NTU1XV0sIFsnYm94RFInLCBbOTU1Nl1dLCBbJ2JveGgnLCBbOTQ3Ml1dLCBbJ2JveEgnLCBbOTU1Ml1dLCBbJ2JveGhkJywgWzk1MTZdXSwgWydib3hIZCcsIFs5NTcyXV0sIFsnYm94aEQnLCBbOTU3M11dLCBbJ2JveEhEJywgWzk1NzRdXSwgWydib3hodScsIFs5NTI0XV0sIFsnYm94SHUnLCBbOTU3NV1dLCBbJ2JveGhVJywgWzk1NzZdXSwgWydib3hIVScsIFs5NTc3XV0sIFsnYm94bWludXMnLCBbODg2M11dLCBbJ2JveHBsdXMnLCBbODg2Ml1dLCBbJ2JveHRpbWVzJywgWzg4NjRdXSwgWydib3h1bCcsIFs5NDk2XV0sIFsnYm94dUwnLCBbOTU2M11dLCBbJ2JveFVsJywgWzk1NjRdXSwgWydib3hVTCcsIFs5NTY1XV0sIFsnYm94dXInLCBbOTQ5Ml1dLCBbJ2JveHVSJywgWzk1NjBdXSwgWydib3hVcicsIFs5NTYxXV0sIFsnYm94VVInLCBbOTU2Ml1dLCBbJ2JveHYnLCBbOTQ3NF1dLCBbJ2JveFYnLCBbOTU1M11dLCBbJ2JveHZoJywgWzk1MzJdXSwgWydib3h2SCcsIFs5NTc4XV0sIFsnYm94VmgnLCBbOTU3OV1dLCBbJ2JveFZIJywgWzk1ODBdXSwgWydib3h2bCcsIFs5NTA4XV0sIFsnYm94dkwnLCBbOTU2OV1dLCBbJ2JveFZsJywgWzk1NzBdXSwgWydib3hWTCcsIFs5NTcxXV0sIFsnYm94dnInLCBbOTUwMF1dLCBbJ2JveHZSJywgWzk1NjZdXSwgWydib3hWcicsIFs5NTY3XV0sIFsnYm94VlInLCBbOTU2OF1dLCBbJ2JwcmltZScsIFs4MjQ1XV0sIFsnYnJldmUnLCBbNzI4XV0sIFsnQnJldmUnLCBbNzI4XV0sIFsnYnJ2YmFyJywgWzE2Nl1dLCBbJ2JzY3InLCBbMTE5OTkxXV0sIFsnQnNjcicsIFs4NDkyXV0sIFsnYnNlbWknLCBbODI3MV1dLCBbJ2JzaW0nLCBbODc2NV1dLCBbJ2JzaW1lJywgWzg5MDldXSwgWydic29sYicsIFsxMDY5M11dLCBbJ2Jzb2wnLCBbOTJdXSwgWydic29saHN1YicsIFsxMDE4NF1dLCBbJ2J1bGwnLCBbODIyNl1dLCBbJ2J1bGxldCcsIFs4MjI2XV0sIFsnYnVtcCcsIFs4NzgyXV0sIFsnYnVtcEUnLCBbMTA5MjZdXSwgWydidW1wZScsIFs4NzgzXV0sIFsnQnVtcGVxJywgWzg3ODJdXSwgWydidW1wZXEnLCBbODc4M11dLCBbJ0NhY3V0ZScsIFsyNjJdXSwgWydjYWN1dGUnLCBbMjYzXV0sIFsnY2FwYW5kJywgWzEwODIwXV0sIFsnY2FwYnJjdXAnLCBbMTA4MjVdXSwgWydjYXBjYXAnLCBbMTA4MjddXSwgWydjYXAnLCBbODc0NV1dLCBbJ0NhcCcsIFs4OTE0XV0sIFsnY2FwY3VwJywgWzEwODIzXV0sIFsnY2FwZG90JywgWzEwODE2XV0sIFsnQ2FwaXRhbERpZmZlcmVudGlhbEQnLCBbODUxN11dLCBbJ2NhcHMnLCBbODc0NSwgNjUwMjRdXSwgWydjYXJldCcsIFs4MjU3XV0sIFsnY2Fyb24nLCBbNzExXV0sIFsnQ2F5bGV5cycsIFs4NDkzXV0sIFsnY2NhcHMnLCBbMTA4MjldXSwgWydDY2Fyb24nLCBbMjY4XV0sIFsnY2Nhcm9uJywgWzI2OV1dLCBbJ0NjZWRpbCcsIFsxOTldXSwgWydjY2VkaWwnLCBbMjMxXV0sIFsnQ2NpcmMnLCBbMjY0XV0sIFsnY2NpcmMnLCBbMjY1XV0sIFsnQ2NvbmludCcsIFs4NzUyXV0sIFsnY2N1cHMnLCBbMTA4MjhdXSwgWydjY3Vwc3NtJywgWzEwODMyXV0sIFsnQ2RvdCcsIFsyNjZdXSwgWydjZG90JywgWzI2N11dLCBbJ2NlZGlsJywgWzE4NF1dLCBbJ0NlZGlsbGEnLCBbMTg0XV0sIFsnY2VtcHR5dicsIFsxMDY3NF1dLCBbJ2NlbnQnLCBbMTYyXV0sIFsnY2VudGVyZG90JywgWzE4M11dLCBbJ0NlbnRlckRvdCcsIFsxODNdXSwgWydjZnInLCBbMTIwMDk2XV0sIFsnQ2ZyJywgWzg0OTNdXSwgWydDSGN5JywgWzEwNjNdXSwgWydjaGN5JywgWzEwOTVdXSwgWydjaGVjaycsIFsxMDAwM11dLCBbJ2NoZWNrbWFyaycsIFsxMDAwM11dLCBbJ0NoaScsIFs5MzVdXSwgWydjaGknLCBbOTY3XV0sIFsnY2lyYycsIFs3MTBdXSwgWydjaXJjZXEnLCBbODc5MV1dLCBbJ2NpcmNsZWFycm93bGVmdCcsIFs4NjM0XV0sIFsnY2lyY2xlYXJyb3dyaWdodCcsIFs4NjM1XV0sIFsnY2lyY2xlZGFzdCcsIFs4ODU5XV0sIFsnY2lyY2xlZGNpcmMnLCBbODg1OF1dLCBbJ2NpcmNsZWRkYXNoJywgWzg4NjFdXSwgWydDaXJjbGVEb3QnLCBbODg1N11dLCBbJ2NpcmNsZWRSJywgWzE3NF1dLCBbJ2NpcmNsZWRTJywgWzk0MTZdXSwgWydDaXJjbGVNaW51cycsIFs4ODU0XV0sIFsnQ2lyY2xlUGx1cycsIFs4ODUzXV0sIFsnQ2lyY2xlVGltZXMnLCBbODg1NV1dLCBbJ2NpcicsIFs5Njc1XV0sIFsnY2lyRScsIFsxMDY5MV1dLCBbJ2NpcmUnLCBbODc5MV1dLCBbJ2NpcmZuaW50JywgWzEwNzY4XV0sIFsnY2lybWlkJywgWzEwOTkxXV0sIFsnY2lyc2NpcicsIFsxMDY5MF1dLCBbJ0Nsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbCcsIFs4NzU0XV0sIFsnY2x1YnMnLCBbOTgyN11dLCBbJ2NsdWJzdWl0JywgWzk4MjddXSwgWydjb2xvbicsIFs1OF1dLCBbJ0NvbG9uJywgWzg3NTldXSwgWydDb2xvbmUnLCBbMTA4NjhdXSwgWydjb2xvbmUnLCBbODc4OF1dLCBbJ2NvbG9uZXEnLCBbODc4OF1dLCBbJ2NvbW1hJywgWzQ0XV0sIFsnY29tbWF0JywgWzY0XV0sIFsnY29tcCcsIFs4NzA1XV0sIFsnY29tcGZuJywgWzg3MjhdXSwgWydjb21wbGVtZW50JywgWzg3MDVdXSwgWydjb21wbGV4ZXMnLCBbODQ1MF1dLCBbJ2NvbmcnLCBbODc3M11dLCBbJ2Nvbmdkb3QnLCBbMTA4NjFdXSwgWydDb25ncnVlbnQnLCBbODgwMV1dLCBbJ2NvbmludCcsIFs4NzUwXV0sIFsnQ29uaW50JywgWzg3NTFdXSwgWydDb250b3VySW50ZWdyYWwnLCBbODc1MF1dLCBbJ2NvcGYnLCBbMTIwMTQ4XV0sIFsnQ29wZicsIFs4NDUwXV0sIFsnY29wcm9kJywgWzg3MjBdXSwgWydDb3Byb2R1Y3QnLCBbODcyMF1dLCBbJ2NvcHknLCBbMTY5XV0sIFsnQ09QWScsIFsxNjldXSwgWydjb3B5c3InLCBbODQ3MV1dLCBbJ0NvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWwnLCBbODc1NV1dLCBbJ2NyYXJyJywgWzg2MjldXSwgWydjcm9zcycsIFsxMDAwN11dLCBbJ0Nyb3NzJywgWzEwNzk5XV0sIFsnQ3NjcicsIFsxMTk5NjZdXSwgWydjc2NyJywgWzExOTk5Ml1dLCBbJ2NzdWInLCBbMTA5NTldXSwgWydjc3ViZScsIFsxMDk2MV1dLCBbJ2NzdXAnLCBbMTA5NjBdXSwgWydjc3VwZScsIFsxMDk2Ml1dLCBbJ2N0ZG90JywgWzg5NDNdXSwgWydjdWRhcnJsJywgWzEwNTUyXV0sIFsnY3VkYXJycicsIFsxMDU0OV1dLCBbJ2N1ZXByJywgWzg5MjZdXSwgWydjdWVzYycsIFs4OTI3XV0sIFsnY3VsYXJyJywgWzg2MzBdXSwgWydjdWxhcnJwJywgWzEwNTU3XV0sIFsnY3VwYnJjYXAnLCBbMTA4MjRdXSwgWydjdXBjYXAnLCBbMTA4MjJdXSwgWydDdXBDYXAnLCBbODc4MV1dLCBbJ2N1cCcsIFs4NzQ2XV0sIFsnQ3VwJywgWzg5MTVdXSwgWydjdXBjdXAnLCBbMTA4MjZdXSwgWydjdXBkb3QnLCBbODg0NV1dLCBbJ2N1cG9yJywgWzEwODIxXV0sIFsnY3VwcycsIFs4NzQ2LCA2NTAyNF1dLCBbJ2N1cmFycicsIFs4NjMxXV0sIFsnY3VyYXJybScsIFsxMDU1Nl1dLCBbJ2N1cmx5ZXFwcmVjJywgWzg5MjZdXSwgWydjdXJseWVxc3VjYycsIFs4OTI3XV0sIFsnY3VybHl2ZWUnLCBbODkxMF1dLCBbJ2N1cmx5d2VkZ2UnLCBbODkxMV1dLCBbJ2N1cnJlbicsIFsxNjRdXSwgWydjdXJ2ZWFycm93bGVmdCcsIFs4NjMwXV0sIFsnY3VydmVhcnJvd3JpZ2h0JywgWzg2MzFdXSwgWydjdXZlZScsIFs4OTEwXV0sIFsnY3V3ZWQnLCBbODkxMV1dLCBbJ2N3Y29uaW50JywgWzg3NTRdXSwgWydjd2ludCcsIFs4NzUzXV0sIFsnY3lsY3R5JywgWzkwMDVdXSwgWydkYWdnZXInLCBbODIyNF1dLCBbJ0RhZ2dlcicsIFs4MjI1XV0sIFsnZGFsZXRoJywgWzg1MDRdXSwgWydkYXJyJywgWzg1OTVdXSwgWydEYXJyJywgWzg2MDldXSwgWydkQXJyJywgWzg2NTldXSwgWydkYXNoJywgWzgyMDhdXSwgWydEYXNodicsIFsxMDk4MF1dLCBbJ2Rhc2h2JywgWzg4NjddXSwgWydkYmthcm93JywgWzEwNTExXV0sIFsnZGJsYWMnLCBbNzMzXV0sIFsnRGNhcm9uJywgWzI3MF1dLCBbJ2RjYXJvbicsIFsyNzFdXSwgWydEY3knLCBbMTA0NF1dLCBbJ2RjeScsIFsxMDc2XV0sIFsnZGRhZ2dlcicsIFs4MjI1XV0sIFsnZGRhcnInLCBbODY1MF1dLCBbJ0REJywgWzg1MTddXSwgWydkZCcsIFs4NTE4XV0sIFsnRERvdHJhaGQnLCBbMTA1MTNdXSwgWydkZG90c2VxJywgWzEwODcxXV0sIFsnZGVnJywgWzE3Nl1dLCBbJ0RlbCcsIFs4NzExXV0sIFsnRGVsdGEnLCBbOTE2XV0sIFsnZGVsdGEnLCBbOTQ4XV0sIFsnZGVtcHR5dicsIFsxMDY3M11dLCBbJ2RmaXNodCcsIFsxMDYyM11dLCBbJ0RmcicsIFsxMjAwNzFdXSwgWydkZnInLCBbMTIwMDk3XV0sIFsnZEhhcicsIFsxMDU5N11dLCBbJ2RoYXJsJywgWzg2NDNdXSwgWydkaGFycicsIFs4NjQyXV0sIFsnRGlhY3JpdGljYWxBY3V0ZScsIFsxODBdXSwgWydEaWFjcml0aWNhbERvdCcsIFs3MjldXSwgWydEaWFjcml0aWNhbERvdWJsZUFjdXRlJywgWzczM11dLCBbJ0RpYWNyaXRpY2FsR3JhdmUnLCBbOTZdXSwgWydEaWFjcml0aWNhbFRpbGRlJywgWzczMl1dLCBbJ2RpYW0nLCBbODkwMF1dLCBbJ2RpYW1vbmQnLCBbODkwMF1dLCBbJ0RpYW1vbmQnLCBbODkwMF1dLCBbJ2RpYW1vbmRzdWl0JywgWzk4MzBdXSwgWydkaWFtcycsIFs5ODMwXV0sIFsnZGllJywgWzE2OF1dLCBbJ0RpZmZlcmVudGlhbEQnLCBbODUxOF1dLCBbJ2RpZ2FtbWEnLCBbOTg5XV0sIFsnZGlzaW4nLCBbODk0Nl1dLCBbJ2RpdicsIFsyNDddXSwgWydkaXZpZGUnLCBbMjQ3XV0sIFsnZGl2aWRlb250aW1lcycsIFs4OTAzXV0sIFsnZGl2b254JywgWzg5MDNdXSwgWydESmN5JywgWzEwMjZdXSwgWydkamN5JywgWzExMDZdXSwgWydkbGNvcm4nLCBbODk5MF1dLCBbJ2RsY3JvcCcsIFs4OTczXV0sIFsnZG9sbGFyJywgWzM2XV0sIFsnRG9wZicsIFsxMjAxMjNdXSwgWydkb3BmJywgWzEyMDE0OV1dLCBbJ0RvdCcsIFsxNjhdXSwgWydkb3QnLCBbNzI5XV0sIFsnRG90RG90JywgWzg0MTJdXSwgWydkb3RlcScsIFs4Nzg0XV0sIFsnZG90ZXFkb3QnLCBbODc4NV1dLCBbJ0RvdEVxdWFsJywgWzg3ODRdXSwgWydkb3RtaW51cycsIFs4NzYwXV0sIFsnZG90cGx1cycsIFs4NzI0XV0sIFsnZG90c3F1YXJlJywgWzg4NjVdXSwgWydkb3VibGViYXJ3ZWRnZScsIFs4OTY2XV0sIFsnRG91YmxlQ29udG91ckludGVncmFsJywgWzg3NTFdXSwgWydEb3VibGVEb3QnLCBbMTY4XV0sIFsnRG91YmxlRG93bkFycm93JywgWzg2NTldXSwgWydEb3VibGVMZWZ0QXJyb3cnLCBbODY1Nl1dLCBbJ0RvdWJsZUxlZnRSaWdodEFycm93JywgWzg2NjBdXSwgWydEb3VibGVMZWZ0VGVlJywgWzEwOTgwXV0sIFsnRG91YmxlTG9uZ0xlZnRBcnJvdycsIFsxMDIzMl1dLCBbJ0RvdWJsZUxvbmdMZWZ0UmlnaHRBcnJvdycsIFsxMDIzNF1dLCBbJ0RvdWJsZUxvbmdSaWdodEFycm93JywgWzEwMjMzXV0sIFsnRG91YmxlUmlnaHRBcnJvdycsIFs4NjU4XV0sIFsnRG91YmxlUmlnaHRUZWUnLCBbODg3Ml1dLCBbJ0RvdWJsZVVwQXJyb3cnLCBbODY1N11dLCBbJ0RvdWJsZVVwRG93bkFycm93JywgWzg2NjFdXSwgWydEb3VibGVWZXJ0aWNhbEJhcicsIFs4NzQxXV0sIFsnRG93bkFycm93QmFyJywgWzEwNTE1XV0sIFsnZG93bmFycm93JywgWzg1OTVdXSwgWydEb3duQXJyb3cnLCBbODU5NV1dLCBbJ0Rvd25hcnJvdycsIFs4NjU5XV0sIFsnRG93bkFycm93VXBBcnJvdycsIFs4NjkzXV0sIFsnRG93bkJyZXZlJywgWzc4NV1dLCBbJ2Rvd25kb3duYXJyb3dzJywgWzg2NTBdXSwgWydkb3duaGFycG9vbmxlZnQnLCBbODY0M11dLCBbJ2Rvd25oYXJwb29ucmlnaHQnLCBbODY0Ml1dLCBbJ0Rvd25MZWZ0UmlnaHRWZWN0b3InLCBbMTA1NzZdXSwgWydEb3duTGVmdFRlZVZlY3RvcicsIFsxMDU5MF1dLCBbJ0Rvd25MZWZ0VmVjdG9yQmFyJywgWzEwNTgyXV0sIFsnRG93bkxlZnRWZWN0b3InLCBbODYzN11dLCBbJ0Rvd25SaWdodFRlZVZlY3RvcicsIFsxMDU5MV1dLCBbJ0Rvd25SaWdodFZlY3RvckJhcicsIFsxMDU4M11dLCBbJ0Rvd25SaWdodFZlY3RvcicsIFs4NjQxXV0sIFsnRG93blRlZUFycm93JywgWzg2MTVdXSwgWydEb3duVGVlJywgWzg4NjhdXSwgWydkcmJrYXJvdycsIFsxMDUxMl1dLCBbJ2RyY29ybicsIFs4OTkxXV0sIFsnZHJjcm9wJywgWzg5NzJdXSwgWydEc2NyJywgWzExOTk2N11dLCBbJ2RzY3InLCBbMTE5OTkzXV0sIFsnRFNjeScsIFsxMDI5XV0sIFsnZHNjeScsIFsxMTA5XV0sIFsnZHNvbCcsIFsxMDc0Ml1dLCBbJ0RzdHJvaycsIFsyNzJdXSwgWydkc3Ryb2snLCBbMjczXV0sIFsnZHRkb3QnLCBbODk0NV1dLCBbJ2R0cmknLCBbOTY2M11dLCBbJ2R0cmlmJywgWzk2NjJdXSwgWydkdWFycicsIFs4NjkzXV0sIFsnZHVoYXInLCBbMTA2MDddXSwgWydkd2FuZ2xlJywgWzEwNjYyXV0sIFsnRFpjeScsIFsxMDM5XV0sIFsnZHpjeScsIFsxMTE5XV0sIFsnZHppZ3JhcnInLCBbMTAyMzldXSwgWydFYWN1dGUnLCBbMjAxXV0sIFsnZWFjdXRlJywgWzIzM11dLCBbJ2Vhc3RlcicsIFsxMDg2Ml1dLCBbJ0VjYXJvbicsIFsyODJdXSwgWydlY2Fyb24nLCBbMjgzXV0sIFsnRWNpcmMnLCBbMjAyXV0sIFsnZWNpcmMnLCBbMjM0XV0sIFsnZWNpcicsIFs4NzkwXV0sIFsnZWNvbG9uJywgWzg3ODldXSwgWydFY3knLCBbMTA2OV1dLCBbJ2VjeScsIFsxMTAxXV0sIFsnZUREb3QnLCBbMTA4NzFdXSwgWydFZG90JywgWzI3OF1dLCBbJ2Vkb3QnLCBbMjc5XV0sIFsnZURvdCcsIFs4Nzg1XV0sIFsnZWUnLCBbODUxOV1dLCBbJ2VmRG90JywgWzg3ODZdXSwgWydFZnInLCBbMTIwMDcyXV0sIFsnZWZyJywgWzEyMDA5OF1dLCBbJ2VnJywgWzEwOTA2XV0sIFsnRWdyYXZlJywgWzIwMF1dLCBbJ2VncmF2ZScsIFsyMzJdXSwgWydlZ3MnLCBbMTA5MDJdXSwgWydlZ3Nkb3QnLCBbMTA5MDRdXSwgWydlbCcsIFsxMDkwNV1dLCBbJ0VsZW1lbnQnLCBbODcxMl1dLCBbJ2VsaW50ZXJzJywgWzkxOTFdXSwgWydlbGwnLCBbODQ2N11dLCBbJ2VscycsIFsxMDkwMV1dLCBbJ2Vsc2RvdCcsIFsxMDkwM11dLCBbJ0VtYWNyJywgWzI3NF1dLCBbJ2VtYWNyJywgWzI3NV1dLCBbJ2VtcHR5JywgWzg3MDldXSwgWydlbXB0eXNldCcsIFs4NzA5XV0sIFsnRW1wdHlTbWFsbFNxdWFyZScsIFs5NzIzXV0sIFsnZW1wdHl2JywgWzg3MDldXSwgWydFbXB0eVZlcnlTbWFsbFNxdWFyZScsIFs5NjQzXV0sIFsnZW1zcDEzJywgWzgxOTZdXSwgWydlbXNwMTQnLCBbODE5N11dLCBbJ2Vtc3AnLCBbODE5NV1dLCBbJ0VORycsIFszMzBdXSwgWydlbmcnLCBbMzMxXV0sIFsnZW5zcCcsIFs4MTk0XV0sIFsnRW9nb24nLCBbMjgwXV0sIFsnZW9nb24nLCBbMjgxXV0sIFsnRW9wZicsIFsxMjAxMjRdXSwgWydlb3BmJywgWzEyMDE1MF1dLCBbJ2VwYXInLCBbODkxN11dLCBbJ2VwYXJzbCcsIFsxMDcyM11dLCBbJ2VwbHVzJywgWzEwODY1XV0sIFsnZXBzaScsIFs5NDldXSwgWydFcHNpbG9uJywgWzkxN11dLCBbJ2Vwc2lsb24nLCBbOTQ5XV0sIFsnZXBzaXYnLCBbMTAxM11dLCBbJ2VxY2lyYycsIFs4NzkwXV0sIFsnZXFjb2xvbicsIFs4Nzg5XV0sIFsnZXFzaW0nLCBbODc3MF1dLCBbJ2Vxc2xhbnRndHInLCBbMTA5MDJdXSwgWydlcXNsYW50bGVzcycsIFsxMDkwMV1dLCBbJ0VxdWFsJywgWzEwODY5XV0sIFsnZXF1YWxzJywgWzYxXV0sIFsnRXF1YWxUaWxkZScsIFs4NzcwXV0sIFsnZXF1ZXN0JywgWzg3OTldXSwgWydFcXVpbGlicml1bScsIFs4NjUyXV0sIFsnZXF1aXYnLCBbODgwMV1dLCBbJ2VxdWl2REQnLCBbMTA4NzJdXSwgWydlcXZwYXJzbCcsIFsxMDcyNV1dLCBbJ2VyYXJyJywgWzEwNjA5XV0sIFsnZXJEb3QnLCBbODc4N11dLCBbJ2VzY3InLCBbODQ5NV1dLCBbJ0VzY3InLCBbODQ5Nl1dLCBbJ2VzZG90JywgWzg3ODRdXSwgWydFc2ltJywgWzEwODY3XV0sIFsnZXNpbScsIFs4NzcwXV0sIFsnRXRhJywgWzkxOV1dLCBbJ2V0YScsIFs5NTFdXSwgWydFVEgnLCBbMjA4XV0sIFsnZXRoJywgWzI0MF1dLCBbJ0V1bWwnLCBbMjAzXV0sIFsnZXVtbCcsIFsyMzVdXSwgWydldXJvJywgWzgzNjRdXSwgWydleGNsJywgWzMzXV0sIFsnZXhpc3QnLCBbODcwN11dLCBbJ0V4aXN0cycsIFs4NzA3XV0sIFsnZXhwZWN0YXRpb24nLCBbODQ5Nl1dLCBbJ2V4cG9uZW50aWFsZScsIFs4NTE5XV0sIFsnRXhwb25lbnRpYWxFJywgWzg1MTldXSwgWydmYWxsaW5nZG90c2VxJywgWzg3ODZdXSwgWydGY3knLCBbMTA2MF1dLCBbJ2ZjeScsIFsxMDkyXV0sIFsnZmVtYWxlJywgWzk3OTJdXSwgWydmZmlsaWcnLCBbNjQyNTldXSwgWydmZmxpZycsIFs2NDI1Nl1dLCBbJ2ZmbGxpZycsIFs2NDI2MF1dLCBbJ0ZmcicsIFsxMjAwNzNdXSwgWydmZnInLCBbMTIwMDk5XV0sIFsnZmlsaWcnLCBbNjQyNTddXSwgWydGaWxsZWRTbWFsbFNxdWFyZScsIFs5NzI0XV0sIFsnRmlsbGVkVmVyeVNtYWxsU3F1YXJlJywgWzk2NDJdXSwgWydmamxpZycsIFsxMDIsIDEwNl1dLCBbJ2ZsYXQnLCBbOTgzN11dLCBbJ2ZsbGlnJywgWzY0MjU4XV0sIFsnZmx0bnMnLCBbOTY0OV1dLCBbJ2Zub2YnLCBbNDAyXV0sIFsnRm9wZicsIFsxMjAxMjVdXSwgWydmb3BmJywgWzEyMDE1MV1dLCBbJ2ZvcmFsbCcsIFs4NzA0XV0sIFsnRm9yQWxsJywgWzg3MDRdXSwgWydmb3JrJywgWzg5MTZdXSwgWydmb3JrdicsIFsxMDk2OV1dLCBbJ0ZvdXJpZXJ0cmYnLCBbODQ5N11dLCBbJ2ZwYXJ0aW50JywgWzEwNzY1XV0sIFsnZnJhYzEyJywgWzE4OV1dLCBbJ2ZyYWMxMycsIFs4NTMxXV0sIFsnZnJhYzE0JywgWzE4OF1dLCBbJ2ZyYWMxNScsIFs4NTMzXV0sIFsnZnJhYzE2JywgWzg1MzddXSwgWydmcmFjMTgnLCBbODUzOV1dLCBbJ2ZyYWMyMycsIFs4NTMyXV0sIFsnZnJhYzI1JywgWzg1MzRdXSwgWydmcmFjMzQnLCBbMTkwXV0sIFsnZnJhYzM1JywgWzg1MzVdXSwgWydmcmFjMzgnLCBbODU0MF1dLCBbJ2ZyYWM0NScsIFs4NTM2XV0sIFsnZnJhYzU2JywgWzg1MzhdXSwgWydmcmFjNTgnLCBbODU0MV1dLCBbJ2ZyYWM3OCcsIFs4NTQyXV0sIFsnZnJhc2wnLCBbODI2MF1dLCBbJ2Zyb3duJywgWzg5OTRdXSwgWydmc2NyJywgWzExOTk5NV1dLCBbJ0ZzY3InLCBbODQ5N11dLCBbJ2dhY3V0ZScsIFs1MDFdXSwgWydHYW1tYScsIFs5MTVdXSwgWydnYW1tYScsIFs5NDddXSwgWydHYW1tYWQnLCBbOTg4XV0sIFsnZ2FtbWFkJywgWzk4OV1dLCBbJ2dhcCcsIFsxMDg4Nl1dLCBbJ0dicmV2ZScsIFsyODZdXSwgWydnYnJldmUnLCBbMjg3XV0sIFsnR2NlZGlsJywgWzI5MF1dLCBbJ0djaXJjJywgWzI4NF1dLCBbJ2djaXJjJywgWzI4NV1dLCBbJ0djeScsIFsxMDQzXV0sIFsnZ2N5JywgWzEwNzVdXSwgWydHZG90JywgWzI4OF1dLCBbJ2dkb3QnLCBbMjg5XV0sIFsnZ2UnLCBbODgwNV1dLCBbJ2dFJywgWzg4MDddXSwgWydnRWwnLCBbMTA4OTJdXSwgWydnZWwnLCBbODkyM11dLCBbJ2dlcScsIFs4ODA1XV0sIFsnZ2VxcScsIFs4ODA3XV0sIFsnZ2Vxc2xhbnQnLCBbMTA4NzhdXSwgWydnZXNjYycsIFsxMDkyMV1dLCBbJ2dlcycsIFsxMDg3OF1dLCBbJ2dlc2RvdCcsIFsxMDg4MF1dLCBbJ2dlc2RvdG8nLCBbMTA4ODJdXSwgWydnZXNkb3RvbCcsIFsxMDg4NF1dLCBbJ2dlc2wnLCBbODkyMywgNjUwMjRdXSwgWydnZXNsZXMnLCBbMTA5MDBdXSwgWydHZnInLCBbMTIwMDc0XV0sIFsnZ2ZyJywgWzEyMDEwMF1dLCBbJ2dnJywgWzg4MTFdXSwgWydHZycsIFs4OTIxXV0sIFsnZ2dnJywgWzg5MjFdXSwgWydnaW1lbCcsIFs4NTAzXV0sIFsnR0pjeScsIFsxMDI3XV0sIFsnZ2pjeScsIFsxMTA3XV0sIFsnZ2xhJywgWzEwOTE3XV0sIFsnZ2wnLCBbODgyM11dLCBbJ2dsRScsIFsxMDg5OF1dLCBbJ2dsaicsIFsxMDkxNl1dLCBbJ2duYXAnLCBbMTA4OTBdXSwgWydnbmFwcHJveCcsIFsxMDg5MF1dLCBbJ2duZScsIFsxMDg4OF1dLCBbJ2duRScsIFs4ODA5XV0sIFsnZ25lcScsIFsxMDg4OF1dLCBbJ2duZXFxJywgWzg4MDldXSwgWydnbnNpbScsIFs4OTM1XV0sIFsnR29wZicsIFsxMjAxMjZdXSwgWydnb3BmJywgWzEyMDE1Ml1dLCBbJ2dyYXZlJywgWzk2XV0sIFsnR3JlYXRlckVxdWFsJywgWzg4MDVdXSwgWydHcmVhdGVyRXF1YWxMZXNzJywgWzg5MjNdXSwgWydHcmVhdGVyRnVsbEVxdWFsJywgWzg4MDddXSwgWydHcmVhdGVyR3JlYXRlcicsIFsxMDkxNF1dLCBbJ0dyZWF0ZXJMZXNzJywgWzg4MjNdXSwgWydHcmVhdGVyU2xhbnRFcXVhbCcsIFsxMDg3OF1dLCBbJ0dyZWF0ZXJUaWxkZScsIFs4ODE5XV0sIFsnR3NjcicsIFsxMTk5NzBdXSwgWydnc2NyJywgWzg0NThdXSwgWydnc2ltJywgWzg4MTldXSwgWydnc2ltZScsIFsxMDg5NF1dLCBbJ2dzaW1sJywgWzEwODk2XV0sIFsnZ3RjYycsIFsxMDkxOV1dLCBbJ2d0Y2lyJywgWzEwODc0XV0sIFsnZ3QnLCBbNjJdXSwgWydHVCcsIFs2Ml1dLCBbJ0d0JywgWzg4MTFdXSwgWydndGRvdCcsIFs4OTE5XV0sIFsnZ3RsUGFyJywgWzEwNjQ1XV0sIFsnZ3RxdWVzdCcsIFsxMDg3Nl1dLCBbJ2d0cmFwcHJveCcsIFsxMDg4Nl1dLCBbJ2d0cmFycicsIFsxMDYxNl1dLCBbJ2d0cmRvdCcsIFs4OTE5XV0sIFsnZ3RyZXFsZXNzJywgWzg5MjNdXSwgWydndHJlcXFsZXNzJywgWzEwODkyXV0sIFsnZ3RybGVzcycsIFs4ODIzXV0sIFsnZ3Ryc2ltJywgWzg4MTldXSwgWydndmVydG5lcXEnLCBbODgwOSwgNjUwMjRdXSwgWydndm5FJywgWzg4MDksIDY1MDI0XV0sIFsnSGFjZWsnLCBbNzExXV0sIFsnaGFpcnNwJywgWzgyMDJdXSwgWydoYWxmJywgWzE4OV1dLCBbJ2hhbWlsdCcsIFs4NDU5XV0sIFsnSEFSRGN5JywgWzEwNjZdXSwgWydoYXJkY3knLCBbMTA5OF1dLCBbJ2hhcnJjaXInLCBbMTA1NjhdXSwgWydoYXJyJywgWzg1OTZdXSwgWydoQXJyJywgWzg2NjBdXSwgWydoYXJydycsIFs4NjIxXV0sIFsnSGF0JywgWzk0XV0sIFsnaGJhcicsIFs4NDYzXV0sIFsnSGNpcmMnLCBbMjkyXV0sIFsnaGNpcmMnLCBbMjkzXV0sIFsnaGVhcnRzJywgWzk4MjldXSwgWydoZWFydHN1aXQnLCBbOTgyOV1dLCBbJ2hlbGxpcCcsIFs4MjMwXV0sIFsnaGVyY29uJywgWzg4ODldXSwgWydoZnInLCBbMTIwMTAxXV0sIFsnSGZyJywgWzg0NjBdXSwgWydIaWxiZXJ0U3BhY2UnLCBbODQ1OV1dLCBbJ2hrc2Vhcm93JywgWzEwNTMzXV0sIFsnaGtzd2Fyb3cnLCBbMTA1MzRdXSwgWydob2FycicsIFs4NzAzXV0sIFsnaG9tdGh0JywgWzg3NjNdXSwgWydob29rbGVmdGFycm93JywgWzg2MTddXSwgWydob29rcmlnaHRhcnJvdycsIFs4NjE4XV0sIFsnaG9wZicsIFsxMjAxNTNdXSwgWydIb3BmJywgWzg0NjFdXSwgWydob3JiYXInLCBbODIxM11dLCBbJ0hvcml6b250YWxMaW5lJywgWzk0NzJdXSwgWydoc2NyJywgWzExOTk5N11dLCBbJ0hzY3InLCBbODQ1OV1dLCBbJ2hzbGFzaCcsIFs4NDYzXV0sIFsnSHN0cm9rJywgWzI5NF1dLCBbJ2hzdHJvaycsIFsyOTVdXSwgWydIdW1wRG93bkh1bXAnLCBbODc4Ml1dLCBbJ0h1bXBFcXVhbCcsIFs4NzgzXV0sIFsnaHlidWxsJywgWzgyNTldXSwgWydoeXBoZW4nLCBbODIwOF1dLCBbJ0lhY3V0ZScsIFsyMDVdXSwgWydpYWN1dGUnLCBbMjM3XV0sIFsnaWMnLCBbODI5MV1dLCBbJ0ljaXJjJywgWzIwNl1dLCBbJ2ljaXJjJywgWzIzOF1dLCBbJ0ljeScsIFsxMDQ4XV0sIFsnaWN5JywgWzEwODBdXSwgWydJZG90JywgWzMwNF1dLCBbJ0lFY3knLCBbMTA0NV1dLCBbJ2llY3knLCBbMTA3N11dLCBbJ2lleGNsJywgWzE2MV1dLCBbJ2lmZicsIFs4NjYwXV0sIFsnaWZyJywgWzEyMDEwMl1dLCBbJ0lmcicsIFs4NDY1XV0sIFsnSWdyYXZlJywgWzIwNF1dLCBbJ2lncmF2ZScsIFsyMzZdXSwgWydpaScsIFs4NTIwXV0sIFsnaWlpaW50JywgWzEwNzY0XV0sIFsnaWlpbnQnLCBbODc0OV1dLCBbJ2lpbmZpbicsIFsxMDcxNl1dLCBbJ2lpb3RhJywgWzg0ODldXSwgWydJSmxpZycsIFszMDZdXSwgWydpamxpZycsIFszMDddXSwgWydJbWFjcicsIFsyOThdXSwgWydpbWFjcicsIFsyOTldXSwgWydpbWFnZScsIFs4NDY1XV0sIFsnSW1hZ2luYXJ5SScsIFs4NTIwXV0sIFsnaW1hZ2xpbmUnLCBbODQ2NF1dLCBbJ2ltYWdwYXJ0JywgWzg0NjVdXSwgWydpbWF0aCcsIFszMDVdXSwgWydJbScsIFs4NDY1XV0sIFsnaW1vZicsIFs4ODg3XV0sIFsnaW1wZWQnLCBbNDM3XV0sIFsnSW1wbGllcycsIFs4NjU4XV0sIFsnaW5jYXJlJywgWzg0NTNdXSwgWydpbicsIFs4NzEyXV0sIFsnaW5maW4nLCBbODczNF1dLCBbJ2luZmludGllJywgWzEwNzE3XV0sIFsnaW5vZG90JywgWzMwNV1dLCBbJ2ludGNhbCcsIFs4ODkwXV0sIFsnaW50JywgWzg3NDddXSwgWydJbnQnLCBbODc0OF1dLCBbJ2ludGVnZXJzJywgWzg0ODRdXSwgWydJbnRlZ3JhbCcsIFs4NzQ3XV0sIFsnaW50ZXJjYWwnLCBbODg5MF1dLCBbJ0ludGVyc2VjdGlvbicsIFs4ODk4XV0sIFsnaW50bGFyaGsnLCBbMTA3NzVdXSwgWydpbnRwcm9kJywgWzEwODEyXV0sIFsnSW52aXNpYmxlQ29tbWEnLCBbODI5MV1dLCBbJ0ludmlzaWJsZVRpbWVzJywgWzgyOTBdXSwgWydJT2N5JywgWzEwMjVdXSwgWydpb2N5JywgWzExMDVdXSwgWydJb2dvbicsIFszMDJdXSwgWydpb2dvbicsIFszMDNdXSwgWydJb3BmJywgWzEyMDEyOF1dLCBbJ2lvcGYnLCBbMTIwMTU0XV0sIFsnSW90YScsIFs5MjFdXSwgWydpb3RhJywgWzk1M11dLCBbJ2lwcm9kJywgWzEwODEyXV0sIFsnaXF1ZXN0JywgWzE5MV1dLCBbJ2lzY3InLCBbMTE5OTk4XV0sIFsnSXNjcicsIFs4NDY0XV0sIFsnaXNpbicsIFs4NzEyXV0sIFsnaXNpbmRvdCcsIFs4OTQ5XV0sIFsnaXNpbkUnLCBbODk1M11dLCBbJ2lzaW5zJywgWzg5NDhdXSwgWydpc2luc3YnLCBbODk0N11dLCBbJ2lzaW52JywgWzg3MTJdXSwgWydpdCcsIFs4MjkwXV0sIFsnSXRpbGRlJywgWzI5Nl1dLCBbJ2l0aWxkZScsIFsyOTddXSwgWydJdWtjeScsIFsxMDMwXV0sIFsnaXVrY3knLCBbMTExMF1dLCBbJ0l1bWwnLCBbMjA3XV0sIFsnaXVtbCcsIFsyMzldXSwgWydKY2lyYycsIFszMDhdXSwgWydqY2lyYycsIFszMDldXSwgWydKY3knLCBbMTA0OV1dLCBbJ2pjeScsIFsxMDgxXV0sIFsnSmZyJywgWzEyMDA3N11dLCBbJ2pmcicsIFsxMjAxMDNdXSwgWydqbWF0aCcsIFs1NjddXSwgWydKb3BmJywgWzEyMDEyOV1dLCBbJ2pvcGYnLCBbMTIwMTU1XV0sIFsnSnNjcicsIFsxMTk5NzNdXSwgWydqc2NyJywgWzExOTk5OV1dLCBbJ0pzZXJjeScsIFsxMDMyXV0sIFsnanNlcmN5JywgWzExMTJdXSwgWydKdWtjeScsIFsxMDI4XV0sIFsnanVrY3knLCBbMTEwOF1dLCBbJ0thcHBhJywgWzkyMl1dLCBbJ2thcHBhJywgWzk1NF1dLCBbJ2thcHBhdicsIFsxMDA4XV0sIFsnS2NlZGlsJywgWzMxMF1dLCBbJ2tjZWRpbCcsIFszMTFdXSwgWydLY3knLCBbMTA1MF1dLCBbJ2tjeScsIFsxMDgyXV0sIFsnS2ZyJywgWzEyMDA3OF1dLCBbJ2tmcicsIFsxMjAxMDRdXSwgWydrZ3JlZW4nLCBbMzEyXV0sIFsnS0hjeScsIFsxMDYxXV0sIFsna2hjeScsIFsxMDkzXV0sIFsnS0pjeScsIFsxMDM2XV0sIFsna2pjeScsIFsxMTE2XV0sIFsnS29wZicsIFsxMjAxMzBdXSwgWydrb3BmJywgWzEyMDE1Nl1dLCBbJ0tzY3InLCBbMTE5OTc0XV0sIFsna3NjcicsIFsxMjAwMDBdXSwgWydsQWFycicsIFs4NjY2XV0sIFsnTGFjdXRlJywgWzMxM11dLCBbJ2xhY3V0ZScsIFszMTRdXSwgWydsYWVtcHR5dicsIFsxMDY3Nl1dLCBbJ2xhZ3JhbicsIFs4NDY2XV0sIFsnTGFtYmRhJywgWzkyM11dLCBbJ2xhbWJkYScsIFs5NTVdXSwgWydsYW5nJywgWzEwMjE2XV0sIFsnTGFuZycsIFsxMDIxOF1dLCBbJ2xhbmdkJywgWzEwNjQxXV0sIFsnbGFuZ2xlJywgWzEwMjE2XV0sIFsnbGFwJywgWzEwODg1XV0sIFsnTGFwbGFjZXRyZicsIFs4NDY2XV0sIFsnbGFxdW8nLCBbMTcxXV0sIFsnbGFycmInLCBbODY3Nl1dLCBbJ2xhcnJiZnMnLCBbMTA1MjddXSwgWydsYXJyJywgWzg1OTJdXSwgWydMYXJyJywgWzg2MDZdXSwgWydsQXJyJywgWzg2NTZdXSwgWydsYXJyZnMnLCBbMTA1MjVdXSwgWydsYXJyaGsnLCBbODYxN11dLCBbJ2xhcnJscCcsIFs4NjE5XV0sIFsnbGFycnBsJywgWzEwNTUzXV0sIFsnbGFycnNpbScsIFsxMDYxMV1dLCBbJ2xhcnJ0bCcsIFs4NjEwXV0sIFsnbGF0YWlsJywgWzEwNTIxXV0sIFsnbEF0YWlsJywgWzEwNTIzXV0sIFsnbGF0JywgWzEwOTIzXV0sIFsnbGF0ZScsIFsxMDkyNV1dLCBbJ2xhdGVzJywgWzEwOTI1LCA2NTAyNF1dLCBbJ2xiYXJyJywgWzEwNTA4XV0sIFsnbEJhcnInLCBbMTA1MTBdXSwgWydsYmJyaycsIFsxMDA5OF1dLCBbJ2xicmFjZScsIFsxMjNdXSwgWydsYnJhY2snLCBbOTFdXSwgWydsYnJrZScsIFsxMDYzNV1dLCBbJ2xicmtzbGQnLCBbMTA2MzldXSwgWydsYnJrc2x1JywgWzEwNjM3XV0sIFsnTGNhcm9uJywgWzMxN11dLCBbJ2xjYXJvbicsIFszMThdXSwgWydMY2VkaWwnLCBbMzE1XV0sIFsnbGNlZGlsJywgWzMxNl1dLCBbJ2xjZWlsJywgWzg5NjhdXSwgWydsY3ViJywgWzEyM11dLCBbJ0xjeScsIFsxMDUxXV0sIFsnbGN5JywgWzEwODNdXSwgWydsZGNhJywgWzEwNTUwXV0sIFsnbGRxdW8nLCBbODIyMF1dLCBbJ2xkcXVvcicsIFs4MjIyXV0sIFsnbGRyZGhhcicsIFsxMDU5OV1dLCBbJ2xkcnVzaGFyJywgWzEwNTcxXV0sIFsnbGRzaCcsIFs4NjI2XV0sIFsnbGUnLCBbODgwNF1dLCBbJ2xFJywgWzg4MDZdXSwgWydMZWZ0QW5nbGVCcmFja2V0JywgWzEwMjE2XV0sIFsnTGVmdEFycm93QmFyJywgWzg2NzZdXSwgWydsZWZ0YXJyb3cnLCBbODU5Ml1dLCBbJ0xlZnRBcnJvdycsIFs4NTkyXV0sIFsnTGVmdGFycm93JywgWzg2NTZdXSwgWydMZWZ0QXJyb3dSaWdodEFycm93JywgWzg2NDZdXSwgWydsZWZ0YXJyb3d0YWlsJywgWzg2MTBdXSwgWydMZWZ0Q2VpbGluZycsIFs4OTY4XV0sIFsnTGVmdERvdWJsZUJyYWNrZXQnLCBbMTAyMTRdXSwgWydMZWZ0RG93blRlZVZlY3RvcicsIFsxMDU5M11dLCBbJ0xlZnREb3duVmVjdG9yQmFyJywgWzEwNTg1XV0sIFsnTGVmdERvd25WZWN0b3InLCBbODY0M11dLCBbJ0xlZnRGbG9vcicsIFs4OTcwXV0sIFsnbGVmdGhhcnBvb25kb3duJywgWzg2MzddXSwgWydsZWZ0aGFycG9vbnVwJywgWzg2MzZdXSwgWydsZWZ0bGVmdGFycm93cycsIFs4NjQ3XV0sIFsnbGVmdHJpZ2h0YXJyb3cnLCBbODU5Nl1dLCBbJ0xlZnRSaWdodEFycm93JywgWzg1OTZdXSwgWydMZWZ0cmlnaHRhcnJvdycsIFs4NjYwXV0sIFsnbGVmdHJpZ2h0YXJyb3dzJywgWzg2NDZdXSwgWydsZWZ0cmlnaHRoYXJwb29ucycsIFs4NjUxXV0sIFsnbGVmdHJpZ2h0c3F1aWdhcnJvdycsIFs4NjIxXV0sIFsnTGVmdFJpZ2h0VmVjdG9yJywgWzEwNTc0XV0sIFsnTGVmdFRlZUFycm93JywgWzg2MTJdXSwgWydMZWZ0VGVlJywgWzg4NjddXSwgWydMZWZ0VGVlVmVjdG9yJywgWzEwNTg2XV0sIFsnbGVmdHRocmVldGltZXMnLCBbODkwN11dLCBbJ0xlZnRUcmlhbmdsZUJhcicsIFsxMDcwM11dLCBbJ0xlZnRUcmlhbmdsZScsIFs4ODgyXV0sIFsnTGVmdFRyaWFuZ2xlRXF1YWwnLCBbODg4NF1dLCBbJ0xlZnRVcERvd25WZWN0b3InLCBbMTA1NzddXSwgWydMZWZ0VXBUZWVWZWN0b3InLCBbMTA1OTJdXSwgWydMZWZ0VXBWZWN0b3JCYXInLCBbMTA1ODRdXSwgWydMZWZ0VXBWZWN0b3InLCBbODYzOV1dLCBbJ0xlZnRWZWN0b3JCYXInLCBbMTA1NzhdXSwgWydMZWZ0VmVjdG9yJywgWzg2MzZdXSwgWydsRWcnLCBbMTA4OTFdXSwgWydsZWcnLCBbODkyMl1dLCBbJ2xlcScsIFs4ODA0XV0sIFsnbGVxcScsIFs4ODA2XV0sIFsnbGVxc2xhbnQnLCBbMTA4NzddXSwgWydsZXNjYycsIFsxMDkyMF1dLCBbJ2xlcycsIFsxMDg3N11dLCBbJ2xlc2RvdCcsIFsxMDg3OV1dLCBbJ2xlc2RvdG8nLCBbMTA4ODFdXSwgWydsZXNkb3RvcicsIFsxMDg4M11dLCBbJ2xlc2cnLCBbODkyMiwgNjUwMjRdXSwgWydsZXNnZXMnLCBbMTA4OTldXSwgWydsZXNzYXBwcm94JywgWzEwODg1XV0sIFsnbGVzc2RvdCcsIFs4OTE4XV0sIFsnbGVzc2VxZ3RyJywgWzg5MjJdXSwgWydsZXNzZXFxZ3RyJywgWzEwODkxXV0sIFsnTGVzc0VxdWFsR3JlYXRlcicsIFs4OTIyXV0sIFsnTGVzc0Z1bGxFcXVhbCcsIFs4ODA2XV0sIFsnTGVzc0dyZWF0ZXInLCBbODgyMl1dLCBbJ2xlc3NndHInLCBbODgyMl1dLCBbJ0xlc3NMZXNzJywgWzEwOTEzXV0sIFsnbGVzc3NpbScsIFs4ODE4XV0sIFsnTGVzc1NsYW50RXF1YWwnLCBbMTA4NzddXSwgWydMZXNzVGlsZGUnLCBbODgxOF1dLCBbJ2xmaXNodCcsIFsxMDYyMF1dLCBbJ2xmbG9vcicsIFs4OTcwXV0sIFsnTGZyJywgWzEyMDA3OV1dLCBbJ2xmcicsIFsxMjAxMDVdXSwgWydsZycsIFs4ODIyXV0sIFsnbGdFJywgWzEwODk3XV0sIFsnbEhhcicsIFsxMDU5NF1dLCBbJ2xoYXJkJywgWzg2MzddXSwgWydsaGFydScsIFs4NjM2XV0sIFsnbGhhcnVsJywgWzEwNjAyXV0sIFsnbGhibGsnLCBbOTYwNF1dLCBbJ0xKY3knLCBbMTAzM11dLCBbJ2xqY3knLCBbMTExM11dLCBbJ2xsYXJyJywgWzg2NDddXSwgWydsbCcsIFs4ODEwXV0sIFsnTGwnLCBbODkyMF1dLCBbJ2xsY29ybmVyJywgWzg5OTBdXSwgWydMbGVmdGFycm93JywgWzg2NjZdXSwgWydsbGhhcmQnLCBbMTA2MDNdXSwgWydsbHRyaScsIFs5NzIyXV0sIFsnTG1pZG90JywgWzMxOV1dLCBbJ2xtaWRvdCcsIFszMjBdXSwgWydsbW91c3RhY2hlJywgWzkxMzZdXSwgWydsbW91c3QnLCBbOTEzNl1dLCBbJ2xuYXAnLCBbMTA4ODldXSwgWydsbmFwcHJveCcsIFsxMDg4OV1dLCBbJ2xuZScsIFsxMDg4N11dLCBbJ2xuRScsIFs4ODA4XV0sIFsnbG5lcScsIFsxMDg4N11dLCBbJ2xuZXFxJywgWzg4MDhdXSwgWydsbnNpbScsIFs4OTM0XV0sIFsnbG9hbmcnLCBbMTAyMjBdXSwgWydsb2FycicsIFs4NzAxXV0sIFsnbG9icmsnLCBbMTAyMTRdXSwgWydsb25nbGVmdGFycm93JywgWzEwMjI5XV0sIFsnTG9uZ0xlZnRBcnJvdycsIFsxMDIyOV1dLCBbJ0xvbmdsZWZ0YXJyb3cnLCBbMTAyMzJdXSwgWydsb25nbGVmdHJpZ2h0YXJyb3cnLCBbMTAyMzFdXSwgWydMb25nTGVmdFJpZ2h0QXJyb3cnLCBbMTAyMzFdXSwgWydMb25nbGVmdHJpZ2h0YXJyb3cnLCBbMTAyMzRdXSwgWydsb25nbWFwc3RvJywgWzEwMjM2XV0sIFsnbG9uZ3JpZ2h0YXJyb3cnLCBbMTAyMzBdXSwgWydMb25nUmlnaHRBcnJvdycsIFsxMDIzMF1dLCBbJ0xvbmdyaWdodGFycm93JywgWzEwMjMzXV0sIFsnbG9vcGFycm93bGVmdCcsIFs4NjE5XV0sIFsnbG9vcGFycm93cmlnaHQnLCBbODYyMF1dLCBbJ2xvcGFyJywgWzEwNjI5XV0sIFsnTG9wZicsIFsxMjAxMzFdXSwgWydsb3BmJywgWzEyMDE1N11dLCBbJ2xvcGx1cycsIFsxMDc5N11dLCBbJ2xvdGltZXMnLCBbMTA4MDRdXSwgWydsb3dhc3QnLCBbODcyN11dLCBbJ2xvd2JhcicsIFs5NV1dLCBbJ0xvd2VyTGVmdEFycm93JywgWzg2MDFdXSwgWydMb3dlclJpZ2h0QXJyb3cnLCBbODYwMF1dLCBbJ2xveicsIFs5Njc0XV0sIFsnbG96ZW5nZScsIFs5Njc0XV0sIFsnbG96ZicsIFsxMDczMV1dLCBbJ2xwYXInLCBbNDBdXSwgWydscGFybHQnLCBbMTA2NDNdXSwgWydscmFycicsIFs4NjQ2XV0sIFsnbHJjb3JuZXInLCBbODk5MV1dLCBbJ2xyaGFyJywgWzg2NTFdXSwgWydscmhhcmQnLCBbMTA2MDVdXSwgWydscm0nLCBbODIwNl1dLCBbJ2xydHJpJywgWzg4OTVdXSwgWydsc2FxdW8nLCBbODI0OV1dLCBbJ2xzY3InLCBbMTIwMDAxXV0sIFsnTHNjcicsIFs4NDY2XV0sIFsnbHNoJywgWzg2MjRdXSwgWydMc2gnLCBbODYyNF1dLCBbJ2xzaW0nLCBbODgxOF1dLCBbJ2xzaW1lJywgWzEwODkzXV0sIFsnbHNpbWcnLCBbMTA4OTVdXSwgWydsc3FiJywgWzkxXV0sIFsnbHNxdW8nLCBbODIxNl1dLCBbJ2xzcXVvcicsIFs4MjE4XV0sIFsnTHN0cm9rJywgWzMyMV1dLCBbJ2xzdHJvaycsIFszMjJdXSwgWydsdGNjJywgWzEwOTE4XV0sIFsnbHRjaXInLCBbMTA4NzNdXSwgWydsdCcsIFs2MF1dLCBbJ0xUJywgWzYwXV0sIFsnTHQnLCBbODgxMF1dLCBbJ2x0ZG90JywgWzg5MThdXSwgWydsdGhyZWUnLCBbODkwN11dLCBbJ2x0aW1lcycsIFs4OTA1XV0sIFsnbHRsYXJyJywgWzEwNjE0XV0sIFsnbHRxdWVzdCcsIFsxMDg3NV1dLCBbJ2x0cmknLCBbOTY2N11dLCBbJ2x0cmllJywgWzg4ODRdXSwgWydsdHJpZicsIFs5NjY2XV0sIFsnbHRyUGFyJywgWzEwNjQ2XV0sIFsnbHVyZHNoYXInLCBbMTA1NzBdXSwgWydsdXJ1aGFyJywgWzEwNTk4XV0sIFsnbHZlcnRuZXFxJywgWzg4MDgsIDY1MDI0XV0sIFsnbHZuRScsIFs4ODA4LCA2NTAyNF1dLCBbJ21hY3InLCBbMTc1XV0sIFsnbWFsZScsIFs5Nzk0XV0sIFsnbWFsdCcsIFsxMDAxNl1dLCBbJ21hbHRlc2UnLCBbMTAwMTZdXSwgWydNYXAnLCBbMTA1MDFdXSwgWydtYXAnLCBbODYxNF1dLCBbJ21hcHN0bycsIFs4NjE0XV0sIFsnbWFwc3RvZG93bicsIFs4NjE1XV0sIFsnbWFwc3RvbGVmdCcsIFs4NjEyXV0sIFsnbWFwc3RvdXAnLCBbODYxM11dLCBbJ21hcmtlcicsIFs5NjQ2XV0sIFsnbWNvbW1hJywgWzEwNzkzXV0sIFsnTWN5JywgWzEwNTJdXSwgWydtY3knLCBbMTA4NF1dLCBbJ21kYXNoJywgWzgyMTJdXSwgWydtRERvdCcsIFs4NzYyXV0sIFsnbWVhc3VyZWRhbmdsZScsIFs4NzM3XV0sIFsnTWVkaXVtU3BhY2UnLCBbODI4N11dLCBbJ01lbGxpbnRyZicsIFs4NDk5XV0sIFsnTWZyJywgWzEyMDA4MF1dLCBbJ21mcicsIFsxMjAxMDZdXSwgWydtaG8nLCBbODQ4N11dLCBbJ21pY3JvJywgWzE4MV1dLCBbJ21pZGFzdCcsIFs0Ml1dLCBbJ21pZGNpcicsIFsxMDk5Ml1dLCBbJ21pZCcsIFs4NzM5XV0sIFsnbWlkZG90JywgWzE4M11dLCBbJ21pbnVzYicsIFs4ODYzXV0sIFsnbWludXMnLCBbODcyMl1dLCBbJ21pbnVzZCcsIFs4NzYwXV0sIFsnbWludXNkdScsIFsxMDc5NF1dLCBbJ01pbnVzUGx1cycsIFs4NzIzXV0sIFsnbWxjcCcsIFsxMDk3MV1dLCBbJ21sZHInLCBbODIzMF1dLCBbJ21ucGx1cycsIFs4NzIzXV0sIFsnbW9kZWxzJywgWzg4NzFdXSwgWydNb3BmJywgWzEyMDEzMl1dLCBbJ21vcGYnLCBbMTIwMTU4XV0sIFsnbXAnLCBbODcyM11dLCBbJ21zY3InLCBbMTIwMDAyXV0sIFsnTXNjcicsIFs4NDk5XV0sIFsnbXN0cG9zJywgWzg3NjZdXSwgWydNdScsIFs5MjRdXSwgWydtdScsIFs5NTZdXSwgWydtdWx0aW1hcCcsIFs4ODg4XV0sIFsnbXVtYXAnLCBbODg4OF1dLCBbJ25hYmxhJywgWzg3MTFdXSwgWydOYWN1dGUnLCBbMzIzXV0sIFsnbmFjdXRlJywgWzMyNF1dLCBbJ25hbmcnLCBbODczNiwgODQwMl1dLCBbJ25hcCcsIFs4Nzc3XV0sIFsnbmFwRScsIFsxMDg2NCwgODI0XV0sIFsnbmFwaWQnLCBbODc3OSwgODI0XV0sIFsnbmFwb3MnLCBbMzI5XV0sIFsnbmFwcHJveCcsIFs4Nzc3XV0sIFsnbmF0dXJhbCcsIFs5ODM4XV0sIFsnbmF0dXJhbHMnLCBbODQ2OV1dLCBbJ25hdHVyJywgWzk4MzhdXSwgWyduYnNwJywgWzE2MF1dLCBbJ25idW1wJywgWzg3ODIsIDgyNF1dLCBbJ25idW1wZScsIFs4NzgzLCA4MjRdXSwgWyduY2FwJywgWzEwODE5XV0sIFsnTmNhcm9uJywgWzMyN11dLCBbJ25jYXJvbicsIFszMjhdXSwgWydOY2VkaWwnLCBbMzI1XV0sIFsnbmNlZGlsJywgWzMyNl1dLCBbJ25jb25nJywgWzg3NzVdXSwgWyduY29uZ2RvdCcsIFsxMDg2MSwgODI0XV0sIFsnbmN1cCcsIFsxMDgxOF1dLCBbJ05jeScsIFsxMDUzXV0sIFsnbmN5JywgWzEwODVdXSwgWyduZGFzaCcsIFs4MjExXV0sIFsnbmVhcmhrJywgWzEwNTMyXV0sIFsnbmVhcnInLCBbODU5OV1dLCBbJ25lQXJyJywgWzg2NjNdXSwgWyduZWFycm93JywgWzg1OTldXSwgWyduZScsIFs4ODAwXV0sIFsnbmVkb3QnLCBbODc4NCwgODI0XV0sIFsnTmVnYXRpdmVNZWRpdW1TcGFjZScsIFs4MjAzXV0sIFsnTmVnYXRpdmVUaGlja1NwYWNlJywgWzgyMDNdXSwgWydOZWdhdGl2ZVRoaW5TcGFjZScsIFs4MjAzXV0sIFsnTmVnYXRpdmVWZXJ5VGhpblNwYWNlJywgWzgyMDNdXSwgWyduZXF1aXYnLCBbODgwMl1dLCBbJ25lc2VhcicsIFsxMDUzNl1dLCBbJ25lc2ltJywgWzg3NzAsIDgyNF1dLCBbJ05lc3RlZEdyZWF0ZXJHcmVhdGVyJywgWzg4MTFdXSwgWydOZXN0ZWRMZXNzTGVzcycsIFs4ODEwXV0sIFsnbmV4aXN0JywgWzg3MDhdXSwgWyduZXhpc3RzJywgWzg3MDhdXSwgWydOZnInLCBbMTIwMDgxXV0sIFsnbmZyJywgWzEyMDEwN11dLCBbJ25nRScsIFs4ODA3LCA4MjRdXSwgWyduZ2UnLCBbODgxN11dLCBbJ25nZXEnLCBbODgxN11dLCBbJ25nZXFxJywgWzg4MDcsIDgyNF1dLCBbJ25nZXFzbGFudCcsIFsxMDg3OCwgODI0XV0sIFsnbmdlcycsIFsxMDg3OCwgODI0XV0sIFsnbkdnJywgWzg5MjEsIDgyNF1dLCBbJ25nc2ltJywgWzg4MjFdXSwgWyduR3QnLCBbODgxMSwgODQwMl1dLCBbJ25ndCcsIFs4ODE1XV0sIFsnbmd0cicsIFs4ODE1XV0sIFsnbkd0dicsIFs4ODExLCA4MjRdXSwgWyduaGFycicsIFs4NjIyXV0sIFsnbmhBcnInLCBbODY1NF1dLCBbJ25ocGFyJywgWzEwOTk0XV0sIFsnbmknLCBbODcxNV1dLCBbJ25pcycsIFs4OTU2XV0sIFsnbmlzZCcsIFs4OTU0XV0sIFsnbml2JywgWzg3MTVdXSwgWydOSmN5JywgWzEwMzRdXSwgWyduamN5JywgWzExMTRdXSwgWydubGFycicsIFs4NjAyXV0sIFsnbmxBcnInLCBbODY1M11dLCBbJ25sZHInLCBbODIyOV1dLCBbJ25sRScsIFs4ODA2LCA4MjRdXSwgWydubGUnLCBbODgxNl1dLCBbJ25sZWZ0YXJyb3cnLCBbODYwMl1dLCBbJ25MZWZ0YXJyb3cnLCBbODY1M11dLCBbJ25sZWZ0cmlnaHRhcnJvdycsIFs4NjIyXV0sIFsnbkxlZnRyaWdodGFycm93JywgWzg2NTRdXSwgWydubGVxJywgWzg4MTZdXSwgWydubGVxcScsIFs4ODA2LCA4MjRdXSwgWydubGVxc2xhbnQnLCBbMTA4NzcsIDgyNF1dLCBbJ25sZXMnLCBbMTA4NzcsIDgyNF1dLCBbJ25sZXNzJywgWzg4MTRdXSwgWyduTGwnLCBbODkyMCwgODI0XV0sIFsnbmxzaW0nLCBbODgyMF1dLCBbJ25MdCcsIFs4ODEwLCA4NDAyXV0sIFsnbmx0JywgWzg4MTRdXSwgWydubHRyaScsIFs4OTM4XV0sIFsnbmx0cmllJywgWzg5NDBdXSwgWyduTHR2JywgWzg4MTAsIDgyNF1dLCBbJ25taWQnLCBbODc0MF1dLCBbJ05vQnJlYWsnLCBbODI4OF1dLCBbJ05vbkJyZWFraW5nU3BhY2UnLCBbMTYwXV0sIFsnbm9wZicsIFsxMjAxNTldXSwgWydOb3BmJywgWzg0NjldXSwgWydOb3QnLCBbMTA5ODhdXSwgWydub3QnLCBbMTcyXV0sIFsnTm90Q29uZ3J1ZW50JywgWzg4MDJdXSwgWydOb3RDdXBDYXAnLCBbODgxM11dLCBbJ05vdERvdWJsZVZlcnRpY2FsQmFyJywgWzg3NDJdXSwgWydOb3RFbGVtZW50JywgWzg3MTNdXSwgWydOb3RFcXVhbCcsIFs4ODAwXV0sIFsnTm90RXF1YWxUaWxkZScsIFs4NzcwLCA4MjRdXSwgWydOb3RFeGlzdHMnLCBbODcwOF1dLCBbJ05vdEdyZWF0ZXInLCBbODgxNV1dLCBbJ05vdEdyZWF0ZXJFcXVhbCcsIFs4ODE3XV0sIFsnTm90R3JlYXRlckZ1bGxFcXVhbCcsIFs4ODA3LCA4MjRdXSwgWydOb3RHcmVhdGVyR3JlYXRlcicsIFs4ODExLCA4MjRdXSwgWydOb3RHcmVhdGVyTGVzcycsIFs4ODI1XV0sIFsnTm90R3JlYXRlclNsYW50RXF1YWwnLCBbMTA4NzgsIDgyNF1dLCBbJ05vdEdyZWF0ZXJUaWxkZScsIFs4ODIxXV0sIFsnTm90SHVtcERvd25IdW1wJywgWzg3ODIsIDgyNF1dLCBbJ05vdEh1bXBFcXVhbCcsIFs4NzgzLCA4MjRdXSwgWydub3RpbicsIFs4NzEzXV0sIFsnbm90aW5kb3QnLCBbODk0OSwgODI0XV0sIFsnbm90aW5FJywgWzg5NTMsIDgyNF1dLCBbJ25vdGludmEnLCBbODcxM11dLCBbJ25vdGludmInLCBbODk1MV1dLCBbJ25vdGludmMnLCBbODk1MF1dLCBbJ05vdExlZnRUcmlhbmdsZUJhcicsIFsxMDcwMywgODI0XV0sIFsnTm90TGVmdFRyaWFuZ2xlJywgWzg5MzhdXSwgWydOb3RMZWZ0VHJpYW5nbGVFcXVhbCcsIFs4OTQwXV0sIFsnTm90TGVzcycsIFs4ODE0XV0sIFsnTm90TGVzc0VxdWFsJywgWzg4MTZdXSwgWydOb3RMZXNzR3JlYXRlcicsIFs4ODI0XV0sIFsnTm90TGVzc0xlc3MnLCBbODgxMCwgODI0XV0sIFsnTm90TGVzc1NsYW50RXF1YWwnLCBbMTA4NzcsIDgyNF1dLCBbJ05vdExlc3NUaWxkZScsIFs4ODIwXV0sIFsnTm90TmVzdGVkR3JlYXRlckdyZWF0ZXInLCBbMTA5MTQsIDgyNF1dLCBbJ05vdE5lc3RlZExlc3NMZXNzJywgWzEwOTEzLCA4MjRdXSwgWydub3RuaScsIFs4NzE2XV0sIFsnbm90bml2YScsIFs4NzE2XV0sIFsnbm90bml2YicsIFs4OTU4XV0sIFsnbm90bml2YycsIFs4OTU3XV0sIFsnTm90UHJlY2VkZXMnLCBbODgzMl1dLCBbJ05vdFByZWNlZGVzRXF1YWwnLCBbMTA5MjcsIDgyNF1dLCBbJ05vdFByZWNlZGVzU2xhbnRFcXVhbCcsIFs4OTI4XV0sIFsnTm90UmV2ZXJzZUVsZW1lbnQnLCBbODcxNl1dLCBbJ05vdFJpZ2h0VHJpYW5nbGVCYXInLCBbMTA3MDQsIDgyNF1dLCBbJ05vdFJpZ2h0VHJpYW5nbGUnLCBbODkzOV1dLCBbJ05vdFJpZ2h0VHJpYW5nbGVFcXVhbCcsIFs4OTQxXV0sIFsnTm90U3F1YXJlU3Vic2V0JywgWzg4NDcsIDgyNF1dLCBbJ05vdFNxdWFyZVN1YnNldEVxdWFsJywgWzg5MzBdXSwgWydOb3RTcXVhcmVTdXBlcnNldCcsIFs4ODQ4LCA4MjRdXSwgWydOb3RTcXVhcmVTdXBlcnNldEVxdWFsJywgWzg5MzFdXSwgWydOb3RTdWJzZXQnLCBbODgzNCwgODQwMl1dLCBbJ05vdFN1YnNldEVxdWFsJywgWzg4NDBdXSwgWydOb3RTdWNjZWVkcycsIFs4ODMzXV0sIFsnTm90U3VjY2VlZHNFcXVhbCcsIFsxMDkyOCwgODI0XV0sIFsnTm90U3VjY2VlZHNTbGFudEVxdWFsJywgWzg5MjldXSwgWydOb3RTdWNjZWVkc1RpbGRlJywgWzg4MzEsIDgyNF1dLCBbJ05vdFN1cGVyc2V0JywgWzg4MzUsIDg0MDJdXSwgWydOb3RTdXBlcnNldEVxdWFsJywgWzg4NDFdXSwgWydOb3RUaWxkZScsIFs4NzY5XV0sIFsnTm90VGlsZGVFcXVhbCcsIFs4NzcyXV0sIFsnTm90VGlsZGVGdWxsRXF1YWwnLCBbODc3NV1dLCBbJ05vdFRpbGRlVGlsZGUnLCBbODc3N11dLCBbJ05vdFZlcnRpY2FsQmFyJywgWzg3NDBdXSwgWyducGFyYWxsZWwnLCBbODc0Ml1dLCBbJ25wYXInLCBbODc0Ml1dLCBbJ25wYXJzbCcsIFsxMTAwNSwgODQyMV1dLCBbJ25wYXJ0JywgWzg3MDYsIDgyNF1dLCBbJ25wb2xpbnQnLCBbMTA3NzJdXSwgWyducHInLCBbODgzMl1dLCBbJ25wcmN1ZScsIFs4OTI4XV0sIFsnbnByZWMnLCBbODgzMl1dLCBbJ25wcmVjZXEnLCBbMTA5MjcsIDgyNF1dLCBbJ25wcmUnLCBbMTA5MjcsIDgyNF1dLCBbJ25yYXJyYycsIFsxMDU0NywgODI0XV0sIFsnbnJhcnInLCBbODYwM11dLCBbJ25yQXJyJywgWzg2NTVdXSwgWyducmFycncnLCBbODYwNSwgODI0XV0sIFsnbnJpZ2h0YXJyb3cnLCBbODYwM11dLCBbJ25SaWdodGFycm93JywgWzg2NTVdXSwgWyducnRyaScsIFs4OTM5XV0sIFsnbnJ0cmllJywgWzg5NDFdXSwgWyduc2MnLCBbODgzM11dLCBbJ25zY2N1ZScsIFs4OTI5XV0sIFsnbnNjZScsIFsxMDkyOCwgODI0XV0sIFsnTnNjcicsIFsxMTk5NzddXSwgWyduc2NyJywgWzEyMDAwM11dLCBbJ25zaG9ydG1pZCcsIFs4NzQwXV0sIFsnbnNob3J0cGFyYWxsZWwnLCBbODc0Ml1dLCBbJ25zaW0nLCBbODc2OV1dLCBbJ25zaW1lJywgWzg3NzJdXSwgWyduc2ltZXEnLCBbODc3Ml1dLCBbJ25zbWlkJywgWzg3NDBdXSwgWyduc3BhcicsIFs4NzQyXV0sIFsnbnNxc3ViZScsIFs4OTMwXV0sIFsnbnNxc3VwZScsIFs4OTMxXV0sIFsnbnN1YicsIFs4ODM2XV0sIFsnbnN1YkUnLCBbMTA5NDksIDgyNF1dLCBbJ25zdWJlJywgWzg4NDBdXSwgWyduc3Vic2V0JywgWzg4MzQsIDg0MDJdXSwgWyduc3Vic2V0ZXEnLCBbODg0MF1dLCBbJ25zdWJzZXRlcXEnLCBbMTA5NDksIDgyNF1dLCBbJ25zdWNjJywgWzg4MzNdXSwgWyduc3VjY2VxJywgWzEwOTI4LCA4MjRdXSwgWyduc3VwJywgWzg4MzddXSwgWyduc3VwRScsIFsxMDk1MCwgODI0XV0sIFsnbnN1cGUnLCBbODg0MV1dLCBbJ25zdXBzZXQnLCBbODgzNSwgODQwMl1dLCBbJ25zdXBzZXRlcScsIFs4ODQxXV0sIFsnbnN1cHNldGVxcScsIFsxMDk1MCwgODI0XV0sIFsnbnRnbCcsIFs4ODI1XV0sIFsnTnRpbGRlJywgWzIwOV1dLCBbJ250aWxkZScsIFsyNDFdXSwgWydudGxnJywgWzg4MjRdXSwgWydudHJpYW5nbGVsZWZ0JywgWzg5MzhdXSwgWydudHJpYW5nbGVsZWZ0ZXEnLCBbODk0MF1dLCBbJ250cmlhbmdsZXJpZ2h0JywgWzg5MzldXSwgWydudHJpYW5nbGVyaWdodGVxJywgWzg5NDFdXSwgWydOdScsIFs5MjVdXSwgWydudScsIFs5NTddXSwgWydudW0nLCBbMzVdXSwgWydudW1lcm8nLCBbODQ3MF1dLCBbJ251bXNwJywgWzgxOTldXSwgWydudmFwJywgWzg3ODEsIDg0MDJdXSwgWydudmRhc2gnLCBbODg3Nl1dLCBbJ252RGFzaCcsIFs4ODc3XV0sIFsnblZkYXNoJywgWzg4NzhdXSwgWyduVkRhc2gnLCBbODg3OV1dLCBbJ252Z2UnLCBbODgwNSwgODQwMl1dLCBbJ252Z3QnLCBbNjIsIDg0MDJdXSwgWydudkhhcnInLCBbMTA1MDBdXSwgWydudmluZmluJywgWzEwNzE4XV0sIFsnbnZsQXJyJywgWzEwNDk4XV0sIFsnbnZsZScsIFs4ODA0LCA4NDAyXV0sIFsnbnZsdCcsIFs2MCwgODQwMl1dLCBbJ252bHRyaWUnLCBbODg4NCwgODQwMl1dLCBbJ252ckFycicsIFsxMDQ5OV1dLCBbJ252cnRyaWUnLCBbODg4NSwgODQwMl1dLCBbJ252c2ltJywgWzg3NjQsIDg0MDJdXSwgWydud2FyaGsnLCBbMTA1MzFdXSwgWydud2FycicsIFs4NTk4XV0sIFsnbndBcnInLCBbODY2Ml1dLCBbJ253YXJyb3cnLCBbODU5OF1dLCBbJ253bmVhcicsIFsxMDUzNV1dLCBbJ09hY3V0ZScsIFsyMTFdXSwgWydvYWN1dGUnLCBbMjQzXV0sIFsnb2FzdCcsIFs4ODU5XV0sIFsnT2NpcmMnLCBbMjEyXV0sIFsnb2NpcmMnLCBbMjQ0XV0sIFsnb2NpcicsIFs4ODU4XV0sIFsnT2N5JywgWzEwNTRdXSwgWydvY3knLCBbMTA4Nl1dLCBbJ29kYXNoJywgWzg4NjFdXSwgWydPZGJsYWMnLCBbMzM2XV0sIFsnb2RibGFjJywgWzMzN11dLCBbJ29kaXYnLCBbMTA4MDhdXSwgWydvZG90JywgWzg4NTddXSwgWydvZHNvbGQnLCBbMTA2ODRdXSwgWydPRWxpZycsIFszMzhdXSwgWydvZWxpZycsIFszMzldXSwgWydvZmNpcicsIFsxMDY4N11dLCBbJ09mcicsIFsxMjAwODJdXSwgWydvZnInLCBbMTIwMTA4XV0sIFsnb2dvbicsIFs3MzFdXSwgWydPZ3JhdmUnLCBbMjEwXV0sIFsnb2dyYXZlJywgWzI0Ml1dLCBbJ29ndCcsIFsxMDY4OV1dLCBbJ29oYmFyJywgWzEwNjc3XV0sIFsnb2htJywgWzkzN11dLCBbJ29pbnQnLCBbODc1MF1dLCBbJ29sYXJyJywgWzg2MzRdXSwgWydvbGNpcicsIFsxMDY4Nl1dLCBbJ29sY3Jvc3MnLCBbMTA2ODNdXSwgWydvbGluZScsIFs4MjU0XV0sIFsnb2x0JywgWzEwNjg4XV0sIFsnT21hY3InLCBbMzMyXV0sIFsnb21hY3InLCBbMzMzXV0sIFsnT21lZ2EnLCBbOTM3XV0sIFsnb21lZ2EnLCBbOTY5XV0sIFsnT21pY3JvbicsIFs5MjddXSwgWydvbWljcm9uJywgWzk1OV1dLCBbJ29taWQnLCBbMTA2NzhdXSwgWydvbWludXMnLCBbODg1NF1dLCBbJ09vcGYnLCBbMTIwMTM0XV0sIFsnb29wZicsIFsxMjAxNjBdXSwgWydvcGFyJywgWzEwNjc5XV0sIFsnT3BlbkN1cmx5RG91YmxlUXVvdGUnLCBbODIyMF1dLCBbJ09wZW5DdXJseVF1b3RlJywgWzgyMTZdXSwgWydvcGVycCcsIFsxMDY4MV1dLCBbJ29wbHVzJywgWzg4NTNdXSwgWydvcmFycicsIFs4NjM1XV0sIFsnT3InLCBbMTA4MzZdXSwgWydvcicsIFs4NzQ0XV0sIFsnb3JkJywgWzEwODQ1XV0sIFsnb3JkZXInLCBbODUwMF1dLCBbJ29yZGVyb2YnLCBbODUwMF1dLCBbJ29yZGYnLCBbMTcwXV0sIFsnb3JkbScsIFsxODZdXSwgWydvcmlnb2YnLCBbODg4Nl1dLCBbJ29yb3InLCBbMTA4MzhdXSwgWydvcnNsb3BlJywgWzEwODM5XV0sIFsnb3J2JywgWzEwODQzXV0sIFsnb1MnLCBbOTQxNl1dLCBbJ09zY3InLCBbMTE5OTc4XV0sIFsnb3NjcicsIFs4NTAwXV0sIFsnT3NsYXNoJywgWzIxNl1dLCBbJ29zbGFzaCcsIFsyNDhdXSwgWydvc29sJywgWzg4NTZdXSwgWydPdGlsZGUnLCBbMjEzXV0sIFsnb3RpbGRlJywgWzI0NV1dLCBbJ290aW1lc2FzJywgWzEwODA2XV0sIFsnT3RpbWVzJywgWzEwODA3XV0sIFsnb3RpbWVzJywgWzg4NTVdXSwgWydPdW1sJywgWzIxNF1dLCBbJ291bWwnLCBbMjQ2XV0sIFsnb3ZiYXInLCBbOTAyMV1dLCBbJ092ZXJCYXInLCBbODI1NF1dLCBbJ092ZXJCcmFjZScsIFs5MTgyXV0sIFsnT3ZlckJyYWNrZXQnLCBbOTE0MF1dLCBbJ092ZXJQYXJlbnRoZXNpcycsIFs5MTgwXV0sIFsncGFyYScsIFsxODJdXSwgWydwYXJhbGxlbCcsIFs4NzQxXV0sIFsncGFyJywgWzg3NDFdXSwgWydwYXJzaW0nLCBbMTA5OTVdXSwgWydwYXJzbCcsIFsxMTAwNV1dLCBbJ3BhcnQnLCBbODcwNl1dLCBbJ1BhcnRpYWxEJywgWzg3MDZdXSwgWydQY3knLCBbMTA1NV1dLCBbJ3BjeScsIFsxMDg3XV0sIFsncGVyY250JywgWzM3XV0sIFsncGVyaW9kJywgWzQ2XV0sIFsncGVybWlsJywgWzgyNDBdXSwgWydwZXJwJywgWzg4NjldXSwgWydwZXJ0ZW5rJywgWzgyNDFdXSwgWydQZnInLCBbMTIwMDgzXV0sIFsncGZyJywgWzEyMDEwOV1dLCBbJ1BoaScsIFs5MzRdXSwgWydwaGknLCBbOTY2XV0sIFsncGhpdicsIFs5ODFdXSwgWydwaG1tYXQnLCBbODQ5OV1dLCBbJ3Bob25lJywgWzk3NDJdXSwgWydQaScsIFs5MjhdXSwgWydwaScsIFs5NjBdXSwgWydwaXRjaGZvcmsnLCBbODkxNl1dLCBbJ3BpdicsIFs5ODJdXSwgWydwbGFuY2snLCBbODQ2M11dLCBbJ3BsYW5ja2gnLCBbODQ2Ml1dLCBbJ3BsYW5rdicsIFs4NDYzXV0sIFsncGx1c2FjaXInLCBbMTA3ODddXSwgWydwbHVzYicsIFs4ODYyXV0sIFsncGx1c2NpcicsIFsxMDc4Nl1dLCBbJ3BsdXMnLCBbNDNdXSwgWydwbHVzZG8nLCBbODcyNF1dLCBbJ3BsdXNkdScsIFsxMDc4OV1dLCBbJ3BsdXNlJywgWzEwODY2XV0sIFsnUGx1c01pbnVzJywgWzE3N11dLCBbJ3BsdXNtbicsIFsxNzddXSwgWydwbHVzc2ltJywgWzEwNzkwXV0sIFsncGx1c3R3bycsIFsxMDc5MV1dLCBbJ3BtJywgWzE3N11dLCBbJ1BvaW5jYXJlcGxhbmUnLCBbODQ2MF1dLCBbJ3BvaW50aW50JywgWzEwNzczXV0sIFsncG9wZicsIFsxMjAxNjFdXSwgWydQb3BmJywgWzg0NzNdXSwgWydwb3VuZCcsIFsxNjNdXSwgWydwcmFwJywgWzEwOTM1XV0sIFsnUHInLCBbMTA5MzldXSwgWydwcicsIFs4ODI2XV0sIFsncHJjdWUnLCBbODgyOF1dLCBbJ3ByZWNhcHByb3gnLCBbMTA5MzVdXSwgWydwcmVjJywgWzg4MjZdXSwgWydwcmVjY3VybHllcScsIFs4ODI4XV0sIFsnUHJlY2VkZXMnLCBbODgyNl1dLCBbJ1ByZWNlZGVzRXF1YWwnLCBbMTA5MjddXSwgWydQcmVjZWRlc1NsYW50RXF1YWwnLCBbODgyOF1dLCBbJ1ByZWNlZGVzVGlsZGUnLCBbODgzMF1dLCBbJ3ByZWNlcScsIFsxMDkyN11dLCBbJ3ByZWNuYXBwcm94JywgWzEwOTM3XV0sIFsncHJlY25lcXEnLCBbMTA5MzNdXSwgWydwcmVjbnNpbScsIFs4OTM2XV0sIFsncHJlJywgWzEwOTI3XV0sIFsncHJFJywgWzEwOTMxXV0sIFsncHJlY3NpbScsIFs4ODMwXV0sIFsncHJpbWUnLCBbODI0Ml1dLCBbJ1ByaW1lJywgWzgyNDNdXSwgWydwcmltZXMnLCBbODQ3M11dLCBbJ3BybmFwJywgWzEwOTM3XV0sIFsncHJuRScsIFsxMDkzM11dLCBbJ3BybnNpbScsIFs4OTM2XV0sIFsncHJvZCcsIFs4NzE5XV0sIFsnUHJvZHVjdCcsIFs4NzE5XV0sIFsncHJvZmFsYXInLCBbOTAwNl1dLCBbJ3Byb2ZsaW5lJywgWzg5NzhdXSwgWydwcm9mc3VyZicsIFs4OTc5XV0sIFsncHJvcCcsIFs4NzMzXV0sIFsnUHJvcG9ydGlvbmFsJywgWzg3MzNdXSwgWydQcm9wb3J0aW9uJywgWzg3NTldXSwgWydwcm9wdG8nLCBbODczM11dLCBbJ3Byc2ltJywgWzg4MzBdXSwgWydwcnVyZWwnLCBbODg4MF1dLCBbJ1BzY3InLCBbMTE5OTc5XV0sIFsncHNjcicsIFsxMjAwMDVdXSwgWydQc2knLCBbOTM2XV0sIFsncHNpJywgWzk2OF1dLCBbJ3B1bmNzcCcsIFs4MjAwXV0sIFsnUWZyJywgWzEyMDA4NF1dLCBbJ3FmcicsIFsxMjAxMTBdXSwgWydxaW50JywgWzEwNzY0XV0sIFsncW9wZicsIFsxMjAxNjJdXSwgWydRb3BmJywgWzg0NzRdXSwgWydxcHJpbWUnLCBbODI3OV1dLCBbJ1FzY3InLCBbMTE5OTgwXV0sIFsncXNjcicsIFsxMjAwMDZdXSwgWydxdWF0ZXJuaW9ucycsIFs4NDYxXV0sIFsncXVhdGludCcsIFsxMDc3NF1dLCBbJ3F1ZXN0JywgWzYzXV0sIFsncXVlc3RlcScsIFs4Nzk5XV0sIFsncXVvdCcsIFszNF1dLCBbJ1FVT1QnLCBbMzRdXSwgWydyQWFycicsIFs4NjY3XV0sIFsncmFjZScsIFs4NzY1LCA4MTddXSwgWydSYWN1dGUnLCBbMzQwXV0sIFsncmFjdXRlJywgWzM0MV1dLCBbJ3JhZGljJywgWzg3MzBdXSwgWydyYWVtcHR5dicsIFsxMDY3NV1dLCBbJ3JhbmcnLCBbMTAyMTddXSwgWydSYW5nJywgWzEwMjE5XV0sIFsncmFuZ2QnLCBbMTA2NDJdXSwgWydyYW5nZScsIFsxMDY2MV1dLCBbJ3JhbmdsZScsIFsxMDIxN11dLCBbJ3JhcXVvJywgWzE4N11dLCBbJ3JhcnJhcCcsIFsxMDYxM11dLCBbJ3JhcnJiJywgWzg2NzddXSwgWydyYXJyYmZzJywgWzEwNTI4XV0sIFsncmFycmMnLCBbMTA1NDddXSwgWydyYXJyJywgWzg1OTRdXSwgWydSYXJyJywgWzg2MDhdXSwgWydyQXJyJywgWzg2NThdXSwgWydyYXJyZnMnLCBbMTA1MjZdXSwgWydyYXJyaGsnLCBbODYxOF1dLCBbJ3JhcnJscCcsIFs4NjIwXV0sIFsncmFycnBsJywgWzEwNTY1XV0sIFsncmFycnNpbScsIFsxMDYxMl1dLCBbJ1JhcnJ0bCcsIFsxMDUxOF1dLCBbJ3JhcnJ0bCcsIFs4NjExXV0sIFsncmFycncnLCBbODYwNV1dLCBbJ3JhdGFpbCcsIFsxMDUyMl1dLCBbJ3JBdGFpbCcsIFsxMDUyNF1dLCBbJ3JhdGlvJywgWzg3NThdXSwgWydyYXRpb25hbHMnLCBbODQ3NF1dLCBbJ3JiYXJyJywgWzEwNTA5XV0sIFsnckJhcnInLCBbMTA1MTFdXSwgWydSQmFycicsIFsxMDUxMl1dLCBbJ3JiYnJrJywgWzEwMDk5XV0sIFsncmJyYWNlJywgWzEyNV1dLCBbJ3JicmFjaycsIFs5M11dLCBbJ3JicmtlJywgWzEwNjM2XV0sIFsncmJya3NsZCcsIFsxMDYzOF1dLCBbJ3JicmtzbHUnLCBbMTA2NDBdXSwgWydSY2Fyb24nLCBbMzQ0XV0sIFsncmNhcm9uJywgWzM0NV1dLCBbJ1JjZWRpbCcsIFszNDJdXSwgWydyY2VkaWwnLCBbMzQzXV0sIFsncmNlaWwnLCBbODk2OV1dLCBbJ3JjdWInLCBbMTI1XV0sIFsnUmN5JywgWzEwNTZdXSwgWydyY3knLCBbMTA4OF1dLCBbJ3JkY2EnLCBbMTA1NTFdXSwgWydyZGxkaGFyJywgWzEwNjAxXV0sIFsncmRxdW8nLCBbODIyMV1dLCBbJ3JkcXVvcicsIFs4MjIxXV0sIFsnQ2xvc2VDdXJseURvdWJsZVF1b3RlJywgWzgyMjFdXSwgWydyZHNoJywgWzg2MjddXSwgWydyZWFsJywgWzg0NzZdXSwgWydyZWFsaW5lJywgWzg0NzVdXSwgWydyZWFscGFydCcsIFs4NDc2XV0sIFsncmVhbHMnLCBbODQ3N11dLCBbJ1JlJywgWzg0NzZdXSwgWydyZWN0JywgWzk2NDVdXSwgWydyZWcnLCBbMTc0XV0sIFsnUkVHJywgWzE3NF1dLCBbJ1JldmVyc2VFbGVtZW50JywgWzg3MTVdXSwgWydSZXZlcnNlRXF1aWxpYnJpdW0nLCBbODY1MV1dLCBbJ1JldmVyc2VVcEVxdWlsaWJyaXVtJywgWzEwNjA3XV0sIFsncmZpc2h0JywgWzEwNjIxXV0sIFsncmZsb29yJywgWzg5NzFdXSwgWydyZnInLCBbMTIwMTExXV0sIFsnUmZyJywgWzg0NzZdXSwgWydySGFyJywgWzEwNTk2XV0sIFsncmhhcmQnLCBbODY0MV1dLCBbJ3JoYXJ1JywgWzg2NDBdXSwgWydyaGFydWwnLCBbMTA2MDRdXSwgWydSaG8nLCBbOTI5XV0sIFsncmhvJywgWzk2MV1dLCBbJ3Job3YnLCBbMTAwOV1dLCBbJ1JpZ2h0QW5nbGVCcmFja2V0JywgWzEwMjE3XV0sIFsnUmlnaHRBcnJvd0JhcicsIFs4Njc3XV0sIFsncmlnaHRhcnJvdycsIFs4NTk0XV0sIFsnUmlnaHRBcnJvdycsIFs4NTk0XV0sIFsnUmlnaHRhcnJvdycsIFs4NjU4XV0sIFsnUmlnaHRBcnJvd0xlZnRBcnJvdycsIFs4NjQ0XV0sIFsncmlnaHRhcnJvd3RhaWwnLCBbODYxMV1dLCBbJ1JpZ2h0Q2VpbGluZycsIFs4OTY5XV0sIFsnUmlnaHREb3VibGVCcmFja2V0JywgWzEwMjE1XV0sIFsnUmlnaHREb3duVGVlVmVjdG9yJywgWzEwNTg5XV0sIFsnUmlnaHREb3duVmVjdG9yQmFyJywgWzEwNTgxXV0sIFsnUmlnaHREb3duVmVjdG9yJywgWzg2NDJdXSwgWydSaWdodEZsb29yJywgWzg5NzFdXSwgWydyaWdodGhhcnBvb25kb3duJywgWzg2NDFdXSwgWydyaWdodGhhcnBvb251cCcsIFs4NjQwXV0sIFsncmlnaHRsZWZ0YXJyb3dzJywgWzg2NDRdXSwgWydyaWdodGxlZnRoYXJwb29ucycsIFs4NjUyXV0sIFsncmlnaHRyaWdodGFycm93cycsIFs4NjQ5XV0sIFsncmlnaHRzcXVpZ2Fycm93JywgWzg2MDVdXSwgWydSaWdodFRlZUFycm93JywgWzg2MTRdXSwgWydSaWdodFRlZScsIFs4ODY2XV0sIFsnUmlnaHRUZWVWZWN0b3InLCBbMTA1ODddXSwgWydyaWdodHRocmVldGltZXMnLCBbODkwOF1dLCBbJ1JpZ2h0VHJpYW5nbGVCYXInLCBbMTA3MDRdXSwgWydSaWdodFRyaWFuZ2xlJywgWzg4ODNdXSwgWydSaWdodFRyaWFuZ2xlRXF1YWwnLCBbODg4NV1dLCBbJ1JpZ2h0VXBEb3duVmVjdG9yJywgWzEwNTc1XV0sIFsnUmlnaHRVcFRlZVZlY3RvcicsIFsxMDU4OF1dLCBbJ1JpZ2h0VXBWZWN0b3JCYXInLCBbMTA1ODBdXSwgWydSaWdodFVwVmVjdG9yJywgWzg2MzhdXSwgWydSaWdodFZlY3RvckJhcicsIFsxMDU3OV1dLCBbJ1JpZ2h0VmVjdG9yJywgWzg2NDBdXSwgWydyaW5nJywgWzczMF1dLCBbJ3Jpc2luZ2RvdHNlcScsIFs4Nzg3XV0sIFsncmxhcnInLCBbODY0NF1dLCBbJ3JsaGFyJywgWzg2NTJdXSwgWydybG0nLCBbODIwN11dLCBbJ3Jtb3VzdGFjaGUnLCBbOTEzN11dLCBbJ3Jtb3VzdCcsIFs5MTM3XV0sIFsncm5taWQnLCBbMTA5OTBdXSwgWydyb2FuZycsIFsxMDIyMV1dLCBbJ3JvYXJyJywgWzg3MDJdXSwgWydyb2JyaycsIFsxMDIxNV1dLCBbJ3JvcGFyJywgWzEwNjMwXV0sIFsncm9wZicsIFsxMjAxNjNdXSwgWydSb3BmJywgWzg0NzddXSwgWydyb3BsdXMnLCBbMTA3OThdXSwgWydyb3RpbWVzJywgWzEwODA1XV0sIFsnUm91bmRJbXBsaWVzJywgWzEwNjA4XV0sIFsncnBhcicsIFs0MV1dLCBbJ3JwYXJndCcsIFsxMDY0NF1dLCBbJ3JwcG9saW50JywgWzEwNzcwXV0sIFsncnJhcnInLCBbODY0OV1dLCBbJ1JyaWdodGFycm93JywgWzg2NjddXSwgWydyc2FxdW8nLCBbODI1MF1dLCBbJ3JzY3InLCBbMTIwMDA3XV0sIFsnUnNjcicsIFs4NDc1XV0sIFsncnNoJywgWzg2MjVdXSwgWydSc2gnLCBbODYyNV1dLCBbJ3JzcWInLCBbOTNdXSwgWydyc3F1bycsIFs4MjE3XV0sIFsncnNxdW9yJywgWzgyMTddXSwgWydDbG9zZUN1cmx5UXVvdGUnLCBbODIxN11dLCBbJ3J0aHJlZScsIFs4OTA4XV0sIFsncnRpbWVzJywgWzg5MDZdXSwgWydydHJpJywgWzk2NTddXSwgWydydHJpZScsIFs4ODg1XV0sIFsncnRyaWYnLCBbOTY1Nl1dLCBbJ3J0cmlsdHJpJywgWzEwNzAyXV0sIFsnUnVsZURlbGF5ZWQnLCBbMTA3NDBdXSwgWydydWx1aGFyJywgWzEwNjAwXV0sIFsncngnLCBbODQ3OF1dLCBbJ1NhY3V0ZScsIFszNDZdXSwgWydzYWN1dGUnLCBbMzQ3XV0sIFsnc2JxdW8nLCBbODIxOF1dLCBbJ3NjYXAnLCBbMTA5MzZdXSwgWydTY2Fyb24nLCBbMzUyXV0sIFsnc2Nhcm9uJywgWzM1M11dLCBbJ1NjJywgWzEwOTQwXV0sIFsnc2MnLCBbODgyN11dLCBbJ3NjY3VlJywgWzg4MjldXSwgWydzY2UnLCBbMTA5MjhdXSwgWydzY0UnLCBbMTA5MzJdXSwgWydTY2VkaWwnLCBbMzUwXV0sIFsnc2NlZGlsJywgWzM1MV1dLCBbJ1NjaXJjJywgWzM0OF1dLCBbJ3NjaXJjJywgWzM0OV1dLCBbJ3NjbmFwJywgWzEwOTM4XV0sIFsnc2NuRScsIFsxMDkzNF1dLCBbJ3NjbnNpbScsIFs4OTM3XV0sIFsnc2Nwb2xpbnQnLCBbMTA3NzFdXSwgWydzY3NpbScsIFs4ODMxXV0sIFsnU2N5JywgWzEwNTddXSwgWydzY3knLCBbMTA4OV1dLCBbJ3Nkb3RiJywgWzg4NjVdXSwgWydzZG90JywgWzg5MDFdXSwgWydzZG90ZScsIFsxMDg1NF1dLCBbJ3NlYXJoaycsIFsxMDUzM11dLCBbJ3NlYXJyJywgWzg2MDBdXSwgWydzZUFycicsIFs4NjY0XV0sIFsnc2VhcnJvdycsIFs4NjAwXV0sIFsnc2VjdCcsIFsxNjddXSwgWydzZW1pJywgWzU5XV0sIFsnc2Vzd2FyJywgWzEwNTM3XV0sIFsnc2V0bWludXMnLCBbODcyNl1dLCBbJ3NldG1uJywgWzg3MjZdXSwgWydzZXh0JywgWzEwMDM4XV0sIFsnU2ZyJywgWzEyMDA4Nl1dLCBbJ3NmcicsIFsxMjAxMTJdXSwgWydzZnJvd24nLCBbODk5NF1dLCBbJ3NoYXJwJywgWzk4MzldXSwgWydTSENIY3knLCBbMTA2NV1dLCBbJ3NoY2hjeScsIFsxMDk3XV0sIFsnU0hjeScsIFsxMDY0XV0sIFsnc2hjeScsIFsxMDk2XV0sIFsnU2hvcnREb3duQXJyb3cnLCBbODU5NV1dLCBbJ1Nob3J0TGVmdEFycm93JywgWzg1OTJdXSwgWydzaG9ydG1pZCcsIFs4NzM5XV0sIFsnc2hvcnRwYXJhbGxlbCcsIFs4NzQxXV0sIFsnU2hvcnRSaWdodEFycm93JywgWzg1OTRdXSwgWydTaG9ydFVwQXJyb3cnLCBbODU5M11dLCBbJ3NoeScsIFsxNzNdXSwgWydTaWdtYScsIFs5MzFdXSwgWydzaWdtYScsIFs5NjNdXSwgWydzaWdtYWYnLCBbOTYyXV0sIFsnc2lnbWF2JywgWzk2Ml1dLCBbJ3NpbScsIFs4NzY0XV0sIFsnc2ltZG90JywgWzEwODU4XV0sIFsnc2ltZScsIFs4NzcxXV0sIFsnc2ltZXEnLCBbODc3MV1dLCBbJ3NpbWcnLCBbMTA5MTBdXSwgWydzaW1nRScsIFsxMDkxMl1dLCBbJ3NpbWwnLCBbMTA5MDldXSwgWydzaW1sRScsIFsxMDkxMV1dLCBbJ3NpbW5lJywgWzg3NzRdXSwgWydzaW1wbHVzJywgWzEwNzg4XV0sIFsnc2ltcmFycicsIFsxMDYxMF1dLCBbJ3NsYXJyJywgWzg1OTJdXSwgWydTbWFsbENpcmNsZScsIFs4NzI4XV0sIFsnc21hbGxzZXRtaW51cycsIFs4NzI2XV0sIFsnc21hc2hwJywgWzEwODAzXV0sIFsnc21lcGFyc2wnLCBbMTA3MjRdXSwgWydzbWlkJywgWzg3MzldXSwgWydzbWlsZScsIFs4OTk1XV0sIFsnc210JywgWzEwOTIyXV0sIFsnc210ZScsIFsxMDkyNF1dLCBbJ3NtdGVzJywgWzEwOTI0LCA2NTAyNF1dLCBbJ1NPRlRjeScsIFsxMDY4XV0sIFsnc29mdGN5JywgWzExMDBdXSwgWydzb2xiYXInLCBbOTAyM11dLCBbJ3NvbGInLCBbMTA2OTJdXSwgWydzb2wnLCBbNDddXSwgWydTb3BmJywgWzEyMDEzOF1dLCBbJ3NvcGYnLCBbMTIwMTY0XV0sIFsnc3BhZGVzJywgWzk4MjRdXSwgWydzcGFkZXN1aXQnLCBbOTgyNF1dLCBbJ3NwYXInLCBbODc0MV1dLCBbJ3NxY2FwJywgWzg4NTFdXSwgWydzcWNhcHMnLCBbODg1MSwgNjUwMjRdXSwgWydzcWN1cCcsIFs4ODUyXV0sIFsnc3FjdXBzJywgWzg4NTIsIDY1MDI0XV0sIFsnU3FydCcsIFs4NzMwXV0sIFsnc3FzdWInLCBbODg0N11dLCBbJ3Nxc3ViZScsIFs4ODQ5XV0sIFsnc3FzdWJzZXQnLCBbODg0N11dLCBbJ3Nxc3Vic2V0ZXEnLCBbODg0OV1dLCBbJ3Nxc3VwJywgWzg4NDhdXSwgWydzcXN1cGUnLCBbODg1MF1dLCBbJ3Nxc3Vwc2V0JywgWzg4NDhdXSwgWydzcXN1cHNldGVxJywgWzg4NTBdXSwgWydzcXVhcmUnLCBbOTYzM11dLCBbJ1NxdWFyZScsIFs5NjMzXV0sIFsnU3F1YXJlSW50ZXJzZWN0aW9uJywgWzg4NTFdXSwgWydTcXVhcmVTdWJzZXQnLCBbODg0N11dLCBbJ1NxdWFyZVN1YnNldEVxdWFsJywgWzg4NDldXSwgWydTcXVhcmVTdXBlcnNldCcsIFs4ODQ4XV0sIFsnU3F1YXJlU3VwZXJzZXRFcXVhbCcsIFs4ODUwXV0sIFsnU3F1YXJlVW5pb24nLCBbODg1Ml1dLCBbJ3NxdWFyZicsIFs5NjQyXV0sIFsnc3F1JywgWzk2MzNdXSwgWydzcXVmJywgWzk2NDJdXSwgWydzcmFycicsIFs4NTk0XV0sIFsnU3NjcicsIFsxMTk5ODJdXSwgWydzc2NyJywgWzEyMDAwOF1dLCBbJ3NzZXRtbicsIFs4NzI2XV0sIFsnc3NtaWxlJywgWzg5OTVdXSwgWydzc3RhcmYnLCBbODkwMl1dLCBbJ1N0YXInLCBbODkwMl1dLCBbJ3N0YXInLCBbOTczNF1dLCBbJ3N0YXJmJywgWzk3MzNdXSwgWydzdHJhaWdodGVwc2lsb24nLCBbMTAxM11dLCBbJ3N0cmFpZ2h0cGhpJywgWzk4MV1dLCBbJ3N0cm5zJywgWzE3NV1dLCBbJ3N1YicsIFs4ODM0XV0sIFsnU3ViJywgWzg5MTJdXSwgWydzdWJkb3QnLCBbMTA5NDFdXSwgWydzdWJFJywgWzEwOTQ5XV0sIFsnc3ViZScsIFs4ODM4XV0sIFsnc3ViZWRvdCcsIFsxMDk0N11dLCBbJ3N1Ym11bHQnLCBbMTA5NDVdXSwgWydzdWJuRScsIFsxMDk1NV1dLCBbJ3N1Ym5lJywgWzg4NDJdXSwgWydzdWJwbHVzJywgWzEwOTQzXV0sIFsnc3VicmFycicsIFsxMDYxN11dLCBbJ3N1YnNldCcsIFs4ODM0XV0sIFsnU3Vic2V0JywgWzg5MTJdXSwgWydzdWJzZXRlcScsIFs4ODM4XV0sIFsnc3Vic2V0ZXFxJywgWzEwOTQ5XV0sIFsnU3Vic2V0RXF1YWwnLCBbODgzOF1dLCBbJ3N1YnNldG5lcScsIFs4ODQyXV0sIFsnc3Vic2V0bmVxcScsIFsxMDk1NV1dLCBbJ3N1YnNpbScsIFsxMDk1MV1dLCBbJ3N1YnN1YicsIFsxMDk2NV1dLCBbJ3N1YnN1cCcsIFsxMDk2M11dLCBbJ3N1Y2NhcHByb3gnLCBbMTA5MzZdXSwgWydzdWNjJywgWzg4MjddXSwgWydzdWNjY3VybHllcScsIFs4ODI5XV0sIFsnU3VjY2VlZHMnLCBbODgyN11dLCBbJ1N1Y2NlZWRzRXF1YWwnLCBbMTA5MjhdXSwgWydTdWNjZWVkc1NsYW50RXF1YWwnLCBbODgyOV1dLCBbJ1N1Y2NlZWRzVGlsZGUnLCBbODgzMV1dLCBbJ3N1Y2NlcScsIFsxMDkyOF1dLCBbJ3N1Y2NuYXBwcm94JywgWzEwOTM4XV0sIFsnc3VjY25lcXEnLCBbMTA5MzRdXSwgWydzdWNjbnNpbScsIFs4OTM3XV0sIFsnc3VjY3NpbScsIFs4ODMxXV0sIFsnU3VjaFRoYXQnLCBbODcxNV1dLCBbJ3N1bScsIFs4NzIxXV0sIFsnU3VtJywgWzg3MjFdXSwgWydzdW5nJywgWzk4MzRdXSwgWydzdXAxJywgWzE4NV1dLCBbJ3N1cDInLCBbMTc4XV0sIFsnc3VwMycsIFsxNzldXSwgWydzdXAnLCBbODgzNV1dLCBbJ1N1cCcsIFs4OTEzXV0sIFsnc3VwZG90JywgWzEwOTQyXV0sIFsnc3VwZHN1YicsIFsxMDk2OF1dLCBbJ3N1cEUnLCBbMTA5NTBdXSwgWydzdXBlJywgWzg4MzldXSwgWydzdXBlZG90JywgWzEwOTQ4XV0sIFsnU3VwZXJzZXQnLCBbODgzNV1dLCBbJ1N1cGVyc2V0RXF1YWwnLCBbODgzOV1dLCBbJ3N1cGhzb2wnLCBbMTAxODVdXSwgWydzdXBoc3ViJywgWzEwOTY3XV0sIFsnc3VwbGFycicsIFsxMDYxOV1dLCBbJ3N1cG11bHQnLCBbMTA5NDZdXSwgWydzdXBuRScsIFsxMDk1Nl1dLCBbJ3N1cG5lJywgWzg4NDNdXSwgWydzdXBwbHVzJywgWzEwOTQ0XV0sIFsnc3Vwc2V0JywgWzg4MzVdXSwgWydTdXBzZXQnLCBbODkxM11dLCBbJ3N1cHNldGVxJywgWzg4MzldXSwgWydzdXBzZXRlcXEnLCBbMTA5NTBdXSwgWydzdXBzZXRuZXEnLCBbODg0M11dLCBbJ3N1cHNldG5lcXEnLCBbMTA5NTZdXSwgWydzdXBzaW0nLCBbMTA5NTJdXSwgWydzdXBzdWInLCBbMTA5NjRdXSwgWydzdXBzdXAnLCBbMTA5NjZdXSwgWydzd2FyaGsnLCBbMTA1MzRdXSwgWydzd2FycicsIFs4NjAxXV0sIFsnc3dBcnInLCBbODY2NV1dLCBbJ3N3YXJyb3cnLCBbODYwMV1dLCBbJ3N3bndhcicsIFsxMDUzOF1dLCBbJ3N6bGlnJywgWzIyM11dLCBbJ1RhYicsIFs5XV0sIFsndGFyZ2V0JywgWzg5ODJdXSwgWydUYXUnLCBbOTMyXV0sIFsndGF1JywgWzk2NF1dLCBbJ3RicmsnLCBbOTE0MF1dLCBbJ1RjYXJvbicsIFszNTZdXSwgWyd0Y2Fyb24nLCBbMzU3XV0sIFsnVGNlZGlsJywgWzM1NF1dLCBbJ3RjZWRpbCcsIFszNTVdXSwgWydUY3knLCBbMTA1OF1dLCBbJ3RjeScsIFsxMDkwXV0sIFsndGRvdCcsIFs4NDExXV0sIFsndGVscmVjJywgWzg5ODFdXSwgWydUZnInLCBbMTIwMDg3XV0sIFsndGZyJywgWzEyMDExM11dLCBbJ3RoZXJlNCcsIFs4NzU2XV0sIFsndGhlcmVmb3JlJywgWzg3NTZdXSwgWydUaGVyZWZvcmUnLCBbODc1Nl1dLCBbJ1RoZXRhJywgWzkyMF1dLCBbJ3RoZXRhJywgWzk1Ml1dLCBbJ3RoZXRhc3ltJywgWzk3N11dLCBbJ3RoZXRhdicsIFs5NzddXSwgWyd0aGlja2FwcHJveCcsIFs4Nzc2XV0sIFsndGhpY2tzaW0nLCBbODc2NF1dLCBbJ1RoaWNrU3BhY2UnLCBbODI4NywgODIwMl1dLCBbJ1RoaW5TcGFjZScsIFs4MjAxXV0sIFsndGhpbnNwJywgWzgyMDFdXSwgWyd0aGthcCcsIFs4Nzc2XV0sIFsndGhrc2ltJywgWzg3NjRdXSwgWydUSE9STicsIFsyMjJdXSwgWyd0aG9ybicsIFsyNTRdXSwgWyd0aWxkZScsIFs3MzJdXSwgWydUaWxkZScsIFs4NzY0XV0sIFsnVGlsZGVFcXVhbCcsIFs4NzcxXV0sIFsnVGlsZGVGdWxsRXF1YWwnLCBbODc3M11dLCBbJ1RpbGRlVGlsZGUnLCBbODc3Nl1dLCBbJ3RpbWVzYmFyJywgWzEwODAxXV0sIFsndGltZXNiJywgWzg4NjRdXSwgWyd0aW1lcycsIFsyMTVdXSwgWyd0aW1lc2QnLCBbMTA4MDBdXSwgWyd0aW50JywgWzg3NDldXSwgWyd0b2VhJywgWzEwNTM2XV0sIFsndG9wYm90JywgWzkwMTRdXSwgWyd0b3BjaXInLCBbMTA5OTNdXSwgWyd0b3AnLCBbODg2OF1dLCBbJ1RvcGYnLCBbMTIwMTM5XV0sIFsndG9wZicsIFsxMjAxNjVdXSwgWyd0b3Bmb3JrJywgWzEwOTcwXV0sIFsndG9zYScsIFsxMDUzN11dLCBbJ3RwcmltZScsIFs4MjQ0XV0sIFsndHJhZGUnLCBbODQ4Ml1dLCBbJ1RSQURFJywgWzg0ODJdXSwgWyd0cmlhbmdsZScsIFs5NjUzXV0sIFsndHJpYW5nbGVkb3duJywgWzk2NjNdXSwgWyd0cmlhbmdsZWxlZnQnLCBbOTY2N11dLCBbJ3RyaWFuZ2xlbGVmdGVxJywgWzg4ODRdXSwgWyd0cmlhbmdsZXEnLCBbODc5Nl1dLCBbJ3RyaWFuZ2xlcmlnaHQnLCBbOTY1N11dLCBbJ3RyaWFuZ2xlcmlnaHRlcScsIFs4ODg1XV0sIFsndHJpZG90JywgWzk3MDhdXSwgWyd0cmllJywgWzg3OTZdXSwgWyd0cmltaW51cycsIFsxMDgxMF1dLCBbJ1RyaXBsZURvdCcsIFs4NDExXV0sIFsndHJpcGx1cycsIFsxMDgwOV1dLCBbJ3RyaXNiJywgWzEwNzAxXV0sIFsndHJpdGltZScsIFsxMDgxMV1dLCBbJ3RycGV6aXVtJywgWzkxODZdXSwgWydUc2NyJywgWzExOTk4M11dLCBbJ3RzY3InLCBbMTIwMDA5XV0sIFsnVFNjeScsIFsxMDYyXV0sIFsndHNjeScsIFsxMDk0XV0sIFsnVFNIY3knLCBbMTAzNV1dLCBbJ3RzaGN5JywgWzExMTVdXSwgWydUc3Ryb2snLCBbMzU4XV0sIFsndHN0cm9rJywgWzM1OV1dLCBbJ3R3aXh0JywgWzg4MTJdXSwgWyd0d29oZWFkbGVmdGFycm93JywgWzg2MDZdXSwgWyd0d29oZWFkcmlnaHRhcnJvdycsIFs4NjA4XV0sIFsnVWFjdXRlJywgWzIxOF1dLCBbJ3VhY3V0ZScsIFsyNTBdXSwgWyd1YXJyJywgWzg1OTNdXSwgWydVYXJyJywgWzg2MDddXSwgWyd1QXJyJywgWzg2NTddXSwgWydVYXJyb2NpcicsIFsxMDU2OV1dLCBbJ1VicmN5JywgWzEwMzhdXSwgWyd1YnJjeScsIFsxMTE4XV0sIFsnVWJyZXZlJywgWzM2NF1dLCBbJ3VicmV2ZScsIFszNjVdXSwgWydVY2lyYycsIFsyMTldXSwgWyd1Y2lyYycsIFsyNTFdXSwgWydVY3knLCBbMTA1OV1dLCBbJ3VjeScsIFsxMDkxXV0sIFsndWRhcnInLCBbODY0NV1dLCBbJ1VkYmxhYycsIFszNjhdXSwgWyd1ZGJsYWMnLCBbMzY5XV0sIFsndWRoYXInLCBbMTA2MDZdXSwgWyd1ZmlzaHQnLCBbMTA2MjJdXSwgWydVZnInLCBbMTIwMDg4XV0sIFsndWZyJywgWzEyMDExNF1dLCBbJ1VncmF2ZScsIFsyMTddXSwgWyd1Z3JhdmUnLCBbMjQ5XV0sIFsndUhhcicsIFsxMDU5NV1dLCBbJ3VoYXJsJywgWzg2MzldXSwgWyd1aGFycicsIFs4NjM4XV0sIFsndWhibGsnLCBbOTYwMF1dLCBbJ3VsY29ybicsIFs4OTg4XV0sIFsndWxjb3JuZXInLCBbODk4OF1dLCBbJ3VsY3JvcCcsIFs4OTc1XV0sIFsndWx0cmknLCBbOTcyMF1dLCBbJ1VtYWNyJywgWzM2Ml1dLCBbJ3VtYWNyJywgWzM2M11dLCBbJ3VtbCcsIFsxNjhdXSwgWydVbmRlckJhcicsIFs5NV1dLCBbJ1VuZGVyQnJhY2UnLCBbOTE4M11dLCBbJ1VuZGVyQnJhY2tldCcsIFs5MTQxXV0sIFsnVW5kZXJQYXJlbnRoZXNpcycsIFs5MTgxXV0sIFsnVW5pb24nLCBbODg5OV1dLCBbJ1VuaW9uUGx1cycsIFs4ODQ2XV0sIFsnVW9nb24nLCBbMzcwXV0sIFsndW9nb24nLCBbMzcxXV0sIFsnVW9wZicsIFsxMjAxNDBdXSwgWyd1b3BmJywgWzEyMDE2Nl1dLCBbJ1VwQXJyb3dCYXInLCBbMTA1MTRdXSwgWyd1cGFycm93JywgWzg1OTNdXSwgWydVcEFycm93JywgWzg1OTNdXSwgWydVcGFycm93JywgWzg2NTddXSwgWydVcEFycm93RG93bkFycm93JywgWzg2NDVdXSwgWyd1cGRvd25hcnJvdycsIFs4NTk3XV0sIFsnVXBEb3duQXJyb3cnLCBbODU5N11dLCBbJ1VwZG93bmFycm93JywgWzg2NjFdXSwgWydVcEVxdWlsaWJyaXVtJywgWzEwNjA2XV0sIFsndXBoYXJwb29ubGVmdCcsIFs4NjM5XV0sIFsndXBoYXJwb29ucmlnaHQnLCBbODYzOF1dLCBbJ3VwbHVzJywgWzg4NDZdXSwgWydVcHBlckxlZnRBcnJvdycsIFs4NTk4XV0sIFsnVXBwZXJSaWdodEFycm93JywgWzg1OTldXSwgWyd1cHNpJywgWzk2NV1dLCBbJ1Vwc2knLCBbOTc4XV0sIFsndXBzaWgnLCBbOTc4XV0sIFsnVXBzaWxvbicsIFs5MzNdXSwgWyd1cHNpbG9uJywgWzk2NV1dLCBbJ1VwVGVlQXJyb3cnLCBbODYxM11dLCBbJ1VwVGVlJywgWzg4NjldXSwgWyd1cHVwYXJyb3dzJywgWzg2NDhdXSwgWyd1cmNvcm4nLCBbODk4OV1dLCBbJ3VyY29ybmVyJywgWzg5ODldXSwgWyd1cmNyb3AnLCBbODk3NF1dLCBbJ1VyaW5nJywgWzM2Nl1dLCBbJ3VyaW5nJywgWzM2N11dLCBbJ3VydHJpJywgWzk3MjFdXSwgWydVc2NyJywgWzExOTk4NF1dLCBbJ3VzY3InLCBbMTIwMDEwXV0sIFsndXRkb3QnLCBbODk0NF1dLCBbJ1V0aWxkZScsIFszNjBdXSwgWyd1dGlsZGUnLCBbMzYxXV0sIFsndXRyaScsIFs5NjUzXV0sIFsndXRyaWYnLCBbOTY1Ml1dLCBbJ3V1YXJyJywgWzg2NDhdXSwgWydVdW1sJywgWzIyMF1dLCBbJ3V1bWwnLCBbMjUyXV0sIFsndXdhbmdsZScsIFsxMDY2M11dLCBbJ3ZhbmdydCcsIFsxMDY1Ml1dLCBbJ3ZhcmVwc2lsb24nLCBbMTAxM11dLCBbJ3ZhcmthcHBhJywgWzEwMDhdXSwgWyd2YXJub3RoaW5nJywgWzg3MDldXSwgWyd2YXJwaGknLCBbOTgxXV0sIFsndmFycGknLCBbOTgyXV0sIFsndmFycHJvcHRvJywgWzg3MzNdXSwgWyd2YXJyJywgWzg1OTddXSwgWyd2QXJyJywgWzg2NjFdXSwgWyd2YXJyaG8nLCBbMTAwOV1dLCBbJ3ZhcnNpZ21hJywgWzk2Ml1dLCBbJ3ZhcnN1YnNldG5lcScsIFs4ODQyLCA2NTAyNF1dLCBbJ3ZhcnN1YnNldG5lcXEnLCBbMTA5NTUsIDY1MDI0XV0sIFsndmFyc3Vwc2V0bmVxJywgWzg4NDMsIDY1MDI0XV0sIFsndmFyc3Vwc2V0bmVxcScsIFsxMDk1NiwgNjUwMjRdXSwgWyd2YXJ0aGV0YScsIFs5NzddXSwgWyd2YXJ0cmlhbmdsZWxlZnQnLCBbODg4Ml1dLCBbJ3ZhcnRyaWFuZ2xlcmlnaHQnLCBbODg4M11dLCBbJ3ZCYXInLCBbMTA5ODRdXSwgWydWYmFyJywgWzEwOTg3XV0sIFsndkJhcnYnLCBbMTA5ODVdXSwgWydWY3knLCBbMTA0Ml1dLCBbJ3ZjeScsIFsxMDc0XV0sIFsndmRhc2gnLCBbODg2Nl1dLCBbJ3ZEYXNoJywgWzg4NzJdXSwgWydWZGFzaCcsIFs4ODczXV0sIFsnVkRhc2gnLCBbODg3NV1dLCBbJ1ZkYXNobCcsIFsxMDk4Ml1dLCBbJ3ZlZWJhcicsIFs4ODkxXV0sIFsndmVlJywgWzg3NDRdXSwgWydWZWUnLCBbODg5N11dLCBbJ3ZlZWVxJywgWzg3OTRdXSwgWyd2ZWxsaXAnLCBbODk0Ml1dLCBbJ3ZlcmJhcicsIFsxMjRdXSwgWydWZXJiYXInLCBbODIxNF1dLCBbJ3ZlcnQnLCBbMTI0XV0sIFsnVmVydCcsIFs4MjE0XV0sIFsnVmVydGljYWxCYXInLCBbODczOV1dLCBbJ1ZlcnRpY2FsTGluZScsIFsxMjRdXSwgWydWZXJ0aWNhbFNlcGFyYXRvcicsIFsxMDA3Ml1dLCBbJ1ZlcnRpY2FsVGlsZGUnLCBbODc2OF1dLCBbJ1ZlcnlUaGluU3BhY2UnLCBbODIwMl1dLCBbJ1ZmcicsIFsxMjAwODldXSwgWyd2ZnInLCBbMTIwMTE1XV0sIFsndmx0cmknLCBbODg4Ml1dLCBbJ3Zuc3ViJywgWzg4MzQsIDg0MDJdXSwgWyd2bnN1cCcsIFs4ODM1LCA4NDAyXV0sIFsnVm9wZicsIFsxMjAxNDFdXSwgWyd2b3BmJywgWzEyMDE2N11dLCBbJ3Zwcm9wJywgWzg3MzNdXSwgWyd2cnRyaScsIFs4ODgzXV0sIFsnVnNjcicsIFsxMTk5ODVdXSwgWyd2c2NyJywgWzEyMDAxMV1dLCBbJ3ZzdWJuRScsIFsxMDk1NSwgNjUwMjRdXSwgWyd2c3VibmUnLCBbODg0MiwgNjUwMjRdXSwgWyd2c3VwbkUnLCBbMTA5NTYsIDY1MDI0XV0sIFsndnN1cG5lJywgWzg4NDMsIDY1MDI0XV0sIFsnVnZkYXNoJywgWzg4NzRdXSwgWyd2emlnemFnJywgWzEwNjUwXV0sIFsnV2NpcmMnLCBbMzcyXV0sIFsnd2NpcmMnLCBbMzczXV0sIFsnd2VkYmFyJywgWzEwODQ3XV0sIFsnd2VkZ2UnLCBbODc0M11dLCBbJ1dlZGdlJywgWzg4OTZdXSwgWyd3ZWRnZXEnLCBbODc5M11dLCBbJ3dlaWVycCcsIFs4NDcyXV0sIFsnV2ZyJywgWzEyMDA5MF1dLCBbJ3dmcicsIFsxMjAxMTZdXSwgWydXb3BmJywgWzEyMDE0Ml1dLCBbJ3dvcGYnLCBbMTIwMTY4XV0sIFsnd3AnLCBbODQ3Ml1dLCBbJ3dyJywgWzg3NjhdXSwgWyd3cmVhdGgnLCBbODc2OF1dLCBbJ1dzY3InLCBbMTE5OTg2XV0sIFsnd3NjcicsIFsxMjAwMTJdXSwgWyd4Y2FwJywgWzg4OThdXSwgWyd4Y2lyYycsIFs5NzExXV0sIFsneGN1cCcsIFs4ODk5XV0sIFsneGR0cmknLCBbOTY2MV1dLCBbJ1hmcicsIFsxMjAwOTFdXSwgWyd4ZnInLCBbMTIwMTE3XV0sIFsneGhhcnInLCBbMTAyMzFdXSwgWyd4aEFycicsIFsxMDIzNF1dLCBbJ1hpJywgWzkyNl1dLCBbJ3hpJywgWzk1OF1dLCBbJ3hsYXJyJywgWzEwMjI5XV0sIFsneGxBcnInLCBbMTAyMzJdXSwgWyd4bWFwJywgWzEwMjM2XV0sIFsneG5pcycsIFs4OTU1XV0sIFsneG9kb3QnLCBbMTA3NTJdXSwgWydYb3BmJywgWzEyMDE0M11dLCBbJ3hvcGYnLCBbMTIwMTY5XV0sIFsneG9wbHVzJywgWzEwNzUzXV0sIFsneG90aW1lJywgWzEwNzU0XV0sIFsneHJhcnInLCBbMTAyMzBdXSwgWyd4ckFycicsIFsxMDIzM11dLCBbJ1hzY3InLCBbMTE5OTg3XV0sIFsneHNjcicsIFsxMjAwMTNdXSwgWyd4c3FjdXAnLCBbMTA3NThdXSwgWyd4dXBsdXMnLCBbMTA3NTZdXSwgWyd4dXRyaScsIFs5NjUxXV0sIFsneHZlZScsIFs4ODk3XV0sIFsneHdlZGdlJywgWzg4OTZdXSwgWydZYWN1dGUnLCBbMjIxXV0sIFsneWFjdXRlJywgWzI1M11dLCBbJ1lBY3knLCBbMTA3MV1dLCBbJ3lhY3knLCBbMTEwM11dLCBbJ1ljaXJjJywgWzM3NF1dLCBbJ3ljaXJjJywgWzM3NV1dLCBbJ1ljeScsIFsxMDY3XV0sIFsneWN5JywgWzEwOTldXSwgWyd5ZW4nLCBbMTY1XV0sIFsnWWZyJywgWzEyMDA5Ml1dLCBbJ3lmcicsIFsxMjAxMThdXSwgWydZSWN5JywgWzEwMzFdXSwgWyd5aWN5JywgWzExMTFdXSwgWydZb3BmJywgWzEyMDE0NF1dLCBbJ3lvcGYnLCBbMTIwMTcwXV0sIFsnWXNjcicsIFsxMTk5ODhdXSwgWyd5c2NyJywgWzEyMDAxNF1dLCBbJ1lVY3knLCBbMTA3MF1dLCBbJ3l1Y3knLCBbMTEwMl1dLCBbJ3l1bWwnLCBbMjU1XV0sIFsnWXVtbCcsIFszNzZdXSwgWydaYWN1dGUnLCBbMzc3XV0sIFsnemFjdXRlJywgWzM3OF1dLCBbJ1pjYXJvbicsIFszODFdXSwgWyd6Y2Fyb24nLCBbMzgyXV0sIFsnWmN5JywgWzEwNDddXSwgWyd6Y3knLCBbMTA3OV1dLCBbJ1pkb3QnLCBbMzc5XV0sIFsnemRvdCcsIFszODBdXSwgWyd6ZWV0cmYnLCBbODQ4OF1dLCBbJ1plcm9XaWR0aFNwYWNlJywgWzgyMDNdXSwgWydaZXRhJywgWzkxOF1dLCBbJ3pldGEnLCBbOTUwXV0sIFsnemZyJywgWzEyMDExOV1dLCBbJ1pmcicsIFs4NDg4XV0sIFsnWkhjeScsIFsxMDQ2XV0sIFsnemhjeScsIFsxMDc4XV0sIFsnemlncmFycicsIFs4NjY5XV0sIFsnem9wZicsIFsxMjAxNzFdXSwgWydab3BmJywgWzg0ODRdXSwgWydac2NyJywgWzExOTk4OV1dLCBbJ3pzY3InLCBbMTIwMDE1XV0sIFsnendqJywgWzgyMDVdXSwgWyd6d25qJywgWzgyMDRdXV07XG52YXIgYWxwaGFJbmRleCA9IHt9O1xudmFyIGNoYXJJbmRleCA9IHt9O1xuY3JlYXRlSW5kZXhlcyhhbHBoYUluZGV4LCBjaGFySW5kZXgpO1xudmFyIEh0bWw1RW50aXRpZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSHRtbDVFbnRpdGllcygpIHtcbiAgICB9XG4gICAgSHRtbDVFbnRpdGllcy5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvJigjP1tcXHdcXGRdKyk7Py9nLCBmdW5jdGlvbiAocywgZW50aXR5KSB7XG4gICAgICAgICAgICB2YXIgY2hyO1xuICAgICAgICAgICAgaWYgKGVudGl0eS5jaGFyQXQoMCkgPT09IFwiI1wiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBlbnRpdHkuY2hhckF0KDEpID09PSAneCcgP1xuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChlbnRpdHkuc3Vic3RyKDIpLnRvTG93ZXJDYXNlKCksIDE2KSA6XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGVudGl0eS5zdWJzdHIoMSkpO1xuICAgICAgICAgICAgICAgIGlmICghKGlzTmFOKGNvZGUpIHx8IGNvZGUgPCAtMzI3NjggfHwgY29kZSA+IDY1NTM1KSkge1xuICAgICAgICAgICAgICAgICAgICBjaHIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNociA9IGFscGhhSW5kZXhbZW50aXR5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaHIgfHwgcztcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBIdG1sNUVudGl0aWVzLmRlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdG1sNUVudGl0aWVzKCkuZGVjb2RlKHN0cik7XG4gICAgfTtcbiAgICBIdG1sNUVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHN0ckxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGNoYXJJbmZvID0gY2hhckluZGV4W3N0ci5jaGFyQ29kZUF0KGkpXTtcbiAgICAgICAgICAgIGlmIChjaGFySW5mbykge1xuICAgICAgICAgICAgICAgIHZhciBhbHBoYSA9IGNoYXJJbmZvW3N0ci5jaGFyQ29kZUF0KGkgKyAxKV07XG4gICAgICAgICAgICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFscGhhID0gY2hhckluZm9bJyddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWxwaGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiJlwiICsgYWxwaGEgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgSHRtbDVFbnRpdGllcy5lbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbDVFbnRpdGllcygpLmVuY29kZShzdHIpO1xuICAgIH07XG4gICAgSHRtbDVFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlTm9uVVRGID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICB2YXIgY2hhckluZm8gPSBjaGFySW5kZXhbY107XG4gICAgICAgICAgICBpZiAoY2hhckluZm8pIHtcbiAgICAgICAgICAgICAgICB2YXIgYWxwaGEgPSBjaGFySW5mb1tzdHIuY2hhckNvZGVBdChpICsgMSldO1xuICAgICAgICAgICAgICAgIGlmIChhbHBoYSkge1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbHBoYSA9IGNoYXJJbmZvWycnXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIiZcIiArIGFscGhhICsgXCI7XCI7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPCAzMiB8fCBjID4gMTI2KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBjICsgJzsnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIEh0bWw1RW50aXRpZXMuZW5jb2RlTm9uVVRGID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWw1RW50aXRpZXMoKS5lbmNvZGVOb25VVEYoc3RyKTtcbiAgICB9O1xuICAgIEh0bWw1RW50aXRpZXMucHJvdG90eXBlLmVuY29kZU5vbkFTQ0lJID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoYyA8PSAyNTUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc3RyW2krK107XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIGMgKyAnOyc7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIEh0bWw1RW50aXRpZXMuZW5jb2RlTm9uQVNDSUkgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbDVFbnRpdGllcygpLmVuY29kZU5vbkFTQ0lJKHN0cik7XG4gICAgfTtcbiAgICByZXR1cm4gSHRtbDVFbnRpdGllcztcbn0oKSk7XG5leHBvcnRzLkh0bWw1RW50aXRpZXMgPSBIdG1sNUVudGl0aWVzO1xuZnVuY3Rpb24gY3JlYXRlSW5kZXhlcyhhbHBoYUluZGV4LCBjaGFySW5kZXgpIHtcbiAgICB2YXIgaSA9IEVOVElUSUVTLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHZhciBlID0gRU5USVRJRVNbaV07XG4gICAgICAgIHZhciBhbHBoYSA9IGVbMF07XG4gICAgICAgIHZhciBjaGFycyA9IGVbMV07XG4gICAgICAgIHZhciBjaHIgPSBjaGFyc1swXTtcbiAgICAgICAgdmFyIGFkZENoYXIgPSAoY2hyIDwgMzIgfHwgY2hyID4gMTI2KSB8fCBjaHIgPT09IDYyIHx8IGNociA9PT0gNjAgfHwgY2hyID09PSAzOCB8fCBjaHIgPT09IDM0IHx8IGNociA9PT0gMzk7XG4gICAgICAgIHZhciBjaGFySW5mbyA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGFkZENoYXIpIHtcbiAgICAgICAgICAgIGNoYXJJbmZvID0gY2hhckluZGV4W2Nocl0gPSBjaGFySW5kZXhbY2hyXSB8fCB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhcnNbMV0pIHtcbiAgICAgICAgICAgIHZhciBjaHIyID0gY2hhcnNbMV07XG4gICAgICAgICAgICBhbHBoYUluZGV4W2FscGhhXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyMik7XG4gICAgICAgICAgICBhZGRDaGFyICYmIChjaGFySW5mb1tjaHIyXSA9IGFscGhhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFscGhhSW5kZXhbYWxwaGFdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjaHIpO1xuICAgICAgICAgICAgYWRkQ2hhciAmJiAoY2hhckluZm9bJyddID0gYWxwaGEpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgeG1sX2VudGl0aWVzXzEgPSByZXF1aXJlKFwiLi94bWwtZW50aXRpZXNcIik7XG5leHBvcnRzLlhtbEVudGl0aWVzID0geG1sX2VudGl0aWVzXzEuWG1sRW50aXRpZXM7XG52YXIgaHRtbDRfZW50aXRpZXNfMSA9IHJlcXVpcmUoXCIuL2h0bWw0LWVudGl0aWVzXCIpO1xuZXhwb3J0cy5IdG1sNEVudGl0aWVzID0gaHRtbDRfZW50aXRpZXNfMS5IdG1sNEVudGl0aWVzO1xudmFyIGh0bWw1X2VudGl0aWVzXzEgPSByZXF1aXJlKFwiLi9odG1sNS1lbnRpdGllc1wiKTtcbmV4cG9ydHMuSHRtbDVFbnRpdGllcyA9IGh0bWw1X2VudGl0aWVzXzEuSHRtbDVFbnRpdGllcztcbmV4cG9ydHMuQWxsSHRtbEVudGl0aWVzID0gaHRtbDVfZW50aXRpZXNfMS5IdG1sNUVudGl0aWVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQUxQSEFfSU5ERVggPSB7XG4gICAgJyZsdCc6ICc8JyxcbiAgICAnJmd0JzogJz4nLFxuICAgICcmcXVvdCc6ICdcIicsXG4gICAgJyZhcG9zJzogJ1xcJycsXG4gICAgJyZhbXAnOiAnJicsXG4gICAgJyZsdDsnOiAnPCcsXG4gICAgJyZndDsnOiAnPicsXG4gICAgJyZxdW90Oyc6ICdcIicsXG4gICAgJyZhcG9zOyc6ICdcXCcnLFxuICAgICcmYW1wOyc6ICcmJ1xufTtcbnZhciBDSEFSX0lOREVYID0ge1xuICAgIDYwOiAnbHQnLFxuICAgIDYyOiAnZ3QnLFxuICAgIDM0OiAncXVvdCcsXG4gICAgMzk6ICdhcG9zJyxcbiAgICAzODogJ2FtcCdcbn07XG52YXIgQ0hBUl9TX0lOREVYID0ge1xuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgICdcXCcnOiAnJmFwb3M7JyxcbiAgICAnJic6ICcmYW1wOydcbn07XG52YXIgWG1sRW50aXRpZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gWG1sRW50aXRpZXMoKSB7XG4gICAgfVxuICAgIFhtbEVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bPD5cIicmXS9nLCBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIENIQVJfU19JTkRFWFtzXTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBYbWxFbnRpdGllcy5lbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgWG1sRW50aXRpZXMoKS5lbmNvZGUoc3RyKTtcbiAgICB9O1xuICAgIFhtbEVudGl0aWVzLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mIz9bMC05YS16QS1aXSs7Py9nLCBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgaWYgKHMuY2hhckF0KDEpID09PSAnIycpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IHMuY2hhckF0KDIpLnRvTG93ZXJDYXNlKCkgPT09ICd4JyA/XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHMuc3Vic3RyKDMpLCAxNikgOlxuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChzLnN1YnN0cigyKSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKGNvZGUpIHx8IGNvZGUgPCAtMzI3NjggfHwgY29kZSA+IDY1NTM1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gQUxQSEFfSU5ERVhbc10gfHwgcztcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBYbWxFbnRpdGllcy5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgWG1sRW50aXRpZXMoKS5kZWNvZGUoc3RyKTtcbiAgICB9O1xuICAgIFhtbEVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGVOb25VVEYgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHN0ckxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIHZhciBhbHBoYSA9IENIQVJfSU5ERVhbY107XG4gICAgICAgICAgICBpZiAoYWxwaGEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCImXCIgKyBhbHBoYSArIFwiO1wiO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjIDwgMzIgfHwgYyA+IDEyNikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgYyArICc7JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBYbWxFbnRpdGllcy5lbmNvZGVOb25VVEYgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgWG1sRW50aXRpZXMoKS5lbmNvZGVOb25VVEYoc3RyKTtcbiAgICB9O1xuICAgIFhtbEVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGVOb25BU0NJSSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyTGVuZ2h0ID0gc3RyLmxlbmd0aDtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgc3RyTGVuZ2h0KSB7XG4gICAgICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgaWYgKGMgPD0gMjU1KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0cltpKytdO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBjICsgJzsnO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBYbWxFbnRpdGllcy5lbmNvZGVOb25BU0NJSSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBYbWxFbnRpdGllcygpLmVuY29kZU5vbkFTQ0lJKHN0cik7XG4gICAgfTtcbiAgICByZXR1cm4gWG1sRW50aXRpZXM7XG59KCkpO1xuZXhwb3J0cy5YbWxFbnRpdGllcyA9IFhtbEVudGl0aWVzO1xuIiwiLyoqXG4gKiBJZGVudGljb24uanMgMi4zLjNcbiAqIGh0dHA6Ly9naXRodWIuY29tL3N0ZXdhcnRsb3JkL2lkZW50aWNvbi5qc1xuICpcbiAqIFBOR0xpYiByZXF1aXJlZCBmb3IgUE5HIG91dHB1dFxuICogaHR0cDovL3d3dy54YXJnLm9yZy9kb3dubG9hZC9wbmdsaWIuanNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxOCwgU3Rld2FydCBMb3JkXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgQlNEIGxpY2Vuc2VcbiAqIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvYnNkLWxpY2Vuc2UucGhwXG4gKi9cblxuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBQTkdsaWI7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgUE5HbGliID0gcmVxdWlyZSgnLi9wbmdsaWInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBQTkdsaWIgPSB3aW5kb3cuUE5HbGliO1xuICAgIH1cblxuICAgIHZhciBJZGVudGljb24gPSBmdW5jdGlvbihoYXNoLCBvcHRpb25zKXtcbiAgICAgICAgaWYgKHR5cGVvZihoYXNoKSAhPT0gJ3N0cmluZycgfHwgaGFzaC5sZW5ndGggPCAxNSkge1xuICAgICAgICAgICAgdGhyb3cgJ0EgaGFzaCBvZiBhdCBsZWFzdCAxNSBjaGFyYWN0ZXJzIGlzIHJlcXVpcmVkLic7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogWzI0MCwgMjQwLCAyNDAsIDI1NV0sXG4gICAgICAgICAgICBtYXJnaW46ICAgICAwLjA4LFxuICAgICAgICAgICAgc2l6ZTogICAgICAgNjQsXG4gICAgICAgICAgICBzYXR1cmF0aW9uOiAwLjcsXG4gICAgICAgICAgICBicmlnaHRuZXNzOiAwLjUsXG4gICAgICAgICAgICBmb3JtYXQ6ICAgICAncG5nJ1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHR5cGVvZihvcHRpb25zKSA9PT0gJ29iamVjdCcgPyBvcHRpb25zIDogdGhpcy5kZWZhdWx0cztcblxuICAgICAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggb2xkIGNvbnN0cnVjdG9yIChoYXNoLCBzaXplLCBtYXJnaW4pXG4gICAgICAgIGlmICh0eXBlb2YoYXJndW1lbnRzWzFdKSA9PT0gJ251bWJlcicpIHsgdGhpcy5vcHRpb25zLnNpemUgICA9IGFyZ3VtZW50c1sxXTsgfVxuICAgICAgICBpZiAoYXJndW1lbnRzWzJdKSAgICAgICAgICAgICAgICAgICAgICB7IHRoaXMub3B0aW9ucy5tYXJnaW4gPSBhcmd1bWVudHNbMl07IH1cblxuICAgICAgICB0aGlzLmhhc2ggICAgICAgID0gaGFzaFxuICAgICAgICB0aGlzLmJhY2tncm91bmQgID0gdGhpcy5vcHRpb25zLmJhY2tncm91bmQgfHwgdGhpcy5kZWZhdWx0cy5iYWNrZ3JvdW5kO1xuICAgICAgICB0aGlzLnNpemUgICAgICAgID0gdGhpcy5vcHRpb25zLnNpemUgICAgICAgfHwgdGhpcy5kZWZhdWx0cy5zaXplO1xuICAgICAgICB0aGlzLmZvcm1hdCAgICAgID0gdGhpcy5vcHRpb25zLmZvcm1hdCAgICAgfHwgdGhpcy5kZWZhdWx0cy5mb3JtYXQ7XG4gICAgICAgIHRoaXMubWFyZ2luICAgICAgPSB0aGlzLm9wdGlvbnMubWFyZ2luICE9PSB1bmRlZmluZWQgPyB0aGlzLm9wdGlvbnMubWFyZ2luIDogdGhpcy5kZWZhdWx0cy5tYXJnaW47XG5cbiAgICAgICAgLy8gZm9yZWdyb3VuZCBkZWZhdWx0cyB0byBsYXN0IDcgY2hhcnMgYXMgaHVlIGF0IDcwJSBzYXR1cmF0aW9uLCA1MCUgYnJpZ2h0bmVzc1xuICAgICAgICB2YXIgaHVlICAgICAgICAgID0gcGFyc2VJbnQodGhpcy5oYXNoLnN1YnN0cigtNyksIDE2KSAvIDB4ZmZmZmZmZjtcbiAgICAgICAgdmFyIHNhdHVyYXRpb24gICA9IHRoaXMub3B0aW9ucy5zYXR1cmF0aW9uIHx8IHRoaXMuZGVmYXVsdHMuc2F0dXJhdGlvbjtcbiAgICAgICAgdmFyIGJyaWdodG5lc3MgICA9IHRoaXMub3B0aW9ucy5icmlnaHRuZXNzIHx8IHRoaXMuZGVmYXVsdHMuYnJpZ2h0bmVzcztcbiAgICAgICAgdGhpcy5mb3JlZ3JvdW5kICA9IHRoaXMub3B0aW9ucy5mb3JlZ3JvdW5kIHx8IHRoaXMuaHNsMnJnYihodWUsIHNhdHVyYXRpb24sIGJyaWdodG5lc3MpO1xuICAgIH07XG5cbiAgICBJZGVudGljb24ucHJvdG90eXBlID0ge1xuICAgICAgICBiYWNrZ3JvdW5kOiBudWxsLFxuICAgICAgICBmb3JlZ3JvdW5kOiBudWxsLFxuICAgICAgICBoYXNoOiAgICAgICBudWxsLFxuICAgICAgICBtYXJnaW46ICAgICBudWxsLFxuICAgICAgICBzaXplOiAgICAgICBudWxsLFxuICAgICAgICBmb3JtYXQ6ICAgICBudWxsLFxuXG4gICAgICAgIGltYWdlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNTdmcoKVxuICAgICAgICAgICAgICAgID8gbmV3IFN2Zyh0aGlzLnNpemUsIHRoaXMuZm9yZWdyb3VuZCwgdGhpcy5iYWNrZ3JvdW5kKVxuICAgICAgICAgICAgICAgIDogbmV3IFBOR2xpYih0aGlzLnNpemUsIHRoaXMuc2l6ZSwgMjU2KTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgaW1hZ2UgICAgICA9IHRoaXMuaW1hZ2UoKSxcbiAgICAgICAgICAgICAgICBzaXplICAgICAgID0gdGhpcy5zaXplLFxuICAgICAgICAgICAgICAgIGJhc2VNYXJnaW4gPSBNYXRoLmZsb29yKHNpemUgKiB0aGlzLm1hcmdpbiksXG4gICAgICAgICAgICAgICAgY2VsbCAgICAgICA9IE1hdGguZmxvb3IoKHNpemUgLSAoYmFzZU1hcmdpbiAqIDIpKSAvIDUpLFxuICAgICAgICAgICAgICAgIG1hcmdpbiAgICAgPSBNYXRoLmZsb29yKChzaXplIC0gY2VsbCAqIDUpIC8gMiksXG4gICAgICAgICAgICAgICAgYmcgICAgICAgICA9IGltYWdlLmNvbG9yLmFwcGx5KGltYWdlLCB0aGlzLmJhY2tncm91bmQpLFxuICAgICAgICAgICAgICAgIGZnICAgICAgICAgPSBpbWFnZS5jb2xvci5hcHBseShpbWFnZSwgdGhpcy5mb3JlZ3JvdW5kKTtcblxuICAgICAgICAgICAgLy8gdGhlIGZpcnN0IDE1IGNoYXJhY3RlcnMgb2YgdGhlIGhhc2ggY29udHJvbCB0aGUgcGl4ZWxzIChldmVuL29kZClcbiAgICAgICAgICAgIC8vIHRoZXkgYXJlIGRyYXduIGRvd24gdGhlIG1pZGRsZSBmaXJzdCwgdGhlbiBtaXJyb3JlZCBvdXR3YXJkc1xuICAgICAgICAgICAgdmFyIGksIGNvbG9yO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDE1OyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9IHBhcnNlSW50KHRoaXMuaGFzaC5jaGFyQXQoaSksIDE2KSAlIDIgPyBiZyA6IGZnO1xuICAgICAgICAgICAgICAgIGlmIChpIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY3RhbmdsZSgyICogY2VsbCArIG1hcmdpbiwgaSAqIGNlbGwgKyBtYXJnaW4sIGNlbGwsIGNlbGwsIGNvbG9yLCBpbWFnZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpIDwgMTApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWN0YW5nbGUoMSAqIGNlbGwgKyBtYXJnaW4sIChpIC0gNSkgKiBjZWxsICsgbWFyZ2luLCBjZWxsLCBjZWxsLCBjb2xvciwgaW1hZ2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY3RhbmdsZSgzICogY2VsbCArIG1hcmdpbiwgKGkgLSA1KSAqIGNlbGwgKyBtYXJnaW4sIGNlbGwsIGNlbGwsIGNvbG9yLCBpbWFnZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpIDwgMTUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWN0YW5nbGUoMCAqIGNlbGwgKyBtYXJnaW4sIChpIC0gMTApICogY2VsbCArIG1hcmdpbiwgY2VsbCwgY2VsbCwgY29sb3IsIGltYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWN0YW5nbGUoNCAqIGNlbGwgKyBtYXJnaW4sIChpIC0gMTApICogY2VsbCArIG1hcmdpbiwgY2VsbCwgY2VsbCwgY29sb3IsIGltYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBpbWFnZTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWN0YW5nbGU6IGZ1bmN0aW9uKHgsIHksIHcsIGgsIGNvbG9yLCBpbWFnZSl7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1N2ZygpKSB7XG4gICAgICAgICAgICAgICAgaW1hZ2UucmVjdGFuZ2xlcy5wdXNoKHt4OiB4LCB5OiB5LCB3OiB3LCBoOiBoLCBjb2xvcjogY29sb3J9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGksIGo7XG4gICAgICAgICAgICAgICAgZm9yIChpID0geDsgaSA8IHggKyB3OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0geTsgaiA8IHkgKyBoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLmJ1ZmZlcltpbWFnZS5pbmRleChpLCBqKV0gPSBjb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyBhZGFwdGVkIGZyb206IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2FlbWtlaS8xMzI1OTM3XG4gICAgICAgIGhzbDJyZ2I6IGZ1bmN0aW9uKGgsIHMsIGIpe1xuICAgICAgICAgICAgaCAqPSA2O1xuICAgICAgICAgICAgcyA9IFtcbiAgICAgICAgICAgICAgICBiICs9IHMgKj0gYiA8IC41ID8gYiA6IDEgLSBiLFxuICAgICAgICAgICAgICAgIGIgLSBoICUgMSAqIHMgKiAyLFxuICAgICAgICAgICAgICAgIGIgLT0gcyAqPSAyLFxuICAgICAgICAgICAgICAgIGIsXG4gICAgICAgICAgICAgICAgYiArIGggJSAxICogcyxcbiAgICAgICAgICAgICAgICBiICsgc1xuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgcmV0dXJuW1xuICAgICAgICAgICAgICAgIHNbIH5+aCAgICAlIDYgXSAqIDI1NSwgLy8gcmVkXG4gICAgICAgICAgICAgICAgc1sgKGh8MTYpICUgNiBdICogMjU1LCAvLyBncmVlblxuICAgICAgICAgICAgICAgIHNbIChofDgpICAlIDYgXSAqIDI1NSAgLy8gYmx1ZVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSxcblxuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24ocmF3KXtcbiAgICAgICAgICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBvbGQgdG9TdHJpbmcsIGRlZmF1bHQgdG8gYmFzZTY0XG4gICAgICAgICAgICBpZiAocmF3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKCkuZ2V0RHVtcCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIoKS5nZXRCYXNlNjQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBpc1N2ZzogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdC5tYXRjaCgvc3ZnL2kpXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIFN2ZyA9IGZ1bmN0aW9uKHNpemUsIGZvcmVncm91bmQsIGJhY2tncm91bmQpe1xuICAgICAgICB0aGlzLnNpemUgICAgICAgPSBzaXplO1xuICAgICAgICB0aGlzLmZvcmVncm91bmQgPSB0aGlzLmNvbG9yLmFwcGx5KHRoaXMsIGZvcmVncm91bmQpO1xuICAgICAgICB0aGlzLmJhY2tncm91bmQgPSB0aGlzLmNvbG9yLmFwcGx5KHRoaXMsIGJhY2tncm91bmQpO1xuICAgICAgICB0aGlzLnJlY3RhbmdsZXMgPSBbXTtcbiAgICB9O1xuXG4gICAgU3ZnLnByb3RvdHlwZSA9IHtcbiAgICAgICAgc2l6ZTogICAgICAgbnVsbCxcbiAgICAgICAgZm9yZWdyb3VuZDogbnVsbCxcbiAgICAgICAgYmFja2dyb3VuZDogbnVsbCxcbiAgICAgICAgcmVjdGFuZ2xlczogbnVsbCxcblxuICAgICAgICBjb2xvcjogZnVuY3Rpb24ociwgZywgYiwgYSl7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gW3IsIGcsIGJdLm1hcChNYXRoLnJvdW5kKTtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKChhID49IDApICYmIChhIDw9IDI1NSkgPyBhLzI1NSA6IDEpO1xuICAgICAgICAgICAgcmV0dXJuICdyZ2JhKCcgKyB2YWx1ZXMuam9pbignLCcpICsgJyknO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldER1bXA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgeG1sLFxuICAgICAgICAgICAgICAgIHJlY3QsXG4gICAgICAgICAgICAgICAgZmcgICAgID0gdGhpcy5mb3JlZ3JvdW5kLFxuICAgICAgICAgICAgICAgIGJnICAgICA9IHRoaXMuYmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICBzdHJva2UgPSB0aGlzLnNpemUgKiAwLjAwNTtcblxuICAgICAgICAgICAgeG1sID0gXCI8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcIlxuICAgICAgICAgICAgICAgICsgXCIgd2lkdGg9J1wiICsgdGhpcy5zaXplICsgXCInIGhlaWdodD0nXCIgKyB0aGlzLnNpemUgKyBcIidcIlxuICAgICAgICAgICAgICAgICsgXCIgc3R5bGU9J2JhY2tncm91bmQtY29sb3I6XCIgKyBiZyArIFwiOyc+XCJcbiAgICAgICAgICAgICAgICArIFwiPGcgc3R5bGU9J2ZpbGw6XCIgKyBmZyArIFwiOyBzdHJva2U6XCIgKyBmZyArIFwiOyBzdHJva2Utd2lkdGg6XCIgKyBzdHJva2UgKyBcIjsnPlwiO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5yZWN0YW5nbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVjdCA9IHRoaXMucmVjdGFuZ2xlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAocmVjdC5jb2xvciA9PSBiZykgY29udGludWU7XG4gICAgICAgICAgICAgICAgeG1sICs9IFwiPHJlY3QgXCJcbiAgICAgICAgICAgICAgICAgICAgKyBcIiB4PSdcIiAgICAgICsgcmVjdC54ICsgXCInXCJcbiAgICAgICAgICAgICAgICAgICAgKyBcIiB5PSdcIiAgICAgICsgcmVjdC55ICsgXCInXCJcbiAgICAgICAgICAgICAgICAgICAgKyBcIiB3aWR0aD0nXCIgICsgcmVjdC53ICsgXCInXCJcbiAgICAgICAgICAgICAgICAgICAgKyBcIiBoZWlnaHQ9J1wiICsgcmVjdC5oICsgXCInXCJcbiAgICAgICAgICAgICAgICAgICAgKyBcIi8+XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4bWwgKz0gXCI8L2c+PC9zdmc+XCJcblxuICAgICAgICAgICAgcmV0dXJuIHhtbDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRCYXNlNjQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGJ0b2EpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnRvYSh0aGlzLmdldER1bXAoKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQnVmZmVyKHRoaXMuZ2V0RHVtcCgpLCAnYmluYXJ5JykudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyAnQ2Fubm90IGdlbmVyYXRlIGJhc2U2NCBvdXRwdXQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gSWRlbnRpY29uO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5JZGVudGljb24gPSBJZGVudGljb247XG4gICAgfVxufSkoKTtcbiIsIi8qKlxuKiBBIGhhbmR5IGNsYXNzIHRvIGNhbGN1bGF0ZSBjb2xvciB2YWx1ZXMuXG4qXG4qIEB2ZXJzaW9uIDEuMFxuKiBAYXV0aG9yIFJvYmVydCBFaXNlbGUgPHJvYmVydEB4YXJnLm9yZz5cbiogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTAsIFJvYmVydCBFaXNlbGVcbiogQGxpbmsgaHR0cDovL3d3dy54YXJnLm9yZy8yMDEwLzAzL2dlbmVyYXRlLWNsaWVudC1zaWRlLXBuZy1maWxlcy11c2luZy1qYXZhc2NyaXB0L1xuKiBAbGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL2JzZC1saWNlbnNlLnBocCBCU0QgTGljZW5zZVxuKlxuKi9cblxuKGZ1bmN0aW9uKCkge1xuXG5cdC8vIGhlbHBlciBmdW5jdGlvbnMgZm9yIHRoYXQgY3R4XG5cdGZ1bmN0aW9uIHdyaXRlKGJ1ZmZlciwgb2Zmcykge1xuXHRcdGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGFyZ3VtZW50c1tpXS5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRidWZmZXJbb2ZmcysrXSA9IGFyZ3VtZW50c1tpXS5jaGFyQXQoaik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gYnl0ZTIodykge1xuXHRcdHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKCh3ID4+IDgpICYgMjU1LCB3ICYgMjU1KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJ5dGU0KHcpIHtcblx0XHRyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgodyA+PiAyNCkgJiAyNTUsICh3ID4+IDE2KSAmIDI1NSwgKHcgPj4gOCkgJiAyNTUsIHcgJiAyNTUpO1xuXHR9XG5cblx0ZnVuY3Rpb24gYnl0ZTJsc2Iodykge1xuXHRcdHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHcgJiAyNTUsICh3ID4+IDgpICYgMjU1KTtcblx0fVxuXG5cdC8vIG1vZGlmaWVkIGZyb20gb3JpZ2luYWwgc291cmNlIHRvIHN1cHBvcnQgTlBNXG5cdHZhciBQTkdsaWIgPSBmdW5jdGlvbih3aWR0aCxoZWlnaHQsZGVwdGgpIHtcblxuXHRcdHRoaXMud2lkdGggICA9IHdpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ICA9IGhlaWdodDtcblx0XHR0aGlzLmRlcHRoICAgPSBkZXB0aDtcblxuXHRcdC8vIHBpeGVsIGRhdGEgYW5kIHJvdyBmaWx0ZXIgaWRlbnRpZmllciBzaXplXG5cdFx0dGhpcy5waXhfc2l6ZSA9IGhlaWdodCAqICh3aWR0aCArIDEpO1xuXG5cdFx0Ly8gZGVmbGF0ZSBoZWFkZXIsIHBpeF9zaXplLCBibG9jayBoZWFkZXJzLCBhZGxlcjMyIGNoZWNrc3VtXG5cdFx0dGhpcy5kYXRhX3NpemUgPSAyICsgdGhpcy5waXhfc2l6ZSArIDUgKiBNYXRoLmZsb29yKCgweGZmZmUgKyB0aGlzLnBpeF9zaXplKSAvIDB4ZmZmZikgKyA0O1xuXG5cdFx0Ly8gb2Zmc2V0cyBhbmQgc2l6ZXMgb2YgUG5nIGNodW5rc1xuXHRcdHRoaXMuaWhkcl9vZmZzID0gMDtcdFx0XHRcdFx0XHRcdFx0XHQvLyBJSERSIG9mZnNldCBhbmQgc2l6ZVxuXHRcdHRoaXMuaWhkcl9zaXplID0gNCArIDQgKyAxMyArIDQ7XG5cdFx0dGhpcy5wbHRlX29mZnMgPSB0aGlzLmloZHJfb2ZmcyArIHRoaXMuaWhkcl9zaXplO1x0Ly8gUExURSBvZmZzZXQgYW5kIHNpemVcblx0XHR0aGlzLnBsdGVfc2l6ZSA9IDQgKyA0ICsgMyAqIGRlcHRoICsgNDtcblx0XHR0aGlzLnRybnNfb2ZmcyA9IHRoaXMucGx0ZV9vZmZzICsgdGhpcy5wbHRlX3NpemU7XHQvLyB0Uk5TIG9mZnNldCBhbmQgc2l6ZVxuXHRcdHRoaXMudHJuc19zaXplID0gNCArIDQgKyBkZXB0aCArIDQ7XG5cdFx0dGhpcy5pZGF0X29mZnMgPSB0aGlzLnRybnNfb2ZmcyArIHRoaXMudHJuc19zaXplO1x0Ly8gSURBVCBvZmZzZXQgYW5kIHNpemVcblx0XHR0aGlzLmlkYXRfc2l6ZSA9IDQgKyA0ICsgdGhpcy5kYXRhX3NpemUgKyA0O1xuXHRcdHRoaXMuaWVuZF9vZmZzID0gdGhpcy5pZGF0X29mZnMgKyB0aGlzLmlkYXRfc2l6ZTtcdC8vIElFTkQgb2Zmc2V0IGFuZCBzaXplXG5cdFx0dGhpcy5pZW5kX3NpemUgPSA0ICsgNCArIDQ7XG5cdFx0dGhpcy5idWZmZXJfc2l6ZSAgPSB0aGlzLmllbmRfb2ZmcyArIHRoaXMuaWVuZF9zaXplO1x0Ly8gdG90YWwgUE5HIHNpemVcblxuXHRcdHRoaXMuYnVmZmVyICA9IG5ldyBBcnJheSgpO1xuXHRcdHRoaXMucGFsZXR0ZSA9IG5ldyBPYmplY3QoKTtcblx0XHR0aGlzLnBpbmRleCAgPSAwO1xuXG5cdFx0dmFyIF9jcmMzMiA9IG5ldyBBcnJheSgpO1xuXG5cdFx0Ly8gaW5pdGlhbGl6ZSBidWZmZXIgd2l0aCB6ZXJvIGJ5dGVzXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJ1ZmZlcl9zaXplOyBpKyspIHtcblx0XHRcdHRoaXMuYnVmZmVyW2ldID0gXCJcXHgwMFwiO1xuXHRcdH1cblxuXHRcdC8vIGluaXRpYWxpemUgbm9uLXplcm8gZWxlbWVudHNcblx0XHR3cml0ZSh0aGlzLmJ1ZmZlciwgdGhpcy5paGRyX29mZnMsIGJ5dGU0KHRoaXMuaWhkcl9zaXplIC0gMTIpLCAnSUhEUicsIGJ5dGU0KHdpZHRoKSwgYnl0ZTQoaGVpZ2h0KSwgXCJcXHgwOFxceDAzXCIpO1xuXHRcdHdyaXRlKHRoaXMuYnVmZmVyLCB0aGlzLnBsdGVfb2ZmcywgYnl0ZTQodGhpcy5wbHRlX3NpemUgLSAxMiksICdQTFRFJyk7XG5cdFx0d3JpdGUodGhpcy5idWZmZXIsIHRoaXMudHJuc19vZmZzLCBieXRlNCh0aGlzLnRybnNfc2l6ZSAtIDEyKSwgJ3RSTlMnKTtcblx0XHR3cml0ZSh0aGlzLmJ1ZmZlciwgdGhpcy5pZGF0X29mZnMsIGJ5dGU0KHRoaXMuaWRhdF9zaXplIC0gMTIpLCAnSURBVCcpO1xuXHRcdHdyaXRlKHRoaXMuYnVmZmVyLCB0aGlzLmllbmRfb2ZmcywgYnl0ZTQodGhpcy5pZW5kX3NpemUgLSAxMiksICdJRU5EJyk7XG5cblx0XHQvLyBpbml0aWFsaXplIGRlZmxhdGUgaGVhZGVyXG5cdFx0dmFyIGhlYWRlciA9ICgoOCArICg3IDw8IDQpKSA8PCA4KSB8ICgzIDw8IDYpO1xuXHRcdGhlYWRlcis9IDMxIC0gKGhlYWRlciAlIDMxKTtcblxuXHRcdHdyaXRlKHRoaXMuYnVmZmVyLCB0aGlzLmlkYXRfb2ZmcyArIDgsIGJ5dGUyKGhlYWRlcikpO1xuXG5cdFx0Ly8gaW5pdGlhbGl6ZSBkZWZsYXRlIGJsb2NrIGhlYWRlcnNcblx0XHRmb3IgKHZhciBpID0gMDsgKGkgPDwgMTYpIC0gMSA8IHRoaXMucGl4X3NpemU7IGkrKykge1xuXHRcdFx0dmFyIHNpemUsIGJpdHM7XG5cdFx0XHRpZiAoaSArIDB4ZmZmZiA8IHRoaXMucGl4X3NpemUpIHtcblx0XHRcdFx0c2l6ZSA9IDB4ZmZmZjtcblx0XHRcdFx0Yml0cyA9IFwiXFx4MDBcIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNpemUgPSB0aGlzLnBpeF9zaXplIC0gKGkgPDwgMTYpIC0gaTtcblx0XHRcdFx0Yml0cyA9IFwiXFx4MDFcIjtcblx0XHRcdH1cblx0XHRcdHdyaXRlKHRoaXMuYnVmZmVyLCB0aGlzLmlkYXRfb2ZmcyArIDggKyAyICsgKGkgPDwgMTYpICsgKGkgPDwgMiksIGJpdHMsIGJ5dGUybHNiKHNpemUpLCBieXRlMmxzYih+c2l6ZSkpO1xuXHRcdH1cblxuXHRcdC8qIENyZWF0ZSBjcmMzMiBsb29rdXAgdGFibGUgKi9cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG5cdFx0XHR2YXIgYyA9IGk7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IDg7IGorKykge1xuXHRcdFx0XHRpZiAoYyAmIDEpIHtcblx0XHRcdFx0XHRjID0gLTMwNjY3NDkxMiBeICgoYyA+PiAxKSAmIDB4N2ZmZmZmZmYpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGMgPSAoYyA+PiAxKSAmIDB4N2ZmZmZmZmY7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdF9jcmMzMltpXSA9IGM7XG5cdFx0fVxuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgaW5kZXggaW50byBhIHBuZyBmb3IgYSBnaXZlbiBwaXhlbFxuXHRcdHRoaXMuaW5kZXggPSBmdW5jdGlvbih4LHkpIHtcblx0XHRcdHZhciBpID0geSAqICh0aGlzLndpZHRoICsgMSkgKyB4ICsgMTtcblx0XHRcdHZhciBqID0gdGhpcy5pZGF0X29mZnMgKyA4ICsgMiArIDUgKiBNYXRoLmZsb29yKChpIC8gMHhmZmZmKSArIDEpICsgaTtcblx0XHRcdHJldHVybiBqO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgYSBjb2xvciBhbmQgYnVpbGQgdXAgdGhlIHBhbGV0dGVcblx0XHR0aGlzLmNvbG9yID0gZnVuY3Rpb24ocmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEpIHtcblxuXHRcdFx0YWxwaGEgPSBhbHBoYSA+PSAwID8gYWxwaGEgOiAyNTU7XG5cdFx0XHR2YXIgY29sb3IgPSAoKCgoKGFscGhhIDw8IDgpIHwgcmVkKSA8PCA4KSB8IGdyZWVuKSA8PCA4KSB8IGJsdWU7XG5cblx0XHRcdGlmICh0eXBlb2YgdGhpcy5wYWxldHRlW2NvbG9yXSA9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdGlmICh0aGlzLnBpbmRleCA9PSB0aGlzLmRlcHRoKSByZXR1cm4gXCJcXHgwMFwiO1xuXG5cdFx0XHRcdHZhciBuZHggPSB0aGlzLnBsdGVfb2ZmcyArIDggKyAzICogdGhpcy5waW5kZXg7XG5cblx0XHRcdFx0dGhpcy5idWZmZXJbbmR4ICsgMF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHJlZCk7XG5cdFx0XHRcdHRoaXMuYnVmZmVyW25keCArIDFdID0gU3RyaW5nLmZyb21DaGFyQ29kZShncmVlbik7XG5cdFx0XHRcdHRoaXMuYnVmZmVyW25keCArIDJdID0gU3RyaW5nLmZyb21DaGFyQ29kZShibHVlKTtcblx0XHRcdFx0dGhpcy5idWZmZXJbdGhpcy50cm5zX29mZnMrOCt0aGlzLnBpbmRleF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGFscGhhKTtcblxuXHRcdFx0XHR0aGlzLnBhbGV0dGVbY29sb3JdID0gU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLnBpbmRleCsrKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnBhbGV0dGVbY29sb3JdO1xuXHRcdH1cblxuXHRcdC8vIG91dHB1dCBhIFBORyBzdHJpbmcsIEJhc2U2NCBlbmNvZGVkXG5cdFx0dGhpcy5nZXRCYXNlNjQgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHMgPSB0aGlzLmdldER1bXAoKTtcblxuXHRcdFx0dmFyIGNoID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO1xuXHRcdFx0dmFyIGMxLCBjMiwgYzMsIGUxLCBlMiwgZTMsIGU0O1xuXHRcdFx0dmFyIGwgPSBzLmxlbmd0aDtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdHZhciByID0gXCJcIjtcblxuXHRcdFx0ZG8ge1xuXHRcdFx0XHRjMSA9IHMuY2hhckNvZGVBdChpKTtcblx0XHRcdFx0ZTEgPSBjMSA+PiAyO1xuXHRcdFx0XHRjMiA9IHMuY2hhckNvZGVBdChpKzEpO1xuXHRcdFx0XHRlMiA9ICgoYzEgJiAzKSA8PCA0KSB8IChjMiA+PiA0KTtcblx0XHRcdFx0YzMgPSBzLmNoYXJDb2RlQXQoaSsyKTtcblx0XHRcdFx0aWYgKGwgPCBpKzIpIHsgZTMgPSA2NDsgfSBlbHNlIHsgZTMgPSAoKGMyICYgMHhmKSA8PCAyKSB8IChjMyA+PiA2KTsgfVxuXHRcdFx0XHRpZiAobCA8IGkrMykgeyBlNCA9IDY0OyB9IGVsc2UgeyBlNCA9IGMzICYgMHgzZjsgfVxuXHRcdFx0XHRyKz0gY2guY2hhckF0KGUxKSArIGNoLmNoYXJBdChlMikgKyBjaC5jaGFyQXQoZTMpICsgY2guY2hhckF0KGU0KTtcblx0XHRcdH0gd2hpbGUgKChpKz0gMykgPCBsKTtcblx0XHRcdHJldHVybiByO1xuXHRcdH1cblxuXHRcdC8vIG91dHB1dCBhIFBORyBzdHJpbmdcblx0XHR0aGlzLmdldER1bXAgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gY29tcHV0ZSBhZGxlcjMyIG9mIG91dHB1dCBwaXhlbHMgKyByb3cgZmlsdGVyIGJ5dGVzXG5cdFx0XHR2YXIgQkFTRSA9IDY1NTIxOyAvKiBsYXJnZXN0IHByaW1lIHNtYWxsZXIgdGhhbiA2NTUzNiAqL1xuXHRcdFx0dmFyIE5NQVggPSA1NTUyOyAgLyogTk1BWCBpcyB0aGUgbGFyZ2VzdCBuIHN1Y2ggdGhhdCAyNTVuKG4rMSkvMiArIChuKzEpKEJBU0UtMSkgPD0gMl4zMi0xICovXG5cdFx0XHR2YXIgczEgPSAxO1xuXHRcdFx0dmFyIHMyID0gMDtcblx0XHRcdHZhciBuID0gTk1BWDtcblxuXHRcdFx0Zm9yICh2YXIgeSA9IDA7IHkgPCB0aGlzLmhlaWdodDsgeSsrKSB7XG5cdFx0XHRcdGZvciAodmFyIHggPSAtMTsgeCA8IHRoaXMud2lkdGg7IHgrKykge1xuXHRcdFx0XHRcdHMxKz0gdGhpcy5idWZmZXJbdGhpcy5pbmRleCh4LCB5KV0uY2hhckNvZGVBdCgwKTtcblx0XHRcdFx0XHRzMis9IHMxO1xuXHRcdFx0XHRcdGlmICgobi09IDEpID09IDApIHtcblx0XHRcdFx0XHRcdHMxJT0gQkFTRTtcblx0XHRcdFx0XHRcdHMyJT0gQkFTRTtcblx0XHRcdFx0XHRcdG4gPSBOTUFYO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0czElPSBCQVNFO1xuXHRcdFx0czIlPSBCQVNFO1xuXHRcdFx0d3JpdGUodGhpcy5idWZmZXIsIHRoaXMuaWRhdF9vZmZzICsgdGhpcy5pZGF0X3NpemUgLSA4LCBieXRlNCgoczIgPDwgMTYpIHwgczEpKTtcblxuXHRcdFx0Ly8gY29tcHV0ZSBjcmMzMiBvZiB0aGUgUE5HIGNodW5rc1xuXHRcdFx0ZnVuY3Rpb24gY3JjMzIocG5nLCBvZmZzLCBzaXplKSB7XG5cdFx0XHRcdHZhciBjcmMgPSAtMTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDQ7IGkgPCBzaXplLTQ7IGkgKz0gMSkge1xuXHRcdFx0XHRcdGNyYyA9IF9jcmMzMlsoY3JjIF4gcG5nW29mZnMraV0uY2hhckNvZGVBdCgwKSkgJiAweGZmXSBeICgoY3JjID4+IDgpICYgMHgwMGZmZmZmZik7XG5cdFx0XHRcdH1cblx0XHRcdFx0d3JpdGUocG5nLCBvZmZzK3NpemUtNCwgYnl0ZTQoY3JjIF4gLTEpKTtcblx0XHRcdH1cblxuXHRcdFx0Y3JjMzIodGhpcy5idWZmZXIsIHRoaXMuaWhkcl9vZmZzLCB0aGlzLmloZHJfc2l6ZSk7XG5cdFx0XHRjcmMzMih0aGlzLmJ1ZmZlciwgdGhpcy5wbHRlX29mZnMsIHRoaXMucGx0ZV9zaXplKTtcblx0XHRcdGNyYzMyKHRoaXMuYnVmZmVyLCB0aGlzLnRybnNfb2ZmcywgdGhpcy50cm5zX3NpemUpO1xuXHRcdFx0Y3JjMzIodGhpcy5idWZmZXIsIHRoaXMuaWRhdF9vZmZzLCB0aGlzLmlkYXRfc2l6ZSk7XG5cdFx0XHRjcmMzMih0aGlzLmJ1ZmZlciwgdGhpcy5pZW5kX29mZnMsIHRoaXMuaWVuZF9zaXplKTtcblxuXHRcdFx0Ly8gY29udmVydCBQTkcgdG8gc3RyaW5nXG5cdFx0XHRyZXR1cm4gXCJcXHg4OVBOR1xcclxcblxceDFhXFxuXCIrdGhpcy5idWZmZXIuam9pbignJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gbW9kaWZpZWQgZnJvbSBvcmlnaW5hbCBzb3VyY2UgdG8gc3VwcG9ydCBOUE1cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IFBOR2xpYjtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuUE5HbGliID0gUE5HbGliO1xuXHR9XG59KSgpO1xuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU0hBIGZhbWlseSBvZiBoYXNoZXMgLSBkZWZpbmVkIGluIEZJUFMgUFVCIDE4MC00LCBGSVBTIFBVQiAyMDIsXG4gKiBhbmQgU1AgODAwLTE4NSAtIGFzIHdlbGwgYXMgdGhlIGNvcnJlc3BvbmRpbmcgSE1BQyBpbXBsZW1lbnRhdGlvbiBhcyBkZWZpbmVkIGluIEZJUFMgUFVCIDE5OC0xLlxuICpcbiAqIENvcHlyaWdodCAyMDA4LTIwMjAgQnJpYW4gVHVyZWssIDE5OTgtMjAwOSBQYXVsIEpvaG5zdG9uICYgQ29udHJpYnV0b3JzXG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vY2FsaWdhdGlvLmdpdGh1Yi5jb20vanNTSEEvIGZvciBtb3JlIGluZm9ybWF0aW9uXG4gKi9cbmNvbnN0IHQ9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7ZnVuY3Rpb24gbih0LG4sZSxyKXtsZXQgaSxzLG87Y29uc3QgaD1ufHxbMF0sdT0oZT1lfHwwKT4+PjMsdz0tMT09PXI/MzowO2ZvcihpPTA7aTx0Lmxlbmd0aDtpKz0xKW89aSt1LHM9bz4+PjIsaC5sZW5ndGg8PXMmJmgucHVzaCgwKSxoW3NdfD10W2ldPDw4Kih3K3IqKG8lNCkpO3JldHVybnt2YWx1ZTpoLGJpbkxlbjo4KnQubGVuZ3RoK2V9fWZ1bmN0aW9uIGUoZSxyLGkpe3N3aXRjaChyKXtjYXNlXCJVVEY4XCI6Y2FzZVwiVVRGMTZCRVwiOmNhc2VcIlVURjE2TEVcIjpicmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcImVuY29kaW5nIG11c3QgYmUgVVRGOCwgVVRGMTZCRSwgb3IgVVRGMTZMRVwiKX1zd2l0Y2goZSl7Y2FzZVwiSEVYXCI6cmV0dXJuIGZ1bmN0aW9uKHQsbixlKXtyZXR1cm4gZnVuY3Rpb24odCxuLGUscil7bGV0IGkscyxvLGg7aWYoMCE9dC5sZW5ndGglMil0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmcgb2YgSEVYIHR5cGUgbXVzdCBiZSBpbiBieXRlIGluY3JlbWVudHNcIik7Y29uc3QgdT1ufHxbMF0sdz0oZT1lfHwwKT4+PjMsYz0tMT09PXI/MzowO2ZvcihpPTA7aTx0Lmxlbmd0aDtpKz0yKXtpZihzPXBhcnNlSW50KHQuc3Vic3RyKGksMiksMTYpLGlzTmFOKHMpKXRocm93IG5ldyBFcnJvcihcIlN0cmluZyBvZiBIRVggdHlwZSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnNcIik7Zm9yKGg9KGk+Pj4xKSt3LG89aD4+PjI7dS5sZW5ndGg8PW87KXUucHVzaCgwKTt1W29dfD1zPDw4KihjK3IqKGglNCkpfXJldHVybnt2YWx1ZTp1LGJpbkxlbjo0KnQubGVuZ3RoK2V9fSh0LG4sZSxpKX07Y2FzZVwiVEVYVFwiOnJldHVybiBmdW5jdGlvbih0LG4sZSl7cmV0dXJuIGZ1bmN0aW9uKHQsbixlLHIsaSl7bGV0IHMsbyxoLHUsdyxjLGYsYSxsPTA7Y29uc3QgQT1lfHxbMF0sRT0ocj1yfHwwKT4+PjM7aWYoXCJVVEY4XCI9PT1uKWZvcihmPS0xPT09aT8zOjAsaD0wO2g8dC5sZW5ndGg7aCs9MSlmb3Iocz10LmNoYXJDb2RlQXQoaCksbz1bXSwxMjg+cz9vLnB1c2gocyk6MjA0OD5zPyhvLnB1c2goMTkyfHM+Pj42KSxvLnB1c2goMTI4fDYzJnMpKTo1NTI5Nj5zfHw1NzM0NDw9cz9vLnB1c2goMjI0fHM+Pj4xMiwxMjh8cz4+PjYmNjMsMTI4fDYzJnMpOihoKz0xLHM9NjU1MzYrKCgxMDIzJnMpPDwxMHwxMDIzJnQuY2hhckNvZGVBdChoKSksby5wdXNoKDI0MHxzPj4+MTgsMTI4fHM+Pj4xMiY2MywxMjh8cz4+PjYmNjMsMTI4fDYzJnMpKSx1PTA7dTxvLmxlbmd0aDt1Kz0xKXtmb3IoYz1sK0Usdz1jPj4+MjtBLmxlbmd0aDw9dzspQS5wdXNoKDApO0Fbd118PW9bdV08PDgqKGYraSooYyU0KSksbCs9MX1lbHNlIGZvcihmPS0xPT09aT8yOjAsYT1cIlVURjE2TEVcIj09PW4mJjEhPT1pfHxcIlVURjE2TEVcIiE9PW4mJjE9PT1pLGg9MDtoPHQubGVuZ3RoO2grPTEpe2ZvcihzPXQuY2hhckNvZGVBdChoKSwhMD09PWEmJih1PTI1NSZzLHM9dTw8OHxzPj4+OCksYz1sK0Usdz1jPj4+MjtBLmxlbmd0aDw9dzspQS5wdXNoKDApO0Fbd118PXM8PDgqKGYraSooYyU0KSksbCs9Mn1yZXR1cm57dmFsdWU6QSxiaW5MZW46OCpsK3J9fSh0LHIsbixlLGkpfTtjYXNlXCJCNjRcIjpyZXR1cm4gZnVuY3Rpb24obixlLHIpe3JldHVybiBmdW5jdGlvbihuLGUscixpKXtsZXQgcyxvLGgsdSx3LGMsZixhPTA7Y29uc3QgbD1lfHxbMF0sQT0ocj1yfHwwKT4+PjMsRT0tMT09PWk/MzowLEg9bi5pbmRleE9mKFwiPVwiKTtpZigtMT09PW4uc2VhcmNoKC9eW2EtekEtWjAtOT0rL10rJC8pKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2hhcmFjdGVyIGluIGJhc2UtNjQgc3RyaW5nXCIpO2lmKG49bi5yZXBsYWNlKC89L2csXCJcIiksLTEhPT1IJiZIPG4ubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgJz0nIGZvdW5kIGluIGJhc2UtNjQgc3RyaW5nXCIpO2ZvcihvPTA7bzxuLmxlbmd0aDtvKz00KXtmb3Iodz1uLnN1YnN0cihvLDQpLHU9MCxoPTA7aDx3Lmxlbmd0aDtoKz0xKXM9dC5pbmRleE9mKHcuY2hhckF0KGgpKSx1fD1zPDwxOC02Kmg7Zm9yKGg9MDtoPHcubGVuZ3RoLTE7aCs9MSl7Zm9yKGY9YStBLGM9Zj4+PjI7bC5sZW5ndGg8PWM7KWwucHVzaCgwKTtsW2NdfD0odT4+PjE2LTgqaCYyNTUpPDw4KihFK2kqKGYlNCkpLGErPTF9fXJldHVybnt2YWx1ZTpsLGJpbkxlbjo4KmErcn19KG4sZSxyLGkpfTtjYXNlXCJCWVRFU1wiOnJldHVybiBmdW5jdGlvbih0LG4sZSl7cmV0dXJuIGZ1bmN0aW9uKHQsbixlLHIpe2xldCBpLHMsbyxoO2NvbnN0IHU9bnx8WzBdLHc9KGU9ZXx8MCk+Pj4zLGM9LTE9PT1yPzM6MDtmb3Iocz0wO3M8dC5sZW5ndGg7cys9MSlpPXQuY2hhckNvZGVBdChzKSxoPXMrdyxvPWg+Pj4yLHUubGVuZ3RoPD1vJiZ1LnB1c2goMCksdVtvXXw9aTw8OCooYytyKihoJTQpKTtyZXR1cm57dmFsdWU6dSxiaW5MZW46OCp0Lmxlbmd0aCtlfX0odCxuLGUsaSl9O2Nhc2VcIkFSUkFZQlVGRkVSXCI6dHJ5e25ldyBBcnJheUJ1ZmZlcigwKX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJBUlJBWUJVRkZFUiBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgZW52aXJvbm1lbnRcIil9cmV0dXJuIGZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gZnVuY3Rpb24odCxlLHIsaSl7cmV0dXJuIG4obmV3IFVpbnQ4QXJyYXkodCksZSxyLGkpfSh0LGUscixpKX07Y2FzZVwiVUlOVDhBUlJBWVwiOnRyeXtuZXcgVWludDhBcnJheSgwKX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJVSU5UOEFSUkFZIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBlbnZpcm9ubWVudFwiKX1yZXR1cm4gZnVuY3Rpb24odCxlLHIpe3JldHVybiBuKHQsZSxyLGkpfTtkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcImZvcm1hdCBtdXN0IGJlIEhFWCwgVEVYVCwgQjY0LCBCWVRFUywgQVJSQVlCVUZGRVIsIG9yIFVJTlQ4QVJSQVlcIil9fWZ1bmN0aW9uIHIobixlLHIsaSl7c3dpdGNoKG4pe2Nhc2VcIkhFWFwiOnJldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24odCxuLGUscil7bGV0IGkscyxvPVwiXCI7Y29uc3QgaD1uLzgsdT0tMT09PWU/MzowO2ZvcihpPTA7aTxoO2krPTEpcz10W2k+Pj4yXT4+PjgqKHUrZSooaSU0KSksbys9XCIwMTIzNDU2Nzg5YWJjZGVmXCIuY2hhckF0KHM+Pj40JjE1KStcIjAxMjM0NTY3ODlhYmNkZWZcIi5jaGFyQXQoMTUmcyk7cmV0dXJuIHIub3V0cHV0VXBwZXI/by50b1VwcGVyQ2FzZSgpOm99KHQsZSxyLGkpfTtjYXNlXCJCNjRcIjpyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKG4sZSxyLGkpe2xldCBzLG8saCx1LHcsYz1cIlwiO2NvbnN0IGY9ZS84LGE9LTE9PT1yPzM6MDtmb3Iocz0wO3M8ZjtzKz0zKWZvcih1PXMrMTxmP25bcysxPj4+Ml06MCx3PXMrMjxmP25bcysyPj4+Ml06MCxoPShuW3M+Pj4yXT4+PjgqKGErcioocyU0KSkmMjU1KTw8MTZ8KHU+Pj44KihhK3IqKChzKzEpJTQpKSYyNTUpPDw4fHc+Pj44KihhK3IqKChzKzIpJTQpKSYyNTUsbz0wO288NDtvKz0xKWMrPTgqcys2Km88PWU/dC5jaGFyQXQoaD4+PjYqKDMtbykmNjMpOmkuYjY0UGFkO3JldHVybiBjfShuLGUscixpKX07Y2FzZVwiQllURVNcIjpyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHQsbixlKXtsZXQgcixpLHM9XCJcIjtjb25zdCBvPW4vOCxoPS0xPT09ZT8zOjA7Zm9yKHI9MDtyPG87cis9MSlpPXRbcj4+PjJdPj4+OCooaCtlKihyJTQpKSYyNTUscys9U3RyaW5nLmZyb21DaGFyQ29kZShpKTtyZXR1cm4gc30odCxlLHIpfTtjYXNlXCJBUlJBWUJVRkZFUlwiOnRyeXtuZXcgQXJyYXlCdWZmZXIoMCl9Y2F0Y2godCl7dGhyb3cgbmV3IEVycm9yKFwiQVJSQVlCVUZGRVIgbm90IHN1cHBvcnRlZCBieSB0aGlzIGVudmlyb25tZW50XCIpfXJldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24odCxuLGUpe2xldCByO2NvbnN0IGk9bi84LHM9bmV3IEFycmF5QnVmZmVyKGkpLG89bmV3IFVpbnQ4QXJyYXkocyksaD0tMT09PWU/MzowO2ZvcihyPTA7cjxpO3IrPTEpb1tyXT10W3I+Pj4yXT4+PjgqKGgrZSoociU0KSkmMjU1O3JldHVybiBzfSh0LGUscil9O2Nhc2VcIlVJTlQ4QVJSQVlcIjp0cnl7bmV3IFVpbnQ4QXJyYXkoMCl9Y2F0Y2godCl7dGhyb3cgbmV3IEVycm9yKFwiVUlOVDhBUlJBWSBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgZW52aXJvbm1lbnRcIil9cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbih0LG4sZSl7bGV0IHI7Y29uc3QgaT1uLzgscz0tMT09PWU/MzowLG89bmV3IFVpbnQ4QXJyYXkoaSk7Zm9yKHI9MDtyPGk7cis9MSlvW3JdPXRbcj4+PjJdPj4+OCoocytlKihyJTQpKSYyNTU7cmV0dXJuIG99KHQsZSxyKX07ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJmb3JtYXQgbXVzdCBiZSBIRVgsIEI2NCwgQllURVMsIEFSUkFZQlVGRkVSLCBvciBVSU5UOEFSUkFZXCIpfX1jb25zdCBpPVsxMTE2MzUyNDA4LDE4OTk0NDc0NDEsMzA0OTMyMzQ3MSwzOTIxMDA5NTczLDk2MTk4NzE2MywxNTA4OTcwOTkzLDI0NTM2MzU3NDgsMjg3MDc2MzIyMSwzNjI0MzgxMDgwLDMxMDU5ODQwMSw2MDcyMjUyNzgsMTQyNjg4MTk4NywxOTI1MDc4Mzg4LDIxNjIwNzgyMDYsMjYxNDg4ODEwMywzMjQ4MjIyNTgwLDM4MzUzOTA0MDEsNDAyMjIyNDc3NCwyNjQzNDcwNzgsNjA0ODA3NjI4LDc3MDI1NTk4MywxMjQ5MTUwMTIyLDE1NTUwODE2OTIsMTk5NjA2NDk4NiwyNTU0MjIwODgyLDI4MjE4MzQzNDksMjk1Mjk5NjgwOCwzMjEwMzEzNjcxLDMzMzY1NzE4OTEsMzU4NDUyODcxMSwxMTM5MjY5OTMsMzM4MjQxODk1LDY2NjMwNzIwNSw3NzM1Mjk5MTIsMTI5NDc1NzM3MiwxMzk2MTgyMjkxLDE2OTUxODM3MDAsMTk4NjY2MTA1MSwyMTc3MDI2MzUwLDI0NTY5NTYwMzcsMjczMDQ4NTkyMSwyODIwMzAyNDExLDMyNTk3MzA4MDAsMzM0NTc2NDc3MSwzNTE2MDY1ODE3LDM2MDAzNTI4MDQsNDA5NDU3MTkwOSwyNzU0MjMzNDQsNDMwMjI3NzM0LDUwNjk0ODYxNiw2NTkwNjA1NTYsODgzOTk3ODc3LDk1ODEzOTU3MSwxMzIyODIyMjE4LDE1MzcwMDIwNjMsMTc0Nzg3Mzc3OSwxOTU1NTYyMjIyLDIwMjQxMDQ4MTUsMjIyNzczMDQ1MiwyMzYxODUyNDI0LDI0Mjg0MzY0NzQsMjc1NjczNDE4NywzMjA0MDMxNDc5LDMzMjkzMjUyOThdLHM9WzMyMzgzNzEwMzIsOTE0MTUwNjYzLDgxMjcwMjk5OSw0MTQ0OTEyNjk3LDQyOTA3NzU4NTcsMTc1MDYwMzAyNSwxNjk0MDc2ODM5LDMyMDQwNzU0MjhdLG89WzE3NzkwMzM3MDMsMzE0NDEzNDI3NywxMDEzOTA0MjQyLDI3NzM0ODA3NjIsMTM1OTg5MzExOSwyNjAwODIyOTI0LDUyODczNDYzNSwxNTQxNDU5MjI1XSxoPVwiQ2hvc2VuIFNIQSB2YXJpYW50IGlzIG5vdCBzdXBwb3J0ZWRcIjtmdW5jdGlvbiB1KHQsbil7bGV0IGUscjtjb25zdCBpPXQuYmluTGVuPj4+MyxzPW4uYmluTGVuPj4+MyxvPWk8PDMsaD00LWk8PDM7aWYoaSU0IT0wKXtmb3IoZT0wO2U8cztlKz00KXI9aStlPj4+Mix0LnZhbHVlW3JdfD1uLnZhbHVlW2U+Pj4yXTw8byx0LnZhbHVlLnB1c2goMCksdC52YWx1ZVtyKzFdfD1uLnZhbHVlW2U+Pj4yXT4+Pmg7cmV0dXJuKHQudmFsdWUubGVuZ3RoPDwyKS00Pj1zK2kmJnQudmFsdWUucG9wKCkse3ZhbHVlOnQudmFsdWUsYmluTGVuOnQuYmluTGVuK24uYmluTGVufX1yZXR1cm57dmFsdWU6dC52YWx1ZS5jb25jYXQobi52YWx1ZSksYmluTGVuOnQuYmluTGVuK24uYmluTGVufX1mdW5jdGlvbiB3KHQpe2NvbnN0IG49e291dHB1dFVwcGVyOiExLGI2NFBhZDpcIj1cIixvdXRwdXRMZW46LTF9LGU9dHx8e30scj1cIk91dHB1dCBsZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDhcIjtpZihuLm91dHB1dFVwcGVyPWUub3V0cHV0VXBwZXJ8fCExLGUuYjY0UGFkJiYobi5iNjRQYWQ9ZS5iNjRQYWQpLGUub3V0cHV0TGVuKXtpZihlLm91dHB1dExlbiU4IT0wKXRocm93IG5ldyBFcnJvcihyKTtuLm91dHB1dExlbj1lLm91dHB1dExlbn1lbHNlIGlmKGUuc2hha2VMZW4pe2lmKGUuc2hha2VMZW4lOCE9MCl0aHJvdyBuZXcgRXJyb3Iocik7bi5vdXRwdXRMZW49ZS5zaGFrZUxlbn1pZihcImJvb2xlYW5cIiE9dHlwZW9mIG4ub3V0cHV0VXBwZXIpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBvdXRwdXRVcHBlciBmb3JtYXR0aW5nIG9wdGlvblwiKTtpZihcInN0cmluZ1wiIT10eXBlb2Ygbi5iNjRQYWQpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiNjRQYWQgZm9ybWF0dGluZyBvcHRpb25cIik7cmV0dXJuIG59ZnVuY3Rpb24gYyh0LG4scixpKXtjb25zdCBzPXQrXCIgbXVzdCBpbmNsdWRlIGEgdmFsdWUgYW5kIGZvcm1hdFwiO2lmKCFuKXtpZighaSl0aHJvdyBuZXcgRXJyb3Iocyk7cmV0dXJuIGl9aWYodm9pZCAwPT09bi52YWx1ZXx8IW4uZm9ybWF0KXRocm93IG5ldyBFcnJvcihzKTtyZXR1cm4gZShuLmZvcm1hdCxuLmVuY29kaW5nfHxcIlVURjhcIixyKShuLnZhbHVlKX1jbGFzcyBme2NvbnN0cnVjdG9yKHQsbixlKXtjb25zdCByPWV8fHt9O2lmKHRoaXMudD1uLHRoaXMuaT1yLmVuY29kaW5nfHxcIlVURjhcIix0aGlzLm51bVJvdW5kcz1yLm51bVJvdW5kc3x8MSxpc05hTih0aGlzLm51bVJvdW5kcyl8fHRoaXMubnVtUm91bmRzIT09cGFyc2VJbnQodGhpcy5udW1Sb3VuZHMsMTApfHwxPnRoaXMubnVtUm91bmRzKXRocm93IG5ldyBFcnJvcihcIm51bVJvdW5kcyBtdXN0IGEgaW50ZWdlciA+PSAxXCIpO3RoaXMucz10LHRoaXMubz1bXSx0aGlzLmg9MCx0aGlzLnU9ITEsdGhpcy5sPTAsdGhpcy5BPSExLHRoaXMuSD1bXSx0aGlzLlM9W119dXBkYXRlKHQpe2xldCBuLGU9MDtjb25zdCByPXRoaXMucD4+PjUsaT10aGlzLm0odCx0aGlzLm8sdGhpcy5oKSxzPWkuYmluTGVuLG89aS52YWx1ZSxoPXM+Pj41O2ZvcihuPTA7bjxoO24rPXIpZSt0aGlzLnA8PXMmJih0aGlzLkM9dGhpcy5SKG8uc2xpY2UobixuK3IpLHRoaXMuQyksZSs9dGhpcy5wKTt0aGlzLmwrPWUsdGhpcy5vPW8uc2xpY2UoZT4+PjUpLHRoaXMuaD1zJXRoaXMucCx0aGlzLnU9ITB9Z2V0SGFzaCh0LG4pe2xldCBlLGkscz10aGlzLlU7Y29uc3Qgbz13KG4pO2lmKHRoaXMudil7aWYoLTE9PT1vLm91dHB1dExlbil0aHJvdyBuZXcgRXJyb3IoXCJPdXRwdXQgbGVuZ3RoIG11c3QgYmUgc3BlY2lmaWVkIGluIG9wdGlvbnNcIik7cz1vLm91dHB1dExlbn1jb25zdCBoPXIodCxzLHRoaXMuSyxvKTtpZih0aGlzLkEmJnRoaXMuVClyZXR1cm4gaCh0aGlzLlQobykpO2ZvcihpPXRoaXMuRih0aGlzLm8uc2xpY2UoKSx0aGlzLmgsdGhpcy5sLHRoaXMuZyh0aGlzLkMpLHMpLGU9MTtlPHRoaXMubnVtUm91bmRzO2UrPTEpdGhpcy52JiZzJTMyIT0wJiYoaVtpLmxlbmd0aC0xXSY9MTY3NzcyMTU+Pj4yNC1zJTMyKSxpPXRoaXMuRihpLHMsMCx0aGlzLkIodGhpcy5zKSxzKTtyZXR1cm4gaChpKX1zZXRITUFDS2V5KHQsbixyKXtpZighdGhpcy5MKXRocm93IG5ldyBFcnJvcihcIlZhcmlhbnQgZG9lcyBub3Qgc3VwcG9ydCBITUFDXCIpO2lmKHRoaXMudSl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc2V0IE1BQyBrZXkgYWZ0ZXIgY2FsbGluZyB1cGRhdGVcIik7Y29uc3QgaT1lKG4sKHJ8fHt9KS5lbmNvZGluZ3x8XCJVVEY4XCIsdGhpcy5LKTt0aGlzLk0oaSh0KSl9TSh0KXtjb25zdCBuPXRoaXMucD4+PjMsZT1uLzQtMTtsZXQgcjtpZigxIT09dGhpcy5udW1Sb3VuZHMpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNldCBudW1Sb3VuZHMgd2l0aCBNQUNcIik7aWYodGhpcy5BKXRocm93IG5ldyBFcnJvcihcIk1BQyBrZXkgYWxyZWFkeSBzZXRcIik7Zm9yKG48dC5iaW5MZW4vOCYmKHQudmFsdWU9dGhpcy5GKHQudmFsdWUsdC5iaW5MZW4sMCx0aGlzLkIodGhpcy5zKSx0aGlzLlUpKTt0LnZhbHVlLmxlbmd0aDw9ZTspdC52YWx1ZS5wdXNoKDApO2ZvcihyPTA7cjw9ZTtyKz0xKXRoaXMuSFtyXT05MDk1MjI0ODZedC52YWx1ZVtyXSx0aGlzLlNbcl09MTU0OTU1NjgyOF50LnZhbHVlW3JdO3RoaXMuQz10aGlzLlIodGhpcy5ILHRoaXMuQyksdGhpcy5sPXRoaXMucCx0aGlzLkE9ITB9Z2V0SE1BQyh0LG4pe2NvbnN0IGU9dyhuKTtyZXR1cm4gcih0LHRoaXMuVSx0aGlzLkssZSkodGhpcy5rKCkpfWsoKXtsZXQgdDtpZighdGhpcy5BKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjYWxsIGdldEhNQUMgd2l0aG91dCBmaXJzdCBzZXR0aW5nIE1BQyBrZXlcIik7Y29uc3Qgbj10aGlzLkYodGhpcy5vLnNsaWNlKCksdGhpcy5oLHRoaXMubCx0aGlzLmcodGhpcy5DKSx0aGlzLlUpO3JldHVybiB0PXRoaXMuUih0aGlzLlMsdGhpcy5CKHRoaXMucykpLHQ9dGhpcy5GKG4sdGhpcy5VLHRoaXMucCx0LHRoaXMuVSksdH19ZnVuY3Rpb24gYSh0LG4pe3JldHVybiB0PDxufHQ+Pj4zMi1ufWZ1bmN0aW9uIGwodCxuKXtyZXR1cm4gdD4+Pm58dDw8MzItbn1mdW5jdGlvbiBBKHQsbil7cmV0dXJuIHQ+Pj5ufWZ1bmN0aW9uIEUodCxuLGUpe3JldHVybiB0Xm5eZX1mdW5jdGlvbiBIKHQsbixlKXtyZXR1cm4gdCZuXn50JmV9ZnVuY3Rpb24gUyh0LG4sZSl7cmV0dXJuIHQmbl50JmVebiZlfWZ1bmN0aW9uIGIodCl7cmV0dXJuIGwodCwyKV5sKHQsMTMpXmwodCwyMil9ZnVuY3Rpb24gcCh0LG4pe2NvbnN0IGU9KDY1NTM1JnQpKyg2NTUzNSZuKTtyZXR1cm4oNjU1MzUmKHQ+Pj4xNikrKG4+Pj4xNikrKGU+Pj4xNikpPDwxNnw2NTUzNSZlfWZ1bmN0aW9uIGQodCxuLGUscil7Y29uc3QgaT0oNjU1MzUmdCkrKDY1NTM1Jm4pKyg2NTUzNSZlKSsoNjU1MzUmcik7cmV0dXJuKDY1NTM1Jih0Pj4+MTYpKyhuPj4+MTYpKyhlPj4+MTYpKyhyPj4+MTYpKyhpPj4+MTYpKTw8MTZ8NjU1MzUmaX1mdW5jdGlvbiBtKHQsbixlLHIsaSl7Y29uc3Qgcz0oNjU1MzUmdCkrKDY1NTM1Jm4pKyg2NTUzNSZlKSsoNjU1MzUmcikrKDY1NTM1JmkpO3JldHVybig2NTUzNSYodD4+PjE2KSsobj4+PjE2KSsoZT4+PjE2KSsocj4+PjE2KSsoaT4+PjE2KSsocz4+PjE2KSk8PDE2fDY1NTM1JnN9ZnVuY3Rpb24gQyh0KXtyZXR1cm4gbCh0LDcpXmwodCwxOCleQSh0LDMpfWZ1bmN0aW9uIHkodCl7cmV0dXJuIGwodCw2KV5sKHQsMTEpXmwodCwyNSl9ZnVuY3Rpb24gUih0KXtyZXR1cm5bMTczMjU4NDE5Myw0MDIzMjMzNDE3LDI1NjIzODMxMDIsMjcxNzMzODc4LDMyODUzNzc1MjBdfWZ1bmN0aW9uIFUodCxuKXtsZXQgZSxyLGkscyxvLGgsdTtjb25zdCB3PVtdO2ZvcihlPW5bMF0scj1uWzFdLGk9blsyXSxzPW5bM10sbz1uWzRdLHU9MDt1PDgwO3UrPTEpd1t1XT11PDE2P3RbdV06YSh3W3UtM11ed1t1LThdXndbdS0xNF1ed1t1LTE2XSwxKSxoPXU8MjA/bShhKGUsNSksSChyLGkscyksbywxNTE4NTAwMjQ5LHdbdV0pOnU8NDA/bShhKGUsNSksRShyLGkscyksbywxODU5Nzc1MzkzLHdbdV0pOnU8NjA/bShhKGUsNSksUyhyLGkscyksbywyNDAwOTU5NzA4LHdbdV0pOm0oYShlLDUpLEUocixpLHMpLG8sMzM5NTQ2OTc4Mix3W3VdKSxvPXMscz1pLGk9YShyLDMwKSxyPWUsZT1oO3JldHVybiBuWzBdPXAoZSxuWzBdKSxuWzFdPXAocixuWzFdKSxuWzJdPXAoaSxuWzJdKSxuWzNdPXAocyxuWzNdKSxuWzRdPXAobyxuWzRdKSxufWZ1bmN0aW9uIHYodCxuLGUscil7bGV0IGk7Y29uc3Qgcz0xNSsobis2NT4+Pjk8PDQpLG89bitlO2Zvcig7dC5sZW5ndGg8PXM7KXQucHVzaCgwKTtmb3IodFtuPj4+NV18PTEyODw8MjQtbiUzMix0W3NdPTQyOTQ5NjcyOTUmbyx0W3MtMV09by80Mjk0OTY3Mjk2fDAsaT0wO2k8dC5sZW5ndGg7aSs9MTYpcj1VKHQuc2xpY2UoaSxpKzE2KSxyKTtyZXR1cm4gcn1jbGFzcyBLIGV4dGVuZHMgZntjb25zdHJ1Y3Rvcih0LG4scil7aWYoXCJTSEEtMVwiIT09dCl0aHJvdyBuZXcgRXJyb3IoaCk7c3VwZXIodCxuLHIpO2NvbnN0IGk9cnx8e307dGhpcy5MPSEwLHRoaXMuVD10aGlzLmssdGhpcy5LPS0xLHRoaXMubT1lKHRoaXMudCx0aGlzLmksdGhpcy5LKSx0aGlzLlI9VSx0aGlzLmc9ZnVuY3Rpb24odCl7cmV0dXJuIHQuc2xpY2UoKX0sdGhpcy5CPVIsdGhpcy5GPXYsdGhpcy5DPVsxNzMyNTg0MTkzLDQwMjMyMzM0MTcsMjU2MjM4MzEwMiwyNzE3MzM4NzgsMzI4NTM3NzUyMF0sdGhpcy5wPTUxMix0aGlzLlU9MTYwLHRoaXMudj0hMSxpLmhtYWNLZXkmJnRoaXMuTShjKFwiaG1hY0tleVwiLGkuaG1hY0tleSx0aGlzLkspKX19ZnVuY3Rpb24gVCh0KXtsZXQgbjtyZXR1cm4gbj1cIlNIQS0yMjRcIj09dD9zLnNsaWNlKCk6by5zbGljZSgpLG59ZnVuY3Rpb24gRih0LG4pe2xldCBlLHIscyxvLGgsdSx3LGMsZixhLEU7Y29uc3QgUj1bXTtmb3IoZT1uWzBdLHI9blsxXSxzPW5bMl0sbz1uWzNdLGg9bls0XSx1PW5bNV0sdz1uWzZdLGM9bls3XSxFPTA7RTw2NDtFKz0xKVJbRV09RTwxNj90W0VdOmQobChVPVJbRS0yXSwxNylebChVLDE5KV5BKFUsMTApLFJbRS03XSxDKFJbRS0xNV0pLFJbRS0xNl0pLGY9bShjLHkoaCksSChoLHUsdyksaVtFXSxSW0VdKSxhPXAoYihlKSxTKGUscixzKSksYz13LHc9dSx1PWgsaD1wKG8sZiksbz1zLHM9cixyPWUsZT1wKGYsYSk7dmFyIFU7cmV0dXJuIG5bMF09cChlLG5bMF0pLG5bMV09cChyLG5bMV0pLG5bMl09cChzLG5bMl0pLG5bM109cChvLG5bM10pLG5bNF09cChoLG5bNF0pLG5bNV09cCh1LG5bNV0pLG5bNl09cCh3LG5bNl0pLG5bN109cChjLG5bN10pLG59Y2xhc3MgZyBleHRlbmRzIGZ7Y29uc3RydWN0b3IodCxuLHIpe2lmKFwiU0hBLTIyNFwiIT09dCYmXCJTSEEtMjU2XCIhPT10KXRocm93IG5ldyBFcnJvcihoKTtzdXBlcih0LG4scik7Y29uc3QgaT1yfHx7fTt0aGlzLlQ9dGhpcy5rLHRoaXMuTD0hMCx0aGlzLks9LTEsdGhpcy5tPWUodGhpcy50LHRoaXMuaSx0aGlzLkspLHRoaXMuUj1GLHRoaXMuZz1mdW5jdGlvbih0KXtyZXR1cm4gdC5zbGljZSgpfSx0aGlzLkI9VCx0aGlzLkY9ZnVuY3Rpb24obixlLHIsaSl7cmV0dXJuIGZ1bmN0aW9uKHQsbixlLHIsaSl7bGV0IHMsbztjb25zdCBoPTE1KyhuKzY1Pj4+OTw8NCksdT1uK2U7Zm9yKDt0Lmxlbmd0aDw9aDspdC5wdXNoKDApO2Zvcih0W24+Pj41XXw9MTI4PDwyNC1uJTMyLHRbaF09NDI5NDk2NzI5NSZ1LHRbaC0xXT11LzQyOTQ5NjcyOTZ8MCxzPTA7czx0Lmxlbmd0aDtzKz0xNilyPUYodC5zbGljZShzLHMrMTYpLHIpO3JldHVybiBvPVwiU0hBLTIyNFwiPT09aT9bclswXSxyWzFdLHJbMl0sclszXSxyWzRdLHJbNV0scls2XV06cixvfShuLGUscixpLHQpfSx0aGlzLkM9VCh0KSx0aGlzLnA9NTEyLHRoaXMuVT1cIlNIQS0yMjRcIj09PXQ/MjI0OjI1Nix0aGlzLnY9ITEsaS5obWFjS2V5JiZ0aGlzLk0oYyhcImhtYWNLZXlcIixpLmhtYWNLZXksdGhpcy5LKSl9fWNsYXNzIEJ7Y29uc3RydWN0b3IodCxuKXt0aGlzLlk9dCx0aGlzLk49bn19ZnVuY3Rpb24gTCh0LG4pe2xldCBlO3JldHVybiBuPjMyPyhlPTY0LW4sbmV3IEIodC5OPDxufHQuWT4+PmUsdC5ZPDxufHQuTj4+PmUpKTowIT09bj8oZT0zMi1uLG5ldyBCKHQuWTw8bnx0Lk4+Pj5lLHQuTjw8bnx0Llk+Pj5lKSk6dH1mdW5jdGlvbiBNKHQsbil7bGV0IGU7cmV0dXJuIG48MzI/KGU9MzItbixuZXcgQih0Llk+Pj5ufHQuTjw8ZSx0Lk4+Pj5ufHQuWTw8ZSkpOihlPTY0LW4sbmV3IEIodC5OPj4+bnx0Llk8PGUsdC5ZPj4+bnx0Lk48PGUpKX1mdW5jdGlvbiBrKHQsbil7cmV0dXJuIG5ldyBCKHQuWT4+Pm4sdC5OPj4+bnx0Llk8PDMyLW4pfWZ1bmN0aW9uIFkodCxuLGUpe3JldHVybiBuZXcgQih0Llkmbi5ZXnQuWSZlLllebi5ZJmUuWSx0Lk4mbi5OXnQuTiZlLk5ebi5OJmUuTil9ZnVuY3Rpb24gTih0KXtjb25zdCBuPU0odCwyOCksZT1NKHQsMzQpLHI9TSh0LDM5KTtyZXR1cm4gbmV3IEIobi5ZXmUuWV5yLlksbi5OXmUuTl5yLk4pfWZ1bmN0aW9uIEkodCxuKXtsZXQgZSxyO2U9KDY1NTM1JnQuTikrKDY1NTM1Jm4uTikscj0odC5OPj4+MTYpKyhuLk4+Pj4xNikrKGU+Pj4xNik7Y29uc3QgaT0oNjU1MzUmcik8PDE2fDY1NTM1JmU7cmV0dXJuIGU9KDY1NTM1JnQuWSkrKDY1NTM1Jm4uWSkrKHI+Pj4xNikscj0odC5ZPj4+MTYpKyhuLlk+Pj4xNikrKGU+Pj4xNiksbmV3IEIoKDY1NTM1JnIpPDwxNnw2NTUzNSZlLGkpfWZ1bmN0aW9uIFgodCxuLGUscil7bGV0IGkscztpPSg2NTUzNSZ0Lk4pKyg2NTUzNSZuLk4pKyg2NTUzNSZlLk4pKyg2NTUzNSZyLk4pLHM9KHQuTj4+PjE2KSsobi5OPj4+MTYpKyhlLk4+Pj4xNikrKHIuTj4+PjE2KSsoaT4+PjE2KTtjb25zdCBvPSg2NTUzNSZzKTw8MTZ8NjU1MzUmaTtyZXR1cm4gaT0oNjU1MzUmdC5ZKSsoNjU1MzUmbi5ZKSsoNjU1MzUmZS5ZKSsoNjU1MzUmci5ZKSsocz4+PjE2KSxzPSh0Llk+Pj4xNikrKG4uWT4+PjE2KSsoZS5ZPj4+MTYpKyhyLlk+Pj4xNikrKGk+Pj4xNiksbmV3IEIoKDY1NTM1JnMpPDwxNnw2NTUzNSZpLG8pfWZ1bmN0aW9uIHoodCxuLGUscixpKXtsZXQgcyxvO3M9KDY1NTM1JnQuTikrKDY1NTM1Jm4uTikrKDY1NTM1JmUuTikrKDY1NTM1JnIuTikrKDY1NTM1JmkuTiksbz0odC5OPj4+MTYpKyhuLk4+Pj4xNikrKGUuTj4+PjE2KSsoci5OPj4+MTYpKyhpLk4+Pj4xNikrKHM+Pj4xNik7Y29uc3QgaD0oNjU1MzUmbyk8PDE2fDY1NTM1JnM7cmV0dXJuIHM9KDY1NTM1JnQuWSkrKDY1NTM1Jm4uWSkrKDY1NTM1JmUuWSkrKDY1NTM1JnIuWSkrKDY1NTM1JmkuWSkrKG8+Pj4xNiksbz0odC5ZPj4+MTYpKyhuLlk+Pj4xNikrKGUuWT4+PjE2KSsoci5ZPj4+MTYpKyhpLlk+Pj4xNikrKHM+Pj4xNiksbmV3IEIoKDY1NTM1Jm8pPDwxNnw2NTUzNSZzLGgpfWZ1bmN0aW9uIHgodCxuKXtyZXR1cm4gbmV3IEIodC5ZXm4uWSx0Lk5ebi5OKX1mdW5jdGlvbiBfKHQpe2NvbnN0IG49TSh0LDE5KSxlPU0odCw2MSkscj1rKHQsNik7cmV0dXJuIG5ldyBCKG4uWV5lLlleci5ZLG4uTl5lLk5eci5OKX1mdW5jdGlvbiBPKHQpe2NvbnN0IG49TSh0LDEpLGU9TSh0LDgpLHI9ayh0LDcpO3JldHVybiBuZXcgQihuLlleZS5ZXnIuWSxuLk5eZS5OXnIuTil9ZnVuY3Rpb24gUCh0KXtjb25zdCBuPU0odCwxNCksZT1NKHQsMTgpLHI9TSh0LDQxKTtyZXR1cm4gbmV3IEIobi5ZXmUuWV5yLlksbi5OXmUuTl5yLk4pfWNvbnN0IFY9W25ldyBCKGlbMF0sMzYwOTc2NzQ1OCksbmV3IEIoaVsxXSw2MDI4OTE3MjUpLG5ldyBCKGlbMl0sMzk2NDQ4NDM5OSksbmV3IEIoaVszXSwyMTczMjk1NTQ4KSxuZXcgQihpWzRdLDQwODE2Mjg0NzIpLG5ldyBCKGlbNV0sMzA1MzgzNDI2NSksbmV3IEIoaVs2XSwyOTM3NjcxNTc5KSxuZXcgQihpWzddLDM2NjQ2MDk1NjApLG5ldyBCKGlbOF0sMjczNDg4MzM5NCksbmV3IEIoaVs5XSwxMTY0OTk2NTQyKSxuZXcgQihpWzEwXSwxMzIzNjEwNzY0KSxuZXcgQihpWzExXSwzNTkwMzA0OTk0KSxuZXcgQihpWzEyXSw0MDY4MTgyMzgzKSxuZXcgQihpWzEzXSw5OTEzMzYxMTMpLG5ldyBCKGlbMTRdLDYzMzgwMzMxNyksbmV3IEIoaVsxNV0sMzQ3OTc3NDg2OCksbmV3IEIoaVsxNl0sMjY2NjYxMzQ1OCksbmV3IEIoaVsxN10sOTQ0NzExMTM5KSxuZXcgQihpWzE4XSwyMzQxMjYyNzczKSxuZXcgQihpWzE5XSwyMDA3ODAwOTMzKSxuZXcgQihpWzIwXSwxNDk1OTkwOTAxKSxuZXcgQihpWzIxXSwxODU2NDMxMjM1KSxuZXcgQihpWzIyXSwzMTc1MjE4MTMyKSxuZXcgQihpWzIzXSwyMTk4OTUwODM3KSxuZXcgQihpWzI0XSwzOTk5NzE5MzM5KSxuZXcgQihpWzI1XSw3NjY3ODQwMTYpLG5ldyBCKGlbMjZdLDI1NjY1OTQ4NzkpLG5ldyBCKGlbMjddLDMyMDMzMzc5NTYpLG5ldyBCKGlbMjhdLDEwMzQ0NTcwMjYpLG5ldyBCKGlbMjldLDI0NjY5NDg5MDEpLG5ldyBCKGlbMzBdLDM3NTgzMjYzODMpLG5ldyBCKGlbMzFdLDE2ODcxNzkzNiksbmV3IEIoaVszMl0sMTE4ODE3OTk2NCksbmV3IEIoaVszM10sMTU0NjA0NTczNCksbmV3IEIoaVszNF0sMTUyMjgwNTQ4NSksbmV3IEIoaVszNV0sMjY0MzgzMzgyMyksbmV3IEIoaVszNl0sMjM0MzUyNzM5MCksbmV3IEIoaVszN10sMTAxNDQ3NzQ4MCksbmV3IEIoaVszOF0sMTIwNjc1OTE0MiksbmV3IEIoaVszOV0sMzQ0MDc3NjI3KSxuZXcgQihpWzQwXSwxMjkwODYzNDYwKSxuZXcgQihpWzQxXSwzMTU4NDU0MjczKSxuZXcgQihpWzQyXSwzNTA1OTUyNjU3KSxuZXcgQihpWzQzXSwxMDYyMTcwMDgpLG5ldyBCKGlbNDRdLDM2MDYwMDgzNDQpLG5ldyBCKGlbNDVdLDE0MzI3MjU3NzYpLG5ldyBCKGlbNDZdLDE0NjcwMzE1OTQpLG5ldyBCKGlbNDddLDg1MTE2OTcyMCksbmV3IEIoaVs0OF0sMzEwMDgyMzc1MiksbmV3IEIoaVs0OV0sMTM2MzI1ODE5NSksbmV3IEIoaVs1MF0sMzc1MDY4NTU5MyksbmV3IEIoaVs1MV0sMzc4NTA1MDI4MCksbmV3IEIoaVs1Ml0sMzMxODMwNzQyNyksbmV3IEIoaVs1M10sMzgxMjcyMzQwMyksbmV3IEIoaVs1NF0sMjAwMzAzNDk5NSksbmV3IEIoaVs1NV0sMzYwMjAzNjg5OSksbmV3IEIoaVs1Nl0sMTU3NTk5MDAxMiksbmV3IEIoaVs1N10sMTEyNTU5MjkyOCksbmV3IEIoaVs1OF0sMjcxNjkwNDMwNiksbmV3IEIoaVs1OV0sNDQyNzc2MDQ0KSxuZXcgQihpWzYwXSw1OTM2OTgzNDQpLG5ldyBCKGlbNjFdLDM3MzMxMTAyNDkpLG5ldyBCKGlbNjJdLDI5OTkzNTE1NzMpLG5ldyBCKGlbNjNdLDM4MTU5MjA0MjcpLG5ldyBCKDMzOTE1Njk2MTQsMzkyODM4MzkwMCksbmV3IEIoMzUxNTI2NzI3MSw1NjYyODA3MTEpLG5ldyBCKDM5NDAxODc2MDYsMzQ1NDA2OTUzNCksbmV3IEIoNDExODYzMDI3MSw0MDAwMjM5OTkyKSxuZXcgQigxMTY0MTg0NzQsMTkxNDEzODU1NCksbmV3IEIoMTc0MjkyNDIxLDI3MzEwNTUyNzApLG5ldyBCKDI4OTM4MDM1NiwzMjAzOTkzMDA2KSxuZXcgQig0NjAzOTMyNjksMzIwNjIwMzE1KSxuZXcgQig2ODU0NzE3MzMsNTg3NDk2ODM2KSxuZXcgQig4NTIxNDI5NzEsMTA4Njc5Mjg1MSksbmV3IEIoMTAxNzAzNjI5OCwzNjU1NDMxMDApLG5ldyBCKDExMjYwMDA1ODAsMjYxODI5NzY3NiksbmV3IEIoMTI4ODAzMzQ3MCwzNDA5ODU1MTU4KSxuZXcgQigxNTAxNTA1OTQ4LDQyMzQ1MDk4NjYpLG5ldyBCKDE2MDcxNjc5MTUsOTg3MTY3NDY4KSxuZXcgQigxODE2NDAyMzE2LDEyNDYxODk1OTEpXTtmdW5jdGlvbiBaKHQpe3JldHVyblwiU0hBLTM4NFwiPT09dD9bbmV3IEIoMzQxODA3MDM2NSxzWzBdKSxuZXcgQigxNjU0MjcwMjUwLHNbMV0pLG5ldyBCKDI0Mzg1MjkzNzAsc1syXSksbmV3IEIoMzU1NDYyMzYwLHNbM10pLG5ldyBCKDE3MzE0MDU0MTUsc1s0XSksbmV3IEIoNDEwNDg4ODU4OTUsc1s1XSksbmV3IEIoMzY3NTAwODUyNSxzWzZdKSxuZXcgQigxMjAzMDYyODEzLHNbN10pXTpbbmV3IEIob1swXSw0MDg5MjM1NzIwKSxuZXcgQihvWzFdLDIyMjc4NzM1OTUpLG5ldyBCKG9bMl0sNDI3MTE3NTcyMyksbmV3IEIob1szXSwxNTk1NzUwMTI5KSxuZXcgQihvWzRdLDI5MTc1NjUxMzcpLG5ldyBCKG9bNV0sNzI1NTExMTk5KSxuZXcgQihvWzZdLDQyMTUzODk1NDcpLG5ldyBCKG9bN10sMzI3MDMzMjA5KV19ZnVuY3Rpb24gaih0LG4pe2xldCBlLHIsaSxzLG8saCx1LHcsYyxmLGEsbDtjb25zdCBBPVtdO2ZvcihlPW5bMF0scj1uWzFdLGk9blsyXSxzPW5bM10sbz1uWzRdLGg9bls1XSx1PW5bNl0sdz1uWzddLGE9MDthPDgwO2ErPTEpYTwxNj8obD0yKmEsQVthXT1uZXcgQih0W2xdLHRbbCsxXSkpOkFbYV09WChfKEFbYS0yXSksQVthLTddLE8oQVthLTE1XSksQVthLTE2XSksYz16KHcsUChvKSwoSD1oLFM9dSxuZXcgQigoRT1vKS5ZJkguWV5+RS5ZJlMuWSxFLk4mSC5OXn5FLk4mUy5OKSksVlthXSxBW2FdKSxmPUkoTihlKSxZKGUscixpKSksdz11LHU9aCxoPW8sbz1JKHMsYykscz1pLGk9cixyPWUsZT1JKGMsZik7dmFyIEUsSCxTO3JldHVybiBuWzBdPUkoZSxuWzBdKSxuWzFdPUkocixuWzFdKSxuWzJdPUkoaSxuWzJdKSxuWzNdPUkocyxuWzNdKSxuWzRdPUkobyxuWzRdKSxuWzVdPUkoaCxuWzVdKSxuWzZdPUkodSxuWzZdKSxuWzddPUkodyxuWzddKSxufWNsYXNzIHEgZXh0ZW5kcyBme2NvbnN0cnVjdG9yKHQsbixyKXtpZihcIlNIQS0zODRcIiE9PXQmJlwiU0hBLTUxMlwiIT09dCl0aHJvdyBuZXcgRXJyb3IoaCk7c3VwZXIodCxuLHIpO2NvbnN0IGk9cnx8e307dGhpcy5UPXRoaXMuayx0aGlzLkw9ITAsdGhpcy5LPS0xLHRoaXMubT1lKHRoaXMudCx0aGlzLmksdGhpcy5LKSx0aGlzLlI9aix0aGlzLmc9ZnVuY3Rpb24odCl7cmV0dXJuIHQuc2xpY2UoKX0sdGhpcy5CPVosdGhpcy5GPWZ1bmN0aW9uKG4sZSxyLGkpe3JldHVybiBmdW5jdGlvbih0LG4sZSxyLGkpe2xldCBzLG87Y29uc3QgaD0zMSsobisxMjk+Pj4xMDw8NSksdT1uK2U7Zm9yKDt0Lmxlbmd0aDw9aDspdC5wdXNoKDApO2Zvcih0W24+Pj41XXw9MTI4PDwyNC1uJTMyLHRbaF09NDI5NDk2NzI5NSZ1LHRbaC0xXT11LzQyOTQ5NjcyOTZ8MCxzPTA7czx0Lmxlbmd0aDtzKz0zMilyPWoodC5zbGljZShzLHMrMzIpLHIpO3JldHVybiBvPVwiU0hBLTM4NFwiPT09aT9bKHI9cilbMF0uWSxyWzBdLk4sclsxXS5ZLHJbMV0uTixyWzJdLlksclsyXS5OLHJbM10uWSxyWzNdLk4scls0XS5ZLHJbNF0uTixyWzVdLlkscls1XS5OXTpbclswXS5ZLHJbMF0uTixyWzFdLlksclsxXS5OLHJbMl0uWSxyWzJdLk4sclszXS5ZLHJbM10uTixyWzRdLlkscls0XS5OLHJbNV0uWSxyWzVdLk4scls2XS5ZLHJbNl0uTixyWzddLlkscls3XS5OXSxvfShuLGUscixpLHQpfSx0aGlzLkM9Wih0KSx0aGlzLnA9MTAyNCx0aGlzLlU9XCJTSEEtMzg0XCI9PT10PzM4NDo1MTIsdGhpcy52PSExLGkuaG1hY0tleSYmdGhpcy5NKGMoXCJobWFjS2V5XCIsaS5obWFjS2V5LHRoaXMuSykpfX1jb25zdCBEPVtuZXcgQigwLDEpLG5ldyBCKDAsMzI4OTgpLG5ldyBCKDIxNDc0ODM2NDgsMzI5MDYpLG5ldyBCKDIxNDc0ODM2NDgsMjE0NzUxNjQxNiksbmV3IEIoMCwzMjkwNyksbmV3IEIoMCwyMTQ3NDgzNjQ5KSxuZXcgQigyMTQ3NDgzNjQ4LDIxNDc1MTY1NDUpLG5ldyBCKDIxNDc0ODM2NDgsMzI3NzcpLG5ldyBCKDAsMTM4KSxuZXcgQigwLDEzNiksbmV3IEIoMCwyMTQ3NTE2NDI1KSxuZXcgQigwLDIxNDc0ODM2NTgpLG5ldyBCKDAsMjE0NzUxNjU1NSksbmV3IEIoMjE0NzQ4MzY0OCwxMzkpLG5ldyBCKDIxNDc0ODM2NDgsMzI5MDUpLG5ldyBCKDIxNDc0ODM2NDgsMzI3NzEpLG5ldyBCKDIxNDc0ODM2NDgsMzI3NzApLG5ldyBCKDIxNDc0ODM2NDgsMTI4KSxuZXcgQigwLDMyNzc4KSxuZXcgQigyMTQ3NDgzNjQ4LDIxNDc0ODM2NTgpLG5ldyBCKDIxNDc0ODM2NDgsMjE0NzUxNjU0NSksbmV3IEIoMjE0NzQ4MzY0OCwzMjg5NiksbmV3IEIoMCwyMTQ3NDgzNjQ5KSxuZXcgQigyMTQ3NDgzNjQ4LDIxNDc1MTY0MjQpXSxHPVtbMCwzNiwzLDQxLDE4XSxbMSw0NCwxMCw0NSwyXSxbNjIsNiw0MywxNSw2MV0sWzI4LDU1LDI1LDIxLDU2XSxbMjcsMjAsMzksOCwxNF1dO2Z1bmN0aW9uIEoodCl7bGV0IG47Y29uc3QgZT1bXTtmb3Iobj0wO248NTtuKz0xKWVbbl09W25ldyBCKDAsMCksbmV3IEIoMCwwKSxuZXcgQigwLDApLG5ldyBCKDAsMCksbmV3IEIoMCwwKV07cmV0dXJuIGV9ZnVuY3Rpb24gUSh0KXtsZXQgbjtjb25zdCBlPVtdO2ZvcihuPTA7bjw1O24rPTEpZVtuXT10W25dLnNsaWNlKCk7cmV0dXJuIGV9ZnVuY3Rpb24gVyh0LG4pe2xldCBlLHIsaSxzO2NvbnN0IG89W10saD1bXTtpZihudWxsIT09dClmb3Iocj0wO3I8dC5sZW5ndGg7cis9MiluWyhyPj4+MSklNV1bKHI+Pj4xKS81fDBdPXgoblsocj4+PjEpJTVdWyhyPj4+MSkvNXwwXSxuZXcgQih0W3IrMV0sdFtyXSkpO2ZvcihlPTA7ZTwyNDtlKz0xKXtmb3Iocz1KKCkscj0wO3I8NTtyKz0xKW9bcl09KHU9bltyXVswXSx3PW5bcl1bMV0sYz1uW3JdWzJdLGY9bltyXVszXSxhPW5bcl1bNF0sbmV3IEIodS5ZXncuWV5jLlleZi5ZXmEuWSx1Lk5edy5OXmMuTl5mLk5eYS5OKSk7Zm9yKHI9MDtyPDU7cis9MSloW3JdPXgob1socis0KSU1XSxMKG9bKHIrMSklNV0sMSkpO2ZvcihyPTA7cjw1O3IrPTEpZm9yKGk9MDtpPDU7aSs9MSluW3JdW2ldPXgobltyXVtpXSxoW3JdKTtmb3Iocj0wO3I8NTtyKz0xKWZvcihpPTA7aTw1O2krPTEpc1tpXVsoMipyKzMqaSklNV09TChuW3JdW2ldLEdbcl1baV0pO2ZvcihyPTA7cjw1O3IrPTEpZm9yKGk9MDtpPDU7aSs9MSluW3JdW2ldPXgoc1tyXVtpXSxuZXcgQih+c1socisxKSU1XVtpXS5ZJnNbKHIrMiklNV1baV0uWSx+c1socisxKSU1XVtpXS5OJnNbKHIrMiklNV1baV0uTikpO25bMF1bMF09eChuWzBdWzBdLERbZV0pfXZhciB1LHcsYyxmLGE7cmV0dXJuIG59ZnVuY3Rpb24gJCh0KXtsZXQgbixlLHI9MDtjb25zdCBpPVswLDBdLHM9WzQyOTQ5NjcyOTUmdCx0LzQyOTQ5NjcyOTYmMjA5NzE1MV07Zm9yKG49NjtuPj0wO24tLSllPXNbbj4+Ml0+Pj44Km4mMjU1LDA9PT1lJiYwPT09cnx8KGlbcisxPj4yXXw9ZTw8OCoocisxKSxyKz0xKTtyZXR1cm4gcj0wIT09cj9yOjEsaVswXXw9cix7dmFsdWU6cisxPjQ/aTpbaVswXV0sYmluTGVuOjgrOCpyfX1mdW5jdGlvbiB0dCh0KXtyZXR1cm4gdSgkKHQuYmluTGVuKSx0KX1mdW5jdGlvbiBudCh0LG4pe2xldCBlLHI9JChuKTtyPXUocix0KTtjb25zdCBpPW4+Pj4yLHM9KGktci52YWx1ZS5sZW5ndGglaSklaTtmb3IoZT0wO2U8cztlKyspci52YWx1ZS5wdXNoKDApO3JldHVybiByLnZhbHVlfWNsYXNzIGV0IGV4dGVuZHMgZntjb25zdHJ1Y3Rvcih0LG4scil7bGV0IGk9NixzPTA7c3VwZXIodCxuLHIpO2NvbnN0IG89cnx8e307aWYoMSE9PXRoaXMubnVtUm91bmRzKXtpZihvLmttYWNLZXl8fG8uaG1hY0tleSl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc2V0IG51bVJvdW5kcyB3aXRoIE1BQ1wiKTtpZihcIkNTSEFLRTEyOFwiPT09dGhpcy5zfHxcIkNTSEFLRTI1NlwiPT09dGhpcy5zKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzZXQgbnVtUm91bmRzIGZvciBDU0hBS0UgdmFyaWFudHNcIil9c3dpdGNoKHRoaXMuSz0xLHRoaXMubT1lKHRoaXMudCx0aGlzLmksdGhpcy5LKSx0aGlzLlI9Vyx0aGlzLmc9USx0aGlzLkI9Six0aGlzLkM9SigpLHRoaXMudj0hMSx0KXtjYXNlXCJTSEEzLTIyNFwiOnRoaXMucD1zPTExNTIsdGhpcy5VPTIyNCx0aGlzLkw9ITAsdGhpcy5UPXRoaXMuazticmVhaztjYXNlXCJTSEEzLTI1NlwiOnRoaXMucD1zPTEwODgsdGhpcy5VPTI1Nix0aGlzLkw9ITAsdGhpcy5UPXRoaXMuazticmVhaztjYXNlXCJTSEEzLTM4NFwiOnRoaXMucD1zPTgzMix0aGlzLlU9Mzg0LHRoaXMuTD0hMCx0aGlzLlQ9dGhpcy5rO2JyZWFrO2Nhc2VcIlNIQTMtNTEyXCI6dGhpcy5wPXM9NTc2LHRoaXMuVT01MTIsdGhpcy5MPSEwLHRoaXMuVD10aGlzLms7YnJlYWs7Y2FzZVwiU0hBS0UxMjhcIjppPTMxLHRoaXMucD1zPTEzNDQsdGhpcy5VPS0xLHRoaXMudj0hMCx0aGlzLkw9ITEsdGhpcy5UPW51bGw7YnJlYWs7Y2FzZVwiU0hBS0UyNTZcIjppPTMxLHRoaXMucD1zPTEwODgsdGhpcy5VPS0xLHRoaXMudj0hMCx0aGlzLkw9ITEsdGhpcy5UPW51bGw7YnJlYWs7Y2FzZVwiS01BQzEyOFwiOmk9NCx0aGlzLnA9cz0xMzQ0LHRoaXMuSShyKSx0aGlzLlU9LTEsdGhpcy52PSEwLHRoaXMuTD0hMSx0aGlzLlQ9dGhpcy5YO2JyZWFrO2Nhc2VcIktNQUMyNTZcIjppPTQsdGhpcy5wPXM9MTA4OCx0aGlzLkkociksdGhpcy5VPS0xLHRoaXMudj0hMCx0aGlzLkw9ITEsdGhpcy5UPXRoaXMuWDticmVhaztjYXNlXCJDU0hBS0UxMjhcIjp0aGlzLnA9cz0xMzQ0LGk9dGhpcy5fKHIpLHRoaXMuVT0tMSx0aGlzLnY9ITAsdGhpcy5MPSExLHRoaXMuVD1udWxsO2JyZWFrO2Nhc2VcIkNTSEFLRTI1NlwiOnRoaXMucD1zPTEwODgsaT10aGlzLl8ociksdGhpcy5VPS0xLHRoaXMudj0hMCx0aGlzLkw9ITEsdGhpcy5UPW51bGw7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoaCl9dGhpcy5GPWZ1bmN0aW9uKHQsbixlLHIsbyl7cmV0dXJuIGZ1bmN0aW9uKHQsbixlLHIsaSxzLG8pe2xldCBoLHUsdz0wO2NvbnN0IGM9W10sZj1pPj4+NSxhPW4+Pj41O2ZvcihoPTA7aDxhJiZuPj1pO2grPWYpcj1XKHQuc2xpY2UoaCxoK2YpLHIpLG4tPWk7Zm9yKHQ9dC5zbGljZShoKSxuJT1pO3QubGVuZ3RoPGY7KXQucHVzaCgwKTtmb3IoaD1uPj4+Myx0W2g+PjJdXj1zPDxoJTQqOCx0W2YtMV1ePTIxNDc0ODM2NDgscj1XKHQscik7MzIqYy5sZW5ndGg8byYmKHU9clt3JTVdW3cvNXwwXSxjLnB1c2godS5OKSwhKDMyKmMubGVuZ3RoPj1vKSk7KWMucHVzaCh1LlkpLHcrPTEsMD09NjQqdyVpJiYoVyhudWxsLHIpLHc9MCk7cmV0dXJuIGN9KHQsbiwwLHIscyxpLG8pfSxvLmhtYWNLZXkmJnRoaXMuTShjKFwiaG1hY0tleVwiLG8uaG1hY0tleSx0aGlzLkspKX1fKHQsbil7Y29uc3QgZT1mdW5jdGlvbih0KXtjb25zdCBuPXR8fHt9O3JldHVybntmdW5jTmFtZTpjKFwiZnVuY05hbWVcIixuLmZ1bmNOYW1lLDEse3ZhbHVlOltdLGJpbkxlbjowfSksY3VzdG9taXphdGlvbjpjKFwiQ3VzdG9taXphdGlvblwiLG4uY3VzdG9taXphdGlvbiwxLHt2YWx1ZTpbXSxiaW5MZW46MH0pfX0odHx8e30pO24mJihlLmZ1bmNOYW1lPW4pO2NvbnN0IHI9dSh0dChlLmZ1bmNOYW1lKSx0dChlLmN1c3RvbWl6YXRpb24pKTtpZigwIT09ZS5jdXN0b21pemF0aW9uLmJpbkxlbnx8MCE9PWUuZnVuY05hbWUuYmluTGVuKXtjb25zdCB0PW50KHIsdGhpcy5wPj4+Myk7Zm9yKGxldCBuPTA7bjx0Lmxlbmd0aDtuKz10aGlzLnA+Pj41KXRoaXMuQz10aGlzLlIodC5zbGljZShuLG4rKHRoaXMucD4+PjUpKSx0aGlzLkMpLHRoaXMubCs9dGhpcy5wO3JldHVybiA0fXJldHVybiAzMX1JKHQpe2NvbnN0IG49ZnVuY3Rpb24odCl7Y29uc3Qgbj10fHx7fTtyZXR1cm57a21hY0tleTpjKFwia21hY0tleVwiLG4ua21hY0tleSwxKSxmdW5jTmFtZTp7dmFsdWU6WzExMjgzNTMwOTldLGJpbkxlbjozMn0sY3VzdG9taXphdGlvbjpjKFwiQ3VzdG9taXphdGlvblwiLG4uY3VzdG9taXphdGlvbiwxLHt2YWx1ZTpbXSxiaW5MZW46MH0pfX0odHx8e30pO3RoaXMuXyh0LG4uZnVuY05hbWUpO2NvbnN0IGU9bnQodHQobi5rbWFjS2V5KSx0aGlzLnA+Pj4zKTtmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrPXRoaXMucD4+PjUpdGhpcy5DPXRoaXMuUihlLnNsaWNlKHQsdCsodGhpcy5wPj4+NSkpLHRoaXMuQyksdGhpcy5sKz10aGlzLnA7dGhpcy5BPSEwfVgodCl7Y29uc3Qgbj11KHt2YWx1ZTp0aGlzLm8uc2xpY2UoKSxiaW5MZW46dGhpcy5ofSxmdW5jdGlvbih0KXtsZXQgbixlLHI9MDtjb25zdCBpPVswLDBdLHM9WzQyOTQ5NjcyOTUmdCx0LzQyOTQ5NjcyOTYmMjA5NzE1MV07Zm9yKG49NjtuPj0wO24tLSllPXNbbj4+Ml0+Pj44Km4mMjU1LDA9PT1lJiYwPT09cnx8KGlbcj4+Ml18PWU8PDgqcixyKz0xKTtyZXR1cm4gcj0wIT09cj9yOjEsaVtyPj4yXXw9cjw8OCpyLHt2YWx1ZTpyKzE+ND9pOltpWzBdXSxiaW5MZW46OCs4KnJ9fSh0Lm91dHB1dExlbikpO3JldHVybiB0aGlzLkYobi52YWx1ZSxuLmJpbkxlbix0aGlzLmwsdGhpcy5nKHRoaXMuQyksdC5vdXRwdXRMZW4pfX1leHBvcnQgZGVmYXVsdCBjbGFzc3tjb25zdHJ1Y3Rvcih0LG4sZSl7aWYoXCJTSEEtMVwiPT10KXRoaXMuTz1uZXcgSyh0LG4sZSk7ZWxzZSBpZihcIlNIQS0yMjRcIj09dHx8XCJTSEEtMjU2XCI9PXQpdGhpcy5PPW5ldyBnKHQsbixlKTtlbHNlIGlmKFwiU0hBLTM4NFwiPT10fHxcIlNIQS01MTJcIj09dCl0aGlzLk89bmV3IHEodCxuLGUpO2Vsc2V7aWYoXCJTSEEzLTIyNFwiIT10JiZcIlNIQTMtMjU2XCIhPXQmJlwiU0hBMy0zODRcIiE9dCYmXCJTSEEzLTUxMlwiIT10JiZcIlNIQUtFMTI4XCIhPXQmJlwiU0hBS0UyNTZcIiE9dCYmXCJDU0hBS0UxMjhcIiE9dCYmXCJDU0hBS0UyNTZcIiE9dCYmXCJLTUFDMTI4XCIhPXQmJlwiS01BQzI1NlwiIT10KXRocm93IG5ldyBFcnJvcihoKTt0aGlzLk89bmV3IGV0KHQsbixlKX19dXBkYXRlKHQpe3RoaXMuTy51cGRhdGUodCl9Z2V0SGFzaCh0LG4pe3JldHVybiB0aGlzLk8uZ2V0SGFzaCh0LG4pfXNldEhNQUNLZXkodCxuLGUpe3RoaXMuTy5zZXRITUFDS2V5KHQsbixlKX1nZXRITUFDKHQsbil7cmV0dXJuIHRoaXMuTy5nZXRITUFDKHQsbil9fVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhLm1qcy5tYXBcbiIsIi8qXG4qIGxvZ2xldmVsIC0gaHR0cHM6Ly9naXRodWIuY29tL3BpbXRlcnJ5L2xvZ2xldmVsXG4qXG4qIENvcHlyaWdodCAoYykgMjAxMyBUaW0gUGVycnlcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuKi9cbihmdW5jdGlvbiAocm9vdCwgZGVmaW5pdGlvbikge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKGRlZmluaXRpb24pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5sb2cgPSBkZWZpbml0aW9uKCk7XG4gICAgfVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvLyBTbGlnaHRseSBkdWJpb3VzIHRyaWNrcyB0byBjdXQgZG93biBtaW5pbWl6ZWQgZmlsZSBzaXplXG4gICAgdmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xuICAgIHZhciB1bmRlZmluZWRUeXBlID0gXCJ1bmRlZmluZWRcIjtcbiAgICB2YXIgaXNJRSA9ICh0eXBlb2Ygd2luZG93ICE9PSB1bmRlZmluZWRUeXBlKSAmJiAodHlwZW9mIHdpbmRvdy5uYXZpZ2F0b3IgIT09IHVuZGVmaW5lZFR5cGUpICYmIChcbiAgICAgICAgL1RyaWRlbnRcXC98TVNJRSAvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gICAgKTtcblxuICAgIHZhciBsb2dNZXRob2RzID0gW1xuICAgICAgICBcInRyYWNlXCIsXG4gICAgICAgIFwiZGVidWdcIixcbiAgICAgICAgXCJpbmZvXCIsXG4gICAgICAgIFwid2FyblwiLFxuICAgICAgICBcImVycm9yXCJcbiAgICBdO1xuXG4gICAgLy8gQ3Jvc3MtYnJvd3NlciBiaW5kIGVxdWl2YWxlbnQgdGhhdCB3b3JrcyBhdCBsZWFzdCBiYWNrIHRvIElFNlxuICAgIGZ1bmN0aW9uIGJpbmRNZXRob2Qob2JqLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBtZXRob2QgPSBvYmpbbWV0aG9kTmFtZV07XG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kLmJpbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXRob2QuYmluZChvYmopO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChtZXRob2QsIG9iaik7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gTWlzc2luZyBiaW5kIHNoaW0gb3IgSUU4ICsgTW9kZXJuaXpyLCBmYWxsYmFjayB0byB3cmFwcGluZ1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5hcHBseShtZXRob2QsIFtvYmosIGFyZ3VtZW50c10pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUcmFjZSgpIGRvZXNuJ3QgcHJpbnQgdGhlIG1lc3NhZ2UgaW4gSUUsIHNvIGZvciB0aGF0IGNhc2Ugd2UgbmVlZCB0byB3cmFwIGl0XG4gICAgZnVuY3Rpb24gdHJhY2VGb3JJRSgpIHtcbiAgICAgICAgaWYgKGNvbnNvbGUubG9nKSB7XG4gICAgICAgICAgICBpZiAoY29uc29sZS5sb2cuYXBwbHkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJbiBvbGQgSUUsIG5hdGl2ZSBjb25zb2xlIG1ldGhvZHMgdGhlbXNlbHZlcyBkb24ndCBoYXZlIGFwcGx5KCkuXG4gICAgICAgICAgICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KGNvbnNvbGUubG9nLCBbY29uc29sZSwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnNvbGUudHJhY2UpIGNvbnNvbGUudHJhY2UoKTtcbiAgICB9XG5cbiAgICAvLyBCdWlsZCB0aGUgYmVzdCBsb2dnaW5nIG1ldGhvZCBwb3NzaWJsZSBmb3IgdGhpcyBlbnZcbiAgICAvLyBXaGVyZXZlciBwb3NzaWJsZSB3ZSB3YW50IHRvIGJpbmQsIG5vdCB3cmFwLCB0byBwcmVzZXJ2ZSBzdGFjayB0cmFjZXNcbiAgICBmdW5jdGlvbiByZWFsTWV0aG9kKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKG1ldGhvZE5hbWUgPT09ICdkZWJ1ZycpIHtcbiAgICAgICAgICAgIG1ldGhvZE5hbWUgPSAnbG9nJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBObyBtZXRob2QgcG9zc2libGUsIGZvciBub3cgLSBmaXhlZCBsYXRlciBieSBlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzXG4gICAgICAgIH0gZWxzZSBpZiAobWV0aG9kTmFtZSA9PT0gJ3RyYWNlJyAmJiBpc0lFKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhY2VGb3JJRTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25zb2xlW21ldGhvZE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBiaW5kTWV0aG9kKGNvbnNvbGUsIG1ldGhvZE5hbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnNvbGUubG9nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBiaW5kTWV0aG9kKGNvbnNvbGUsICdsb2cnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBub29wO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhlc2UgcHJpdmF0ZSBmdW5jdGlvbnMgYWx3YXlzIG5lZWQgYHRoaXNgIHRvIGJlIHNldCBwcm9wZXJseVxuXG4gICAgZnVuY3Rpb24gcmVwbGFjZUxvZ2dpbmdNZXRob2RzKGxldmVsLCBsb2dnZXJOYW1lKSB7XG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9nTWV0aG9kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG1ldGhvZE5hbWUgPSBsb2dNZXRob2RzW2ldO1xuICAgICAgICAgICAgdGhpc1ttZXRob2ROYW1lXSA9IChpIDwgbGV2ZWwpID9cbiAgICAgICAgICAgICAgICBub29wIDpcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGhvZEZhY3RvcnkobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmaW5lIGxvZy5sb2cgYXMgYW4gYWxpYXMgZm9yIGxvZy5kZWJ1Z1xuICAgICAgICB0aGlzLmxvZyA9IHRoaXMuZGVidWc7XG4gICAgfVxuXG4gICAgLy8gSW4gb2xkIElFIHZlcnNpb25zLCB0aGUgY29uc29sZSBpc24ndCBwcmVzZW50IHVudGlsIHlvdSBmaXJzdCBvcGVuIGl0LlxuICAgIC8vIFdlIGJ1aWxkIHJlYWxNZXRob2QoKSByZXBsYWNlbWVudHMgaGVyZSB0aGF0IHJlZ2VuZXJhdGUgbG9nZ2luZyBtZXRob2RzXG4gICAgZnVuY3Rpb24gZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlcyhtZXRob2ROYW1lLCBsZXZlbCwgbG9nZ2VyTmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSB1bmRlZmluZWRUeXBlKSB7XG4gICAgICAgICAgICAgICAgcmVwbGFjZUxvZ2dpbmdNZXRob2RzLmNhbGwodGhpcywgbGV2ZWwsIGxvZ2dlck5hbWUpO1xuICAgICAgICAgICAgICAgIHRoaXNbbWV0aG9kTmFtZV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCeSBkZWZhdWx0LCB3ZSB1c2UgY2xvc2VseSBib3VuZCByZWFsIG1ldGhvZHMgd2hlcmV2ZXIgcG9zc2libGUsIGFuZFxuICAgIC8vIG90aGVyd2lzZSB3ZSB3YWl0IGZvciBhIGNvbnNvbGUgdG8gYXBwZWFyLCBhbmQgdGhlbiB0cnkgYWdhaW4uXG4gICAgZnVuY3Rpb24gZGVmYXVsdE1ldGhvZEZhY3RvcnkobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpIHtcbiAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgICAgcmV0dXJuIHJlYWxNZXRob2QobWV0aG9kTmFtZSkgfHxcbiAgICAgICAgICAgICAgIGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMb2dnZXIobmFtZSwgZGVmYXVsdExldmVsLCBmYWN0b3J5KSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgY3VycmVudExldmVsO1xuICAgICAgdmFyIHN0b3JhZ2VLZXkgPSBcImxvZ2xldmVsXCI7XG4gICAgICBpZiAobmFtZSkge1xuICAgICAgICBzdG9yYWdlS2V5ICs9IFwiOlwiICsgbmFtZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcGVyc2lzdExldmVsSWZQb3NzaWJsZShsZXZlbE51bSkge1xuICAgICAgICAgIHZhciBsZXZlbE5hbWUgPSAobG9nTWV0aG9kc1tsZXZlbE51bV0gfHwgJ3NpbGVudCcpLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gdW5kZWZpbmVkVHlwZSkgcmV0dXJuO1xuXG4gICAgICAgICAgLy8gVXNlIGxvY2FsU3RvcmFnZSBpZiBhdmFpbGFibGVcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlW3N0b3JhZ2VLZXldID0gbGV2ZWxOYW1lO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuXG4gICAgICAgICAgLy8gVXNlIHNlc3Npb24gY29va2llIGFzIGZhbGxiYWNrXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmNvb2tpZSA9XG4gICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0b3JhZ2VLZXkpICsgXCI9XCIgKyBsZXZlbE5hbWUgKyBcIjtcIjtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldFBlcnNpc3RlZExldmVsKCkge1xuICAgICAgICAgIHZhciBzdG9yZWRMZXZlbDtcblxuICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSB1bmRlZmluZWRUeXBlKSByZXR1cm47XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2Vbc3RvcmFnZUtleV07XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuXG4gICAgICAgICAgLy8gRmFsbGJhY2sgdG8gY29va2llcyBpZiBsb2NhbCBzdG9yYWdlIGdpdmVzIHVzIG5vdGhpbmdcbiAgICAgICAgICBpZiAodHlwZW9mIHN0b3JlZExldmVsID09PSB1bmRlZmluZWRUeXBlKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICB2YXIgY29va2llID0gd2luZG93LmRvY3VtZW50LmNvb2tpZTtcbiAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGNvb2tpZS5pbmRleE9mKFxuICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KSArIFwiPVwiKTtcbiAgICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbiAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IC9eKFteO10rKS8uZXhlYyhjb29raWUuc2xpY2UobG9jYXRpb24pKVsxXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIHRoZSBzdG9yZWQgbGV2ZWwgaXMgbm90IHZhbGlkLCB0cmVhdCBpdCBhcyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG4gICAgICAgICAgaWYgKHNlbGYubGV2ZWxzW3N0b3JlZExldmVsXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHN0b3JlZExldmVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdG9yZWRMZXZlbDtcbiAgICAgIH1cblxuICAgICAgLypcbiAgICAgICAqXG4gICAgICAgKiBQdWJsaWMgbG9nZ2VyIEFQSSAtIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGltdGVycnkvbG9nbGV2ZWwgZm9yIGRldGFpbHNcbiAgICAgICAqXG4gICAgICAgKi9cblxuICAgICAgc2VsZi5uYW1lID0gbmFtZTtcblxuICAgICAgc2VsZi5sZXZlbHMgPSB7IFwiVFJBQ0VcIjogMCwgXCJERUJVR1wiOiAxLCBcIklORk9cIjogMiwgXCJXQVJOXCI6IDMsXG4gICAgICAgICAgXCJFUlJPUlwiOiA0LCBcIlNJTEVOVFwiOiA1fTtcblxuICAgICAgc2VsZi5tZXRob2RGYWN0b3J5ID0gZmFjdG9yeSB8fCBkZWZhdWx0TWV0aG9kRmFjdG9yeTtcblxuICAgICAgc2VsZi5nZXRMZXZlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gY3VycmVudExldmVsO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5zZXRMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCwgcGVyc2lzdCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09IFwic3RyaW5nXCIgJiYgc2VsZi5sZXZlbHNbbGV2ZWwudG9VcHBlckNhc2UoKV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBsZXZlbCA9IHNlbGYubGV2ZWxzW2xldmVsLnRvVXBwZXJDYXNlKCldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIGxldmVsID09PSBcIm51bWJlclwiICYmIGxldmVsID49IDAgJiYgbGV2ZWwgPD0gc2VsZi5sZXZlbHMuU0lMRU5UKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRMZXZlbCA9IGxldmVsO1xuICAgICAgICAgICAgICBpZiAocGVyc2lzdCAhPT0gZmFsc2UpIHsgIC8vIGRlZmF1bHRzIHRvIHRydWVcbiAgICAgICAgICAgICAgICAgIHBlcnNpc3RMZXZlbElmUG9zc2libGUobGV2ZWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHNlbGYsIGxldmVsLCBuYW1lKTtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSB1bmRlZmluZWRUeXBlICYmIGxldmVsIDwgc2VsZi5sZXZlbHMuU0lMRU5UKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCJObyBjb25zb2xlIGF2YWlsYWJsZSBmb3IgbG9nZ2luZ1wiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJsb2cuc2V0TGV2ZWwoKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGxldmVsOiBcIiArIGxldmVsO1xuICAgICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNlbGYuc2V0RGVmYXVsdExldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgICAgaWYgKCFnZXRQZXJzaXN0ZWRMZXZlbCgpKSB7XG4gICAgICAgICAgICAgIHNlbGYuc2V0TGV2ZWwobGV2ZWwsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmVuYWJsZUFsbCA9IGZ1bmN0aW9uKHBlcnNpc3QpIHtcbiAgICAgICAgICBzZWxmLnNldExldmVsKHNlbGYubGV2ZWxzLlRSQUNFLCBwZXJzaXN0KTtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuZGlzYWJsZUFsbCA9IGZ1bmN0aW9uKHBlcnNpc3QpIHtcbiAgICAgICAgICBzZWxmLnNldExldmVsKHNlbGYubGV2ZWxzLlNJTEVOVCwgcGVyc2lzdCk7XG4gICAgICB9O1xuXG4gICAgICAvLyBJbml0aWFsaXplIHdpdGggdGhlIHJpZ2h0IGxldmVsXG4gICAgICB2YXIgaW5pdGlhbExldmVsID0gZ2V0UGVyc2lzdGVkTGV2ZWwoKTtcbiAgICAgIGlmIChpbml0aWFsTGV2ZWwgPT0gbnVsbCkge1xuICAgICAgICAgIGluaXRpYWxMZXZlbCA9IGRlZmF1bHRMZXZlbCA9PSBudWxsID8gXCJXQVJOXCIgOiBkZWZhdWx0TGV2ZWw7XG4gICAgICB9XG4gICAgICBzZWxmLnNldExldmVsKGluaXRpYWxMZXZlbCwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8qXG4gICAgICpcbiAgICAgKiBUb3AtbGV2ZWwgQVBJXG4gICAgICpcbiAgICAgKi9cblxuICAgIHZhciBkZWZhdWx0TG9nZ2VyID0gbmV3IExvZ2dlcigpO1xuXG4gICAgdmFyIF9sb2dnZXJzQnlOYW1lID0ge307XG4gICAgZGVmYXVsdExvZ2dlci5nZXRMb2dnZXIgPSBmdW5jdGlvbiBnZXRMb2dnZXIobmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIgfHwgbmFtZSA9PT0gXCJcIikge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJZb3UgbXVzdCBzdXBwbHkgYSBuYW1lIHdoZW4gY3JlYXRpbmcgYSBsb2dnZXIuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvZ2dlciA9IF9sb2dnZXJzQnlOYW1lW25hbWVdO1xuICAgICAgICBpZiAoIWxvZ2dlcikge1xuICAgICAgICAgIGxvZ2dlciA9IF9sb2dnZXJzQnlOYW1lW25hbWVdID0gbmV3IExvZ2dlcihcbiAgICAgICAgICAgIG5hbWUsIGRlZmF1bHRMb2dnZXIuZ2V0TGV2ZWwoKSwgZGVmYXVsdExvZ2dlci5tZXRob2RGYWN0b3J5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nZ2VyO1xuICAgIH07XG5cbiAgICAvLyBHcmFiIHRoZSBjdXJyZW50IGdsb2JhbCBsb2cgdmFyaWFibGUgaW4gY2FzZSBvZiBvdmVyd3JpdGVcbiAgICB2YXIgX2xvZyA9ICh0eXBlb2Ygd2luZG93ICE9PSB1bmRlZmluZWRUeXBlKSA/IHdpbmRvdy5sb2cgOiB1bmRlZmluZWQ7XG4gICAgZGVmYXVsdExvZ2dlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSB1bmRlZmluZWRUeXBlICYmXG4gICAgICAgICAgICAgICB3aW5kb3cubG9nID09PSBkZWZhdWx0TG9nZ2VyKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9nID0gX2xvZztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyO1xuICAgIH07XG5cbiAgICBkZWZhdWx0TG9nZ2VyLmdldExvZ2dlcnMgPSBmdW5jdGlvbiBnZXRMb2dnZXJzKCkge1xuICAgICAgICByZXR1cm4gX2xvZ2dlcnNCeU5hbWU7XG4gICAgfTtcblxuICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyO1xufSkpO1xuIiwiLy8hIG1vbWVudC5qc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICBnbG9iYWwubW9tZW50ID0gZmFjdG9yeSgpXG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBob29rQ2FsbGJhY2s7XG5cbiAgICBmdW5jdGlvbiBob29rcyAoKSB7XG4gICAgICAgIHJldHVybiBob29rQ2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIGRvbmUgdG8gcmVnaXN0ZXIgdGhlIG1ldGhvZCBjYWxsZWQgd2l0aCBtb21lbnQoKVxuICAgIC8vIHdpdGhvdXQgY3JlYXRpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuICAgIGZ1bmN0aW9uIHNldEhvb2tDYWxsYmFjayAoY2FsbGJhY2spIHtcbiAgICAgICAgaG9va0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBBcnJheSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgICAgIC8vIElFOCB3aWxsIHRyZWF0IHVuZGVmaW5lZCBhbmQgbnVsbCBhcyBvYmplY3QgaWYgaXQgd2Fzbid0IGZvclxuICAgICAgICAvLyBpbnB1dCAhPSBudWxsXG4gICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgICAgICAgICAgcmV0dXJuIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCA9PT0gMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaztcbiAgICAgICAgICAgIGZvciAoayBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gdm9pZCAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE51bWJlcl0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF0ZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBEYXRlIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgICAgICB2YXIgcmVzID0gW10sIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKGZuKGFycltpXSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzT3duUHJvcChhLCBiKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBiKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgICAgIGFbaV0gPSBiW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3RvU3RyaW5nJykpIHtcbiAgICAgICAgICAgIGEudG9TdHJpbmcgPSBiLnRvU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkge1xuICAgICAgICAgICAgYS52YWx1ZU9mID0gYi52YWx1ZU9mO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgdHJ1ZSkudXRjKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdFBhcnNpbmdGbGFncygpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1wdHkgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICB1bnVzZWRUb2tlbnMgICAgOiBbXSxcbiAgICAgICAgICAgIHVudXNlZElucHV0ICAgICA6IFtdLFxuICAgICAgICAgICAgb3ZlcmZsb3cgICAgICAgIDogLTIsXG4gICAgICAgICAgICBjaGFyc0xlZnRPdmVyICAgOiAwLFxuICAgICAgICAgICAgbnVsbElucHV0ICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICBpbnZhbGlkTW9udGggICAgOiBudWxsLFxuICAgICAgICAgICAgaW52YWxpZEZvcm1hdCAgIDogZmFsc2UsXG4gICAgICAgICAgICB1c2VySW52YWxpZGF0ZWQgOiBmYWxzZSxcbiAgICAgICAgICAgIGlzbyAgICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgcGFyc2VkRGF0ZVBhcnRzIDogW10sXG4gICAgICAgICAgICBtZXJpZGllbSAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgcmZjMjgyMiAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICB3ZWVrZGF5TWlzbWF0Y2ggOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgICAgIGlmIChtLl9wZiA9PSBudWxsKSB7XG4gICAgICAgICAgICBtLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5fcGY7XG4gICAgfVxuXG4gICAgdmFyIHNvbWU7XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5zb21lKSB7XG4gICAgICAgIHNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzb21lID0gZnVuY3Rpb24gKGZ1bikge1xuICAgICAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiB0ICYmIGZ1bi5jYWxsKHRoaXMsIHRbaV0sIGksIHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQobSkge1xuICAgICAgICBpZiAobS5faXNWYWxpZCA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgZmxhZ3MgPSBnZXRQYXJzaW5nRmxhZ3MobSk7XG4gICAgICAgICAgICB2YXIgcGFyc2VkUGFydHMgPSBzb21lLmNhbGwoZmxhZ3MucGFyc2VkRGF0ZVBhcnRzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpICE9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBpc05vd1ZhbGlkID0gIWlzTmFOKG0uX2QuZ2V0VGltZSgpKSAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLm92ZXJmbG93IDwgMCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5lbXB0eSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkTW9udGggJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZFdlZWtkYXkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3Mud2Vla2RheU1pc21hdGNoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRm9ybWF0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgICAgICghZmxhZ3MubWVyaWRpZW0gfHwgKGZsYWdzLm1lcmlkaWVtICYmIHBhcnNlZFBhcnRzKSk7XG5cbiAgICAgICAgICAgIGlmIChtLl9zdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBpc05vd1ZhbGlkID0gaXNOb3dWYWxpZCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5jaGFyc0xlZnRPdmVyID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLnVudXNlZFRva2Vucy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuYmlnSG91ciA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuID09IG51bGwgfHwgIU9iamVjdC5pc0Zyb3plbihtKSkge1xuICAgICAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBpc05vd1ZhbGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTm93VmFsaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCAoZmxhZ3MpIHtcbiAgICAgICAgdmFyIG0gPSBjcmVhdGVVVEMoTmFOKTtcbiAgICAgICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGV4dGVuZChnZXRQYXJzaW5nRmxhZ3MobSksIGZsYWdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS51c2VySW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gUGx1Z2lucyB0aGF0IGFkZCBwcm9wZXJ0aWVzIHNob3VsZCBhbHNvIGFkZCB0aGUga2V5IGhlcmUgKG51bGwgdmFsdWUpLFxuICAgIC8vIHNvIHdlIGNhbiBwcm9wZXJseSBjbG9uZSBvdXJzZWx2ZXMuXG4gICAgdmFyIG1vbWVudFByb3BlcnRpZXMgPSBob29rcy5tb21lbnRQcm9wZXJ0aWVzID0gW107XG5cbiAgICBmdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgICAgIHZhciBpLCBwcm9wLCB2YWw7XG5cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc0FNb21lbnRPYmplY3QpKSB7XG4gICAgICAgICAgICB0by5faXNBTW9tZW50T2JqZWN0ID0gZnJvbS5faXNBTW9tZW50T2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faSkpIHtcbiAgICAgICAgICAgIHRvLl9pID0gZnJvbS5faTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2YpKSB7XG4gICAgICAgICAgICB0by5fZiA9IGZyb20uX2Y7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sKSkge1xuICAgICAgICAgICAgdG8uX2wgPSBmcm9tLl9sO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fc3RyaWN0KSkge1xuICAgICAgICAgICAgdG8uX3N0cmljdCA9IGZyb20uX3N0cmljdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3R6bSkpIHtcbiAgICAgICAgICAgIHRvLl90em0gPSBmcm9tLl90em07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc1VUQykpIHtcbiAgICAgICAgICAgIHRvLl9pc1VUQyA9IGZyb20uX2lzVVRDO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fb2Zmc2V0KSkge1xuICAgICAgICAgICAgdG8uX29mZnNldCA9IGZyb20uX29mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3BmKSkge1xuICAgICAgICAgICAgdG8uX3BmID0gZ2V0UGFyc2luZ0ZsYWdzKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbG9jYWxlKSkge1xuICAgICAgICAgICAgdG8uX2xvY2FsZSA9IGZyb20uX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICAgICAgdmFsID0gZnJvbVtwcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cblxuICAgIHZhciB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICAvLyBNb21lbnQgcHJvdG90eXBlIG9iamVjdFxuICAgIGZ1bmN0aW9uIE1vbWVudChjb25maWcpIHtcbiAgICAgICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpO1xuICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoY29uZmlnLl9kICE9IG51bGwgPyBjb25maWcuX2QuZ2V0VGltZSgpIDogTmFOKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wIGluIGNhc2UgdXBkYXRlT2Zmc2V0IGNyZWF0ZXMgbmV3IG1vbWVudFxuICAgICAgICAvLyBvYmplY3RzLlxuICAgICAgICBpZiAodXBkYXRlSW5Qcm9ncmVzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNb21lbnQgKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8IChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNGbG9vciAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAvLyAtMCAtPiAwXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcikgfHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0ludChhcmd1bWVudEZvckNvZXJjaW9uKSB7XG4gICAgICAgIHZhciBjb2VyY2VkTnVtYmVyID0gK2FyZ3VtZW50Rm9yQ29lcmNpb24sXG4gICAgICAgICAgICB2YWx1ZSA9IDA7XG5cbiAgICAgICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYWJzRmxvb3IoY29lcmNlZE51bWJlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gY29tcGFyZSB0d28gYXJyYXlzLCByZXR1cm4gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlc1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgICAgIHZhciBsZW4gPSBNYXRoLm1pbihhcnJheTEubGVuZ3RoLCBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGxlbmd0aERpZmYgPSBNYXRoLmFicyhhcnJheTEubGVuZ3RoIC0gYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgICAgICBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8XG4gICAgICAgICAgICAgICAgKCFkb250Q29udmVydCAmJiB0b0ludChhcnJheTFbaV0pICE9PSB0b0ludChhcnJheTJbaV0pKSkge1xuICAgICAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXJuKG1zZykge1xuICAgICAgICBpZiAoaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2YgY29uc29sZSAhPT0gICd1bmRlZmluZWQnKSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRpb24gd2FybmluZzogJyArIG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikge1xuICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihudWxsLCBtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGFyZztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0gJ1xcblsnICsgaSArICddICc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMCwgLTIpOyAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWEgYW5kIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdhcm4obXNnICsgJ1xcbkFyZ3VtZW50czogJyArIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpLmpvaW4oJycpICsgJ1xcbicgKyAobmV3IEVycm9yKCkpLnN0YWNrKTtcbiAgICAgICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9LCBmbik7XG4gICAgfVxuXG4gICAgdmFyIGRlcHJlY2F0aW9ucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlU2ltcGxlKG5hbWUsIG1zZykge1xuICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihuYW1lLCBtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVwcmVjYXRpb25zW25hbWVdKSB7XG4gICAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgICAgICBkZXByZWNhdGlvbnNbbmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG4gICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24gfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQgKGNvbmZpZykge1xuICAgICAgICB2YXIgcHJvcCwgaTtcbiAgICAgICAgZm9yIChpIGluIGNvbmZpZykge1xuICAgICAgICAgICAgcHJvcCA9IGNvbmZpZ1tpXTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgdGhpc1tpXSA9IHByb3A7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXNbJ18nICsgaV0gPSBwcm9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgLy8gTGVuaWVudCBvcmRpbmFsIHBhcnNpbmcgYWNjZXB0cyBqdXN0IGEgbnVtYmVyIGluIGFkZGl0aW9uIHRvXG4gICAgICAgIC8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX2RheU9mTW9udGhPcmRpbmFsUGFyc2UuXG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgdGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgKHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2Uuc291cmNlIHx8IHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UpICtcbiAgICAgICAgICAgICAgICAnfCcgKyAoL1xcZHsxLDJ9Lykuc291cmNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjaGlsZENvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gZXh0ZW5kKHt9LCBwYXJlbnRDb25maWcpLCBwcm9wO1xuICAgICAgICBmb3IgKHByb3AgaW4gY2hpbGRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pICYmIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgcGFyZW50Q29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgY2hpbGRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRDb25maWdbcHJvcF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBjaGlsZENvbmZpZ1twcm9wXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzW3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHByb3AgaW4gcGFyZW50Q29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgICAgICFoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICAgICBpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGNoYW5nZXMgdG8gcHJvcGVydGllcyBkb24ndCBtb2RpZnkgcGFyZW50IGNvbmZpZ1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGV4dGVuZCh7fSwgcmVzW3Byb3BdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIExvY2FsZShjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldChjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXM7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICB2YXIgaSwgcmVzID0gW107XG4gICAgICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0Q2FsZW5kYXIgPSB7XG4gICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIgKGtleSwgbW9tLCBub3cpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX2NhbGVuZGFyW2tleV0gfHwgdGhpcy5fY2FsZW5kYXJbJ3NhbWVFbHNlJ107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dCkgPyBvdXRwdXQuY2FsbChtb20sIG5vdykgOiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb25nRGF0ZUZvcm1hdCA9IHtcbiAgICAgICAgTFRTICA6ICdoOm1tOnNzIEEnLFxuICAgICAgICBMVCAgIDogJ2g6bW0gQScsXG4gICAgICAgIEwgICAgOiAnTU0vREQvWVlZWScsXG4gICAgICAgIExMICAgOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgTExMICA6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb25nRGF0ZUZvcm1hdCAoa2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldLFxuICAgICAgICAgICAgZm9ybWF0VXBwZXIgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXkudG9VcHBlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGZvcm1hdCB8fCAhZm9ybWF0VXBwZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldID0gZm9ybWF0VXBwZXIucmVwbGFjZSgvTU1NTXxNTXxERHxkZGRkL2csIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWwuc2xpY2UoMSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0SW52YWxpZERhdGUgPSAnSW52YWxpZCBkYXRlJztcblxuICAgIGZ1bmN0aW9uIGludmFsaWREYXRlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludmFsaWREYXRlO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0T3JkaW5hbCA9ICclZCc7XG4gICAgdmFyIGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9LztcblxuICAgIGZ1bmN0aW9uIG9yZGluYWwgKG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCclZCcsIG51bWJlcik7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRSZWxhdGl2ZVRpbWUgPSB7XG4gICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgIHBhc3QgICA6ICclcyBhZ28nLFxuICAgICAgICBzICA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgICAgIG0gIDogJ2EgbWludXRlJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgIGggIDogJ2FuIGhvdXInLFxuICAgICAgICBoaCA6ICclZCBob3VycycsXG4gICAgICAgIGQgIDogJ2EgZGF5JyxcbiAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgIE0gIDogJ2EgbW9udGgnLFxuICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICB5ICA6ICdhIHllYXInLFxuICAgICAgICB5eSA6ICclZCB5ZWFycydcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddO1xuICAgICAgICByZXR1cm4gKGlzRnVuY3Rpb24ob3V0cHV0KSkgP1xuICAgICAgICAgICAgb3V0cHV0KG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkgOlxuICAgICAgICAgICAgb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFzdEZ1dHVyZSAoZGlmZiwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdCkgPyBmb3JtYXQob3V0cHV0KSA6IGZvcm1hdC5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhbGlhc2VzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRVbml0QWxpYXMgKHVuaXQsIHNob3J0aGFuZCkge1xuICAgICAgICB2YXIgbG93ZXJDYXNlID0gdW5pdC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBhbGlhc2VzW2xvd2VyQ2FzZV0gPSBhbGlhc2VzW2xvd2VyQ2FzZSArICdzJ10gPSBhbGlhc2VzW3Nob3J0aGFuZF0gPSB1bml0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdW5pdHMgPT09ICdzdHJpbmcnID8gYWxpYXNlc1t1bml0c10gfHwgYWxpYXNlc1t1bml0cy50b0xvd2VyQ2FzZSgpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sXG4gICAgICAgICAgICBub3JtYWxpemVkUHJvcCxcbiAgICAgICAgICAgIHByb3A7XG5cbiAgICAgICAgZm9yIChwcm9wIGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChpbnB1dE9iamVjdCwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApO1xuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkUHJvcCkge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRJbnB1dDtcbiAgICB9XG5cbiAgICB2YXIgcHJpb3JpdGllcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkVW5pdFByaW9yaXR5KHVuaXQsIHByaW9yaXR5KSB7XG4gICAgICAgIHByaW9yaXRpZXNbdW5pdF0gPSBwcmlvcml0eTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzT2JqKSB7XG4gICAgICAgIHZhciB1bml0cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciB1IGluIHVuaXRzT2JqKSB7XG4gICAgICAgICAgICB1bml0cy5wdXNoKHt1bml0OiB1LCBwcmlvcml0eTogcHJpb3JpdGllc1t1XX0pO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1bml0cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB6ZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCwgZm9yY2VTaWduKSB7XG4gICAgICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgICAgICBzaWduID0gbnVtYmVyID49IDA7XG4gICAgICAgIHJldHVybiAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICsgYWJzTnVtYmVyO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KFtIaF1tbShzcyk/fE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFFvP3xZWVlZWVl8WVlZWVl8WVlZWXxZWXxnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xraz98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZztcblxuICAgIHZhciBsb2NhbEZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nO1xuXG4gICAgdmFyIGZvcm1hdEZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgdmFyIGZvcm1hdFRva2VuRnVuY3Rpb25zID0ge307XG5cbiAgICAvLyB0b2tlbjogICAgJ00nXG4gICAgLy8gcGFkZGVkOiAgIFsnTU0nLCAyXVxuICAgIC8vIG9yZGluYWw6ICAnTW8nXG4gICAgLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XG4gICAgZnVuY3Rpb24gYWRkRm9ybWF0VG9rZW4gKHRva2VuLCBwYWRkZWQsIG9yZGluYWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZGRlZCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb0ZpbGwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBwYWRkZWRbMV0sIHBhZGRlZFsyXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmRpbmFsKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRva2VuKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XFxdJC9nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gZm9ybWF0Lm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLCBpLCBsZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gJycsIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gaXNGdW5jdGlvbihhcnJheVtpXSkgPyBhcnJheVtpXS5jYWxsKG1vbSwgZm9ybWF0KSA6IGFycmF5W2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBmb3JtYXQgZGF0ZSB1c2luZyBuYXRpdmUgZGF0ZSBvYmplY3RcbiAgICBmdW5jdGlvbiBmb3JtYXRNb21lbnQobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sb2NhbGVEYXRhKCkpO1xuICAgICAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSA9IGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpO1xuXG4gICAgICAgIHJldHVybiBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XShtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGkgPSA1O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiBsb2NhbEZvcm1hdHRpbmdUb2tlbnMudGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShsb2NhbEZvcm1hdHRpbmdUb2tlbnMsIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2Vucyk7XG4gICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoMSAgICAgICAgID0gL1xcZC87ICAgICAgICAgICAgLy8gICAgICAgMCAtIDlcbiAgICB2YXIgbWF0Y2gyICAgICAgICAgPSAvXFxkXFxkLzsgICAgICAgICAgLy8gICAgICAwMCAtIDk5XG4gICAgdmFyIG1hdGNoMyAgICAgICAgID0gL1xcZHszfS87ICAgICAgICAgLy8gICAgIDAwMCAtIDk5OVxuICAgIHZhciBtYXRjaDQgICAgICAgICA9IC9cXGR7NH0vOyAgICAgICAgIC8vICAgIDAwMDAgLSA5OTk5XG4gICAgdmFyIG1hdGNoNiAgICAgICAgID0gL1srLV0/XFxkezZ9LzsgICAgLy8gLTk5OTk5OSAtIDk5OTk5OVxuICAgIHZhciBtYXRjaDF0bzIgICAgICA9IC9cXGRcXGQ/LzsgICAgICAgICAvLyAgICAgICAwIC0gOTlcbiAgICB2YXIgbWF0Y2gzdG80ICAgICAgPSAvXFxkXFxkXFxkXFxkPy87ICAgICAvLyAgICAgOTk5IC0gOTk5OVxuICAgIHZhciBtYXRjaDV0bzYgICAgICA9IC9cXGRcXGRcXGRcXGRcXGRcXGQ/LzsgLy8gICA5OTk5OSAtIDk5OTk5OVxuICAgIHZhciBtYXRjaDF0bzMgICAgICA9IC9cXGR7MSwzfS87ICAgICAgIC8vICAgICAgIDAgLSA5OTlcbiAgICB2YXIgbWF0Y2gxdG80ICAgICAgPSAvXFxkezEsNH0vOyAgICAgICAvLyAgICAgICAwIC0gOTk5OVxuICAgIHZhciBtYXRjaDF0bzYgICAgICA9IC9bKy1dP1xcZHsxLDZ9LzsgIC8vIC05OTk5OTkgLSA5OTk5OTlcblxuICAgIHZhciBtYXRjaFVuc2lnbmVkICA9IC9cXGQrLzsgICAgICAgICAgIC8vICAgICAgIDAgLSBpbmZcbiAgICB2YXIgbWF0Y2hTaWduZWQgICAgPSAvWystXT9cXGQrLzsgICAgICAvLyAgICAtaW5mIC0gaW5mXG5cbiAgICB2YXIgbWF0Y2hPZmZzZXQgICAgPSAvWnxbKy1dXFxkXFxkOj9cXGRcXGQvZ2k7IC8vICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuICAgIHZhciBtYXRjaFNob3J0T2Zmc2V0ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vZ2k7IC8vICswMCAtMDAgKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG5cbiAgICB2YXIgbWF0Y2hUaW1lc3RhbXAgPSAvWystXT9cXGQrKFxcLlxcZHsxLDN9KT8vOyAvLyAxMjM0NTY3ODkgMTIzNDU2Nzg5LjEyM1xuXG4gICAgLy8gYW55IHdvcmQgKG9yIHR3bykgY2hhcmFjdGVycyBvciBudW1iZXJzIGluY2x1ZGluZyB0d28vdGhyZWUgd29yZCBtb250aCBpbiBhcmFiaWMuXG4gICAgLy8gaW5jbHVkZXMgc2NvdHRpc2ggZ2FlbGljIHR3byB3b3JkIGFuZCBoeXBoZW5hdGVkIG1vbnRoc1xuICAgIHZhciBtYXRjaFdvcmQgPSAvWzAtOV17MCwyNTZ9WydhLXpcXHUwMEEwLVxcdTA1RkZcXHUwNzAwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGMDdcXHVGRjEwLVxcdUZGRUZdezEsMjU2fXxbXFx1MDYwMC1cXHUwNkZGXFwvXXsxLDI1Nn0oXFxzKj9bXFx1MDYwMC1cXHUwNkZGXXsxLDI1Nn0pezEsMn0vaTtcblxuICAgIHZhciByZWdleGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRSZWdleFRva2VuICh0b2tlbiwgcmVnZXgsIHN0cmljdFJlZ2V4KSB7XG4gICAgICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleCkgPyByZWdleCA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIChpc1N0cmljdCAmJiBzdHJpY3RSZWdleCkgPyBzdHJpY3RSZWdleCA6IHJlZ2V4O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbiAodG9rZW4sIGNvbmZpZykge1xuICAgICAgICBpZiAoIWhhc093blByb3AocmVnZXhlcywgdG9rZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh1bmVzY2FwZUZvcm1hdCh0b2tlbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlZ2V4ZXNbdG9rZW5dKGNvbmZpZy5fc3RyaWN0LCBjb25maWcuX2xvY2FsZSk7XG4gICAgfVxuXG4gICAgLy8gQ29kZSBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzU2MTQ5My9pcy10aGVyZS1hLXJlZ2V4cC1lc2NhcGUtZnVuY3Rpb24taW4tamF2YXNjcmlwdFxuICAgIGZ1bmN0aW9uIHVuZXNjYXBlRm9ybWF0KHMpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2V4RXNjYXBlKHMucmVwbGFjZSgnXFxcXCcsICcnKS5yZXBsYWNlKC9cXFxcKFxcWyl8XFxcXChcXF0pfFxcWyhbXlxcXVxcW10qKVxcXXxcXFxcKC4pL2csIGZ1bmN0aW9uIChtYXRjaGVkLCBwMSwgcDIsIHAzLCBwNCkge1xuICAgICAgICAgICAgcmV0dXJuIHAxIHx8IHAyIHx8IHAzIHx8IHA0O1xuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVnZXhFc2NhcGUocykge1xuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW5zID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGksIGZ1bmMgPSBjYWxsYmFjaztcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRva2VuID0gW3Rva2VuXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOdW1iZXIoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2NhbGxiYWNrXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2VuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5baV1dID0gZnVuYztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICAgICAgY2FsbGJhY2soaW5wdXQsIGNvbmZpZy5fdywgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBpbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGhhc093blByb3AodG9rZW5zLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgWUVBUiA9IDA7XG4gICAgdmFyIE1PTlRIID0gMTtcbiAgICB2YXIgREFURSA9IDI7XG4gICAgdmFyIEhPVVIgPSAzO1xuICAgIHZhciBNSU5VVEUgPSA0O1xuICAgIHZhciBTRUNPTkQgPSA1O1xuICAgIHZhciBNSUxMSVNFQ09ORCA9IDY7XG4gICAgdmFyIFdFRUsgPSA3O1xuICAgIHZhciBXRUVLREFZID0gODtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdZJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgeSA9IHRoaXMueWVhcigpO1xuICAgICAgICByZXR1cm4geSA8PSA5OTk5ID8gJycgKyB5IDogJysnICsgeTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVknLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy55ZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVknLCAgIDRdLCAgICAgICAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVknLCAgNV0sICAgICAgIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygneWVhcicsICd5Jyk7XG5cbiAgICAvLyBQUklPUklUSUVTXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3llYXInLCAxKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1knLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWScsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWScsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnWVlZWVknLCAnWVlZWVlZJ10sIFlFQVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gaW5wdXQubGVuZ3RoID09PSAyID8gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpIDogdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICBmdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCkgfHwgeWVhciAlIDQwMCA9PT0gMDtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgaG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyMDAwKTtcbiAgICB9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIHRydWUpO1xuXG4gICAgZnVuY3Rpb24gZ2V0SXNMZWFwWWVhciAoKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0U2V0ICh1bml0LCBrZWVwVGltZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNldCQxKHRoaXMsIHVuaXQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywga2VlcFRpbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldCAobW9tLCB1bml0KSB7XG4gICAgICAgIHJldHVybiBtb20uaXNWYWxpZCgpID9cbiAgICAgICAgICAgIG1vbS5fZFsnZ2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSgpIDogTmFOO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldCQxIChtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgICAgIGlmIChtb20uaXNWYWxpZCgpICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICh1bml0ID09PSAnRnVsbFllYXInICYmIGlzTGVhcFllYXIobW9tLnllYXIoKSkgJiYgbW9tLm1vbnRoKCkgPT09IDEgJiYgbW9tLmRhdGUoKSA9PT0gMjkpIHtcbiAgICAgICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUsIG1vbS5tb250aCgpLCBkYXlzSW5Nb250aCh2YWx1ZSwgbW9tLm1vbnRoKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzdHJpbmdHZXQgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gc3RyaW5nU2V0ICh1bml0cywgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplT2JqZWN0VW5pdHModW5pdHMpO1xuICAgICAgICAgICAgdmFyIHByaW9yaXRpemVkID0gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0cyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW9yaXRpemVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpc1twcmlvcml0aXplZFtpXS51bml0XSh1bml0c1twcmlvcml0aXplZFtpXS51bml0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9kKG4sIHgpIHtcbiAgICAgICAgcmV0dXJuICgobiAlIHgpICsgeCkgJSB4O1xuICAgIH1cblxuICAgIHZhciBpbmRleE9mO1xuXG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gICAgICAgIGluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpbmRleE9mID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIC8vIEkga25vd1xuICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBvKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgICAgICBpZiAoaXNOYU4oeWVhcikgfHwgaXNOYU4obW9udGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtb2RNb250aCA9IG1vZChtb250aCwgMTIpO1xuICAgICAgICB5ZWFyICs9IChtb250aCAtIG1vZE1vbnRoKSAvIDEyO1xuICAgICAgICByZXR1cm4gbW9kTW9udGggPT09IDEgPyAoaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogMjgpIDogKDMxIC0gbW9kTW9udGggJSA3ICUgMik7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ00nLCBbJ01NJywgMl0sICdNbycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9udGgoKSArIDE7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21vbnRoJywgJ00nKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21vbnRoJywgOCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdNJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTScsICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTScsICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNJywgJ01NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gdG9JbnQoaW5wdXQpIC0gMTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNTU0nLCAnTU1NTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciBtb250aCA9IGNvbmZpZy5fbG9jYWxlLm1vbnRoc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZmluZCBhIG1vbnRoIG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZC5cbiAgICAgICAgaWYgKG1vbnRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFycmF5W01PTlRIXSA9IG1vbnRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZE1vbnRoID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIHZhciBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT8vO1xuICAgIHZhciBkZWZhdWx0TG9jYWxlTW9udGhzID0gJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzIChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpID8gdGhpcy5fbW9udGhzIDpcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpID8gdGhpcy5fbW9udGhzW20ubW9udGgoKV0gOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzWyh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCA9ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNTaG9ydCAobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpID8gdGhpcy5fbW9udGhzU2hvcnQgOlxuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0WydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXSA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFtNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCB1c2VkXG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzUGFyc2UgKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZS5jYWxsKHRoaXMsIG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogYWRkIHNvcnRpbmdcbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlclxuICAgICAgICAvLyBzZWUgc29ydGluZyBpbiBjb21wdXRlTW9udGhzUGFyc2VcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIXRoaXMuX21vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKSArICd8XicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NTScgJiYgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NJyAmJiB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX21vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc2V0TW9udGggKG1vbSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGRheU9mTW9udGg7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAoL15cXGQrJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtb20ubG9jYWxlRGF0YSgpLm1vbnRoc1BhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBBbm90aGVyIHNpbGVudCBmYWlsdXJlP1xuICAgICAgICAgICAgICAgIGlmICghaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGF5T2ZNb250aCA9IE1hdGgubWluKG1vbS5kYXRlKCksIGRheXNJbk1vbnRoKG1vbS55ZWFyKCksIHZhbHVlKSk7XG4gICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyAnTW9udGgnXSh2YWx1ZSwgZGF5T2ZNb250aCk7XG4gICAgICAgIHJldHVybiBtb207XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TW9udGggKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXRNb250aCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgJ01vbnRoJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCAoKSB7XG4gICAgICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gbW9udGhzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSBkZWZhdWx0TW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IDogdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TW9udGhzUmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gbW9udGhzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IGRlZmF1bHRNb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaG9ydFBpZWNlcyA9IFtdLCBsb25nUGllY2VzID0gW10sIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLCBtb207XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG4gICAgICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGF0ZSAoeSwgbSwgZCwgaCwgTSwgcywgbXMpIHtcbiAgICAgICAgLy8gY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6XG4gICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8xODEzNDhcbiAgICAgICAgdmFyIGRhdGU7XG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSArIDQwMCwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0RnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUgKHkpIHtcbiAgICAgICAgdmFyIGRhdGU7XG4gICAgICAgIC8vIHRoZSBEYXRlLlVUQyBmdW5jdGlvbiByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgYXJnc1swXSA9IHkgKyA0MDA7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbiAgICBmdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICAgICAgZndkID0gNyArIGRvdyAtIGRveSxcbiAgICAgICAgICAgIC8vIGZpcnN0LXdlZWsgZGF5IGxvY2FsIHdlZWtkYXkgLS0gd2hpY2ggbG9jYWwgd2Vla2RheSBpcyBmd2RcbiAgICAgICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgNztcblxuICAgICAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbiAgICB9XG5cbiAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgbG9jYWxXZWVrZGF5ID0gKDcgKyB3ZWVrZGF5IC0gZG93KSAlIDcsXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRheU9mWWVhciA9IDEgKyA3ICogKHdlZWsgLSAxKSArIGxvY2FsV2Vla2RheSArIHdlZWtPZmZzZXQsXG4gICAgICAgICAgICByZXNZZWFyLCByZXNEYXlPZlllYXI7XG5cbiAgICAgICAgaWYgKGRheU9mWWVhciA8PSAwKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciAtIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlzSW5ZZWFyKHJlc1llYXIpICsgZGF5T2ZZZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKGRheU9mWWVhciA+IGRheXNJblllYXIoeWVhcikpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyICsgMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhciAtIGRheXNJblllYXIoeWVhcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhcjtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyLFxuICAgICAgICAgICAgZGF5T2ZZZWFyOiByZXNEYXlPZlllYXJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQobW9tLnllYXIoKSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2VlayA9IE1hdGguZmxvb3IoKG1vbS5kYXlPZlllYXIoKSAtIHdlZWtPZmZzZXQgLSAxKSAvIDcpICsgMSxcbiAgICAgICAgICAgIHJlc1dlZWssIHJlc1llYXI7XG5cbiAgICAgICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSAtIDE7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrID4gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayAtIHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KTtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2VlazogcmVzV2VlayxcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrc0luWWVhcih5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0TmV4dCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyICsgMSwgZG93LCBkb3kpO1xuICAgICAgICByZXR1cm4gKGRheXNJblllYXIoeWVhcikgLSB3ZWVrT2Zmc2V0ICsgd2Vla09mZnNldE5leHQpIC8gNztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigndycsIFsnd3cnLCAyXSwgJ3dvJywgJ3dlZWsnKTtcbiAgICBhZGRGb3JtYXRUb2tlbignVycsIFsnV1cnLCAyXSwgJ1dvJywgJ2lzb1dlZWsnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnd2VlaycsICd3Jyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrJywgJ1cnKTtcblxuICAgIC8vIFBSSU9SSVRJRVNcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnd2VlaycsIDUpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnaXNvV2VlaycsIDUpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigndycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3d3JywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1cnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdXVycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsndycsICd3dycsICdXJywgJ1dXJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAxKV0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrIChtb20pIHtcbiAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIobW9tLCB0aGlzLl93ZWVrLmRvdywgdGhpcy5fd2Vlay5kb3kpLndlZWs7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrID0ge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mV2VlayAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mWWVhciAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRveTtcbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrIChpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrIChpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHdlZWtPZlllYXIodGhpcywgMSwgNCkud2VlaztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkJywgMCwgJ2RvJywgJ2RheScpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNNaW4odGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZScsIDAsIDAsICd3ZWVrZGF5Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ0UnLCAwLCAwLCAnaXNvV2Vla2RheScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXknLCAnZCcpO1xuICAgIGFkZFVuaXRBbGlhcygnd2Vla2RheScsICdlJyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrZGF5JywgJ0UnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdkYXknLCAxMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrZGF5JywgMTEpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnaXNvV2Vla2RheScsIDExKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2QnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2UnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0UnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2RkJywgJ2RkZCcsICdkZGRkJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgd2Vla2RheSA9IGNvbmZpZy5fbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIC8vIGlmIHdlIGRpZG4ndCBnZXQgYSB3ZWVrZGF5IG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZFxuICAgICAgICBpZiAod2Vla2RheSAhPSBudWxsKSB7XG4gICAgICAgICAgICB3ZWVrLmQgPSB3ZWVrZGF5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZFdlZWtkYXkgPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkJywgJ2UnLCAnRSddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc05hTihpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChpbnB1dCwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5wdXQgPSBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCk7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KSAlIDcgfHwgNztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNOYU4oaW5wdXQpID8gbnVsbCA6IGlucHV0O1xuICAgIH1cblxuICAgIC8vIExPQ0FMRVNcbiAgICBmdW5jdGlvbiBzaGlmdFdlZWtkYXlzICh3cywgbikge1xuICAgICAgICByZXR1cm4gd3Muc2xpY2UobiwgNykuY29uY2F0KHdzLnNsaWNlKDAsIG4pKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzID0gJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzIChtLCBmb3JtYXQpIHtcbiAgICAgICAgdmFyIHdlZWtkYXlzID0gaXNBcnJheSh0aGlzLl93ZWVrZGF5cykgPyB0aGlzLl93ZWVrZGF5cyA6XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1sobSAmJiBtICE9PSB0cnVlICYmIHRoaXMuX3dlZWtkYXlzLmlzRm9ybWF0LnRlc3QoZm9ybWF0KSkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ107XG4gICAgICAgIHJldHVybiAobSA9PT0gdHJ1ZSkgPyBzaGlmdFdlZWtkYXlzKHdlZWtkYXlzLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogKG0pID8gd2Vla2RheXNbbS5kYXkoKV0gOiB3ZWVrZGF5cztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPSAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzU2hvcnQgKG0pIHtcbiAgICAgICAgcmV0dXJuIChtID09PSB0cnVlKSA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNTaG9ydCwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IChtKSA/IHRoaXMuX3dlZWtkYXlzU2hvcnRbbS5kYXkoKV0gOiB0aGlzLl93ZWVrZGF5c1Nob3J0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNNaW4gKG0pIHtcbiAgICAgICAgcmV0dXJuIChtID09PSB0cnVlKSA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNNaW4sIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiAobSkgPyB0aGlzLl93ZWVrZGF5c01pblttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzTWluO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlJDEod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBpaSwgbW9tLCBsbGMgPSB3ZWVrZGF5TmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgKytpKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzUGFyc2UgKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UkMS5jYWxsKHRoaXMsIHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZGQnICYmIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGQnICYmIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGQnICYmIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5ID0gdGhpcy5faXNVVEMgPyB0aGlzLl9kLmdldFVUQ0RheSgpIDogdGhpcy5fZC5nZXREYXkoKTtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlucHV0ID0gcGFyc2VXZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoaW5wdXQgLSBkYXksICdkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdlZWtkYXkgPSAodGhpcy5kYXkoKSArIDcgLSB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3cpICUgNztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoaW5wdXQgLSB3ZWVrZGF5LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT0RheU9mV2VlayAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxuICAgICAgICAvLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KVxuICAgICAgICAvLyBhcyBhIHNldHRlciwgc3VuZGF5IHNob3VsZCBiZWxvbmcgdG8gdGhlIHByZXZpb3VzIHdlZWsuXG5cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB3ZWVrZGF5ID0gcGFyc2VJc29XZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkodGhpcy5kYXkoKSAlIDcgPyB3ZWVrZGF5IDogd2Vla2RheSAtIDcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgfHwgNztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0V2Vla2RheXNSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1JlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gd2Vla2RheXNTaG9ydFJlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiB3ZWVrZGF5c01pblJlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNNaW5SZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjb21wdXRlV2Vla2RheXNQYXJzZSAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtaW5QaWVjZXMgPSBbXSwgc2hvcnRQaWVjZXMgPSBbXSwgbG9uZ1BpZWNlcyA9IFtdLCBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSwgbW9tLCBtaW5wLCBzaG9ydHAsIGxvbmdwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIG1pbnAgPSB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgc2hvcnRwID0gdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgbG9uZ3AgPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpO1xuICAgICAgICAgICAgbWluUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgd2Vla2RheSAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIG1pblBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWluUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBoRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga0Zvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNDtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSCcsIFsnSEgnLCAyXSwgMCwgJ2hvdXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgaEZvcm1hdCk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2snLCBbJ2trJywgMl0sIDAsIGtGb3JtYXQpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbSAodG9rZW4sIGxvd2VyY2FzZSkge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKHRoaXMuaG91cnMoKSwgdGhpcy5taW51dGVzKCksIGxvd2VyY2FzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1lcmlkaWVtKCdhJywgdHJ1ZSk7XG4gICAgbWVyaWRpZW0oJ0EnLCBmYWxzZSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2hvdXInLCAnaCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2hvdXInLCAxMyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBmdW5jdGlvbiBtYXRjaE1lcmlkaWVtIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX21lcmlkaWVtUGFyc2U7XG4gICAgfVxuXG4gICAgYWRkUmVnZXhUb2tlbignYScsICBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdBJywgIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0gnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdoJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignaycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0hIJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2hoJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2trJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkUmVnZXhUb2tlbignaG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdobW1zcycsIG1hdGNoNXRvNik7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW1zcycsIG1hdGNoNXRvNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnSCcsICdISCddLCBIT1VSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIGtJbnB1dCA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSBrSW5wdXQgPT09IDI0ID8gMCA6IGtJbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnYScsICdBJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2lzUG0gPSBjb25maWcuX2xvY2FsZS5pc1BNKGlucHV0KTtcbiAgICAgICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydoJywgJ2hoJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgICAgICB2YXIgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNDtcbiAgICAgICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUlzUE0gKGlucHV0KSB7XG4gICAgICAgIC8vIElFOCBRdWlya3MgTW9kZSAmIElFNyBTdGFuZGFyZHMgTW9kZSBkbyBub3QgYWxsb3cgYWNjZXNzaW5nIHN0cmluZ3MgbGlrZSBhcnJheXNcbiAgICAgICAgLy8gVXNpbmcgY2hhckF0IHNob3VsZCBiZSBtb3JlIGNvbXBhdGlibGUuXG4gICAgICAgIHJldHVybiAoKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApID09PSAncCcpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1lcmlkaWVtIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG0nIDogJ1BNJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIFNldHRpbmcgdGhlIGhvdXIgc2hvdWxkIGtlZXAgdGhlIHRpbWUsIGJlY2F1c2UgdGhlIHVzZXIgZXhwbGljaXRseVxuICAgIC8vIHNwZWNpZmllZCB3aGljaCBob3VyIHRoZXkgd2FudC4gU28gdHJ5aW5nIHRvIG1haW50YWluIHRoZSBzYW1lIGhvdXIgKGluXG4gICAgLy8gYSBuZXcgdGltZXpvbmUpIG1ha2VzIHNlbnNlLiBBZGRpbmcvc3VidHJhY3RpbmcgaG91cnMgZG9lcyBub3QgZm9sbG93XG4gICAgLy8gdGhpcyBydWxlLlxuICAgIHZhciBnZXRTZXRIb3VyID0gbWFrZUdldFNldCgnSG91cnMnLCB0cnVlKTtcblxuICAgIHZhciBiYXNlQ29uZmlnID0ge1xuICAgICAgICBjYWxlbmRhcjogZGVmYXVsdENhbGVuZGFyLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDogZGVmYXVsdExvbmdEYXRlRm9ybWF0LFxuICAgICAgICBpbnZhbGlkRGF0ZTogZGVmYXVsdEludmFsaWREYXRlLFxuICAgICAgICBvcmRpbmFsOiBkZWZhdWx0T3JkaW5hbCxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UsXG4gICAgICAgIHJlbGF0aXZlVGltZTogZGVmYXVsdFJlbGF0aXZlVGltZSxcblxuICAgICAgICBtb250aHM6IGRlZmF1bHRMb2NhbGVNb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQsXG5cbiAgICAgICAgd2VlazogZGVmYXVsdExvY2FsZVdlZWssXG5cbiAgICAgICAgd2Vla2RheXM6IGRlZmF1bHRMb2NhbGVXZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW46IGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbixcbiAgICAgICAgd2Vla2RheXNTaG9ydDogZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQsXG5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2VcbiAgICB9O1xuXG4gICAgLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbG9jYWxlIGNvbmZpZyBmaWxlc1xuICAgIHZhciBsb2NhbGVzID0ge307XG4gICAgdmFyIGxvY2FsZUZhbWlsaWVzID0ge307XG4gICAgdmFyIGdsb2JhbExvY2FsZTtcblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5O1xuICAgIH1cblxuICAgIC8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheVxuICAgIC8vIHRyeSBbJ2VuLWF1JywgJ2VuLWdiJ10gYXMgJ2VuLWF1JywgJ2VuLWdiJywgJ2VuJywgYXMgaW4gbW92ZSB0aHJvdWdoIHRoZSBsaXN0IHRyeWluZyBlYWNoXG4gICAgLy8gc3Vic3RyaW5nIGZyb20gbW9zdCBzcGVjaWZpYyB0byBsZWFzdCwgYnV0IG1vdmUgdG8gdGhlIG5leHQgYXJyYXkgaXRlbSBpZiBpdCdzIGEgbW9yZSBzcGVjaWZpYyB2YXJpYW50IHRoYW4gdGhlIGN1cnJlbnQgcm9vdFxuICAgIGZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgICAgICB2YXIgaSA9IDAsIGosIG5leHQsIGxvY2FsZSwgc3BsaXQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgaiA9IHNwbGl0Lmxlbmd0aDtcbiAgICAgICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgICAgIHdoaWxlIChqID4gMCkge1xuICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQubGVuZ3RoID49IGogJiYgY29tcGFyZUFycmF5cyhzcGxpdCwgbmV4dCwgdHJ1ZSkgPj0gaiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy90aGUgbmV4dCBhcnJheSBpdGVtIGlzIGJldHRlciB0aGFuIGEgc2hhbGxvd2VyIHN1YnN0cmluZyBvZiB0aGlzIG9uZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgICAgIHZhciBvbGRMb2NhbGUgPSBudWxsO1xuICAgICAgICAvLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byByZWdpc3RlciBhbmQgbG9hZCBhbGwgdGhlIGxvY2FsZXMgaW4gTm9kZVxuICAgICAgICBpZiAoIWxvY2FsZXNbbmFtZV0gJiYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSAmJlxuICAgICAgICAgICAgICAgIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBvbGRMb2NhbGUgPSBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgICAgICAgICAgICAgdmFyIGFsaWFzZWRSZXF1aXJlID0gcmVxdWlyZTtcbiAgICAgICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSgnLi9sb2NhbGUvJyArIG5hbWUpO1xuICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShvbGRMb2NhbGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsb2NhbGUgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbG9jYWxlLiAgSWZcbiAgICAvLyBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbiwgaXQgd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IGdsb2JhbFxuICAgIC8vIGxvY2FsZSBrZXkuXG4gICAgZnVuY3Rpb24gZ2V0U2V0R2xvYmFsTG9jYWxlIChrZXksIHZhbHVlcykge1xuICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGVmaW5lTG9jYWxlKGtleSwgdmFsdWVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBtb21lbnQuZHVyYXRpb24uX2xvY2FsZSA9IG1vbWVudC5fbG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgICAgICBnbG9iYWxMb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YgY29uc29sZSAhPT0gICd1bmRlZmluZWQnKSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy93YXJuIHVzZXIgaWYgYXJndW1lbnRzIGFyZSBwYXNzZWQgYnV0IHRoZSBsb2NhbGUgY291bGQgbm90IGJlIHNldFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0xvY2FsZSAnICsga2V5ICsgICcgbm90IGZvdW5kLiBEaWQgeW91IGZvcmdldCB0byBsb2FkIGl0PycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmaW5lTG9jYWxlIChuYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSwgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgICAgIGNvbmZpZy5hYmJyID0gbmFtZTtcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoJ2RlZmluZUxvY2FsZU92ZXJyaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd1c2UgbW9tZW50LnVwZGF0ZUxvY2FsZShsb2NhbGVOYW1lLCBjb25maWcpIHRvIGNoYW5nZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhbiBleGlzdGluZyBsb2NhbGUuIG1vbWVudC5kZWZpbmVMb2NhbGUobG9jYWxlTmFtZSwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlnKSBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZGVmaW5lLWxvY2FsZS8gZm9yIG1vcmUgaW5mby4nKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW25hbWVdLl9jb25maWc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXS5fY29uZmlnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoY29uZmlnLnBhcmVudExvY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpKTtcblxuICAgICAgICAgICAgaWYgKGxvY2FsZUZhbWlsaWVzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbbmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHdlIHNldCB0aGUgbG9jYWxlIEFGVEVSIGFsbCBjaGlsZCBsb2NhbGVzIGhhdmUgYmVlblxuICAgICAgICAgICAgLy8gY3JlYXRlZCwgc28gd2Ugd29uJ3QgZW5kIHVwIHdpdGggdGhlIGNoaWxkIGxvY2FsZSBzZXQuXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG5cblxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSwgdG1wTG9jYWxlLCBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICAgICAgLy8gTUVSR0VcbiAgICAgICAgICAgIHRtcExvY2FsZSA9IGxvYWRMb2NhbGUobmFtZSk7XG4gICAgICAgICAgICBpZiAodG1wTG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSB0bXBMb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZyk7XG4gICAgICAgICAgICBsb2NhbGUgPSBuZXcgTG9jYWxlKGNvbmZpZyk7XG4gICAgICAgICAgICBsb2NhbGUucGFyZW50TG9jYWxlID0gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGU7XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcGFzcyBudWxsIGZvciBjb25maWcgdG8gdW51cGRhdGUsIHVzZWZ1bCBmb3IgdGVzdHNcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIHJldHVybnMgbG9jYWxlIGRhdGFcbiAgICBmdW5jdGlvbiBnZXRMb2NhbGUgKGtleSkge1xuICAgICAgICB2YXIgbG9jYWxlO1xuXG4gICAgICAgIGlmIChrZXkgJiYga2V5Ll9sb2NhbGUgJiYga2V5Ll9sb2NhbGUuX2FiYnIpIHtcbiAgICAgICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXkgPSBba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TG9jYWxlcygpIHtcbiAgICAgICAgcmV0dXJuIGtleXMobG9jYWxlcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyAobSkge1xuICAgICAgICB2YXIgb3ZlcmZsb3c7XG4gICAgICAgIHZhciBhID0gbS5fYTtcblxuICAgICAgICBpZiAoYSAmJiBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPT09IC0yKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9XG4gICAgICAgICAgICAgICAgYVtNT05USF0gICAgICAgPCAwIHx8IGFbTU9OVEhdICAgICAgID4gMTEgID8gTU9OVEggOlxuICAgICAgICAgICAgICAgIGFbREFURV0gICAgICAgIDwgMSB8fCBhW0RBVEVdICAgICAgICA+IGRheXNJbk1vbnRoKGFbWUVBUl0sIGFbTU9OVEhdKSA/IERBVEUgOlxuICAgICAgICAgICAgICAgIGFbSE9VUl0gICAgICAgIDwgMCB8fCBhW0hPVVJdICAgICAgICA+IDI0IHx8IChhW0hPVVJdID09PSAyNCAmJiAoYVtNSU5VVEVdICE9PSAwIHx8IGFbU0VDT05EXSAhPT0gMCB8fCBhW01JTExJU0VDT05EXSAhPT0gMCkpID8gSE9VUiA6XG4gICAgICAgICAgICAgICAgYVtNSU5VVEVdICAgICAgPCAwIHx8IGFbTUlOVVRFXSAgICAgID4gNTkgID8gTUlOVVRFIDpcbiAgICAgICAgICAgICAgICBhW1NFQ09ORF0gICAgICA8IDAgfHwgYVtTRUNPTkRdICAgICAgPiA1OSAgPyBTRUNPTkQgOlxuICAgICAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdIDwgMCB8fCBhW01JTExJU0VDT05EXSA+IDk5OSA/IE1JTExJU0VDT05EIDpcbiAgICAgICAgICAgICAgICAtMTtcblxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dEYXlPZlllYXIgJiYgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBEQVRFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtkYXkgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLREFZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIFBpY2sgdGhlIGZpcnN0IGRlZmluZWQgb2YgdHdvIG9yIHRocmVlIGFyZ3VtZW50cy5cbiAgICBmdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgICAgIGlmIChhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIC8vIGhvb2tzIGlzIGFjdHVhbGx5IHRoZSBleHBvcnRlZCBtb21lbnQgb2JqZWN0XG4gICAgICAgIHZhciBub3dWYWx1ZSA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDKSB7XG4gICAgICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldFVUQ0Z1bGxZZWFyKCksIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksIG5vd1ZhbHVlLmdldFVUQ0RhdGUoKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRNb250aCgpLCBub3dWYWx1ZS5nZXREYXRlKCldO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxuICAgIC8vIHRoZSBhcnJheSBzaG91bGQgbWlycm9yIHRoZSBwYXJhbWV0ZXJzIGJlbG93XG4gICAgLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuXG4gICAgLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUFycmF5IChjb25maWcpIHtcbiAgICAgICAgdmFyIGksIGRhdGUsIGlucHV0ID0gW10sIGN1cnJlbnREYXRlLCBleHBlY3RlZFdlZWtkYXksIHllYXJUb1VzZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTtcblxuICAgICAgICAvL2NvbXB1dGUgZGF5IG9mIHRoZSB5ZWFyIGZyb20gd2Vla3MgYW5kIHdlZWtkYXlzXG4gICAgICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgeWVhclRvVXNlID0gZGVmYXVsdHMoY29uZmlnLl9hW1lFQVJdLCBjdXJyZW50RGF0ZVtZRUFSXSk7XG5cbiAgICAgICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciA+IGRheXNJblllYXIoeWVhclRvVXNlKSB8fCBjb25maWcuX2RheU9mWWVhciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKHllYXJUb1VzZSwgMCwgY29uZmlnLl9kYXlPZlllYXIpO1xuICAgICAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtEQVRFXSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IGRhdGUuXG4gICAgICAgIC8vICogaWYgbm8geWVhciwgbW9udGgsIGRheSBvZiBtb250aCBhcmUgZ2l2ZW4sIGRlZmF1bHQgdG8gdG9kYXlcbiAgICAgICAgLy8gKiBpZiBkYXkgb2YgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgbW9udGggYW5kIHllYXJcbiAgICAgICAgLy8gKiBpZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBvbmx5IHllYXJcbiAgICAgICAgLy8gKiBpZiB5ZWFyIGlzIGdpdmVuLCBkb24ndCBkZWZhdWx0IGFueXRoaW5nXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gY3VycmVudERhdGVbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBaZXJvIG91dCB3aGF0ZXZlciB3YXMgbm90IGRlZmF1bHRlZCwgaW5jbHVkaW5nIHRpbWVcbiAgICAgICAgZm9yICg7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gKGNvbmZpZy5fYVtpXSA9PSBudWxsKSA/IChpID09PSAyID8gMSA6IDApIDogY29uZmlnLl9hW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIDI0OjAwOjAwLjAwMFxuICAgICAgICBpZiAoY29uZmlnLl9hW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtNSU5VVEVdID09PSAwICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW1NFQ09ORF0gPT09IDAgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbTUlMTElTRUNPTkRdID09PSAwKSB7XG4gICAgICAgICAgICBjb25maWcuX25leHREYXkgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZy5fZCA9IChjb25maWcuX3VzZVVUQyA/IGNyZWF0ZVVUQ0RhdGUgOiBjcmVhdGVEYXRlKS5hcHBseShudWxsLCBpbnB1dCk7XG4gICAgICAgIGV4cGVjdGVkV2Vla2RheSA9IGNvbmZpZy5fdXNlVVRDID8gY29uZmlnLl9kLmdldFVUQ0RheSgpIDogY29uZmlnLl9kLmdldERheSgpO1xuXG4gICAgICAgIC8vIEFwcGx5IHRpbWV6b25lIG9mZnNldCBmcm9tIGlucHV0LiBUaGUgYWN0dWFsIHV0Y09mZnNldCBjYW4gYmUgY2hhbmdlZFxuICAgICAgICAvLyB3aXRoIHBhcnNlWm9uZS5cbiAgICAgICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAyNDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGZvciBtaXNtYXRjaGluZyBkYXkgb2Ygd2Vla1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIHR5cGVvZiBjb25maWcuX3cuZCAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uZmlnLl93LmQgIT09IGV4cGVjdGVkV2Vla2RheSkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpIHtcbiAgICAgICAgdmFyIHcsIHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSwgdGVtcCwgd2Vla2RheU92ZXJmbG93O1xuXG4gICAgICAgIHcgPSBjb25maWcuX3c7XG4gICAgICAgIGlmICh3LkdHICE9IG51bGwgfHwgdy5XICE9IG51bGwgfHwgdy5FICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRvdyA9IDE7XG4gICAgICAgICAgICBkb3kgPSA0O1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHRvIHRha2UgdGhlIGN1cnJlbnQgaXNvV2Vla1llYXIsIGJ1dCB0aGF0IGRlcGVuZHMgb25cbiAgICAgICAgICAgIC8vIGhvdyB3ZSBpbnRlcnByZXQgbm93IChsb2NhbCwgdXRjLCBmaXhlZCBvZmZzZXQpLiBTbyBjcmVhdGVcbiAgICAgICAgICAgIC8vIGEgbm93IHZlcnNpb24gb2YgY3VycmVudCBjb25maWcgKHRha2UgbG9jYWwvdXRjL29mZnNldCBmbGFncywgYW5kXG4gICAgICAgICAgICAvLyBjcmVhdGUgbm93KS5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5HRywgY29uZmlnLl9hW1lFQVJdLCB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXIpO1xuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcuVywgMSk7XG4gICAgICAgICAgICB3ZWVrZGF5ID0gZGVmYXVsdHMody5FLCAxKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb3cgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3c7XG4gICAgICAgICAgICBkb3kgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3k7XG5cbiAgICAgICAgICAgIHZhciBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSk7XG5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5nZywgY29uZmlnLl9hW1lFQVJdLCBjdXJXZWVrLnllYXIpO1xuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgd2Vlay5cbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIGN1cldlZWsud2Vlayk7XG5cbiAgICAgICAgICAgIGlmICh3LmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIHdlZWtkYXkgLS0gbG93IGRheSBudW1iZXJzIGFyZSBjb25zaWRlcmVkIG5leHQgd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7XG4gICAgICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAwIHx8IHdlZWtkYXkgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGxvY2FsIHdlZWtkYXkgLS0gY291bnRpbmcgc3RhcnRzIGZyb20gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5lICsgZG93O1xuICAgICAgICAgICAgICAgIGlmICh3LmUgPCAwIHx8IHcuZSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gZG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh3ZWVrIDwgMSB8fCB3ZWVrID4gd2Vla3NJblllYXIod2Vla1llYXIsIGRvdywgZG95KSkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWtkYXlPdmVyZmxvdyAhPSBudWxsKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrZGF5ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRlbXAgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IHRlbXAueWVhcjtcbiAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdGVtcC5kYXlPZlllYXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpc28gODYwMSByZWdleFxuICAgIC8vIDAwMDAtMDAtMDAgMDAwMC1XMDAgb3IgMDAwMC1XMDAtMCArIFQgKyAwMCBvciAwMDowMCBvciAwMDowMDowMCBvciAwMDowMDowMC4wMDAgKyArMDA6MDAgb3IgKzAwMDAgb3IgKzAwKVxuICAgIHZhciBleHRlbmRlZElzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KS0oPzpcXGRcXGQtXFxkXFxkfFdcXGRcXGQtXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86OlxcZFxcZCg/OjpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvO1xuICAgIHZhciBiYXNpY0lzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KSg/OlxcZFxcZFxcZFxcZHxXXFxkXFxkXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86XFxkXFxkKD86XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcblxuICAgIHZhciB0elJlZ2V4ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vO1xuXG4gICAgdmFyIGlzb0RhdGVzID0gW1xuICAgICAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXFxkezZ9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgWydZWVlZLU1NLUREJywgL1xcZHs0fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgIFsnR0dHRy1bV11XVy1FJywgL1xcZHs0fS1XXFxkXFxkLVxcZC9dLFxuICAgICAgICBbJ0dHR0ctW1ddV1cnLCAvXFxkezR9LVdcXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWS1EREQnLCAvXFxkezR9LVxcZHszfS9dLFxuICAgICAgICBbJ1lZWVktTU0nLCAvXFxkezR9LVxcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgWydZWVlZWVlNTUREJywgL1srLV1cXGR7MTB9L10sXG4gICAgICAgIFsnWVlZWU1NREQnLCAvXFxkezh9L10sXG4gICAgICAgIC8vIFlZWVlNTSBpcyBOT1QgYWxsb3dlZCBieSB0aGUgc3RhbmRhcmRcbiAgICAgICAgWydHR0dHW1ddV1dFJywgL1xcZHs0fVdcXGR7M30vXSxcbiAgICAgICAgWydHR0dHW1ddV1cnLCAvXFxkezR9V1xcZHsyfS8sIGZhbHNlXSxcbiAgICAgICAgWydZWVlZREREJywgL1xcZHs3fS9dXG4gICAgXTtcblxuICAgIC8vIGlzbyB0aW1lIGZvcm1hdHMgYW5kIHJlZ2V4ZXNcbiAgICB2YXIgaXNvVGltZXMgPSBbXG4gICAgICAgIFsnSEg6bW06c3MuU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgWydISDptbTpzcyxTU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkLFxcZCsvXSxcbiAgICAgICAgWydISDptbTpzcycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICBbJ0hIOm1tJywgL1xcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgWydISG1tc3MuU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgIFsnSEhtbXNzLFNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkLFxcZCsvXSxcbiAgICAgICAgWydISG1tc3MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkL10sXG4gICAgICAgIFsnSEhtbScsIC9cXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgWydISCcsIC9cXGRcXGQvXVxuICAgIF07XG5cbiAgICB2YXIgYXNwTmV0SnNvblJlZ2V4ID0gL15cXC8/RGF0ZVxcKChcXC0/XFxkKykvaTtcblxuICAgIC8vIGRhdGUgZnJvbSBpc28gZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlTTyhjb25maWcpIHtcbiAgICAgICAgdmFyIGksIGwsXG4gICAgICAgICAgICBzdHJpbmcgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBtYXRjaCA9IGV4dGVuZGVkSXNvUmVnZXguZXhlYyhzdHJpbmcpIHx8IGJhc2ljSXNvUmVnZXguZXhlYyhzdHJpbmcpLFxuICAgICAgICAgICAgYWxsb3dUaW1lLCBkYXRlRm9ybWF0LCB0aW1lRm9ybWF0LCB0ekZvcm1hdDtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWU7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29EYXRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvRGF0ZXNbaV1bMV0uZXhlYyhtYXRjaFsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUZvcm1hdCA9IGlzb0RhdGVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICBhbGxvd1RpbWUgPSBpc29EYXRlc1tpXVsyXSAhPT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRlRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvVGltZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc29UaW1lc1tpXVsxXS5leGVjKG1hdGNoWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hbMl0gc2hvdWxkIGJlICdUJyBvciBzcGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZvcm1hdCA9IChtYXRjaFsyXSB8fCAnICcpICsgaXNvVGltZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGltZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhbGxvd1RpbWUgJiYgdGltZUZvcm1hdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR6UmVnZXguZXhlYyhtYXRjaFs0XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHpGb3JtYXQgPSAnWic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcuX2YgPSBkYXRlRm9ybWF0ICsgKHRpbWVGb3JtYXQgfHwgJycpICsgKHR6Rm9ybWF0IHx8ICcnKTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUkZDIDI4MjIgcmVnZXg6IEZvciBkZXRhaWxzIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjgyMiNzZWN0aW9uLTMuM1xuICAgIHZhciByZmMyODIyID0gL14oPzooTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSw/XFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfChbKy1dXFxkezR9KSkkLztcblxuICAgIGZ1bmN0aW9uIGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtcbiAgICAgICAgICAgIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpLFxuICAgICAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LmluZGV4T2YobW9udGhTdHIpLFxuICAgICAgICAgICAgcGFyc2VJbnQoZGF5U3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChob3VyU3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChtaW51dGVTdHIsIDEwKVxuICAgICAgICBdO1xuXG4gICAgICAgIGlmIChzZWNvbmRTdHIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KHNlY29uZFN0ciwgMTApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW50cnVuY2F0ZVllYXIoeWVhclN0cikge1xuICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KHllYXJTdHIsIDEwKTtcbiAgICAgICAgaWYgKHllYXIgPD0gNDkpIHtcbiAgICAgICAgICAgIHJldHVybiAyMDAwICsgeWVhcjtcbiAgICAgICAgfSBlbHNlIGlmICh5ZWFyIDw9IDk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIDE5MDAgKyB5ZWFyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5ZWFyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGNvbW1lbnRzIGFuZCBmb2xkaW5nIHdoaXRlc3BhY2UgYW5kIHJlcGxhY2UgbXVsdGlwbGUtc3BhY2VzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvXFwoW14pXSpcXCl8W1xcblxcdF0vZywgJyAnKS5yZXBsYWNlKC8oXFxzXFxzKykvZywgJyAnKS5yZXBsYWNlKC9eXFxzXFxzKi8sICcnKS5yZXBsYWNlKC9cXHNcXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja1dlZWtkYXkod2Vla2RheVN0ciwgcGFyc2VkSW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAod2Vla2RheVN0cikge1xuICAgICAgICAgICAgLy8gVE9ETzogUmVwbGFjZSB0aGUgdmFuaWxsYSBKUyBEYXRlIG9iamVjdCB3aXRoIGFuIGluZGVwZW50ZW50IGRheS1vZi13ZWVrIGNoZWNrLlxuICAgICAgICAgICAgdmFyIHdlZWtkYXlQcm92aWRlZCA9IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LmluZGV4T2Yod2Vla2RheVN0ciksXG4gICAgICAgICAgICAgICAgd2Vla2RheUFjdHVhbCA9IG5ldyBEYXRlKHBhcnNlZElucHV0WzBdLCBwYXJzZWRJbnB1dFsxXSwgcGFyc2VkSW5wdXRbMl0pLmdldERheSgpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXlQcm92aWRlZCAhPT0gd2Vla2RheUFjdHVhbCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBvYnNPZmZzZXRzID0ge1xuICAgICAgICBVVDogMCxcbiAgICAgICAgR01UOiAwLFxuICAgICAgICBFRFQ6IC00ICogNjAsXG4gICAgICAgIEVTVDogLTUgKiA2MCxcbiAgICAgICAgQ0RUOiAtNSAqIDYwLFxuICAgICAgICBDU1Q6IC02ICogNjAsXG4gICAgICAgIE1EVDogLTYgKiA2MCxcbiAgICAgICAgTVNUOiAtNyAqIDYwLFxuICAgICAgICBQRFQ6IC03ICogNjAsXG4gICAgICAgIFBTVDogLTggKiA2MFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVPZmZzZXQob2JzT2Zmc2V0LCBtaWxpdGFyeU9mZnNldCwgbnVtT2Zmc2V0KSB7XG4gICAgICAgIGlmIChvYnNPZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnNPZmZzZXRzW29ic09mZnNldF07XG4gICAgICAgIH0gZWxzZSBpZiAobWlsaXRhcnlPZmZzZXQpIHtcbiAgICAgICAgICAgIC8vIHRoZSBvbmx5IGFsbG93ZWQgbWlsaXRhcnkgdHogaXMgWlxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBwYXJzZUludChudW1PZmZzZXQsIDEwKTtcbiAgICAgICAgICAgIHZhciBtID0gaG0gJSAxMDAsIGggPSAoaG0gLSBtKSAvIDEwMDtcbiAgICAgICAgICAgIHJldHVybiBoICogNjAgKyBtO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBhbmQgdGltZSBmcm9tIHJlZiAyODIyIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZykge1xuICAgICAgICB2YXIgbWF0Y2ggPSByZmMyODIyLmV4ZWMocHJlcHJvY2Vzc1JGQzI4MjIoY29uZmlnLl9pKSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgdmFyIHBhcnNlZEFycmF5ID0gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhtYXRjaFs0XSwgbWF0Y2hbM10sIG1hdGNoWzJdLCBtYXRjaFs1XSwgbWF0Y2hbNl0sIG1hdGNoWzddKTtcbiAgICAgICAgICAgIGlmICghY2hlY2tXZWVrZGF5KG1hdGNoWzFdLCBwYXJzZWRBcnJheSwgY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uZmlnLl9hID0gcGFyc2VkQXJyYXk7XG4gICAgICAgICAgICBjb25maWcuX3R6bSA9IGNhbGN1bGF0ZU9mZnNldChtYXRjaFs4XSwgbWF0Y2hbOV0sIG1hdGNoWzEwXSk7XG5cbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGNyZWF0ZVVUQ0RhdGUuYXBwbHkobnVsbCwgY29uZmlnLl9hKTtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnJmYzI4MjIgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdCBvciBmYWxsYmFja1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcblxuICAgICAgICBpZiAobWF0Y2hlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK21hdGNoZWRbMV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluYWwgYXR0ZW1wdCwgdXNlIElucHV0IEZhbGxiYWNrXG4gICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2sgPSBkZXByZWNhdGUoXG4gICAgICAgICd2YWx1ZSBwcm92aWRlZCBpcyBub3QgaW4gYSByZWNvZ25pemVkIFJGQzI4MjIgb3IgSVNPIGZvcm1hdC4gbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUoKSwgJyArXG4gICAgICAgICd3aGljaCBpcyBub3QgcmVsaWFibGUgYWNyb3NzIGFsbCBicm93c2VycyBhbmQgdmVyc2lvbnMuIE5vbiBSRkMyODIyL0lTTyBkYXRlIGZvcm1hdHMgYXJlICcgK1xuICAgICAgICAnZGlzY291cmFnZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhbiB1cGNvbWluZyBtYWpvciByZWxlYXNlLiBQbGVhc2UgcmVmZXIgdG8gJyArXG4gICAgICAgICdodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2pzLWRhdGUvIGZvciBtb3JlIGluZm8uJyxcbiAgICAgICAgZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoY29uZmlnLl9pICsgKGNvbmZpZy5fdXNlVVRDID8gJyBVVEMnIDogJycpKTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgSVNPIHN0YW5kYXJkXG4gICAgaG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBSRkMgMjgyMiBmb3JtXG4gICAgaG9va3MuUkZDXzI4MjIgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZykge1xuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBjcmVhdGlvbiBmbG93IHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwc1xuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5JU09fODYwMSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLlJGQ18yODIyKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5fYSA9IFtdO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAgICAgLy8gVGhpcyBhcnJheSBpcyB1c2VkIHRvIG1ha2UgYSBEYXRlLCBlaXRoZXIgd2l0aCBgbmV3IERhdGVgIG9yIGBEYXRlLlVUQ2BcbiAgICAgICAgdmFyIHN0cmluZyA9ICcnICsgY29uZmlnLl9pLFxuICAgICAgICAgICAgaSwgcGFyc2VkSW5wdXQsIHRva2VucywgdG9rZW4sIHNraXBwZWQsXG4gICAgICAgICAgICBzdHJpbmdMZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDA7XG5cbiAgICAgICAgdG9rZW5zID0gZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHwgW10pWzBdO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3Rva2VuJywgdG9rZW4sICdwYXJzZWRJbnB1dCcsIHBhcnNlZElucHV0LFxuICAgICAgICAgICAgLy8gICAgICAgICAncmVnZXgnLCBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgc2tpcHBlZCA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpKTtcbiAgICAgICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkgKyBwYXJzZWRJbnB1dC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggKz0gcGFyc2VkSW5wdXQubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG9uJ3QgcGFyc2UgaWYgaXQncyBub3QgYSBrbm93biB0b2tlblxuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgcGFyc2VkSW5wdXQsIGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgcmVtYWluaW5nIHVucGFyc2VkIGlucHV0IGxlbmd0aCB0byB0aGUgc3RyaW5nXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmNoYXJzTGVmdE92ZXIgPSBzdHJpbmdMZW5ndGggLSB0b3RhbFBhcnNlZElucHV0TGVuZ3RoO1xuICAgICAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgICAgIGlmIChjb25maWcuX2FbSE9VUl0gPD0gMTIgJiZcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPT09IHRydWUgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA+IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5wYXJzZWREYXRlUGFydHMgPSBjb25maWcuX2Euc2xpY2UoMCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLm1lcmlkaWVtID0gY29uZmlnLl9tZXJpZGllbTtcbiAgICAgICAgLy8gaGFuZGxlIG1lcmlkaWVtXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChjb25maWcuX2xvY2FsZSwgY29uZmlnLl9hW0hPVVJdLCBjb25maWcuX21lcmlkaWVtKTtcblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgY2hlY2tPdmVyZmxvdyhjb25maWcpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW1GaXhXcmFwIChsb2NhbGUsIGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIHZhciBpc1BtO1xuXG4gICAgICAgIGlmIChtZXJpZGllbSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBub3RoaW5nIHRvIGRvXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYWxlLm1lcmlkaWVtSG91ciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLm1lcmlkaWVtSG91cihob3VyLCBtZXJpZGllbSk7XG4gICAgICAgIH0gZWxzZSBpZiAobG9jYWxlLmlzUE0gIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2tcbiAgICAgICAgICAgIGlzUG0gPSBsb2NhbGUuaXNQTShtZXJpZGllbSk7XG4gICAgICAgICAgICBpZiAoaXNQbSAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyICs9IDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BtICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHN1cHBvc2VkIHRvIGhhcHBlblxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpIHtcbiAgICAgICAgdmFyIHRlbXBDb25maWcsXG4gICAgICAgICAgICBiZXN0TW9tZW50LFxuXG4gICAgICAgICAgICBzY29yZVRvQmVhdCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWcuX2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSA9IDA7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnID0gY29weUNvbmZpZyh7fSwgY29uZmlnKTtcbiAgICAgICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGVtcENvbmZpZy5fdXNlVVRDID0gY29uZmlnLl91c2VVVEM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCh0ZW1wQ29uZmlnKTtcblxuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKHRlbXBDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFueSBpbnB1dCB0aGF0IHdhcyBub3QgcGFyc2VkIGFkZCBhIHBlbmFsdHkgZm9yIHRoYXQgZm9ybWF0XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgICAgIC8vb3IgdG9rZW5zXG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnVudXNlZFRva2Vucy5sZW5ndGggKiAxMDtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgICAgICBpZiAoc2NvcmVUb0JlYXQgPT0gbnVsbCB8fCBjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkge1xuICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tT2JqZWN0KGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSk7XG4gICAgICAgIGNvbmZpZy5fYSA9IG1hcChbaS55ZWFyLCBpLm1vbnRoLCBpLmRheSB8fCBpLmRhdGUsIGkuaG91ciwgaS5taW51dGUsIGkuc2Vjb25kLCBpLm1pbGxpc2Vjb25kXSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyAoY29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3cocHJlcGFyZUNvbmZpZyhjb25maWcpKSk7XG4gICAgICAgIGlmIChyZXMuX25leHREYXkpIHtcbiAgICAgICAgICAgIC8vIEFkZGluZyBpcyBzbWFydCBlbm91Z2ggYXJvdW5kIERTVFxuICAgICAgICAgICAgcmVzLmFkZCgxLCAnZCcpO1xuICAgICAgICAgICAgcmVzLl9uZXh0RGF5ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlQ29uZmlnIChjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgZm9ybWF0ID0gY29uZmlnLl9mO1xuXG4gICAgICAgIGNvbmZpZy5fbG9jYWxlID0gY29uZmlnLl9sb2NhbGUgfHwgZ2V0TG9jYWxlKGNvbmZpZy5fbCk7XG5cbiAgICAgICAgaWYgKGlucHV0ID09PSBudWxsIHx8IChmb3JtYXQgPT09IHVuZGVmaW5lZCAmJiBpbnB1dCA9PT0gJycpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCh7bnVsbElucHV0OiB0cnVlfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnLl9pID0gaW5wdXQgPSBjb25maWcuX2xvY2FsZS5wcmVwYXJzZShpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNNb21lbnQoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1vbWVudChjaGVja092ZXJmbG93KGlucHV0KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gaW5wdXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShmb3JtYXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSAgZWxzZSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSW5wdXQoY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSW5wdXQoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0LnZhbHVlT2YoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2EgPSBtYXAoaW5wdXQuc2xpY2UoMCksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbU9iamVjdChjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgaXNVVEMpIHtcbiAgICAgICAgdmFyIGMgPSB7fTtcblxuICAgICAgICBpZiAobG9jYWxlID09PSB0cnVlIHx8IGxvY2FsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgICAgIGxvY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoaXNPYmplY3QoaW5wdXQpICYmIGlzT2JqZWN0RW1wdHkoaW5wdXQpKSB8fFxuICAgICAgICAgICAgICAgIChpc0FycmF5KGlucHV0KSAmJiBpbnB1dC5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBvYmplY3QgY29uc3RydWN0aW9uIG11c3QgYmUgZG9uZSB0aGlzIHdheS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjNcbiAgICAgICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICAgICAgYy5fdXNlVVRDID0gYy5faXNVVEMgPSBpc1VUQztcbiAgICAgICAgYy5fbCA9IGxvY2FsZTtcbiAgICAgICAgYy5faSA9IGlucHV0O1xuICAgICAgICBjLl9mID0gZm9ybWF0O1xuICAgICAgICBjLl9zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWwgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvdHlwZU1pbiA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLm1pbiBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPCB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIHZhciBwcm90b3R5cGVNYXggPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5tYXggaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5taW4gaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBQaWNrIGEgbW9tZW50IG0gZnJvbSBtb21lbnRzIHNvIHRoYXQgbVtmbl0ob3RoZXIpIGlzIHRydWUgZm9yIGFsbFxuICAgIC8vIG90aGVyLiBUaGlzIHJlbGllcyBvbiB0aGUgZnVuY3Rpb24gZm4gdG8gYmUgdHJhbnNpdGl2ZS5cbiAgICAvL1xuICAgIC8vIG1vbWVudHMgc2hvdWxkIGVpdGhlciBiZSBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cyBvciBhbiBhcnJheSwgd2hvc2VcbiAgICAvLyBmaXJzdCBlbGVtZW50IGlzIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzLlxuICAgIGZ1bmN0aW9uIHBpY2tCeShmbiwgbW9tZW50cykge1xuICAgICAgICB2YXIgcmVzLCBpO1xuICAgICAgICBpZiAobW9tZW50cy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShtb21lbnRzWzBdKSkge1xuICAgICAgICAgICAgbW9tZW50cyA9IG1vbWVudHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtb21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzID0gbW9tZW50c1swXTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IG1vbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmICghbW9tZW50c1tpXS5pc1ZhbGlkKCkgfHwgbW9tZW50c1tpXVtmbl0ocmVzKSkge1xuICAgICAgICAgICAgICAgIHJlcyA9IG1vbWVudHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBVc2UgW10uc29ydCBpbnN0ZWFkP1xuICAgIGZ1bmN0aW9uIG1pbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF4ICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNBZnRlcicsIGFyZ3MpO1xuICAgIH1cblxuICAgIHZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdyA/IERhdGUubm93KCkgOiArKG5ldyBEYXRlKCkpO1xuICAgIH07XG5cbiAgICB2YXIgb3JkZXJpbmcgPSBbJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCAnbWlsbGlzZWNvbmQnXTtcblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb25WYWxpZChtKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBtKSB7XG4gICAgICAgICAgICBpZiAoIShpbmRleE9mLmNhbGwob3JkZXJpbmcsIGtleSkgIT09IC0xICYmIChtW2tleV0gPT0gbnVsbCB8fCAhaXNOYU4obVtrZXldKSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVuaXRIYXNEZWNpbWFsID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3JkZXJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChtW29yZGVyaW5nW2ldXSkge1xuICAgICAgICAgICAgICAgIGlmICh1bml0SGFzRGVjaW1hbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG9ubHkgYWxsb3cgbm9uLWludGVnZXJzIGZvciBzbWFsbGVzdCB1bml0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG1bb3JkZXJpbmdbaV1dKSAhPT0gdG9JbnQobVtvcmRlcmluZ1tpXV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXRIYXNEZWNpbWFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKE5hTik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gRHVyYXRpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgICAgICB5ZWFycyA9IG5vcm1hbGl6ZWRJbnB1dC55ZWFyIHx8IDAsXG4gICAgICAgICAgICBxdWFydGVycyA9IG5vcm1hbGl6ZWRJbnB1dC5xdWFydGVyIHx8IDAsXG4gICAgICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCxcbiAgICAgICAgICAgIHdlZWtzID0gbm9ybWFsaXplZElucHV0LndlZWsgfHwgbm9ybWFsaXplZElucHV0Lmlzb1dlZWsgfHwgMCxcbiAgICAgICAgICAgIGRheXMgPSBub3JtYWxpemVkSW5wdXQuZGF5IHx8IDAsXG4gICAgICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgICAgICBtaW51dGVzID0gbm9ybWFsaXplZElucHV0Lm1pbnV0ZSB8fCAwLFxuICAgICAgICAgICAgc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5zZWNvbmQgfHwgMCxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwO1xuXG4gICAgICAgIHRoaXMuX2lzVmFsaWQgPSBpc0R1cmF0aW9uVmFsaWQobm9ybWFsaXplZElucHV0KTtcblxuICAgICAgICAvLyByZXByZXNlbnRhdGlvbiBmb3IgZGF0ZUFkZFJlbW92ZVxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSArbWlsbGlzZWNvbmRzICtcbiAgICAgICAgICAgIHNlY29uZHMgKiAxZTMgKyAvLyAxMDAwXG4gICAgICAgICAgICBtaW51dGVzICogNmU0ICsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBob3VycyAqIDEwMDAgKiA2MCAqIDYwOyAvL3VzaW5nIDEwMDAgKiA2MCAqIDYwIGluc3RlYWQgb2YgMzZlNSB0byBhdm9pZCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzI5NzhcbiAgICAgICAgLy8gQmVjYXVzZSBvZiBkYXRlQWRkUmVtb3ZlIHRyZWF0cyAyNCBob3VycyBhcyBkaWZmZXJlbnQgZnJvbSBhXG4gICAgICAgIC8vIGRheSB3aGVuIHdvcmtpbmcgYXJvdW5kIERTVCwgd2UgbmVlZCB0byBzdG9yZSB0aGVtIHNlcGFyYXRlbHlcbiAgICAgICAgdGhpcy5fZGF5cyA9ICtkYXlzICtcbiAgICAgICAgICAgIHdlZWtzICogNztcbiAgICAgICAgLy8gSXQgaXMgaW1wb3NzaWJsZSB0byB0cmFuc2xhdGUgbW9udGhzIGludG8gZGF5cyB3aXRob3V0IGtub3dpbmdcbiAgICAgICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcbiAgICAgICAgLy8gaXQgc2VwYXJhdGVseS5cbiAgICAgICAgdGhpcy5fbW9udGhzID0gK21vbnRocyArXG4gICAgICAgICAgICBxdWFydGVycyAqIDMgK1xuICAgICAgICAgICAgeWVhcnMgKiAxMjtcblxuICAgICAgICB0aGlzLl9kYXRhID0ge307XG5cbiAgICAgICAgdGhpcy5fbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG5cbiAgICAgICAgdGhpcy5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBEdXJhdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNSb3VuZCAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgtMSAqIG51bWJlcikgKiAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBvZmZzZXQgKHRva2VuLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICAgICAgdmFyIHNpZ24gPSAnKyc7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IC1vZmZzZXQ7XG4gICAgICAgICAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzaWduICsgemVyb0ZpbGwofn4ob2Zmc2V0IC8gNjApLCAyKSArIHNlcGFyYXRvciArIHplcm9GaWxsKH5+KG9mZnNldCkgJSA2MCwgMik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9mZnNldCgnWicsICc6Jyk7XG4gICAgb2Zmc2V0KCdaWicsICcnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1onLCAgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUmVnZXhUb2tlbignWlonLCBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl91c2VVVEMgPSB0cnVlO1xuICAgICAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gdGltZXpvbmUgY2h1bmtlclxuICAgIC8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuICAgIC8vICctMTUzMCcgID4gWyctMTUnLCAnMzAnXVxuICAgIHZhciBjaHVua09mZnNldCA9IC8oW1xcK1xcLV18XFxkXFxkKS9naTtcblxuICAgIGZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcobWF0Y2hlciwgc3RyaW5nKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gKHN0cmluZyB8fCAnJykubWF0Y2gobWF0Y2hlcik7XG5cbiAgICAgICAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNodW5rICAgPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0gfHwgW107XG4gICAgICAgIHZhciBwYXJ0cyAgID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICAgICAgdmFyIG1pbnV0ZXMgPSArKHBhcnRzWzFdICogNjApICsgdG9JbnQocGFydHNbMl0pO1xuXG4gICAgICAgIHJldHVybiBtaW51dGVzID09PSAwID9cbiAgICAgICAgICAwIDpcbiAgICAgICAgICBwYXJ0c1swXSA9PT0gJysnID8gbWludXRlcyA6IC1taW51dGVzO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCBtb2RlbCkge1xuICAgICAgICB2YXIgcmVzLCBkaWZmO1xuICAgICAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgICAgICByZXMgPSBtb2RlbC5jbG9uZSgpO1xuICAgICAgICAgICAgZGlmZiA9IChpc01vbWVudChpbnB1dCkgfHwgaXNEYXRlKGlucHV0KSA/IGlucHV0LnZhbHVlT2YoKSA6IGNyZWF0ZUxvY2FsKGlucHV0KS52YWx1ZU9mKCkpIC0gcmVzLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgICAgIHJlcy5fZC5zZXRUaW1lKHJlcy5fZC52YWx1ZU9mKCkgKyBkaWZmKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChyZXMsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQpLmxvY2FsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXRlT2Zmc2V0IChtKSB7XG4gICAgICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L3B1bGwvMTg3MVxuICAgICAgICByZXR1cm4gLU1hdGgucm91bmQobS5fZC5nZXRUaW1lem9uZU9mZnNldCgpIC8gMTUpICogMTU7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBtb21lbnQgaXMgbXV0YXRlZC5cbiAgICAvLyBJdCBpcyBpbnRlbmRlZCB0byBrZWVwIHRoZSBvZmZzZXQgaW4gc3luYyB3aXRoIHRoZSB0aW1lem9uZS5cbiAgICBob29rcy51cGRhdGVPZmZzZXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuICAgIC8vIGFmZmVjdGluZyB0aGUgbG9jYWwgaG91ci4gU28gNTozMToyNiArMDMwMCAtLVt1dGNPZmZzZXQoMiwgdHJ1ZSldLS0+XG4gICAgLy8gNTozMToyNiArMDIwMCBJdCBpcyBwb3NzaWJsZSB0aGF0IDU6MzE6MjYgZG9lc24ndCBleGlzdCB3aXRoIG9mZnNldFxuICAgIC8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbiAgICAvL1xuICAgIC8vIEtlZXBpbmcgdGhlIHRpbWUgYWN0dWFsbHkgYWRkcy9zdWJ0cmFjdHMgKG9uZSBob3VyKVxuICAgIC8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuICAgIC8vIGEgc2Vjb25kIHRpbWUuIEluIGNhc2UgaXQgd2FudHMgdXMgdG8gY2hhbmdlIHRoZSBvZmZzZXQgYWdhaW5cbiAgICAvLyBfY2hhbmdlSW5Qcm9ncmVzcyA9PSB0cnVlIGNhc2UsIHRoZW4gd2UgaGF2ZSB0byBhZGp1c3QsIGJlY2F1c2VcbiAgICAvLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuICAgIGZ1bmN0aW9uIGdldFNldE9mZnNldCAoaW5wdXQsIGtlZXBMb2NhbFRpbWUsIGtlZXBNaW51dGVzKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLl9vZmZzZXQgfHwgMCxcbiAgICAgICAgICAgIGxvY2FsQWRqdXN0O1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhpbnB1dCkgPCAxNiAmJiAha2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0ICogNjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzVVRDICYmIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICBsb2NhbEFkanVzdCA9IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBpbnB1dDtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQobG9jYWxBZGp1c3QsICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmICgha2VlcExvY2FsVGltZSB8fCB0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGNyZWF0ZUR1cmF0aW9uKGlucHV0IC0gb2Zmc2V0LCAnbScpLCAxLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/IG9mZnNldCA6IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRab25lIChpbnB1dCwga2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IC1pbnB1dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvVVRDIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb0xvY2FsIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1VUQykge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCAoKSB7XG4gICAgICAgIGlmICh0aGlzLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodGhpcy5fdHptLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2kgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgdFpvbmUgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKTtcbiAgICAgICAgICAgIGlmICh0Wm9uZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodFpvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzQWxpZ25lZEhvdXJPZmZzZXQgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dCA9IGlucHV0ID8gY3JlYXRlTG9jYWwoaW5wdXQpLnV0Y09mZnNldCgpIDogMDtcblxuICAgICAgICByZXR1cm4gKHRoaXMudXRjT2Zmc2V0KCkgLSBpbnB1dCkgJSA2MCA9PT0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZSAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDApLnV0Y09mZnNldCgpIHx8XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDUpLnV0Y09mZnNldCgpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkICgpIHtcbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGMgPSB7fTtcblxuICAgICAgICBjb3B5Q29uZmlnKGMsIHRoaXMpO1xuICAgICAgICBjID0gcHJlcGFyZUNvbmZpZyhjKTtcblxuICAgICAgICBpZiAoYy5fYSkge1xuICAgICAgICAgICAgdmFyIG90aGVyID0gYy5faXNVVEMgPyBjcmVhdGVVVEMoYy5fYSkgOiBjcmVhdGVMb2NhbChjLl9hKTtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xvY2FsICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gIXRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGNPZmZzZXQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgJiYgdGhpcy5fb2Zmc2V0ID09PSAwIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4XG4gICAgdmFyIGFzcE5ldFJlZ2V4ID0gL14oXFwtfFxcKyk/KD86KFxcZCopWy4gXSk/KFxcZCspXFw6KFxcZCspKD86XFw6KFxcZCspKFxcLlxcZCopPyk/JC87XG5cbiAgICAvLyBmcm9tIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX2RhdGVfZGF0ZS5qcy5zb3VyY2UuaHRtbFxuICAgIC8vIHNvbWV3aGF0IG1vcmUgaW4gbGluZSB3aXRoIDQuNC4zLjIgMjAwNCBzcGVjLCBidXQgYWxsb3dzIGRlY2ltYWwgYW55d2hlcmVcbiAgICAvLyBhbmQgZnVydGhlciBtb2RpZmllZCB0byBhbGxvdyBmb3Igc3RyaW5ncyBjb250YWluaW5nIGJvdGggd2VlayBhbmQgZGF5XG4gICAgdmFyIGlzb1JlZ2V4ID0gL14oLXxcXCspP1AoPzooWy0rXT9bMC05LC5dKilZKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilXKT8oPzooWy0rXT9bMC05LC5dKilEKT8oPzpUKD86KFstK10/WzAtOSwuXSopSCk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopUyk/KT8kLztcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUR1cmF0aW9uIChpbnB1dCwga2V5KSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGlucHV0LFxuICAgICAgICAgICAgLy8gbWF0Y2hpbmcgYWdhaW5zdCByZWdleHAgaXMgZXhwZW5zaXZlLCBkbyBpdCBvbiBkZW1hbmRcbiAgICAgICAgICAgIG1hdGNoID0gbnVsbCxcbiAgICAgICAgICAgIHNpZ24sXG4gICAgICAgICAgICByZXQsXG4gICAgICAgICAgICBkaWZmUmVzO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgbXMgOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgICAgIGQgIDogaW5wdXQuX2RheXMsXG4gICAgICAgICAgICAgICAgTSAgOiBpbnB1dC5fbW9udGhzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbltrZXldID0gaW5wdXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uLm1pbGxpc2Vjb25kcyA9IGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gYXNwTmV0UmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeSAgOiAwLFxuICAgICAgICAgICAgICAgIGQgIDogdG9JbnQobWF0Y2hbREFURV0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBoICA6IHRvSW50KG1hdGNoW0hPVVJdKSAgICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbSAgOiB0b0ludChtYXRjaFtNSU5VVEVdKSAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIHMgIDogdG9JbnQobWF0Y2hbU0VDT05EXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBtcyA6IHRvSW50KGFic1JvdW5kKG1hdGNoW01JTExJU0VDT05EXSAqIDEwMDApKSAqIHNpZ24gLy8gdGhlIG1pbGxpc2Vjb25kIGRlY2ltYWwgcG9pbnQgaXMgaW5jbHVkZWQgaW4gdGhlIG1hdGNoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gaXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeSA6IHBhcnNlSXNvKG1hdGNoWzJdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBNIDogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHcgOiBwYXJzZUlzbyhtYXRjaFs0XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgZCA6IHBhcnNlSXNvKG1hdGNoWzVdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBoIDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIG0gOiBwYXJzZUlzbyhtYXRjaFs3XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgcyA6IHBhcnNlSXNvKG1hdGNoWzhdLCBzaWduKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7Ly8gY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbikpIHtcbiAgICAgICAgICAgIGRpZmZSZXMgPSBtb21lbnRzRGlmZmVyZW5jZShjcmVhdGVMb2NhbChkdXJhdGlvbi5mcm9tKSwgY3JlYXRlTG9jYWwoZHVyYXRpb24udG8pKTtcblxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGR1cmF0aW9uLm1zID0gZGlmZlJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICBkdXJhdGlvbi5NID0gZGlmZlJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXQgPSBuZXcgRHVyYXRpb24oZHVyYXRpb24pO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2xvY2FsZScpKSB7XG4gICAgICAgICAgICByZXQuX2xvY2FsZSA9IGlucHV0Ll9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuICAgIGNyZWF0ZUR1cmF0aW9uLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkJDE7XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzbyAoaW5wLCBzaWduKSB7XG4gICAgICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvXG4gICAgICAgIC8vIGNvbnZlcnRzIGZsb2F0cyB0byBpbnRzLlxuICAgICAgICAvLyBpbnAgbWF5IGJlIHVuZGVmaW5lZCwgc28gY2FyZWZ1bCBjYWxsaW5nIHJlcGxhY2Ugb24gaXQuXG4gICAgICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpO1xuICAgICAgICAvLyBhcHBseSBzaWduIHdoaWxlIHdlJ3JlIGF0IGl0XG4gICAgICAgIHJldHVybiAoaXNOYU4ocmVzKSA/IDAgOiByZXMpICogc2lnbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXMgPSB7fTtcblxuICAgICAgICByZXMubW9udGhzID0gb3RoZXIubW9udGgoKSAtIGJhc2UubW9udGgoKSArXG4gICAgICAgICAgICAob3RoZXIueWVhcigpIC0gYmFzZS55ZWFyKCkpICogMTI7XG4gICAgICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgICAgIC0tcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKSk7XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzO1xuICAgICAgICBpZiAoIShiYXNlLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcbiAgICAgICAgfVxuXG4gICAgICAgIG90aGVyID0gY2xvbmVXaXRoT2Zmc2V0KG90aGVyLCBiYXNlKTtcbiAgICAgICAgaWYgKGJhc2UuaXNCZWZvcmUob3RoZXIpKSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2Uob3RoZXIsIGJhc2UpO1xuICAgICAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9IC1yZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgcmVzLm1vbnRocyA9IC1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiByZW1vdmUgJ25hbWUnIGFyZyBhZnRlciBkZXByZWNhdGlvbiBpcyByZW1vdmVkXG4gICAgZnVuY3Rpb24gY3JlYXRlQWRkZXIoZGlyZWN0aW9uLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBkdXIsIHRtcDtcbiAgICAgICAgICAgIC8vaW52ZXJ0IHRoZSBhcmd1bWVudHMsIGJ1dCBjb21wbGFpbiBhYm91dCBpdFxuICAgICAgICAgICAgaWYgKHBlcmlvZCAhPT0gbnVsbCAmJiAhaXNOYU4oK3BlcmlvZCkpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUobmFtZSwgJ21vbWVudCgpLicgKyBuYW1lICArICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArIG5hbWUgKyAnKG51bWJlciwgcGVyaW9kKS4gJyArXG4gICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2FkZC1pbnZlcnRlZC1wYXJhbS8gZm9yIG1vcmUgaW5mby4nKTtcbiAgICAgICAgICAgICAgICB0bXAgPSB2YWw7IHZhbCA9IHBlcmlvZDsgcGVyaW9kID0gdG1wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWwgPSB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/ICt2YWwgOiB2YWw7XG4gICAgICAgICAgICBkdXIgPSBjcmVhdGVEdXJhdGlvbih2YWwsIHBlcmlvZCk7XG4gICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBkdXIsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdCAobW9tLCBkdXJhdGlvbiwgaXNBZGRpbmcsIHVwZGF0ZU9mZnNldCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gZHVyYXRpb24uX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGRheXMgPSBhYnNSb3VuZChkdXJhdGlvbi5fZGF5cyksXG4gICAgICAgICAgICBtb250aHMgPSBhYnNSb3VuZChkdXJhdGlvbi5fbW9udGhzKTtcblxuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIC8vIE5vIG9wXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVPZmZzZXQgPSB1cGRhdGVPZmZzZXQgPT0gbnVsbCA/IHRydWUgOiB1cGRhdGVPZmZzZXQ7XG5cbiAgICAgICAgaWYgKG1vbnRocykge1xuICAgICAgICAgICAgc2V0TW9udGgobW9tLCBnZXQobW9tLCAnTW9udGgnKSArIG1vbnRocyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF5cykge1xuICAgICAgICAgICAgc2V0JDEobW9tLCAnRGF0ZScsIGdldChtb20sICdEYXRlJykgKyBkYXlzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaWxsaXNlY29uZHMpIHtcbiAgICAgICAgICAgIG1vbS5fZC5zZXRUaW1lKG1vbS5fZC52YWx1ZU9mKCkgKyBtaWxsaXNlY29uZHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwZGF0ZU9mZnNldCkge1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KG1vbSwgZGF5cyB8fCBtb250aHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFkZCAgICAgID0gY3JlYXRlQWRkZXIoMSwgJ2FkZCcpO1xuICAgIHZhciBzdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKTtcblxuICAgIGZ1bmN0aW9uIGdldENhbGVuZGFyRm9ybWF0KG15TW9tZW50LCBub3cpIHtcbiAgICAgICAgdmFyIGRpZmYgPSBteU1vbWVudC5kaWZmKG5vdywgJ2RheXMnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGRpZmYgPCAtNiA/ICdzYW1lRWxzZScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAtMSA/ICdsYXN0V2VlaycgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAwID8gJ2xhc3REYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMSA/ICdzYW1lRGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDIgPyAnbmV4dERheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCA3ID8gJ25leHRXZWVrJyA6ICdzYW1lRWxzZSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIkMSAodGltZSwgZm9ybWF0cykge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRvZGF5LCB2cyB0aGlzLlxuICAgICAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICAgICAgdmFyIG5vdyA9IHRpbWUgfHwgY3JlYXRlTG9jYWwoKSxcbiAgICAgICAgICAgIHNvZCA9IGNsb25lV2l0aE9mZnNldChub3csIHRoaXMpLnN0YXJ0T2YoJ2RheScpLFxuICAgICAgICAgICAgZm9ybWF0ID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnO1xuXG4gICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRzICYmIChpc0Z1bmN0aW9uKGZvcm1hdHNbZm9ybWF0XSkgPyBmb3JtYXRzW2Zvcm1hdF0uY2FsbCh0aGlzLCBub3cpIDogZm9ybWF0c1tmb3JtYXRdKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQob3V0cHV0IHx8IHRoaXMubG9jYWxlRGF0YSgpLmNhbGVuZGFyKGZvcm1hdCwgdGhpcywgY3JlYXRlTG9jYWwobm93KSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID4gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxJbnB1dC52YWx1ZU9mKCkgPCB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JldHdlZW4gKGZyb20sIHRvLCB1bml0cywgaW5jbHVzaXZpdHkpIHtcbiAgICAgICAgdmFyIGxvY2FsRnJvbSA9IGlzTW9tZW50KGZyb20pID8gZnJvbSA6IGNyZWF0ZUxvY2FsKGZyb20pLFxuICAgICAgICAgICAgbG9jYWxUbyA9IGlzTW9tZW50KHRvKSA/IHRvIDogY3JlYXRlTG9jYWwodG8pO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbEZyb20uaXNWYWxpZCgpICYmIGxvY2FsVG8uaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGluY2x1c2l2aXR5ID0gaW5jbHVzaXZpdHkgfHwgJygpJztcbiAgICAgICAgcmV0dXJuIChpbmNsdXNpdml0eVswXSA9PT0gJygnID8gdGhpcy5pc0FmdGVyKGxvY2FsRnJvbSwgdW5pdHMpIDogIXRoaXMuaXNCZWZvcmUobG9jYWxGcm9tLCB1bml0cykpICYmXG4gICAgICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJyA/IHRoaXMuaXNCZWZvcmUobG9jYWxUbywgdW5pdHMpIDogIXRoaXMuaXNBZnRlcihsb2NhbFRvLCB1bml0cykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCksXG4gICAgICAgICAgICBpbnB1dE1zO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA9PT0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dE1zID0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKSA8PSBpbnB1dE1zICYmIGlucHV0TXMgPD0gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckFmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQmVmb3JlKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlmZiAoaW5wdXQsIHVuaXRzLCBhc0Zsb2F0KSB7XG4gICAgICAgIHZhciB0aGF0LFxuICAgICAgICAgICAgem9uZURlbHRhLFxuICAgICAgICAgICAgb3V0cHV0O1xuXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB0aGF0ID0gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCB0aGlzKTtcblxuICAgICAgICBpZiAoIXRoYXQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgem9uZURlbHRhID0gKHRoYXQudXRjT2Zmc2V0KCkgLSB0aGlzLnV0Y09mZnNldCgpKSAqIDZlNDtcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMTI7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDM7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDFlMzsgYnJlYWs7IC8vIDEwMDBcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyA2ZTQ7IGJyZWFrOyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMzZlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgICAgICBjYXNlICdkYXknOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gODY0ZTU7IGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDYwNDhlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBkZWZhdWx0OiBvdXRwdXQgPSB0aGlzIC0gdGhhdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aERpZmYgKGEsIGIpIHtcbiAgICAgICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICAgICAgdmFyIHdob2xlTW9udGhEaWZmID0gKChiLnllYXIoKSAtIGEueWVhcigpKSAqIDEyKSArIChiLm1vbnRoKCkgLSBhLm1vbnRoKCkpLFxuICAgICAgICAgICAgLy8gYiBpcyBpbiAoYW5jaG9yIC0gMSBtb250aCwgYW5jaG9yICsgMSBtb250aClcbiAgICAgICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgICAgIGFuY2hvcjIsIGFkanVzdDtcblxuICAgICAgICBpZiAoYiAtIGFuY2hvciA8IDApIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IgLSBhbmNob3IyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmICsgMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY2hlY2sgZm9yIG5lZ2F0aXZlIHplcm8sIHJldHVybiB6ZXJvIGlmIG5lZ2F0aXZlIHplcm9cbiAgICAgICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpIHx8IDA7XG4gICAgfVxuXG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWic7XG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuICAgIGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5sb2NhbGUoJ2VuJykuZm9ybWF0KCdkZGQgTU1NIEREIFlZWVkgSEg6bW06c3MgW0dNVF1aWicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nKGtlZXBPZmZzZXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHV0YyA9IGtlZXBPZmZzZXQgIT09IHRydWU7XG4gICAgICAgIHZhciBtID0gdXRjID8gdGhpcy5jbG9uZSgpLnV0YygpIDogdGhpcztcbiAgICAgICAgaWYgKG0ueWVhcigpIDwgMCB8fCBtLnllYXIoKSA+IDk5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgdXRjID8gJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScgOiAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAgICAgLy8gbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzIH41MHggZmFzdGVyLCB1c2UgaXQgd2hlbiB3ZSBjYW5cbiAgICAgICAgICAgIGlmICh1dGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkgKyB0aGlzLnV0Y09mZnNldCgpICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLnJlcGxhY2UoJ1onLCBmb3JtYXRNb21lbnQobSwgJ1onKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCB1dGMgPyAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScgOiAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBodW1hbiByZWFkYWJsZSByZXByZXNlbnRhdGlvbiBvZiBhIG1vbWVudCB0aGF0IGNhblxuICAgICAqIGFsc28gYmUgZXZhbHVhdGVkIHRvIGdldCBhIG5ldyBtb21lbnQgd2hpY2ggaXMgdGhlIHNhbWVcbiAgICAgKlxuICAgICAqIEBsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC9kb2NzL2FwaS91dGlsLmh0bWwjdXRpbF9jdXN0b21faW5zcGVjdF9mdW5jdGlvbl9vbl9vYmplY3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiAnbW9tZW50LmludmFsaWQoLyogJyArIHRoaXMuX2kgKyAnICovKSc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZ1bmMgPSAnbW9tZW50JztcbiAgICAgICAgdmFyIHpvbmUgPSAnJztcbiAgICAgICAgaWYgKCF0aGlzLmlzTG9jYWwoKSkge1xuICAgICAgICAgICAgZnVuYyA9IHRoaXMudXRjT2Zmc2V0KCkgPT09IDAgPyAnbW9tZW50LnV0YycgOiAnbW9tZW50LnBhcnNlWm9uZSc7XG4gICAgICAgICAgICB6b25lID0gJ1onO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmVmaXggPSAnWycgKyBmdW5jICsgJyhcIl0nO1xuICAgICAgICB2YXIgeWVhciA9ICgwIDw9IHRoaXMueWVhcigpICYmIHRoaXMueWVhcigpIDw9IDk5OTkpID8gJ1lZWVknIDogJ1lZWVlZWSc7XG4gICAgICAgIHZhciBkYXRldGltZSA9ICctTU0tRERbVF1ISDptbTpzcy5TU1MnO1xuICAgICAgICB2YXIgc3VmZml4ID0gem9uZSArICdbXCIpXSc7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHByZWZpeCArIHllYXIgKyBkYXRldGltZSArIHN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0IChpbnB1dFN0cmluZykge1xuICAgICAgICBpZiAoIWlucHV0U3RyaW5nKSB7XG4gICAgICAgICAgICBpbnB1dFN0cmluZyA9IHRoaXMuaXNVdGMoKSA/IGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgOiBob29rcy5kZWZhdWx0Rm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcpO1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb20gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHt0bzogdGhpcywgZnJvbTogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb21Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbShjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0byAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fFxuICAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe2Zyb206IHRoaXMsIHRvOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG8oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpc1xuICAgIC8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbiAgICAvLyB2YXJpYWJsZXMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgZnVuY3Rpb24gbG9jYWxlIChrZXkpIHtcbiAgICAgICAgdmFyIG5ld0xvY2FsZURhdGE7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3TG9jYWxlRGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IG5ld0xvY2FsZURhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsYW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubGFuZygpIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHVzZSBtb21lbnQoKS5sb2NhbGVEYXRhKCkgdG8gZ2V0IHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uLiBVc2UgbW9tZW50KCkubG9jYWxlKCkgdG8gY2hhbmdlIGxhbmd1YWdlcy4nLFxuICAgICAgICBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZURhdGEgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xuICAgIH1cblxuICAgIHZhciBNU19QRVJfU0VDT05EID0gMTAwMDtcbiAgICB2YXIgTVNfUEVSX01JTlVURSA9IDYwICogTVNfUEVSX1NFQ09ORDtcbiAgICB2YXIgTVNfUEVSX0hPVVIgPSA2MCAqIE1TX1BFUl9NSU5VVEU7XG4gICAgdmFyIE1TX1BFUl80MDBfWUVBUlMgPSAoMzY1ICogNDAwICsgOTcpICogMjQgKiBNU19QRVJfSE9VUjtcblxuICAgIC8vIGFjdHVhbCBtb2R1bG8gLSBoYW5kbGVzIG5lZ2F0aXZlIG51bWJlcnMgKGZvciBkYXRlcyBiZWZvcmUgMTk3MCk6XG4gICAgZnVuY3Rpb24gbW9kJDEoZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgICAgcmV0dXJuIChkaXZpZGVuZCAlIGRpdmlzb3IgKyBkaXZpc29yKSAlIGRpdmlzb3I7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHksIG0sIGQpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHV0Y1N0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gRGF0ZS5VVEMgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSwgbSwgZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGFydE9mICh1bml0cykge1xuICAgICAgICB2YXIgdGltZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhcnRPZkRhdGUgPSB0aGlzLl9pc1VUQyA/IHV0Y1N0YXJ0T2ZEYXRlIDogbG9jYWxTdGFydE9mRGF0ZTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIDAsIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgLSB0aGlzLm1vbnRoKCkgJSAzLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLCBNU19QRVJfSE9VUik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfU0VDT05EKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRPZiAodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWU7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJyB8fCAhdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpICsgMSwgMCwgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgLSB0aGlzLm1vbnRoKCkgJSAzICsgMywgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpICsgMSwgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KCkgKyA3KSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKSArIDcpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgKyAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfSE9VUiAtIG1vZCQxKHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLCBNU19QRVJfSE9VUikgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfTUlOVVRFIC0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfU0VDT05EIC0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbHVlT2YgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZC52YWx1ZU9mKCkgLSAoKHRoaXMuX29mZnNldCB8fCAwKSAqIDYwMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bml4ICgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkgLyAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0RhdGUgKCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvQXJyYXkgKCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbbS55ZWFyKCksIG0ubW9udGgoKSwgbS5kYXRlKCksIG0uaG91cigpLCBtLm1pbnV0ZSgpLCBtLnNlY29uZCgpLCBtLm1pbGxpc2Vjb25kKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvT2JqZWN0ICgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IG0ueWVhcigpLFxuICAgICAgICAgICAgbW9udGhzOiBtLm1vbnRoKCksXG4gICAgICAgICAgICBkYXRlOiBtLmRhdGUoKSxcbiAgICAgICAgICAgIGhvdXJzOiBtLmhvdXJzKCksXG4gICAgICAgICAgICBtaW51dGVzOiBtLm1pbnV0ZXMoKSxcbiAgICAgICAgICAgIHNlY29uZHM6IG0uc2Vjb25kcygpLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiBtLm1pbGxpc2Vjb25kcygpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICAgICAgLy8gbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbFxuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMiAoKSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNpbmdGbGFncyAoKSB7XG4gICAgICAgIHJldHVybiBleHRlbmQoe30sIGdldFBhcnNpbmdGbGFncyh0aGlzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52YWxpZEF0ICgpIHtcbiAgICAgICAgcmV0dXJuIGdldFBhcnNpbmdGbGFncyh0aGlzKS5vdmVyZmxvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGlvbkRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnB1dDogdGhpcy5faSxcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5fZixcbiAgICAgICAgICAgIGxvY2FsZTogdGhpcy5fbG9jYWxlLFxuICAgICAgICAgICAgaXNVVEM6IHRoaXMuX2lzVVRDLFxuICAgICAgICAgICAgc3RyaWN0OiB0aGlzLl9zdHJpY3RcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ2dnJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnR0cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1llYXJGb3JtYXRUb2tlbiAodG9rZW4sIGdldHRlcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbdG9rZW4sIHRva2VuLmxlbmd0aF0sIDAsIGdldHRlcik7XG4gICAgfVxuXG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZycsICAgICAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnZycsICAgICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0cnLCAgJ2lzb1dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHR0cnLCAnaXNvV2Vla1llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnd2Vla1llYXInLCAnZ2cnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWtZZWFyJywgJ0dHJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrWWVhcicsIDEpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnaXNvV2Vla1llYXInLCAxKTtcblxuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRycsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2cnLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdHRycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0cnLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHR0cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2dnJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAyKV0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnJywgJ0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFyIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbCh0aGlzLFxuICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgIHRoaXMud2VlaygpLFxuICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheSgpLFxuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWtZZWFyIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbCh0aGlzLFxuICAgICAgICAgICAgICAgIGlucHV0LCB0aGlzLmlzb1dlZWsoKSwgdGhpcy5pc29XZWVrZGF5KCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElTT1dlZWtzSW5ZZWFyICgpIHtcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXZWVrc0luWWVhciAoKSB7XG4gICAgICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhckhlbHBlcihpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtzVGFyZ2V0O1xuICAgICAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIodGhpcywgZG93LCBkb3kpLnllYXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3ZWVrc1RhcmdldCA9IHdlZWtzSW5ZZWFyKGlucHV0LCBkb3csIGRveSk7XG4gICAgICAgICAgICBpZiAod2VlayA+IHdlZWtzVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgd2VlayA9IHdlZWtzVGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNldFdlZWtBbGwuY2FsbCh0aGlzLCBpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0V2Vla0FsbCh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhckRhdGEgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKGRheU9mWWVhckRhdGEueWVhciwgMCwgZGF5T2ZZZWFyRGF0YS5kYXlPZlllYXIpO1xuXG4gICAgICAgIHRoaXMueWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpO1xuICAgICAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSk7XG4gICAgICAgIHRoaXMuZGF0ZShkYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdRJywgMCwgJ1FvJywgJ3F1YXJ0ZXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygncXVhcnRlcicsICdRJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdxdWFydGVyJywgNyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdRJywgbWF0Y2gxKTtcbiAgICBhZGRQYXJzZVRva2VuKCdRJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSAodG9JbnQoaW5wdXQpIC0gMSkgKiAzO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0UXVhcnRlciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBNYXRoLmNlaWwoKHRoaXMubW9udGgoKSArIDEpIC8gMykgOiB0aGlzLm1vbnRoKChpbnB1dCAtIDEpICogMyArIHRoaXMubW9udGgoKSAlIDMpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEJywgWydERCcsIDJdLCAnRG8nLCAnZGF0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXRlJywgJ0QnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdkYXRlJywgOSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignREQnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignRG8nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/XG4gICAgICAgICAgKGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUuX29yZGluYWxQYXJzZSkgOlxuICAgICAgICAgIGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQ7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnRCcsICdERCddLCBEQVRFKTtcbiAgICBhZGRQYXJzZVRva2VuKCdEbycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbREFURV0gPSB0b0ludChpbnB1dC5tYXRjaChtYXRjaDF0bzIpWzBdKTtcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXREYXlPZk1vbnRoID0gbWFrZUdldFNldCgnRGF0ZScsIHRydWUpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0RERCcsIFsnRERERCcsIDNdLCAnREREbycsICdkYXlPZlllYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5T2ZZZWFyJywgJ0RERCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RheU9mWWVhcicsIDQpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignREREJywgIG1hdGNoMXRvMyk7XG4gICAgYWRkUmVnZXhUb2tlbignRERERCcsIG1hdGNoMyk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ0RERCcsICdEREREJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mWWVhciAoaW5wdXQpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhciA9IE1hdGgucm91bmQoKHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKSAtIHRoaXMuY2xvbmUoKS5zdGFydE9mKCd5ZWFyJykpIC8gODY0ZTUpICsgMTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZCgoaW5wdXQgLSBkYXlPZlllYXIpLCAnZCcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21pbnV0ZScsICdtJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtaW51dGUnLCAxNCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdtJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignbW0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ20nLCAnbW0nXSwgTUlOVVRFKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaW51dGUgPSBtYWtlR2V0U2V0KCdNaW51dGVzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnc2Vjb25kJywgJ3MnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3NlY29uZCcsIDE1KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3MnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdzcycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsncycsICdzcyddLCBTRUNPTkQpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFNlY29uZCA9IG1ha2VHZXRTZXQoJ1NlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTJywgM10sIDAsICdtaWxsaXNlY29uZCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTUycsIDRdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTJywgNV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTUycsIDZdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTUycsIDddLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTJywgOF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTUycsIDldLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDAwO1xuICAgIH0pO1xuXG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21pbGxpc2Vjb25kJywgJ21zJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtaWxsaXNlY29uZCcsIDE2KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1MnLCAgICBtYXRjaDF0bzMsIG1hdGNoMSk7XG4gICAgYWRkUmVnZXhUb2tlbignU1MnLCAgIG1hdGNoMXRvMywgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdTU1MnLCAgbWF0Y2gxdG8zLCBtYXRjaDMpO1xuXG4gICAgdmFyIHRva2VuO1xuICAgIGZvciAodG9rZW4gPSAnU1NTUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUmVnZXhUb2tlbih0b2tlbiwgbWF0Y2hVbnNpZ25lZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VNcyhpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTUlMTElTRUNPTkRdID0gdG9JbnQoKCcwLicgKyBpbnB1dCkgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmb3IgKHRva2VuID0gJ1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIHBhcnNlTXMpO1xuICAgIH1cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0TWlsbGlzZWNvbmQgPSBtYWtlR2V0U2V0KCdNaWxsaXNlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigneicsICAwLCAwLCAnem9uZUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignenonLCAwLCAwLCAnem9uZU5hbWUnKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFpvbmVBYmJyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ1VUQycgOiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRab25lTmFtZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZScgOiAnJztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8gPSBNb21lbnQucHJvdG90eXBlO1xuXG4gICAgcHJvdG8uYWRkICAgICAgICAgICAgICAgPSBhZGQ7XG4gICAgcHJvdG8uY2FsZW5kYXIgICAgICAgICAgPSBjYWxlbmRhciQxO1xuICAgIHByb3RvLmNsb25lICAgICAgICAgICAgID0gY2xvbmU7XG4gICAgcHJvdG8uZGlmZiAgICAgICAgICAgICAgPSBkaWZmO1xuICAgIHByb3RvLmVuZE9mICAgICAgICAgICAgID0gZW5kT2Y7XG4gICAgcHJvdG8uZm9ybWF0ICAgICAgICAgICAgPSBmb3JtYXQ7XG4gICAgcHJvdG8uZnJvbSAgICAgICAgICAgICAgPSBmcm9tO1xuICAgIHByb3RvLmZyb21Ob3cgICAgICAgICAgID0gZnJvbU5vdztcbiAgICBwcm90by50byAgICAgICAgICAgICAgICA9IHRvO1xuICAgIHByb3RvLnRvTm93ICAgICAgICAgICAgID0gdG9Ob3c7XG4gICAgcHJvdG8uZ2V0ICAgICAgICAgICAgICAgPSBzdHJpbmdHZXQ7XG4gICAgcHJvdG8uaW52YWxpZEF0ICAgICAgICAgPSBpbnZhbGlkQXQ7XG4gICAgcHJvdG8uaXNBZnRlciAgICAgICAgICAgPSBpc0FmdGVyO1xuICAgIHByb3RvLmlzQmVmb3JlICAgICAgICAgID0gaXNCZWZvcmU7XG4gICAgcHJvdG8uaXNCZXR3ZWVuICAgICAgICAgPSBpc0JldHdlZW47XG4gICAgcHJvdG8uaXNTYW1lICAgICAgICAgICAgPSBpc1NhbWU7XG4gICAgcHJvdG8uaXNTYW1lT3JBZnRlciAgICAgPSBpc1NhbWVPckFmdGVyO1xuICAgIHByb3RvLmlzU2FtZU9yQmVmb3JlICAgID0gaXNTYW1lT3JCZWZvcmU7XG4gICAgcHJvdG8uaXNWYWxpZCAgICAgICAgICAgPSBpc1ZhbGlkJDI7XG4gICAgcHJvdG8ubGFuZyAgICAgICAgICAgICAgPSBsYW5nO1xuICAgIHByb3RvLmxvY2FsZSAgICAgICAgICAgID0gbG9jYWxlO1xuICAgIHByb3RvLmxvY2FsZURhdGEgICAgICAgID0gbG9jYWxlRGF0YTtcbiAgICBwcm90by5tYXggICAgICAgICAgICAgICA9IHByb3RvdHlwZU1heDtcbiAgICBwcm90by5taW4gICAgICAgICAgICAgICA9IHByb3RvdHlwZU1pbjtcbiAgICBwcm90by5wYXJzaW5nRmxhZ3MgICAgICA9IHBhcnNpbmdGbGFncztcbiAgICBwcm90by5zZXQgICAgICAgICAgICAgICA9IHN0cmluZ1NldDtcbiAgICBwcm90by5zdGFydE9mICAgICAgICAgICA9IHN0YXJ0T2Y7XG4gICAgcHJvdG8uc3VidHJhY3QgICAgICAgICAgPSBzdWJ0cmFjdDtcbiAgICBwcm90by50b0FycmF5ICAgICAgICAgICA9IHRvQXJyYXk7XG4gICAgcHJvdG8udG9PYmplY3QgICAgICAgICAgPSB0b09iamVjdDtcbiAgICBwcm90by50b0RhdGUgICAgICAgICAgICA9IHRvRGF0ZTtcbiAgICBwcm90by50b0lTT1N0cmluZyAgICAgICA9IHRvSVNPU3RyaW5nO1xuICAgIHByb3RvLmluc3BlY3QgICAgICAgICAgID0gaW5zcGVjdDtcbiAgICBwcm90by50b0pTT04gICAgICAgICAgICA9IHRvSlNPTjtcbiAgICBwcm90by50b1N0cmluZyAgICAgICAgICA9IHRvU3RyaW5nO1xuICAgIHByb3RvLnVuaXggICAgICAgICAgICAgID0gdW5peDtcbiAgICBwcm90by52YWx1ZU9mICAgICAgICAgICA9IHZhbHVlT2Y7XG4gICAgcHJvdG8uY3JlYXRpb25EYXRhICAgICAgPSBjcmVhdGlvbkRhdGE7XG4gICAgcHJvdG8ueWVhciAgICAgICA9IGdldFNldFllYXI7XG4gICAgcHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG4gICAgcHJvdG8ud2Vla1llYXIgICAgPSBnZXRTZXRXZWVrWWVhcjtcbiAgICBwcm90by5pc29XZWVrWWVhciA9IGdldFNldElTT1dlZWtZZWFyO1xuICAgIHByb3RvLnF1YXJ0ZXIgPSBwcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG4gICAgcHJvdG8ubW9udGggICAgICAgPSBnZXRTZXRNb250aDtcbiAgICBwcm90by5kYXlzSW5Nb250aCA9IGdldERheXNJbk1vbnRoO1xuICAgIHByb3RvLndlZWsgICAgICAgICAgID0gcHJvdG8ud2Vla3MgICAgICAgID0gZ2V0U2V0V2VlaztcbiAgICBwcm90by5pc29XZWVrICAgICAgICA9IHByb3RvLmlzb1dlZWtzICAgICA9IGdldFNldElTT1dlZWs7XG4gICAgcHJvdG8ud2Vla3NJblllYXIgICAgPSBnZXRXZWVrc0luWWVhcjtcbiAgICBwcm90by5pc29XZWVrc0luWWVhciA9IGdldElTT1dlZWtzSW5ZZWFyO1xuICAgIHByb3RvLmRhdGUgICAgICAgPSBnZXRTZXREYXlPZk1vbnRoO1xuICAgIHByb3RvLmRheSAgICAgICAgPSBwcm90by5kYXlzICAgICAgICAgICAgID0gZ2V0U2V0RGF5T2ZXZWVrO1xuICAgIHByb3RvLndlZWtkYXkgICAgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG4gICAgcHJvdG8uaXNvV2Vla2RheSA9IGdldFNldElTT0RheU9mV2VlaztcbiAgICBwcm90by5kYXlPZlllYXIgID0gZ2V0U2V0RGF5T2ZZZWFyO1xuICAgIHByb3RvLmhvdXIgPSBwcm90by5ob3VycyA9IGdldFNldEhvdXI7XG4gICAgcHJvdG8ubWludXRlID0gcHJvdG8ubWludXRlcyA9IGdldFNldE1pbnV0ZTtcbiAgICBwcm90by5zZWNvbmQgPSBwcm90by5zZWNvbmRzID0gZ2V0U2V0U2Vjb25kO1xuICAgIHByb3RvLm1pbGxpc2Vjb25kID0gcHJvdG8ubWlsbGlzZWNvbmRzID0gZ2V0U2V0TWlsbGlzZWNvbmQ7XG4gICAgcHJvdG8udXRjT2Zmc2V0ICAgICAgICAgICAgPSBnZXRTZXRPZmZzZXQ7XG4gICAgcHJvdG8udXRjICAgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1VUQztcbiAgICBwcm90by5sb2NhbCAgICAgICAgICAgICAgICA9IHNldE9mZnNldFRvTG9jYWw7XG4gICAgcHJvdG8ucGFyc2Vab25lICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldDtcbiAgICBwcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xuICAgIHByb3RvLmlzRFNUICAgICAgICAgICAgICAgID0gaXNEYXlsaWdodFNhdmluZ1RpbWU7XG4gICAgcHJvdG8uaXNMb2NhbCAgICAgICAgICAgICAgPSBpc0xvY2FsO1xuICAgIHByb3RvLmlzVXRjT2Zmc2V0ICAgICAgICAgID0gaXNVdGNPZmZzZXQ7XG4gICAgcHJvdG8uaXNVdGMgICAgICAgICAgICAgICAgPSBpc1V0YztcbiAgICBwcm90by5pc1VUQyAgICAgICAgICAgICAgICA9IGlzVXRjO1xuICAgIHByb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG4gICAgcHJvdG8uem9uZU5hbWUgPSBnZXRab25lTmFtZTtcbiAgICBwcm90by5kYXRlcyAgPSBkZXByZWNhdGUoJ2RhdGVzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBkYXRlIGluc3RlYWQuJywgZ2V0U2V0RGF5T2ZNb250aCk7XG4gICAgcHJvdG8ubW9udGhzID0gZGVwcmVjYXRlKCdtb250aHMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbnRoIGluc3RlYWQnLCBnZXRTZXRNb250aCk7XG4gICAgcHJvdG8ueWVhcnMgID0gZGVwcmVjYXRlKCd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJywgZ2V0U2V0WWVhcik7XG4gICAgcHJvdG8uem9uZSAgID0gZGVwcmVjYXRlKCdtb21lbnQoKS56b25lIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQoKS51dGNPZmZzZXQgaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy96b25lLycsIGdldFNldFpvbmUpO1xuICAgIHByb3RvLmlzRFNUU2hpZnRlZCA9IGRlcHJlY2F0ZSgnaXNEU1RTaGlmdGVkIGlzIGRlcHJlY2F0ZWQuIFNlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RzdC1zaGlmdGVkLyBmb3IgbW9yZSBpbmZvcm1hdGlvbicsIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCk7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVbml4IChpbnB1dCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJblpvbmUgKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYXJzZVpvbmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQgKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgIH1cblxuICAgIHZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZTtcblxuICAgIHByb3RvJDEuY2FsZW5kYXIgICAgICAgID0gY2FsZW5kYXI7XG4gICAgcHJvdG8kMS5sb25nRGF0ZUZvcm1hdCAgPSBsb25nRGF0ZUZvcm1hdDtcbiAgICBwcm90byQxLmludmFsaWREYXRlICAgICA9IGludmFsaWREYXRlO1xuICAgIHByb3RvJDEub3JkaW5hbCAgICAgICAgID0gb3JkaW5hbDtcbiAgICBwcm90byQxLnByZXBhcnNlICAgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnBvc3Rmb3JtYXQgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnJlbGF0aXZlVGltZSAgICA9IHJlbGF0aXZlVGltZTtcbiAgICBwcm90byQxLnBhc3RGdXR1cmUgICAgICA9IHBhc3RGdXR1cmU7XG4gICAgcHJvdG8kMS5zZXQgICAgICAgICAgICAgPSBzZXQ7XG5cbiAgICBwcm90byQxLm1vbnRocyAgICAgICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRocztcbiAgICBwcm90byQxLm1vbnRoc1Nob3J0ICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1Nob3J0O1xuICAgIHByb3RvJDEubW9udGhzUGFyc2UgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzUGFyc2U7XG4gICAgcHJvdG8kMS5tb250aHNSZWdleCAgICAgICA9IG1vbnRoc1JlZ2V4O1xuICAgIHByb3RvJDEubW9udGhzU2hvcnRSZWdleCAgPSBtb250aHNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2VlayA9IGxvY2FsZVdlZWs7XG4gICAgcHJvdG8kMS5maXJzdERheU9mWWVhciA9IGxvY2FsZUZpcnN0RGF5T2ZZZWFyO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZldlZWsgPSBsb2NhbGVGaXJzdERheU9mV2VlaztcblxuICAgIHByb3RvJDEud2Vla2RheXMgICAgICAgPSAgICAgICAgbG9jYWxlV2Vla2RheXM7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pbiAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c01pbjtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnQgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzU2hvcnQ7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1BhcnNlICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1BhcnNlO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5c1JlZ2V4ICAgICAgID0gICAgICAgIHdlZWtkYXlzUmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0UmVnZXggID0gICAgICAgIHdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWtkYXlzTWluUmVnZXggICAgPSAgICAgICAgd2Vla2RheXNNaW5SZWdleDtcblxuICAgIHByb3RvJDEuaXNQTSA9IGxvY2FsZUlzUE07XG4gICAgcHJvdG8kMS5tZXJpZGllbSA9IGxvY2FsZU1lcmlkaWVtO1xuXG4gICAgZnVuY3Rpb24gZ2V0JDEgKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpO1xuICAgICAgICB2YXIgdXRjID0gY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gbG9jYWxlW2ZpZWxkXSh1dGMsIGZvcm1hdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc0ltcGwgKGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCAnbW9udGgnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIGksIGZpZWxkLCAnbW9udGgnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIC8vICgpXG4gICAgLy8gKDUpXG4gICAgLy8gKGZtdCwgNSlcbiAgICAvLyAoZm10KVxuICAgIC8vICh0cnVlKVxuICAgIC8vICh0cnVlLCA1KVxuICAgIC8vICh0cnVlLCBmbXQsIDUpXG4gICAgLy8gKHRydWUsIGZtdClcbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNJbXBsIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbG9jYWxlU29ydGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBsb2NhbGVTb3J0ZWQ7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGxvY2FsZVNvcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpLFxuICAgICAgICAgICAgc2hpZnQgPSBsb2NhbGVTb3J0ZWQgPyBsb2NhbGUuX3dlZWsuZG93IDogMDtcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgKGluZGV4ICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgKGkgKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRocyAoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRocycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNTaG9ydCAoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRoc1Nob3J0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNTaG9ydCAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNNaW4gKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c01pbicpO1xuICAgIH1cblxuICAgIGdldFNldEdsb2JhbExvY2FsZSgnZW4nLCB7XG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodG9JbnQobnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4gICAgaG9va3MubGFuZyA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmcgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGUgaW5zdGVhZC4nLCBnZXRTZXRHbG9iYWxMb2NhbGUpO1xuICAgIGhvb2tzLmxhbmdEYXRhID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZ0RhdGEgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGVEYXRhIGluc3RlYWQuJywgZ2V0TG9jYWxlKTtcblxuICAgIHZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBhYnMgKCkge1xuICAgICAgICB2YXIgZGF0YSAgICAgICAgICAgPSB0aGlzLl9kYXRhO1xuXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICAgICAgdGhpcy5fZGF5cyAgICAgICAgID0gbWF0aEFicyh0aGlzLl9kYXlzKTtcbiAgICAgICAgdGhpcy5fbW9udGhzICAgICAgID0gbWF0aEFicyh0aGlzLl9tb250aHMpO1xuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzICA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgICAgICBkYXRhLnNlY29uZHMgICAgICAgPSBtYXRoQWJzKGRhdGEuc2Vjb25kcyk7XG4gICAgICAgIGRhdGEubWludXRlcyAgICAgICA9IG1hdGhBYnMoZGF0YS5taW51dGVzKTtcbiAgICAgICAgZGF0YS5ob3VycyAgICAgICAgID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICAgICAgZGF0YS5tb250aHMgICAgICAgID0gbWF0aEFicyhkYXRhLm1vbnRocyk7XG4gICAgICAgIGRhdGEueWVhcnMgICAgICAgICA9IG1hdGhBYnMoZGF0YS55ZWFycyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QkMSAoZHVyYXRpb24sIGlucHV0LCB2YWx1ZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICAgICAgZHVyYXRpb24uX21pbGxpc2Vjb25kcyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbWlsbGlzZWNvbmRzO1xuICAgICAgICBkdXJhdGlvbi5fZGF5cyAgICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9kYXlzO1xuICAgICAgICBkdXJhdGlvbi5fbW9udGhzICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gYWRkJDEgKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIDEpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIHN1YnRyYWN0KDEsICdzJykgb3Igc3VidHJhY3QoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gc3VidHJhY3QkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0NlaWwgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1YmJsZSAoKSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG4gICAgICAgIHZhciBkYXlzICAgICAgICAgPSB0aGlzLl9kYXlzO1xuICAgICAgICB2YXIgbW9udGhzICAgICAgID0gdGhpcy5fbW9udGhzO1xuICAgICAgICB2YXIgZGF0YSAgICAgICAgID0gdGhpcy5fZGF0YTtcbiAgICAgICAgdmFyIHNlY29uZHMsIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycywgbW9udGhzRnJvbURheXM7XG5cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgICAgICAvLyBjaGVjazogaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzIxNjZcbiAgICAgICAgaWYgKCEoKG1pbGxpc2Vjb25kcyA+PSAwICYmIGRheXMgPj0gMCAmJiBtb250aHMgPj0gMCkgfHxcbiAgICAgICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKSkpIHtcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyArPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHMpICsgZGF5cykgKiA4NjRlNTtcbiAgICAgICAgICAgIGRheXMgPSAwO1xuICAgICAgICAgICAgbW9udGhzID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBidWJibGVzIHVwIHZhbHVlcywgc2VlIHRoZSB0ZXN0cyBmb3JcbiAgICAgICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcyAlIDEwMDA7XG5cbiAgICAgICAgc2Vjb25kcyAgICAgICAgICAgPSBhYnNGbG9vcihtaWxsaXNlY29uZHMgLyAxMDAwKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzICAgICAgPSBzZWNvbmRzICUgNjA7XG5cbiAgICAgICAgbWludXRlcyAgICAgICAgICAgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgICAgICA9IG1pbnV0ZXMgJSA2MDtcblxuICAgICAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIGRhdGEuaG91cnMgICAgICAgID0gaG91cnMgJSAyNDtcblxuICAgICAgICBkYXlzICs9IGFic0Zsb29yKGhvdXJzIC8gMjQpO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICAgICAgbW9udGhzRnJvbURheXMgPSBhYnNGbG9vcihkYXlzVG9Nb250aHMoZGF5cykpO1xuICAgICAgICBtb250aHMgKz0gbW9udGhzRnJvbURheXM7XG4gICAgICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cbiAgICAgICAgZGF0YS5kYXlzICAgPSBkYXlzO1xuICAgICAgICBkYXRhLm1vbnRocyA9IG1vbnRocztcbiAgICAgICAgZGF0YS55ZWFycyAgPSB5ZWFycztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzVG9Nb250aHMgKGRheXMpIHtcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTQ2MDk3IGRheXMgKHRha2luZyBpbnRvIGFjY291bnQgbGVhcCB5ZWFyIHJ1bGVzKVxuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxMiBtb250aHMgPT09IDQ4MDBcbiAgICAgICAgcmV0dXJuIGRheXMgKiA0ODAwIC8gMTQ2MDk3O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1RvRGF5cyAobW9udGhzKSB7XG4gICAgICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgICAgICByZXR1cm4gbW9udGhzICogMTQ2MDk3IC8gNDgwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcyAodW5pdHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5cztcbiAgICAgICAgdmFyIG1vbnRocztcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBpZiAodW5pdHMgPT09ICdtb250aCcgfHwgdW5pdHMgPT09ICdxdWFydGVyJyB8fCB1bml0cyA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzICsgZGF5c1RvTW9udGhzKGRheXMpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRoJzogICByZXR1cm4gbW9udGhzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOiByZXR1cm4gbW9udGhzIC8gMztcbiAgICAgICAgICAgICAgICBjYXNlICd5ZWFyJzogICAgcmV0dXJuIG1vbnRocyAvIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBNYXRoLnJvdW5kKG1vbnRoc1RvRGF5cyh0aGlzLl9tb250aHMpKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd3ZWVrJyAgIDogcmV0dXJuIGRheXMgLyA3ICAgICArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdkYXknICAgIDogcmV0dXJuIGRheXMgICAgICAgICArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hvdXInICAgOiByZXR1cm4gZGF5cyAqIDI0ICAgICsgbWlsbGlzZWNvbmRzIC8gMzZlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdtaW51dGUnIDogcmV0dXJuIGRheXMgKiAxNDQwICArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgICAgICBjYXNlICdzZWNvbmQnIDogcmV0dXJuIGRheXMgKiA4NjQwMCArIG1pbGxpc2Vjb25kcyAvIDEwMDA7XG4gICAgICAgICAgICAgICAgLy8gTWF0aC5mbG9vciBwcmV2ZW50cyBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyBoZXJlXG4gICAgICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOiByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVW5rbm93biB1bml0ICcgKyB1bml0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiBVc2UgdGhpcy5hcygnbXMnKT9cbiAgICBmdW5jdGlvbiB2YWx1ZU9mJDEgKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgICAgICh0aGlzLl9tb250aHMgJSAxMikgKiAyNTkyZTYgK1xuICAgICAgICAgICAgdG9JbnQodGhpcy5fbW9udGhzIC8gMTIpICogMzE1MzZlNlxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VBcyAoYWxpYXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzKGFsaWFzKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgYXNNaWxsaXNlY29uZHMgPSBtYWtlQXMoJ21zJyk7XG4gICAgdmFyIGFzU2Vjb25kcyAgICAgID0gbWFrZUFzKCdzJyk7XG4gICAgdmFyIGFzTWludXRlcyAgICAgID0gbWFrZUFzKCdtJyk7XG4gICAgdmFyIGFzSG91cnMgICAgICAgID0gbWFrZUFzKCdoJyk7XG4gICAgdmFyIGFzRGF5cyAgICAgICAgID0gbWFrZUFzKCdkJyk7XG4gICAgdmFyIGFzV2Vla3MgICAgICAgID0gbWFrZUFzKCd3Jyk7XG4gICAgdmFyIGFzTW9udGhzICAgICAgID0gbWFrZUFzKCdNJyk7XG4gICAgdmFyIGFzUXVhcnRlcnMgICAgID0gbWFrZUFzKCdRJyk7XG4gICAgdmFyIGFzWWVhcnMgICAgICAgID0gbWFrZUFzKCd5Jyk7XG5cbiAgICBmdW5jdGlvbiBjbG9uZSQxICgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldCQyICh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpc1t1bml0cyArICdzJ10oKSA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0dGVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU47XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpO1xuICAgIHZhciBzZWNvbmRzICAgICAgPSBtYWtlR2V0dGVyKCdzZWNvbmRzJyk7XG4gICAgdmFyIG1pbnV0ZXMgICAgICA9IG1ha2VHZXR0ZXIoJ21pbnV0ZXMnKTtcbiAgICB2YXIgaG91cnMgICAgICAgID0gbWFrZUdldHRlcignaG91cnMnKTtcbiAgICB2YXIgZGF5cyAgICAgICAgID0gbWFrZUdldHRlcignZGF5cycpO1xuICAgIHZhciBtb250aHMgICAgICAgPSBtYWtlR2V0dGVyKCdtb250aHMnKTtcbiAgICB2YXIgeWVhcnMgICAgICAgID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuICAgIGZ1bmN0aW9uIHdlZWtzICgpIHtcbiAgICAgICAgcmV0dXJuIGFic0Zsb29yKHRoaXMuZGF5cygpIC8gNyk7XG4gICAgfVxuXG4gICAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbiAgICB2YXIgdGhyZXNob2xkcyA9IHtcbiAgICAgICAgc3M6IDQ0LCAgICAgICAgIC8vIGEgZmV3IHNlY29uZHMgdG8gc2Vjb25kc1xuICAgICAgICBzIDogNDUsICAgICAgICAgLy8gc2Vjb25kcyB0byBtaW51dGVcbiAgICAgICAgbSA6IDQ1LCAgICAgICAgIC8vIG1pbnV0ZXMgdG8gaG91clxuICAgICAgICBoIDogMjIsICAgICAgICAgLy8gaG91cnMgdG8gZGF5XG4gICAgICAgIGQgOiAyNiwgICAgICAgICAvLyBkYXlzIHRvIG1vbnRoXG4gICAgICAgIE0gOiAxMSAgICAgICAgICAvLyBtb250aHMgdG8geWVhclxuICAgIH07XG5cbiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gZm9yIG1vbWVudC5mbi5mcm9tLCBtb21lbnQuZm4uZnJvbU5vdywgYW5kIG1vbWVudC5kdXJhdGlvbi5mbi5odW1hbml6ZVxuICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGVUaW1lQWdvKHN0cmluZywgbnVtYmVyLCB3aXRob3V0U3VmZml4LCBpc0Z1dHVyZSwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZSQxIChwb3NOZWdEdXJhdGlvbiwgd2l0aG91dFN1ZmZpeCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKTtcbiAgICAgICAgdmFyIHNlY29uZHMgID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSk7XG4gICAgICAgIHZhciBtaW51dGVzICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdtJykpO1xuICAgICAgICB2YXIgaG91cnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKTtcbiAgICAgICAgdmFyIGRheXMgICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2QnKSk7XG4gICAgICAgIHZhciBtb250aHMgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdNJykpO1xuICAgICAgICB2YXIgeWVhcnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygneScpKTtcblxuICAgICAgICB2YXIgYSA9IHNlY29uZHMgPD0gdGhyZXNob2xkcy5zcyAmJiBbJ3MnLCBzZWNvbmRzXSAgfHxcbiAgICAgICAgICAgICAgICBzZWNvbmRzIDwgdGhyZXNob2xkcy5zICAgJiYgWydzcycsIHNlY29uZHNdIHx8XG4gICAgICAgICAgICAgICAgbWludXRlcyA8PSAxICAgICAgICAgICAgICYmIFsnbSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIG1pbnV0ZXMgPCB0aHJlc2hvbGRzLm0gICAmJiBbJ21tJywgbWludXRlc10gfHxcbiAgICAgICAgICAgICAgICBob3VycyAgIDw9IDEgICAgICAgICAgICAgJiYgWydoJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgaG91cnMgICA8IHRocmVzaG9sZHMuaCAgICYmIFsnaGgnLCBob3Vyc10gICB8fFxuICAgICAgICAgICAgICAgIGRheXMgICAgPD0gMSAgICAgICAgICAgICAmJiBbJ2QnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBkYXlzICAgIDwgdGhyZXNob2xkcy5kICAgJiYgWydkZCcsIGRheXNdICAgIHx8XG4gICAgICAgICAgICAgICAgbW9udGhzICA8PSAxICAgICAgICAgICAgICYmIFsnTSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIG1vbnRocyAgPCB0aHJlc2hvbGRzLk0gICAmJiBbJ01NJywgbW9udGhzXSAgfHxcbiAgICAgICAgICAgICAgICB5ZWFycyAgIDw9IDEgICAgICAgICAgICAgJiYgWyd5J10gICAgICAgICAgIHx8IFsneXknLCB5ZWFyc107XG5cbiAgICAgICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgICAgIGFbM10gPSArcG9zTmVnRHVyYXRpb24gPiAwO1xuICAgICAgICBhWzRdID0gbG9jYWxlO1xuICAgICAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCB0aGUgcm91bmRpbmcgZnVuY3Rpb24gZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIChyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgIGlmIChyb3VuZGluZ0Z1bmN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByb3VuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mKHJvdW5kaW5nRnVuY3Rpb24pID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByb3VuZCA9IHJvdW5kaW5nRnVuY3Rpb247XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCBhIHRocmVzaG9sZCBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkICh0aHJlc2hvbGQsIGxpbWl0KSB7XG4gICAgICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyZXNob2xkc1t0aHJlc2hvbGRdO1xuICAgICAgICB9XG4gICAgICAgIHRocmVzaG9sZHNbdGhyZXNob2xkXSA9IGxpbWl0O1xuICAgICAgICBpZiAodGhyZXNob2xkID09PSAncycpIHtcbiAgICAgICAgICAgIHRocmVzaG9sZHMuc3MgPSBsaW1pdCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHVtYW5pemUgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9jYWxlID0gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgIHZhciBvdXRwdXQgPSByZWxhdGl2ZVRpbWUkMSh0aGlzLCAhd2l0aFN1ZmZpeCwgbG9jYWxlKTtcblxuICAgICAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICAgICAgb3V0cHV0ID0gbG9jYWxlLnBhc3RGdXR1cmUoK3RoaXMsIG91dHB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWJzJDEgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIHNpZ24oeCkge1xuICAgICAgICByZXR1cm4gKCh4ID4gMCkgLSAoeCA8IDApKSB8fCAreDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgICAgICAvLyBmb3IgSVNPIHN0cmluZ3Mgd2UgZG8gbm90IHVzZSB0aGUgbm9ybWFsIGJ1YmJsaW5nIHJ1bGVzOlxuICAgICAgICAvLyAgKiBtaWxsaXNlY29uZHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIGhvdXJzXG4gICAgICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAgICAgLy8gICogbW9udGhzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSB5ZWFyc1xuICAgICAgICAvLyBUaGlzIGlzIGJlY2F1c2UgdGhlcmUgaXMgbm8gY29udGV4dC1mcmVlIGNvbnZlcnNpb24gYmV0d2VlbiBob3VycyBhbmQgZGF5c1xuICAgICAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAgICAgLy8gYW5kIGFsc28gbm90IGJldHdlZW4gZGF5cyBhbmQgbW9udGhzICgyOC0zMSBkYXlzIHBlciBtb250aClcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2Vjb25kcyA9IGFicyQxKHRoaXMuX21pbGxpc2Vjb25kcykgLyAxMDAwO1xuICAgICAgICB2YXIgZGF5cyAgICAgICAgID0gYWJzJDEodGhpcy5fZGF5cyk7XG4gICAgICAgIHZhciBtb250aHMgICAgICAgPSBhYnMkMSh0aGlzLl9tb250aHMpO1xuICAgICAgICB2YXIgbWludXRlcywgaG91cnMsIHllYXJzO1xuXG4gICAgICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgICAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGhvdXJzICAgICAgICAgICAgID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgc2Vjb25kcyAlPSA2MDtcbiAgICAgICAgbWludXRlcyAlPSA2MDtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzICA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG5cbiAgICAgICAgLy8gaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2RvcmRpbGxlL21vbWVudC1pc29kdXJhdGlvbi9ibG9iL21hc3Rlci9tb21lbnQuaXNvZHVyYXRpb24uanNcbiAgICAgICAgdmFyIFkgPSB5ZWFycztcbiAgICAgICAgdmFyIE0gPSBtb250aHM7XG4gICAgICAgIHZhciBEID0gZGF5cztcbiAgICAgICAgdmFyIGggPSBob3VycztcbiAgICAgICAgdmFyIG0gPSBtaW51dGVzO1xuICAgICAgICB2YXIgcyA9IHNlY29uZHMgPyBzZWNvbmRzLnRvRml4ZWQoMykucmVwbGFjZSgvXFwuPzArJC8sICcnKSA6ICcnO1xuICAgICAgICB2YXIgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpO1xuXG4gICAgICAgIGlmICghdG90YWwpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIHNhbWUgYXMgQyMncyAoTm9kYSkgYW5kIHB5dGhvbiAoaXNvZGF0ZSkuLi5cbiAgICAgICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgICAgIHJldHVybiAnUDBEJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3RhbFNpZ24gPSB0b3RhbCA8IDAgPyAnLScgOiAnJztcbiAgICAgICAgdmFyIHltU2lnbiA9IHNpZ24odGhpcy5fbW9udGhzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgdmFyIGRheXNTaWduID0gc2lnbih0aGlzLl9kYXlzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgdmFyIGhtc1NpZ24gPSBzaWduKHRoaXMuX21pbGxpc2Vjb25kcykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG5cbiAgICAgICAgcmV0dXJuIHRvdGFsU2lnbiArICdQJyArXG4gICAgICAgICAgICAoWSA/IHltU2lnbiArIFkgKyAnWScgOiAnJykgK1xuICAgICAgICAgICAgKE0gPyB5bVNpZ24gKyBNICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChEID8gZGF5c1NpZ24gKyBEICsgJ0QnIDogJycpICtcbiAgICAgICAgICAgICgoaCB8fCBtIHx8IHMpID8gJ1QnIDogJycpICtcbiAgICAgICAgICAgIChoID8gaG1zU2lnbiArIGggKyAnSCcgOiAnJykgK1xuICAgICAgICAgICAgKG0gPyBobXNTaWduICsgbSArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAocyA/IGhtc1NpZ24gKyBzICsgJ1MnIDogJycpO1xuICAgIH1cblxuICAgIHZhciBwcm90byQyID0gRHVyYXRpb24ucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMi5pc1ZhbGlkICAgICAgICA9IGlzVmFsaWQkMTtcbiAgICBwcm90byQyLmFicyAgICAgICAgICAgID0gYWJzO1xuICAgIHByb3RvJDIuYWRkICAgICAgICAgICAgPSBhZGQkMTtcbiAgICBwcm90byQyLnN1YnRyYWN0ICAgICAgID0gc3VidHJhY3QkMTtcbiAgICBwcm90byQyLmFzICAgICAgICAgICAgID0gYXM7XG4gICAgcHJvdG8kMi5hc01pbGxpc2Vjb25kcyA9IGFzTWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuYXNTZWNvbmRzICAgICAgPSBhc1NlY29uZHM7XG4gICAgcHJvdG8kMi5hc01pbnV0ZXMgICAgICA9IGFzTWludXRlcztcbiAgICBwcm90byQyLmFzSG91cnMgICAgICAgID0gYXNIb3VycztcbiAgICBwcm90byQyLmFzRGF5cyAgICAgICAgID0gYXNEYXlzO1xuICAgIHByb3RvJDIuYXNXZWVrcyAgICAgICAgPSBhc1dlZWtzO1xuICAgIHByb3RvJDIuYXNNb250aHMgICAgICAgPSBhc01vbnRocztcbiAgICBwcm90byQyLmFzUXVhcnRlcnMgICAgID0gYXNRdWFydGVycztcbiAgICBwcm90byQyLmFzWWVhcnMgICAgICAgID0gYXNZZWFycztcbiAgICBwcm90byQyLnZhbHVlT2YgICAgICAgID0gdmFsdWVPZiQxO1xuICAgIHByb3RvJDIuX2J1YmJsZSAgICAgICAgPSBidWJibGU7XG4gICAgcHJvdG8kMi5jbG9uZSAgICAgICAgICA9IGNsb25lJDE7XG4gICAgcHJvdG8kMi5nZXQgICAgICAgICAgICA9IGdldCQyO1xuICAgIHByb3RvJDIubWlsbGlzZWNvbmRzICAgPSBtaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5zZWNvbmRzICAgICAgICA9IHNlY29uZHM7XG4gICAgcHJvdG8kMi5taW51dGVzICAgICAgICA9IG1pbnV0ZXM7XG4gICAgcHJvdG8kMi5ob3VycyAgICAgICAgICA9IGhvdXJzO1xuICAgIHByb3RvJDIuZGF5cyAgICAgICAgICAgPSBkYXlzO1xuICAgIHByb3RvJDIud2Vla3MgICAgICAgICAgPSB3ZWVrcztcbiAgICBwcm90byQyLm1vbnRocyAgICAgICAgID0gbW9udGhzO1xuICAgIHByb3RvJDIueWVhcnMgICAgICAgICAgPSB5ZWFycztcbiAgICBwcm90byQyLmh1bWFuaXplICAgICAgID0gaHVtYW5pemU7XG4gICAgcHJvdG8kMi50b0lTT1N0cmluZyAgICA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b1N0cmluZyAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b0pTT04gICAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi5sb2NhbGUgICAgICAgICA9IGxvY2FsZTtcbiAgICBwcm90byQyLmxvY2FsZURhdGEgICAgID0gbG9jYWxlRGF0YTtcblxuICAgIHByb3RvJDIudG9Jc29TdHJpbmcgPSBkZXByZWNhdGUoJ3RvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpJywgdG9JU09TdHJpbmckMSk7XG4gICAgcHJvdG8kMi5sYW5nID0gbGFuZztcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdYJywgMCwgMCwgJ3VuaXgnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd4JywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcCk7XG4gICAgYWRkUGFyc2VUb2tlbignWCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShwYXJzZUZsb2F0KGlucHV0LCAxMCkgKiAxMDAwKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCd4JywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHRvSW50KGlucHV0KSk7XG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cblxuICAgIGhvb2tzLnZlcnNpb24gPSAnMi4yNC4wJztcblxuICAgIHNldEhvb2tDYWxsYmFjayhjcmVhdGVMb2NhbCk7XG5cbiAgICBob29rcy5mbiAgICAgICAgICAgICAgICAgICAgPSBwcm90bztcbiAgICBob29rcy5taW4gICAgICAgICAgICAgICAgICAgPSBtaW47XG4gICAgaG9va3MubWF4ICAgICAgICAgICAgICAgICAgID0gbWF4O1xuICAgIGhvb2tzLm5vdyAgICAgICAgICAgICAgICAgICA9IG5vdztcbiAgICBob29rcy51dGMgICAgICAgICAgICAgICAgICAgPSBjcmVhdGVVVEM7XG4gICAgaG9va3MudW5peCAgICAgICAgICAgICAgICAgID0gY3JlYXRlVW5peDtcbiAgICBob29rcy5tb250aHMgICAgICAgICAgICAgICAgPSBsaXN0TW9udGhzO1xuICAgIGhvb2tzLmlzRGF0ZSAgICAgICAgICAgICAgICA9IGlzRGF0ZTtcbiAgICBob29rcy5sb2NhbGUgICAgICAgICAgICAgICAgPSBnZXRTZXRHbG9iYWxMb2NhbGU7XG4gICAgaG9va3MuaW52YWxpZCAgICAgICAgICAgICAgID0gY3JlYXRlSW52YWxpZDtcbiAgICBob29rcy5kdXJhdGlvbiAgICAgICAgICAgICAgPSBjcmVhdGVEdXJhdGlvbjtcbiAgICBob29rcy5pc01vbWVudCAgICAgICAgICAgICAgPSBpc01vbWVudDtcbiAgICBob29rcy53ZWVrZGF5cyAgICAgICAgICAgICAgPSBsaXN0V2Vla2RheXM7XG4gICAgaG9va3MucGFyc2Vab25lICAgICAgICAgICAgID0gY3JlYXRlSW5ab25lO1xuICAgIGhvb2tzLmxvY2FsZURhdGEgICAgICAgICAgICA9IGdldExvY2FsZTtcbiAgICBob29rcy5pc0R1cmF0aW9uICAgICAgICAgICAgPSBpc0R1cmF0aW9uO1xuICAgIGhvb2tzLm1vbnRoc1Nob3J0ICAgICAgICAgICA9IGxpc3RNb250aHNTaG9ydDtcbiAgICBob29rcy53ZWVrZGF5c01pbiAgICAgICAgICAgPSBsaXN0V2Vla2RheXNNaW47XG4gICAgaG9va3MuZGVmaW5lTG9jYWxlICAgICAgICAgID0gZGVmaW5lTG9jYWxlO1xuICAgIGhvb2tzLnVwZGF0ZUxvY2FsZSAgICAgICAgICA9IHVwZGF0ZUxvY2FsZTtcbiAgICBob29rcy5sb2NhbGVzICAgICAgICAgICAgICAgPSBsaXN0TG9jYWxlcztcbiAgICBob29rcy53ZWVrZGF5c1Nob3J0ICAgICAgICAgPSBsaXN0V2Vla2RheXNTaG9ydDtcbiAgICBob29rcy5ub3JtYWxpemVVbml0cyAgICAgICAgPSBub3JtYWxpemVVbml0cztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVSb3VuZGluZyAgPSBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVUaHJlc2hvbGQgPSBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQ7XG4gICAgaG9va3MuY2FsZW5kYXJGb3JtYXQgICAgICAgID0gZ2V0Q2FsZW5kYXJGb3JtYXQ7XG4gICAgaG9va3MucHJvdG90eXBlICAgICAgICAgICAgID0gcHJvdG87XG5cbiAgICAvLyBjdXJyZW50bHkgSFRNTDUgaW5wdXQgdHlwZSBvbmx5IHN1cHBvcnRzIDI0LWhvdXIgZm9ybWF0c1xuICAgIGhvb2tzLkhUTUw1X0ZNVCA9IHtcbiAgICAgICAgREFURVRJTUVfTE9DQUw6ICdZWVlZLU1NLUREVEhIOm1tJywgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX1NFQ09ORFM6ICdZWVlZLU1NLUREVEhIOm1tOnNzJywgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX01TOiAnWVlZWS1NTS1ERFRISDptbTpzcy5TU1MnLCAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBEQVRFOiAnWVlZWS1NTS1ERCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cImRhdGVcIiAvPlxuICAgICAgICBUSU1FOiAnSEg6bW0nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiAvPlxuICAgICAgICBUSU1FX1NFQ09ORFM6ICdISDptbTpzcycsICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIFRJTUVfTVM6ICdISDptbTpzcy5TU1MnLCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIFdFRUs6ICdHR0dHLVtXXVdXJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwid2Vla1wiIC8+XG4gICAgICAgIE1PTlRIOiAnWVlZWS1NTScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwibW9udGhcIiAvPlxuICAgIH07XG5cbiAgICByZXR1cm4gaG9va3M7XG5cbn0pKSk7XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjQuMSBieSBAbWF0aGlhcyAqL1xuOyhmdW5jdGlvbihyb290KSB7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlcyAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmXG5cdFx0IWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdCFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoXG5cdFx0ZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbFxuXHQpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYHB1bnljb2RlYCBvYmplY3QuXG5cdCAqIEBuYW1lIHB1bnljb2RlXG5cdCAqIEB0eXBlIE9iamVjdFxuXHQgKi9cblx0dmFyIHB1bnljb2RlLFxuXG5cdC8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cblx0bWF4SW50ID0gMjE0NzQ4MzY0NywgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxuXG5cdC8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cblx0YmFzZSA9IDM2LFxuXHR0TWluID0gMSxcblx0dE1heCA9IDI2LFxuXHRza2V3ID0gMzgsXG5cdGRhbXAgPSA3MDAsXG5cdGluaXRpYWxCaWFzID0gNzIsXG5cdGluaXRpYWxOID0gMTI4LCAvLyAweDgwXG5cdGRlbGltaXRlciA9ICctJywgLy8gJ1xceDJEJ1xuXG5cdC8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG5cdHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLFxuXHRyZWdleE5vbkFTQ0lJID0gL1teXFx4MjAtXFx4N0VdLywgLy8gdW5wcmludGFibGUgQVNDSUkgY2hhcnMgKyBub24tQVNDSUkgY2hhcnNcblx0cmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlcyAqL1xuXHRlcnJvcnMgPSB7XG5cdFx0J292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcblx0XHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHRcdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG5cdH0sXG5cblx0LyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuXHRiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sXG5cdGZsb29yID0gTWF0aC5mbG9vcixcblx0c3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcblxuXHQvKiogVGVtcG9yYXJ5IHZhcmlhYmxlICovXG5cdGtleTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBlcnJvcih0eXBlKSB7XG5cdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoZXJyb3JzW3R5cGVdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgYEFycmF5I21hcGAgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IGFycmF5XG5cdCAqIGl0ZW0uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR3aGlsZSAobGVuZ3RoLS0pIHtcblx0XHRcdHJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG5cdCAqIGFkZHJlc3Nlcy5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG5cdCAqIGNoYXJhY3Rlci5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuXHRcdHZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpO1xuXHRcdHZhciByZXN1bHQgPSAnJztcblx0XHRpZiAocGFydHMubGVuZ3RoID4gMSkge1xuXHRcdFx0Ly8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuXHRcdFx0Ly8gdGhlIGxvY2FsIHBhcnQgKGkuZS4gZXZlcnl0aGluZyB1cCB0byBgQGApIGludGFjdC5cblx0XHRcdHJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnO1xuXHRcdFx0c3RyaW5nID0gcGFydHNbMV07XG5cdFx0fVxuXHRcdC8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy5cblx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuXHRcdHZhciBsYWJlbHMgPSBzdHJpbmcuc3BsaXQoJy4nKTtcblx0XHR2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG5cdFx0cmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuXHQgKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG5cdCAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG5cdCAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuXHQgKiBtYXRjaGluZyBVVEYtMTYuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuXHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZGVjb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIFVuaWNvZGUgaW5wdXQgc3RyaW5nIChVQ1MtMikuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIG5ldyBhcnJheSBvZiBjb2RlIHBvaW50cy5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBjb3VudGVyID0gMCxcblx0XHQgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcblx0XHQgICAgdmFsdWUsXG5cdFx0ICAgIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZGVjb2RlYFxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBlbmNvZGVcblx0ICogQHBhcmFtIHtBcnJheX0gY29kZVBvaW50cyBUaGUgYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRcdHJldHVybiBtYXAoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHRcdH1cblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHRcdFx0cmV0dXJuIG91dHB1dDtcblx0XHR9KS5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGJhc2ljIGNvZGUgcG9pbnQgaW50byBhIGRpZ2l0L2ludGVnZXIuXG5cdCAqIEBzZWUgYGRpZ2l0VG9CYXNpYygpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29kZVBvaW50IFRoZSBiYXNpYyBudW1lcmljIGNvZGUgcG9pbnQgdmFsdWUuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludCAoZm9yIHVzZSBpblxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmXG5cdCAqIHRoZSBjb2RlIHBvaW50IGRvZXMgbm90IHJlcHJlc2VudCBhIHZhbHVlLlxuXHQgKi9cblx0ZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkge1xuXHRcdGlmIChjb2RlUG9pbnQgLSA0OCA8IDEwKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gMjI7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gNjU7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA5NyA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gOTc7XG5cdFx0fVxuXHRcdHJldHVybiBiYXNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHNlZSBgYmFzaWNUb0RpZ2l0KClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBiYXNpYyBjb2RlIHBvaW50IHdob3NlIHZhbHVlICh3aGVuIHVzZWQgZm9yXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaXMgYGRpZ2l0YCwgd2hpY2ggbmVlZHMgdG8gYmUgaW4gdGhlIHJhbmdlXG5cdCAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuXHQgKiB1c2VkOyBlbHNlLCB0aGUgbG93ZXJjYXNlIGZvcm0gaXMgdXNlZC4gVGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZFxuXHQgKiBpZiBgZmxhZ2AgaXMgbm9uLXplcm8gYW5kIGBkaWdpdGAgaGFzIG5vIHVwcGVyY2FzZSBmb3JtLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGlnaXRUb0Jhc2ljKGRpZ2l0LCBmbGFnKSB7XG5cdFx0Ly8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcblx0XHQvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcblx0XHRyZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG5cdCAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBhZGFwdChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcblx0XHR2YXIgayA9IDA7XG5cdFx0ZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcblx0XHRkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG5cdFx0Zm9yICgvKiBubyBpbml0aWFsaXphdGlvbiAqLzsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcblx0XHRcdGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGVcblx0ICogc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdFx0Ly8gRG9uJ3QgdXNlIFVDUy0yXG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcblx0XHQgICAgb3V0LFxuXHRcdCAgICBpID0gMCxcblx0XHQgICAgbiA9IGluaXRpYWxOLFxuXHRcdCAgICBiaWFzID0gaW5pdGlhbEJpYXMsXG5cdFx0ICAgIGJhc2ljLFxuXHRcdCAgICBqLFxuXHRcdCAgICBpbmRleCxcblx0XHQgICAgb2xkaSxcblx0XHQgICAgdyxcblx0XHQgICAgayxcblx0XHQgICAgZGlnaXQsXG5cdFx0ICAgIHQsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBiYXNlTWludXNUO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG5cdFx0Ly8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcblx0XHQvLyB0aGUgZmlyc3QgYmFzaWMgY29kZSBwb2ludHMgdG8gdGhlIG91dHB1dC5cblxuXHRcdGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcblx0XHRpZiAoYmFzaWMgPCAwKSB7XG5cdFx0XHRiYXNpYyA9IDA7XG5cdFx0fVxuXG5cdFx0Zm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcblx0XHRcdC8vIGlmIGl0J3Mgbm90IGEgYmFzaWMgY29kZSBwb2ludFxuXHRcdFx0aWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkge1xuXHRcdFx0XHRlcnJvcignbm90LWJhc2ljJyk7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGRlY29kaW5nIGxvb3A6IHN0YXJ0IGp1c3QgYWZ0ZXIgdGhlIGxhc3QgZGVsaW1pdGVyIGlmIGFueSBiYXNpYyBjb2RlXG5cdFx0Ly8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuXHRcdGZvciAoaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovKSB7XG5cblx0XHRcdC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cblx0XHRcdC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcblx0XHRcdC8vIHdoaWNoIGdldHMgYWRkZWQgdG8gYGlgLiBUaGUgb3ZlcmZsb3cgY2hlY2tpbmcgaXMgZWFzaWVyXG5cdFx0XHQvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuXHRcdFx0Ly8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cblx0XHRcdGZvciAob2xkaSA9IGksIHcgPSAxLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblxuXHRcdFx0XHRpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcblx0XHRcdFx0XHRlcnJvcignaW52YWxpZC1pbnB1dCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0ID49IGJhc2UgfHwgZGlnaXQgPiBmbG9vcigobWF4SW50IC0gaSkgLyB3KSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aSArPSBkaWdpdCAqIHc7XG5cdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0aWYgKHcgPiBmbG9vcihtYXhJbnQgLyBiYXNlTWludXNUKSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dyAqPSBiYXNlTWludXNUO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdFx0YmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7XG5cblx0XHRcdC8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsXG5cdFx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdFx0aWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0biArPSBmbG9vcihpIC8gb3V0KTtcblx0XHRcdGkgJT0gb3V0O1xuXG5cdFx0XHQvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0XG5cdFx0XHRvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG5cdCAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuXHRcdHZhciBuLFxuXHRcdCAgICBkZWx0YSxcblx0XHQgICAgaGFuZGxlZENQQ291bnQsXG5cdFx0ICAgIGJhc2ljTGVuZ3RoLFxuXHRcdCAgICBiaWFzLFxuXHRcdCAgICBqLFxuXHRcdCAgICBtLFxuXHRcdCAgICBxLFxuXHRcdCAgICBrLFxuXHRcdCAgICB0LFxuXHRcdCAgICBjdXJyZW50VmFsdWUsXG5cdFx0ICAgIG91dHB1dCA9IFtdLFxuXHRcdCAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqL1xuXHRcdCAgICBpbnB1dExlbmd0aCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSxcblx0XHQgICAgYmFzZU1pbnVzVCxcblx0XHQgICAgcU1pbnVzVDtcblxuXHRcdC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIFVuaWNvZGVcblx0XHRpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG5cdFx0Ly8gQ2FjaGUgdGhlIGxlbmd0aFxuXHRcdGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3RhdGVcblx0XHRuID0gaW5pdGlhbE47XG5cdFx0ZGVsdGEgPSAwO1xuXHRcdGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHNcblx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuXHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7XG5cblx0XHQvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblx0XHQvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG5cblx0XHQvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyAtIGlmIGl0IGlzIG5vdCBlbXB0eSAtIHdpdGggYSBkZWxpbWl0ZXJcblx0XHRpZiAoYmFzaWNMZW5ndGgpIHtcblx0XHRcdG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBlbmNvZGluZyBsb29wOlxuXHRcdHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cblx0XHRcdC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHRcblx0XHRcdC8vIGxhcmdlciBvbmU6XG5cdFx0XHRmb3IgKG0gPSBtYXhJbnQsIGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcblx0XHRcdFx0XHRtID0gY3VycmVudFZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPixcblx0XHRcdC8vIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93XG5cdFx0XHRoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG5cdFx0XHRpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcblx0XHRcdG4gPSBtO1xuXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID09IG4pIHtcblx0XHRcdFx0XHQvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlclxuXHRcdFx0XHRcdGZvciAocSA9IGRlbHRhLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblx0XHRcdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXHRcdFx0XHRcdFx0aWYgKHEgPCB0KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cU1pbnVzVCA9IHEgLSB0O1xuXHRcdFx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRcdFx0b3V0cHV0LnB1c2goXG5cdFx0XHRcdFx0XHRcdHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSwgMCkpKTtcblx0XHRcdFx0XHRiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRcdGRlbHRhID0gMDtcblx0XHRcdFx0XHQrK2hhbmRsZWRDUENvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCsrZGVsdGE7XG5cdFx0XHQrK247XG5cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dC5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzXG5cdCAqIHRvIFVuaWNvZGUuIE9ubHkgdGhlIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgaW5wdXQgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS5cblx0ICogaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgb24gYSBzdHJpbmcgdGhhdCBoYXMgYWxyZWFkeSBiZWVuXG5cdCAqIGNvbnZlcnRlZCB0byBVbmljb2RlLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZWQgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBjb252ZXJ0IHRvIFVuaWNvZGUuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBVbmljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBQdW55Y29kZVxuXHQgKiBzdHJpbmcuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b1VuaWNvZGUoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSlcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIFB1bnljb2RlLiBPbmx5IHRoZSBub24tQVNDSUkgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHdpbGwgYmUgY29udmVydGVkLFxuXHQgKiBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCdzIGFscmVhZHkgaW5cblx0ICogQVNDSUkuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG8gY29udmVydCwgYXMgYVxuXHQgKiBVbmljb2RlIHN0cmluZy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFB1bnljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBkb21haW4gbmFtZSBvclxuXHQgKiBlbWFpbCBhZGRyZXNzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9BU0NJSShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gJ3huLS0nICsgZW5jb2RlKHN0cmluZylcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovXG5cdHB1bnljb2RlID0ge1xuXHRcdC8qKlxuXHRcdCAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBQdW55Y29kZS5qcyB2ZXJzaW9uIG51bWJlci5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBTdHJpbmdcblx0XHQgKi9cblx0XHQndmVyc2lvbic6ICcxLjQuMScsXG5cdFx0LyoqXG5cdFx0ICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcblx0XHQgKiByZXByZXNlbnRhdGlvbiAoVUNTLTIpIHRvIFVuaWNvZGUgY29kZSBwb2ludHMsIGFuZCBiYWNrLlxuXHRcdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIE9iamVjdFxuXHRcdCAqL1xuXHRcdCd1Y3MyJzoge1xuXHRcdFx0J2RlY29kZSc6IHVjczJkZWNvZGUsXG5cdFx0XHQnZW5jb2RlJzogdWNzMmVuY29kZVxuXHRcdH0sXG5cdFx0J2RlY29kZSc6IGRlY29kZSxcblx0XHQnZW5jb2RlJzogZW5jb2RlLFxuXHRcdCd0b0FTQ0lJJzogdG9BU0NJSSxcblx0XHQndG9Vbmljb2RlJzogdG9Vbmljb2RlXG5cdH07XG5cblx0LyoqIEV4cG9zZSBgcHVueWNvZGVgICovXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKCdwdW55Y29kZScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHB1bnljb2RlO1xuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUpIHtcblx0XHRpZiAobW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMpIHtcblx0XHRcdC8vIGluIE5vZGUuanMsIGlvLmpzLCBvciBSaW5nb0pTIHYwLjguMCtcblx0XHRcdGZyZWVNb2R1bGUuZXhwb3J0cyA9IHB1bnljb2RlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvLyBpbiBSaGlubyBvciBhIHdlYiBicm93c2VyXG5cdFx0cm9vdC5wdW55Y29kZSA9IHB1bnljb2RlO1xuXHR9XG5cbn0odGhpcykpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gSWYgb2JqLmhhc093blByb3BlcnR5IGhhcyBiZWVuIG92ZXJyaWRkZW4sIHRoZW4gY2FsbGluZ1xuLy8gb2JqLmhhc093blByb3BlcnR5KHByb3ApIHdpbGwgYnJlYWsuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwN1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihxcywgc2VwLCBlcSwgb3B0aW9ucykge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgdmFyIG9iaiA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcXMgIT09ICdzdHJpbmcnIHx8IHFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gL1xcKy9nO1xuICBxcyA9IHFzLnNwbGl0KHNlcCk7XG5cbiAgdmFyIG1heEtleXMgPSAxMDAwO1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhLZXlzID09PSAnbnVtYmVyJykge1xuICAgIG1heEtleXMgPSBvcHRpb25zLm1heEtleXM7XG4gIH1cblxuICB2YXIgbGVuID0gcXMubGVuZ3RoO1xuICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnRcbiAgaWYgKG1heEtleXMgPiAwICYmIGxlbiA+IG1heEtleXMpIHtcbiAgICBsZW4gPSBtYXhLZXlzO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSxcbiAgICAgICAgaWR4ID0geC5pbmRleE9mKGVxKSxcbiAgICAgICAga3N0ciwgdnN0ciwgaywgdjtcblxuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAga3N0ciA9IHguc3Vic3RyKDAsIGlkeCk7XG4gICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtzdHIgPSB4O1xuICAgICAgdnN0ciA9ICcnO1xuICAgIH1cblxuICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7XG4gICAgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2c3RyKTtcblxuICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkge1xuICAgICAgb2JqW2tdID0gdjtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgb2JqW2tdLnB1c2godik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrXSA9IFtvYmpba10sIHZdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnlQcmltaXRpdmUgPSBmdW5jdGlvbih2KSB7XG4gIHN3aXRjaCAodHlwZW9mIHYpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHY7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB2ID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgc2VwLCBlcSwgbmFtZSkge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIG9iaiA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBtYXAob2JqZWN0S2V5cyhvYmopLCBmdW5jdGlvbihrKSB7XG4gICAgICB2YXIga3MgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKGspKSArIGVxO1xuICAgICAgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgICByZXR1cm4gbWFwKG9ialtrXSwgZnVuY3Rpb24odikge1xuICAgICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUodikpO1xuICAgICAgICB9KS5qb2luKHNlcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9ialtrXSkpO1xuICAgICAgfVxuICAgIH0pLmpvaW4oc2VwKTtcblxuICB9XG5cbiAgaWYgKCFuYW1lKSByZXR1cm4gJyc7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICtcbiAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqKSk7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuZnVuY3Rpb24gbWFwICh4cywgZikge1xuICBpZiAoeHMubWFwKSByZXR1cm4geHMubWFwKGYpO1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXMucHVzaChmKHhzW2ldLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSByZXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmRlY29kZSA9IGV4cG9ydHMucGFyc2UgPSByZXF1aXJlKCcuL2RlY29kZScpO1xuZXhwb3J0cy5lbmNvZGUgPSBleHBvcnRzLnN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vZW5jb2RlJyk7XG4iLCIvKiBzb2NranMtY2xpZW50IHYxLjQuMCB8IGh0dHA6Ly9zb2NranMub3JnIHwgTUlUIGxpY2Vuc2UgKi9cbihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLlNvY2tKUyA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJhbnNwb3J0TGlzdCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0LWxpc3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21haW4nKSh0cmFuc3BvcnRMaXN0KTtcblxuLy8gVE9ETyBjYW4ndCBnZXQgcmlkIG9mIHRoaXMgdW50aWwgYWxsIHNlcnZlcnMgZG9cbmlmICgnX3NvY2tqc19vbmxvYWQnIGluIGdsb2JhbCkge1xuICBzZXRUaW1lb3V0KGdsb2JhbC5fc29ja2pzX29ubG9hZCwgMSk7XG59XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4vbWFpblwiOjE0LFwiLi90cmFuc3BvcnQtbGlzdFwiOjE2fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudCA9IHJlcXVpcmUoJy4vZXZlbnQnKVxuICA7XG5cbmZ1bmN0aW9uIENsb3NlRXZlbnQoKSB7XG4gIEV2ZW50LmNhbGwodGhpcyk7XG4gIHRoaXMuaW5pdEV2ZW50KCdjbG9zZScsIGZhbHNlLCBmYWxzZSk7XG4gIHRoaXMud2FzQ2xlYW4gPSBmYWxzZTtcbiAgdGhpcy5jb2RlID0gMDtcbiAgdGhpcy5yZWFzb24gPSAnJztcbn1cblxuaW5oZXJpdHMoQ2xvc2VFdmVudCwgRXZlbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsb3NlRXZlbnQ7XG5cbn0se1wiLi9ldmVudFwiOjQsXCJpbmhlcml0c1wiOjU3fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4vZXZlbnR0YXJnZXQnKVxuICA7XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRUYXJnZXQuY2FsbCh0aGlzKTtcbn1cblxuaW5oZXJpdHMoRXZlbnRFbWl0dGVyLCBFdmVudFRhcmdldCk7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICBpZiAodHlwZSkge1xuICAgIGRlbGV0ZSB0aGlzLl9saXN0ZW5lcnNbdHlwZV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICAgICwgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMub24odHlwZSwgZyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHR5cGUgPSBhcmd1bWVudHNbMF07XG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbdHlwZV07XG4gIGlmICghbGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGVxdWl2YWxlbnQgb2YgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncyA9IG5ldyBBcnJheShsIC0gMSk7XG4gIGZvciAodmFyIGFpID0gMTsgYWkgPCBsOyBhaSsrKSB7XG4gICAgYXJnc1thaSAtIDFdID0gYXJndW1lbnRzW2FpXTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBFdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcjtcblxubW9kdWxlLmV4cG9ydHMuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG59LHtcIi4vZXZlbnR0YXJnZXRcIjo1LFwiaW5oZXJpdHNcIjo1N31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBFdmVudChldmVudFR5cGUpIHtcbiAgdGhpcy50eXBlID0gZXZlbnRUeXBlO1xufVxuXG5FdmVudC5wcm90b3R5cGUuaW5pdEV2ZW50ID0gZnVuY3Rpb24oZXZlbnRUeXBlLCBjYW5CdWJibGUsIGNhbmNlbGFibGUpIHtcbiAgdGhpcy50eXBlID0gZXZlbnRUeXBlO1xuICB0aGlzLmJ1YmJsZXMgPSBjYW5CdWJibGU7XG4gIHRoaXMuY2FuY2VsYWJsZSA9IGNhbmNlbGFibGU7XG4gIHRoaXMudGltZVN0YW1wID0gK25ldyBEYXRlKCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnQucHJvdG90eXBlLnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKCkge307XG5FdmVudC5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHt9O1xuXG5FdmVudC5DQVBUVVJJTkdfUEhBU0UgPSAxO1xuRXZlbnQuQVRfVEFSR0VUID0gMjtcbkV2ZW50LkJVQkJMSU5HX1BIQVNFID0gMztcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudDtcblxufSx7fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbi8qIFNpbXBsaWZpZWQgaW1wbGVtZW50YXRpb24gb2YgRE9NMiBFdmVudFRhcmdldC5cbiAqICAgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItRXZlbnRzL2V2ZW50cy5odG1sI0V2ZW50cy1FdmVudFRhcmdldFxuICovXG5cbmZ1bmN0aW9uIEV2ZW50VGFyZ2V0KCkge1xuICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbn1cblxuRXZlbnRUYXJnZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudFR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghKGV2ZW50VHlwZSBpbiB0aGlzLl9saXN0ZW5lcnMpKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0gPSBbXTtcbiAgfVxuICB2YXIgYXJyID0gdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV07XG4gIC8vICM0XG4gIGlmIChhcnIuaW5kZXhPZihsaXN0ZW5lcikgPT09IC0xKSB7XG4gICAgLy8gTWFrZSBhIGNvcHkgc28gYXMgbm90IHRvIGludGVyZmVyZSB3aXRoIGEgY3VycmVudCBkaXNwYXRjaEV2ZW50LlxuICAgIGFyciA9IGFyci5jb25jYXQoW2xpc3RlbmVyXSk7XG4gIH1cbiAgdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0gPSBhcnI7XG59O1xuXG5FdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50VHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGFyciA9IHRoaXMuX2xpc3RlbmVyc1tldmVudFR5cGVdO1xuICBpZiAoIWFycikge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaWR4ID0gYXJyLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaWR4ICE9PSAtMSkge1xuICAgIGlmIChhcnIubGVuZ3RoID4gMSkge1xuICAgICAgLy8gTWFrZSBhIGNvcHkgc28gYXMgbm90IHRvIGludGVyZmVyZSB3aXRoIGEgY3VycmVudCBkaXNwYXRjaEV2ZW50LlxuICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0gPSBhcnIuc2xpY2UoMCwgaWR4KS5jb25jYXQoYXJyLnNsaWNlKGlkeCArIDEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1tldmVudFR5cGVdO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbn07XG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBldmVudCA9IGFyZ3VtZW50c1swXTtcbiAgdmFyIHQgPSBldmVudC50eXBlO1xuICAvLyBlcXVpdmFsZW50IG9mIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IFtldmVudF0gOiBBcnJheS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAvLyBUT0RPOiBUaGlzIGRvZXNuJ3QgbWF0Y2ggdGhlIHJlYWwgYmVoYXZpb3I7IHBlciBzcGVjLCBvbmZvbyBnZXRcbiAgLy8gdGhlaXIgcGxhY2UgaW4gbGluZSBmcm9tIHRoZSAvZmlyc3QvIHRpbWUgdGhleSdyZSBzZXQgZnJvbVxuICAvLyBub24tbnVsbC4gQWx0aG91Z2ggV2ViS2l0IGJ1bXBzIGl0IHRvIHRoZSBlbmQgZXZlcnkgdGltZSBpdCdzXG4gIC8vIHNldC5cbiAgaWYgKHRoaXNbJ29uJyArIHRdKSB7XG4gICAgdGhpc1snb24nICsgdF0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cbiAgaWYgKHQgaW4gdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgLy8gR3JhYiBhIHJlZmVyZW5jZSB0byB0aGUgbGlzdGVuZXJzIGxpc3QuIHJlbW92ZUV2ZW50TGlzdGVuZXIgbWF5IGFsdGVyIHRoZSBsaXN0LlxuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbdF07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRUYXJnZXQ7XG5cbn0se31dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50JylcbiAgO1xuXG5mdW5jdGlvbiBUcmFuc3BvcnRNZXNzYWdlRXZlbnQoZGF0YSkge1xuICBFdmVudC5jYWxsKHRoaXMpO1xuICB0aGlzLmluaXRFdmVudCgnbWVzc2FnZScsIGZhbHNlLCBmYWxzZSk7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG59XG5cbmluaGVyaXRzKFRyYW5zcG9ydE1lc3NhZ2VFdmVudCwgRXZlbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zcG9ydE1lc3NhZ2VFdmVudDtcblxufSx7XCIuL2V2ZW50XCI6NCxcImluaGVyaXRzXCI6NTd9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIEpTT04zID0gcmVxdWlyZSgnanNvbjMnKVxuICAsIGlmcmFtZVV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9pZnJhbWUnKVxuICA7XG5cbmZ1bmN0aW9uIEZhY2FkZUpTKHRyYW5zcG9ydCkge1xuICB0aGlzLl90cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gIHRyYW5zcG9ydC5vbignbWVzc2FnZScsIHRoaXMuX3RyYW5zcG9ydE1lc3NhZ2UuYmluZCh0aGlzKSk7XG4gIHRyYW5zcG9ydC5vbignY2xvc2UnLCB0aGlzLl90cmFuc3BvcnRDbG9zZS5iaW5kKHRoaXMpKTtcbn1cblxuRmFjYWRlSlMucHJvdG90eXBlLl90cmFuc3BvcnRDbG9zZSA9IGZ1bmN0aW9uKGNvZGUsIHJlYXNvbikge1xuICBpZnJhbWVVdGlscy5wb3N0TWVzc2FnZSgnYycsIEpTT04zLnN0cmluZ2lmeShbY29kZSwgcmVhc29uXSkpO1xufTtcbkZhY2FkZUpTLnByb3RvdHlwZS5fdHJhbnNwb3J0TWVzc2FnZSA9IGZ1bmN0aW9uKGZyYW1lKSB7XG4gIGlmcmFtZVV0aWxzLnBvc3RNZXNzYWdlKCd0JywgZnJhbWUpO1xufTtcbkZhY2FkZUpTLnByb3RvdHlwZS5fc2VuZCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdGhpcy5fdHJhbnNwb3J0LnNlbmQoZGF0YSk7XG59O1xuRmFjYWRlSlMucHJvdG90eXBlLl9jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl90cmFuc3BvcnQuY2xvc2UoKTtcbiAgdGhpcy5fdHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGYWNhZGVKUztcblxufSx7XCIuL3V0aWxzL2lmcmFtZVwiOjQ3LFwianNvbjNcIjo1OH1dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHVybFV0aWxzID0gcmVxdWlyZSgnLi91dGlscy91cmwnKVxuICAsIGV2ZW50VXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL2V2ZW50JylcbiAgLCBKU09OMyA9IHJlcXVpcmUoJ2pzb24zJylcbiAgLCBGYWNhZGVKUyA9IHJlcXVpcmUoJy4vZmFjYWRlJylcbiAgLCBJbmZvSWZyYW1lUmVjZWl2ZXIgPSByZXF1aXJlKCcuL2luZm8taWZyYW1lLXJlY2VpdmVyJylcbiAgLCBpZnJhbWVVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvaWZyYW1lJylcbiAgLCBsb2MgPSByZXF1aXJlKCcuL2xvY2F0aW9uJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OmlmcmFtZS1ib290c3RyYXAnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihTb2NrSlMsIGF2YWlsYWJsZVRyYW5zcG9ydHMpIHtcbiAgdmFyIHRyYW5zcG9ydE1hcCA9IHt9O1xuICBhdmFpbGFibGVUcmFuc3BvcnRzLmZvckVhY2goZnVuY3Rpb24oYXQpIHtcbiAgICBpZiAoYXQuZmFjYWRlVHJhbnNwb3J0KSB7XG4gICAgICB0cmFuc3BvcnRNYXBbYXQuZmFjYWRlVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWVdID0gYXQuZmFjYWRlVHJhbnNwb3J0O1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gaGFyZC1jb2RlZCBmb3IgdGhlIGluZm8gaWZyYW1lXG4gIC8vIFRPRE8gc2VlIGlmIHdlIGNhbiBtYWtlIHRoaXMgbW9yZSBkeW5hbWljXG4gIHRyYW5zcG9ydE1hcFtJbmZvSWZyYW1lUmVjZWl2ZXIudHJhbnNwb3J0TmFtZV0gPSBJbmZvSWZyYW1lUmVjZWl2ZXI7XG4gIHZhciBwYXJlbnRPcmlnaW47XG5cbiAgLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG4gIFNvY2tKUy5ib290c3RyYXBfaWZyYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi9cbiAgICB2YXIgZmFjYWRlO1xuICAgIGlmcmFtZVV0aWxzLmN1cnJlbnRXaW5kb3dJZCA9IGxvYy5oYXNoLnNsaWNlKDEpO1xuICAgIHZhciBvbk1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoZS5zb3VyY2UgIT09IHBhcmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhcmVudE9yaWdpbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcGFyZW50T3JpZ2luID0gZS5vcmlnaW47XG4gICAgICB9XG4gICAgICBpZiAoZS5vcmlnaW4gIT09IHBhcmVudE9yaWdpbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpZnJhbWVNZXNzYWdlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWZyYW1lTWVzc2FnZSA9IEpTT04zLnBhcnNlKGUuZGF0YSk7XG4gICAgICB9IGNhdGNoIChpZ25vcmVkKSB7XG4gICAgICAgIGRlYnVnKCdiYWQganNvbicsIGUuZGF0YSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlmcmFtZU1lc3NhZ2Uud2luZG93SWQgIT09IGlmcmFtZVV0aWxzLmN1cnJlbnRXaW5kb3dJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGlmcmFtZU1lc3NhZ2UudHlwZSkge1xuICAgICAgY2FzZSAncyc6XG4gICAgICAgIHZhciBwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHAgPSBKU09OMy5wYXJzZShpZnJhbWVNZXNzYWdlLmRhdGEpO1xuICAgICAgICB9IGNhdGNoIChpZ25vcmVkKSB7XG4gICAgICAgICAgZGVidWcoJ2JhZCBqc29uJywgaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmVyc2lvbiA9IHBbMF07XG4gICAgICAgIHZhciB0cmFuc3BvcnQgPSBwWzFdO1xuICAgICAgICB2YXIgdHJhbnNVcmwgPSBwWzJdO1xuICAgICAgICB2YXIgYmFzZVVybCA9IHBbM107XG4gICAgICAgIGRlYnVnKHZlcnNpb24sIHRyYW5zcG9ydCwgdHJhbnNVcmwsIGJhc2VVcmwpO1xuICAgICAgICAvLyBjaGFuZ2UgdGhpcyB0byBzZW12ZXIgbG9naWNcbiAgICAgICAgaWYgKHZlcnNpb24gIT09IFNvY2tKUy52ZXJzaW9uKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmNvbXBhdGlibGUgU29ja0pTISBNYWluIHNpdGUgdXNlczonICtcbiAgICAgICAgICAgICAgICAgICAgJyBcIicgKyB2ZXJzaW9uICsgJ1wiLCB0aGUgaWZyYW1lOicgK1xuICAgICAgICAgICAgICAgICAgICAnIFwiJyArIFNvY2tKUy52ZXJzaW9uICsgJ1wiLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1cmxVdGlscy5pc09yaWdpbkVxdWFsKHRyYW5zVXJsLCBsb2MuaHJlZikgfHxcbiAgICAgICAgICAgICF1cmxVdGlscy5pc09yaWdpbkVxdWFsKGJhc2VVcmwsIGxvYy5ocmVmKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBjb25uZWN0IHRvIGRpZmZlcmVudCBkb21haW4gZnJvbSB3aXRoaW4gYW4gJyArXG4gICAgICAgICAgICAgICAgICAgICdpZnJhbWUuICgnICsgbG9jLmhyZWYgKyAnLCAnICsgdHJhbnNVcmwgKyAnLCAnICsgYmFzZVVybCArICcpJyk7XG4gICAgICAgIH1cbiAgICAgICAgZmFjYWRlID0gbmV3IEZhY2FkZUpTKG5ldyB0cmFuc3BvcnRNYXBbdHJhbnNwb3J0XSh0cmFuc1VybCwgYmFzZVVybCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ20nOlxuICAgICAgICBmYWNhZGUuX3NlbmQoaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgaWYgKGZhY2FkZSkge1xuICAgICAgICAgIGZhY2FkZS5fY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBmYWNhZGUgPSBudWxsO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZXZlbnRVdGlscy5hdHRhY2hFdmVudCgnbWVzc2FnZScsIG9uTWVzc2FnZSk7XG5cbiAgICAvLyBTdGFydFxuICAgIGlmcmFtZVV0aWxzLnBvc3RNZXNzYWdlKCdzJyk7XG4gIH07XG59O1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiLi9mYWNhZGVcIjo3LFwiLi9pbmZvLWlmcmFtZS1yZWNlaXZlclwiOjEwLFwiLi9sb2NhdGlvblwiOjEzLFwiLi91dGlscy9ldmVudFwiOjQ2LFwiLi91dGlscy9pZnJhbWVcIjo0NyxcIi4vdXRpbHMvdXJsXCI6NTIsXCJkZWJ1Z1wiOjU1LFwianNvbjNcIjo1OH1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEpTT04zID0gcmVxdWlyZSgnanNvbjMnKVxuICAsIG9iamVjdFV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9vYmplY3QnKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6aW5mby1hamF4Jyk7XG59XG5cbmZ1bmN0aW9uIEluZm9BamF4KHVybCwgQWpheE9iamVjdCkge1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB0MCA9ICtuZXcgRGF0ZSgpO1xuICB0aGlzLnhvID0gbmV3IEFqYXhPYmplY3QoJ0dFVCcsIHVybCk7XG5cbiAgdGhpcy54by5vbmNlKCdmaW5pc2gnLCBmdW5jdGlvbihzdGF0dXMsIHRleHQpIHtcbiAgICB2YXIgaW5mbywgcnR0O1xuICAgIGlmIChzdGF0dXMgPT09IDIwMCkge1xuICAgICAgcnR0ID0gKCtuZXcgRGF0ZSgpKSAtIHQwO1xuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpbmZvID0gSlNPTjMucGFyc2UodGV4dCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1ZygnYmFkIGpzb24nLCB0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIW9iamVjdFV0aWxzLmlzT2JqZWN0KGluZm8pKSB7XG4gICAgICAgIGluZm8gPSB7fTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2VsZi5lbWl0KCdmaW5pc2gnLCBpbmZvLCBydHQpO1xuICAgIHNlbGYucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIH0pO1xufVxuXG5pbmhlcml0cyhJbmZvQWpheCwgRXZlbnRFbWl0dGVyKTtcblxuSW5mb0FqYXgucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHRoaXMueG8uY2xvc2UoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW5mb0FqYXg7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSlcblxufSx7XCIuL3V0aWxzL29iamVjdFwiOjQ5LFwiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3LFwianNvbjNcIjo1OH1dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIEpTT04zID0gcmVxdWlyZSgnanNvbjMnKVxuICAsIFhIUkxvY2FsT2JqZWN0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQvc2VuZGVyL3hoci1sb2NhbCcpXG4gICwgSW5mb0FqYXggPSByZXF1aXJlKCcuL2luZm8tYWpheCcpXG4gIDtcblxuZnVuY3Rpb24gSW5mb1JlY2VpdmVySWZyYW1lKHRyYW5zVXJsKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5pciA9IG5ldyBJbmZvQWpheCh0cmFuc1VybCwgWEhSTG9jYWxPYmplY3QpO1xuICB0aGlzLmlyLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uKGluZm8sIHJ0dCkge1xuICAgIHNlbGYuaXIgPSBudWxsO1xuICAgIHNlbGYuZW1pdCgnbWVzc2FnZScsIEpTT04zLnN0cmluZ2lmeShbaW5mbywgcnR0XSkpO1xuICB9KTtcbn1cblxuaW5oZXJpdHMoSW5mb1JlY2VpdmVySWZyYW1lLCBFdmVudEVtaXR0ZXIpO1xuXG5JbmZvUmVjZWl2ZXJJZnJhbWUudHJhbnNwb3J0TmFtZSA9ICdpZnJhbWUtaW5mby1yZWNlaXZlcic7XG5cbkluZm9SZWNlaXZlcklmcmFtZS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuaXIpIHtcbiAgICB0aGlzLmlyLmNsb3NlKCk7XG4gICAgdGhpcy5pciA9IG51bGw7XG4gIH1cbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW5mb1JlY2VpdmVySWZyYW1lO1xuXG59LHtcIi4vaW5mby1hamF4XCI6OSxcIi4vdHJhbnNwb3J0L3NlbmRlci94aHItbG9jYWxcIjozNyxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3LFwianNvbjNcIjo1OH1dLDExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgSlNPTjMgPSByZXF1aXJlKCdqc29uMycpXG4gICwgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL2V2ZW50JylcbiAgLCBJZnJhbWVUcmFuc3BvcnQgPSByZXF1aXJlKCcuL3RyYW5zcG9ydC9pZnJhbWUnKVxuICAsIEluZm9SZWNlaXZlcklmcmFtZSA9IHJlcXVpcmUoJy4vaW5mby1pZnJhbWUtcmVjZWl2ZXInKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6aW5mby1pZnJhbWUnKTtcbn1cblxuZnVuY3Rpb24gSW5mb0lmcmFtZShiYXNlVXJsLCB1cmwpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaWZyID0gc2VsZi5pZnIgPSBuZXcgSWZyYW1lVHJhbnNwb3J0KEluZm9SZWNlaXZlcklmcmFtZS50cmFuc3BvcnROYW1lLCB1cmwsIGJhc2VVcmwpO1xuXG4gICAgaWZyLm9uY2UoJ21lc3NhZ2UnLCBmdW5jdGlvbihtc2cpIHtcbiAgICAgIGlmIChtc2cpIHtcbiAgICAgICAgdmFyIGQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZCA9IEpTT04zLnBhcnNlKG1zZyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1ZygnYmFkIGpzb24nLCBtc2cpO1xuICAgICAgICAgIHNlbGYuZW1pdCgnZmluaXNoJyk7XG4gICAgICAgICAgc2VsZi5jbG9zZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbmZvID0gZFswXSwgcnR0ID0gZFsxXTtcbiAgICAgICAgc2VsZi5lbWl0KCdmaW5pc2gnLCBpbmZvLCBydHQpO1xuICAgICAgfVxuICAgICAgc2VsZi5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaWZyLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcpO1xuICAgICAgc2VsZi5jbG9zZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIFRPRE8gdGhpcyBzZWVtcyB0aGUgc2FtZSBhcyB0aGUgJ25lZWRCb2R5JyBmcm9tIHRyYW5zcG9ydHNcbiAgaWYgKCFnbG9iYWwuZG9jdW1lbnQuYm9keSkge1xuICAgIHV0aWxzLmF0dGFjaEV2ZW50KCdsb2FkJywgZ28pO1xuICB9IGVsc2Uge1xuICAgIGdvKCk7XG4gIH1cbn1cblxuaW5oZXJpdHMoSW5mb0lmcmFtZSwgRXZlbnRFbWl0dGVyKTtcblxuSW5mb0lmcmFtZS5lbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBJZnJhbWVUcmFuc3BvcnQuZW5hYmxlZCgpO1xufTtcblxuSW5mb0lmcmFtZS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuaWZyKSB7XG4gICAgdGhpcy5pZnIuY2xvc2UoKTtcbiAgfVxuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB0aGlzLmlmciA9IG51bGw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEluZm9JZnJhbWU7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4vaW5mby1pZnJhbWUtcmVjZWl2ZXJcIjoxMCxcIi4vdHJhbnNwb3J0L2lmcmFtZVwiOjIyLFwiLi91dGlscy9ldmVudFwiOjQ2LFwiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3LFwianNvbjNcIjo1OH1dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvdXJsJylcbiAgLCBYRFIgPSByZXF1aXJlKCcuL3RyYW5zcG9ydC9zZW5kZXIveGRyJylcbiAgLCBYSFJDb3JzID0gcmVxdWlyZSgnLi90cmFuc3BvcnQvc2VuZGVyL3hoci1jb3JzJylcbiAgLCBYSFJMb2NhbCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0L3NlbmRlci94aHItbG9jYWwnKVxuICAsIFhIUkZha2UgPSByZXF1aXJlKCcuL3RyYW5zcG9ydC9zZW5kZXIveGhyLWZha2UnKVxuICAsIEluZm9JZnJhbWUgPSByZXF1aXJlKCcuL2luZm8taWZyYW1lJylcbiAgLCBJbmZvQWpheCA9IHJlcXVpcmUoJy4vaW5mby1hamF4JylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OmluZm8tcmVjZWl2ZXInKTtcbn1cblxuZnVuY3Rpb24gSW5mb1JlY2VpdmVyKGJhc2VVcmwsIHVybEluZm8pIHtcbiAgZGVidWcoYmFzZVVybCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBzZWxmLmRvWGhyKGJhc2VVcmwsIHVybEluZm8pO1xuICB9LCAwKTtcbn1cblxuaW5oZXJpdHMoSW5mb1JlY2VpdmVyLCBFdmVudEVtaXR0ZXIpO1xuXG4vLyBUT0RPIHRoaXMgaXMgY3VycmVudGx5IGlnbm9yaW5nIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSB0cmFuc3BvcnRzIGFuZCB0aGUgd2hpdGVsaXN0XG5cbkluZm9SZWNlaXZlci5fZ2V0UmVjZWl2ZXIgPSBmdW5jdGlvbihiYXNlVXJsLCB1cmwsIHVybEluZm8pIHtcbiAgLy8gZGV0ZXJtaW5lIG1ldGhvZCBvZiBDT1JTIHN1cHBvcnQgKGlmIG5lZWRlZClcbiAgaWYgKHVybEluZm8uc2FtZU9yaWdpbikge1xuICAgIHJldHVybiBuZXcgSW5mb0FqYXgodXJsLCBYSFJMb2NhbCk7XG4gIH1cbiAgaWYgKFhIUkNvcnMuZW5hYmxlZCkge1xuICAgIHJldHVybiBuZXcgSW5mb0FqYXgodXJsLCBYSFJDb3JzKTtcbiAgfVxuICBpZiAoWERSLmVuYWJsZWQgJiYgdXJsSW5mby5zYW1lU2NoZW1lKSB7XG4gICAgcmV0dXJuIG5ldyBJbmZvQWpheCh1cmwsIFhEUik7XG4gIH1cbiAgaWYgKEluZm9JZnJhbWUuZW5hYmxlZCgpKSB7XG4gICAgcmV0dXJuIG5ldyBJbmZvSWZyYW1lKGJhc2VVcmwsIHVybCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBJbmZvQWpheCh1cmwsIFhIUkZha2UpO1xufTtcblxuSW5mb1JlY2VpdmVyLnByb3RvdHlwZS5kb1hociA9IGZ1bmN0aW9uKGJhc2VVcmwsIHVybEluZm8pIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gICAgLCB1cmwgPSB1cmxVdGlscy5hZGRQYXRoKGJhc2VVcmwsICcvaW5mbycpXG4gICAgO1xuICBkZWJ1ZygnZG9YaHInLCB1cmwpO1xuXG4gIHRoaXMueG8gPSBJbmZvUmVjZWl2ZXIuX2dldFJlY2VpdmVyKGJhc2VVcmwsIHVybCwgdXJsSW5mbyk7XG5cbiAgdGhpcy50aW1lb3V0UmVmID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygndGltZW91dCcpO1xuICAgIHNlbGYuX2NsZWFudXAoZmFsc2UpO1xuICAgIHNlbGYuZW1pdCgnZmluaXNoJyk7XG4gIH0sIEluZm9SZWNlaXZlci50aW1lb3V0KTtcblxuICB0aGlzLnhvLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uKGluZm8sIHJ0dCkge1xuICAgIGRlYnVnKCdmaW5pc2gnLCBpbmZvLCBydHQpO1xuICAgIHNlbGYuX2NsZWFudXAodHJ1ZSk7XG4gICAgc2VsZi5lbWl0KCdmaW5pc2gnLCBpbmZvLCBydHQpO1xuICB9KTtcbn07XG5cbkluZm9SZWNlaXZlci5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbih3YXNDbGVhbikge1xuICBkZWJ1ZygnX2NsZWFudXAnKTtcbiAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dFJlZik7XG4gIHRoaXMudGltZW91dFJlZiA9IG51bGw7XG4gIGlmICghd2FzQ2xlYW4gJiYgdGhpcy54bykge1xuICAgIHRoaXMueG8uY2xvc2UoKTtcbiAgfVxuICB0aGlzLnhvID0gbnVsbDtcbn07XG5cbkluZm9SZWNlaXZlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHRoaXMuX2NsZWFudXAoZmFsc2UpO1xufTtcblxuSW5mb1JlY2VpdmVyLnRpbWVvdXQgPSA4MDAwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEluZm9SZWNlaXZlcjtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9KVxuXG59LHtcIi4vaW5mby1hamF4XCI6OSxcIi4vaW5mby1pZnJhbWVcIjoxMSxcIi4vdHJhbnNwb3J0L3NlbmRlci94ZHJcIjozNCxcIi4vdHJhbnNwb3J0L3NlbmRlci94aHItY29yc1wiOjM1LFwiLi90cmFuc3BvcnQvc2VuZGVyL3hoci1mYWtlXCI6MzYsXCIuL3RyYW5zcG9ydC9zZW5kZXIveGhyLWxvY2FsXCI6MzcsXCIuL3V0aWxzL3VybFwiOjUyLFwiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3fV0sMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5sb2NhdGlvbiB8fCB7XG4gIG9yaWdpbjogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAnXG4sIHByb3RvY29sOiAnaHR0cDonXG4sIGhvc3Q6ICdsb2NhbGhvc3QnXG4sIHBvcnQ6IDgwXG4sIGhyZWY6ICdodHRwOi8vbG9jYWxob3N0LydcbiwgaGFzaDogJydcbn07XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHt9XSwxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9zaGltcycpO1xuXG52YXIgVVJMID0gcmVxdWlyZSgndXJsLXBhcnNlJylcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBKU09OMyA9IHJlcXVpcmUoJ2pzb24zJylcbiAgLCByYW5kb20gPSByZXF1aXJlKCcuL3V0aWxzL3JhbmRvbScpXG4gICwgZXNjYXBlID0gcmVxdWlyZSgnLi91dGlscy9lc2NhcGUnKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi91dGlscy91cmwnKVxuICAsIGV2ZW50VXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL2V2ZW50JylcbiAgLCB0cmFuc3BvcnQgPSByZXF1aXJlKCcuL3V0aWxzL3RyYW5zcG9ydCcpXG4gICwgb2JqZWN0VXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL29iamVjdCcpXG4gICwgYnJvd3NlciA9IHJlcXVpcmUoJy4vdXRpbHMvYnJvd3NlcicpXG4gICwgbG9nID0gcmVxdWlyZSgnLi91dGlscy9sb2cnKVxuICAsIEV2ZW50ID0gcmVxdWlyZSgnLi9ldmVudC9ldmVudCcpXG4gICwgRXZlbnRUYXJnZXQgPSByZXF1aXJlKCcuL2V2ZW50L2V2ZW50dGFyZ2V0JylcbiAgLCBsb2MgPSByZXF1aXJlKCcuL2xvY2F0aW9uJylcbiAgLCBDbG9zZUV2ZW50ID0gcmVxdWlyZSgnLi9ldmVudC9jbG9zZScpXG4gICwgVHJhbnNwb3J0TWVzc2FnZUV2ZW50ID0gcmVxdWlyZSgnLi9ldmVudC90cmFucy1tZXNzYWdlJylcbiAgLCBJbmZvUmVjZWl2ZXIgPSByZXF1aXJlKCcuL2luZm8tcmVjZWl2ZXInKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6bWFpbicpO1xufVxuXG52YXIgdHJhbnNwb3J0cztcblxuLy8gZm9sbG93IGNvbnN0cnVjdG9yIHN0ZXBzIGRlZmluZWQgYXQgaHR0cDovL2Rldi53My5vcmcvaHRtbDUvd2Vic29ja2V0cy8jdGhlLXdlYnNvY2tldC1pbnRlcmZhY2VcbmZ1bmN0aW9uIFNvY2tKUyh1cmwsIHByb3RvY29scywgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU29ja0pTKSkge1xuICAgIHJldHVybiBuZXcgU29ja0pTKHVybCwgcHJvdG9jb2xzLCBvcHRpb25zKTtcbiAgfVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnU29ja0pTOiAxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnRcIik7XG4gIH1cbiAgRXZlbnRUYXJnZXQuY2FsbCh0aGlzKTtcblxuICB0aGlzLnJlYWR5U3RhdGUgPSBTb2NrSlMuQ09OTkVDVElORztcbiAgdGhpcy5leHRlbnNpb25zID0gJyc7XG4gIHRoaXMucHJvdG9jb2wgPSAnJztcblxuICAvLyBub24tc3RhbmRhcmQgZXh0ZW5zaW9uXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAob3B0aW9ucy5wcm90b2NvbHNfd2hpdGVsaXN0KSB7XG4gICAgbG9nLndhcm4oXCIncHJvdG9jb2xzX3doaXRlbGlzdCcgaXMgREVQUkVDQVRFRC4gVXNlICd0cmFuc3BvcnRzJyBpbnN0ZWFkLlwiKTtcbiAgfVxuICB0aGlzLl90cmFuc3BvcnRzV2hpdGVsaXN0ID0gb3B0aW9ucy50cmFuc3BvcnRzO1xuICB0aGlzLl90cmFuc3BvcnRPcHRpb25zID0gb3B0aW9ucy50cmFuc3BvcnRPcHRpb25zIHx8IHt9O1xuICB0aGlzLl90aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0IHx8IDA7XG5cbiAgdmFyIHNlc3Npb25JZCA9IG9wdGlvbnMuc2Vzc2lvbklkIHx8IDg7XG4gIGlmICh0eXBlb2Ygc2Vzc2lvbklkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZ2VuZXJhdGVTZXNzaW9uSWQgPSBzZXNzaW9uSWQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNlc3Npb25JZCA9PT0gJ251bWJlcicpIHtcbiAgICB0aGlzLl9nZW5lcmF0ZVNlc3Npb25JZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmRvbS5zdHJpbmcoc2Vzc2lvbklkKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0lmIHNlc3Npb25JZCBpcyB1c2VkIGluIHRoZSBvcHRpb25zLCBpdCBuZWVkcyB0byBiZSBhIG51bWJlciBvciBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdGhpcy5fc2VydmVyID0gb3B0aW9ucy5zZXJ2ZXIgfHwgcmFuZG9tLm51bWJlclN0cmluZygxMDAwKTtcblxuICAvLyBTdGVwIDEgb2YgV1Mgc3BlYyAtIHBhcnNlIGFuZCB2YWxpZGF0ZSB0aGUgdXJsLiBJc3N1ZSAjOFxuICB2YXIgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICBpZiAoIXBhcnNlZFVybC5ob3N0IHx8ICFwYXJzZWRVcmwucHJvdG9jb2wpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJUaGUgVVJMICdcIiArIHVybCArIFwiJyBpcyBpbnZhbGlkXCIpO1xuICB9IGVsc2UgaWYgKHBhcnNlZFVybC5oYXNoKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdUaGUgVVJMIG11c3Qgbm90IGNvbnRhaW4gYSBmcmFnbWVudCcpO1xuICB9IGVsc2UgaWYgKHBhcnNlZFVybC5wcm90b2NvbCAhPT0gJ2h0dHA6JyAmJiBwYXJzZWRVcmwucHJvdG9jb2wgIT09ICdodHRwczonKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIFVSTCdzIHNjaGVtZSBtdXN0IGJlIGVpdGhlciAnaHR0cDonIG9yICdodHRwczonLiAnXCIgKyBwYXJzZWRVcmwucHJvdG9jb2wgKyBcIicgaXMgbm90IGFsbG93ZWQuXCIpO1xuICB9XG5cbiAgdmFyIHNlY3VyZSA9IHBhcnNlZFVybC5wcm90b2NvbCA9PT0gJ2h0dHBzOic7XG4gIC8vIFN0ZXAgMiAtIGRvbid0IGFsbG93IHNlY3VyZSBvcmlnaW4gd2l0aCBhbiBpbnNlY3VyZSBwcm90b2NvbFxuICBpZiAobG9jLnByb3RvY29sID09PSAnaHR0cHM6JyAmJiAhc2VjdXJlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZWN1cml0eUVycm9yOiBBbiBpbnNlY3VyZSBTb2NrSlMgY29ubmVjdGlvbiBtYXkgbm90IGJlIGluaXRpYXRlZCBmcm9tIGEgcGFnZSBsb2FkZWQgb3ZlciBIVFRQUycpO1xuICB9XG5cbiAgLy8gU3RlcCAzIC0gY2hlY2sgcG9ydCBhY2Nlc3MgLSBubyBuZWVkIGhlcmVcbiAgLy8gU3RlcCA0IC0gcGFyc2UgcHJvdG9jb2xzIGFyZ3VtZW50XG4gIGlmICghcHJvdG9jb2xzKSB7XG4gICAgcHJvdG9jb2xzID0gW107XG4gIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkocHJvdG9jb2xzKSkge1xuICAgIHByb3RvY29scyA9IFtwcm90b2NvbHNdO1xuICB9XG5cbiAgLy8gU3RlcCA1IC0gY2hlY2sgcHJvdG9jb2xzIGFyZ3VtZW50XG4gIHZhciBzb3J0ZWRQcm90b2NvbHMgPSBwcm90b2NvbHMuc29ydCgpO1xuICBzb3J0ZWRQcm90b2NvbHMuZm9yRWFjaChmdW5jdGlvbihwcm90bywgaSkge1xuICAgIGlmICghcHJvdG8pIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIlRoZSBwcm90b2NvbHMgZW50cnkgJ1wiICsgcHJvdG8gKyBcIicgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuICAgIGlmIChpIDwgKHNvcnRlZFByb3RvY29scy5sZW5ndGggLSAxKSAmJiBwcm90byA9PT0gc29ydGVkUHJvdG9jb2xzW2kgKyAxXSkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIHByb3RvY29scyBlbnRyeSAnXCIgKyBwcm90byArIFwiJyBpcyBkdXBsaWNhdGVkLlwiKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFN0ZXAgNiAtIGNvbnZlcnQgb3JpZ2luXG4gIHZhciBvID0gdXJsVXRpbHMuZ2V0T3JpZ2luKGxvYy5ocmVmKTtcbiAgdGhpcy5fb3JpZ2luID0gbyA/IG8udG9Mb3dlckNhc2UoKSA6IG51bGw7XG5cbiAgLy8gcmVtb3ZlIHRoZSB0cmFpbGluZyBzbGFzaFxuICBwYXJzZWRVcmwuc2V0KCdwYXRobmFtZScsIHBhcnNlZFVybC5wYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sICcnKSk7XG5cbiAgLy8gc3RvcmUgdGhlIHNhbml0aXplZCB1cmxcbiAgdGhpcy51cmwgPSBwYXJzZWRVcmwuaHJlZjtcbiAgZGVidWcoJ3VzaW5nIHVybCcsIHRoaXMudXJsKTtcblxuICAvLyBTdGVwIDcgLSBzdGFydCBjb25uZWN0aW9uIGluIGJhY2tncm91bmRcbiAgLy8gb2J0YWluIHNlcnZlciBpbmZvXG4gIC8vIGh0dHA6Ly9zb2NranMuZ2l0aHViLmlvL3NvY2tqcy1wcm90b2NvbC9zb2NranMtcHJvdG9jb2wtMC4zLjMuaHRtbCNzZWN0aW9uLTI2XG4gIHRoaXMuX3VybEluZm8gPSB7XG4gICAgbnVsbE9yaWdpbjogIWJyb3dzZXIuaGFzRG9tYWluKClcbiAgLCBzYW1lT3JpZ2luOiB1cmxVdGlscy5pc09yaWdpbkVxdWFsKHRoaXMudXJsLCBsb2MuaHJlZilcbiAgLCBzYW1lU2NoZW1lOiB1cmxVdGlscy5pc1NjaGVtZUVxdWFsKHRoaXMudXJsLCBsb2MuaHJlZilcbiAgfTtcblxuICB0aGlzLl9pciA9IG5ldyBJbmZvUmVjZWl2ZXIodGhpcy51cmwsIHRoaXMuX3VybEluZm8pO1xuICB0aGlzLl9pci5vbmNlKCdmaW5pc2gnLCB0aGlzLl9yZWNlaXZlSW5mby5iaW5kKHRoaXMpKTtcbn1cblxuaW5oZXJpdHMoU29ja0pTLCBFdmVudFRhcmdldCk7XG5cbmZ1bmN0aW9uIHVzZXJTZXRDb2RlKGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgPT09IDEwMDAgfHwgKGNvZGUgPj0gMzAwMCAmJiBjb2RlIDw9IDQ5OTkpO1xufVxuXG5Tb2NrSlMucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oY29kZSwgcmVhc29uKSB7XG4gIC8vIFN0ZXAgMVxuICBpZiAoY29kZSAmJiAhdXNlclNldENvZGUoY29kZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRBY2Nlc3NFcnJvcjogSW52YWxpZCBjb2RlJyk7XG4gIH1cbiAgLy8gU3RlcCAyLjQgc3RhdGVzIHRoZSBtYXggaXMgMTIzIGJ5dGVzLCBidXQgd2UgYXJlIGp1c3QgY2hlY2tpbmcgbGVuZ3RoXG4gIGlmIChyZWFzb24gJiYgcmVhc29uLmxlbmd0aCA+IDEyMykge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcigncmVhc29uIGFyZ3VtZW50IGhhcyBhbiBpbnZhbGlkIGxlbmd0aCcpO1xuICB9XG5cbiAgLy8gU3RlcCAzLjFcbiAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gU29ja0pTLkNMT1NJTkcgfHwgdGhpcy5yZWFkeVN0YXRlID09PSBTb2NrSlMuQ0xPU0VEKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVE9ETyBsb29rIGF0IGRvY3MgdG8gZGV0ZXJtaW5lIGhvdyB0byBzZXQgdGhpc1xuICB2YXIgd2FzQ2xlYW4gPSB0cnVlO1xuICB0aGlzLl9jbG9zZShjb2RlIHx8IDEwMDAsIHJlYXNvbiB8fCAnTm9ybWFsIGNsb3N1cmUnLCB3YXNDbGVhbik7XG59O1xuXG5Tb2NrSlMucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihkYXRhKSB7XG4gIC8vICMxMyAtIGNvbnZlcnQgYW55dGhpbmcgbm9uLXN0cmluZyB0byBzdHJpbmdcbiAgLy8gVE9ETyB0aGlzIGN1cnJlbnRseSB0dXJucyBvYmplY3RzIGludG8gW29iamVjdCBPYmplY3RdXG4gIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICB9XG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DT05ORUNUSU5HKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkU3RhdGVFcnJvcjogVGhlIGNvbm5lY3Rpb24gaGFzIG5vdCBiZWVuIGVzdGFibGlzaGVkIHlldCcpO1xuICB9XG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgIT09IFNvY2tKUy5PUEVOKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuX3RyYW5zcG9ydC5zZW5kKGVzY2FwZS5xdW90ZShkYXRhKSk7XG59O1xuXG5Tb2NrSlMudmVyc2lvbiA9IHJlcXVpcmUoJy4vdmVyc2lvbicpO1xuXG5Tb2NrSlMuQ09OTkVDVElORyA9IDA7XG5Tb2NrSlMuT1BFTiA9IDE7XG5Tb2NrSlMuQ0xPU0lORyA9IDI7XG5Tb2NrSlMuQ0xPU0VEID0gMztcblxuU29ja0pTLnByb3RvdHlwZS5fcmVjZWl2ZUluZm8gPSBmdW5jdGlvbihpbmZvLCBydHQpIHtcbiAgZGVidWcoJ19yZWNlaXZlSW5mbycsIHJ0dCk7XG4gIHRoaXMuX2lyID0gbnVsbDtcbiAgaWYgKCFpbmZvKSB7XG4gICAgdGhpcy5fY2xvc2UoMTAwMiwgJ0Nhbm5vdCBjb25uZWN0IHRvIHNlcnZlcicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGVzdGFibGlzaCBhIHJvdW5kLXRyaXAgdGltZW91dCAoUlRPKSBiYXNlZCBvbiB0aGVcbiAgLy8gcm91bmQtdHJpcCB0aW1lIChSVFQpXG4gIHRoaXMuX3J0byA9IHRoaXMuY291bnRSVE8ocnR0KTtcbiAgLy8gYWxsb3cgc2VydmVyIHRvIG92ZXJyaWRlIHVybCB1c2VkIGZvciB0aGUgYWN0dWFsIHRyYW5zcG9ydFxuICB0aGlzLl90cmFuc1VybCA9IGluZm8uYmFzZV91cmwgPyBpbmZvLmJhc2VfdXJsIDogdGhpcy51cmw7XG4gIGluZm8gPSBvYmplY3RVdGlscy5leHRlbmQoaW5mbywgdGhpcy5fdXJsSW5mbyk7XG4gIGRlYnVnKCdpbmZvJywgaW5mbyk7XG4gIC8vIGRldGVybWluZSBsaXN0IG9mIGRlc2lyZWQgYW5kIHN1cHBvcnRlZCB0cmFuc3BvcnRzXG4gIHZhciBlbmFibGVkVHJhbnNwb3J0cyA9IHRyYW5zcG9ydHMuZmlsdGVyVG9FbmFibGVkKHRoaXMuX3RyYW5zcG9ydHNXaGl0ZWxpc3QsIGluZm8pO1xuICB0aGlzLl90cmFuc3BvcnRzID0gZW5hYmxlZFRyYW5zcG9ydHMubWFpbjtcbiAgZGVidWcodGhpcy5fdHJhbnNwb3J0cy5sZW5ndGggKyAnIGVuYWJsZWQgdHJhbnNwb3J0cycpO1xuXG4gIHRoaXMuX2Nvbm5lY3QoKTtcbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX2Nvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgZm9yICh2YXIgVHJhbnNwb3J0ID0gdGhpcy5fdHJhbnNwb3J0cy5zaGlmdCgpOyBUcmFuc3BvcnQ7IFRyYW5zcG9ydCA9IHRoaXMuX3RyYW5zcG9ydHMuc2hpZnQoKSkge1xuICAgIGRlYnVnKCdhdHRlbXB0JywgVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUpO1xuICAgIGlmIChUcmFuc3BvcnQubmVlZEJvZHkpIHtcbiAgICAgIGlmICghZ2xvYmFsLmRvY3VtZW50LmJvZHkgfHxcbiAgICAgICAgICAodHlwZW9mIGdsb2JhbC5kb2N1bWVudC5yZWFkeVN0YXRlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgZ2xvYmFsLmRvY3VtZW50LnJlYWR5U3RhdGUgIT09ICdjb21wbGV0ZScgJiZcbiAgICAgICAgICAgIGdsb2JhbC5kb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnaW50ZXJhY3RpdmUnKSkge1xuICAgICAgICBkZWJ1Zygnd2FpdGluZyBmb3IgYm9keScpO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnRzLnVuc2hpZnQoVHJhbnNwb3J0KTtcbiAgICAgICAgZXZlbnRVdGlscy5hdHRhY2hFdmVudCgnbG9hZCcsIHRoaXMuX2Nvbm5lY3QuYmluZCh0aGlzKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjYWxjdWxhdGUgdGltZW91dCBiYXNlZCBvbiBSVE8gYW5kIHJvdW5kIHRyaXBzLiBEZWZhdWx0IHRvIDVzXG4gICAgdmFyIHRpbWVvdXRNcyA9IE1hdGgubWF4KHRoaXMuX3RpbWVvdXQsICh0aGlzLl9ydG8gKiBUcmFuc3BvcnQucm91bmRUcmlwcykgfHwgNTAwMCk7XG4gICAgdGhpcy5fdHJhbnNwb3J0VGltZW91dElkID0gc2V0VGltZW91dCh0aGlzLl90cmFuc3BvcnRUaW1lb3V0LmJpbmQodGhpcyksIHRpbWVvdXRNcyk7XG4gICAgZGVidWcoJ3VzaW5nIHRpbWVvdXQnLCB0aW1lb3V0TXMpO1xuXG4gICAgdmFyIHRyYW5zcG9ydFVybCA9IHVybFV0aWxzLmFkZFBhdGgodGhpcy5fdHJhbnNVcmwsICcvJyArIHRoaXMuX3NlcnZlciArICcvJyArIHRoaXMuX2dlbmVyYXRlU2Vzc2lvbklkKCkpO1xuICAgIHZhciBvcHRpb25zID0gdGhpcy5fdHJhbnNwb3J0T3B0aW9uc1tUcmFuc3BvcnQudHJhbnNwb3J0TmFtZV07XG4gICAgZGVidWcoJ3RyYW5zcG9ydCB1cmwnLCB0cmFuc3BvcnRVcmwpO1xuICAgIHZhciB0cmFuc3BvcnRPYmogPSBuZXcgVHJhbnNwb3J0KHRyYW5zcG9ydFVybCwgdGhpcy5fdHJhbnNVcmwsIG9wdGlvbnMpO1xuICAgIHRyYW5zcG9ydE9iai5vbignbWVzc2FnZScsIHRoaXMuX3RyYW5zcG9ydE1lc3NhZ2UuYmluZCh0aGlzKSk7XG4gICAgdHJhbnNwb3J0T2JqLm9uY2UoJ2Nsb3NlJywgdGhpcy5fdHJhbnNwb3J0Q2xvc2UuYmluZCh0aGlzKSk7XG4gICAgdHJhbnNwb3J0T2JqLnRyYW5zcG9ydE5hbWUgPSBUcmFuc3BvcnQudHJhbnNwb3J0TmFtZTtcbiAgICB0aGlzLl90cmFuc3BvcnQgPSB0cmFuc3BvcnRPYmo7XG5cbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5fY2xvc2UoMjAwMCwgJ0FsbCB0cmFuc3BvcnRzIGZhaWxlZCcsIGZhbHNlKTtcbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX3RyYW5zcG9ydFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ190cmFuc3BvcnRUaW1lb3V0Jyk7XG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DT05ORUNUSU5HKSB7XG4gICAgaWYgKHRoaXMuX3RyYW5zcG9ydCkge1xuICAgICAgdGhpcy5fdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdHJhbnNwb3J0Q2xvc2UoMjAwNywgJ1RyYW5zcG9ydCB0aW1lZCBvdXQnKTtcbiAgfVxufTtcblxuU29ja0pTLnByb3RvdHlwZS5fdHJhbnNwb3J0TWVzc2FnZSA9IGZ1bmN0aW9uKG1zZykge1xuICBkZWJ1ZygnX3RyYW5zcG9ydE1lc3NhZ2UnLCBtc2cpO1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgICAsIHR5cGUgPSBtc2cuc2xpY2UoMCwgMSlcbiAgICAsIGNvbnRlbnQgPSBtc2cuc2xpY2UoMSlcbiAgICAsIHBheWxvYWRcbiAgICA7XG5cbiAgLy8gZmlyc3QgY2hlY2sgZm9yIG1lc3NhZ2VzIHRoYXQgZG9uJ3QgbmVlZCBhIHBheWxvYWRcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnbyc6XG4gICAgICB0aGlzLl9vcGVuKCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAnaCc6XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdoZWFydGJlYXQnKSk7XG4gICAgICBkZWJ1ZygnaGVhcnRiZWF0JywgdGhpcy50cmFuc3BvcnQpO1xuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNvbnRlbnQpIHtcbiAgICB0cnkge1xuICAgICAgcGF5bG9hZCA9IEpTT04zLnBhcnNlKGNvbnRlbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRlYnVnKCdiYWQganNvbicsIGNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkZWJ1ZygnZW1wdHkgcGF5bG9hZCcsIGNvbnRlbnQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2EnOlxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGF5bG9hZCkpIHtcbiAgICAgICAgcGF5bG9hZC5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICBkZWJ1ZygnbWVzc2FnZScsIHNlbGYudHJhbnNwb3J0LCBwKTtcbiAgICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQobmV3IFRyYW5zcG9ydE1lc3NhZ2VFdmVudChwKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbSc6XG4gICAgICBkZWJ1ZygnbWVzc2FnZScsIHRoaXMudHJhbnNwb3J0LCBwYXlsb2FkKTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgVHJhbnNwb3J0TWVzc2FnZUV2ZW50KHBheWxvYWQpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2MnOlxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGF5bG9hZCkgJiYgcGF5bG9hZC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdGhpcy5fY2xvc2UocGF5bG9hZFswXSwgcGF5bG9hZFsxXSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuU29ja0pTLnByb3RvdHlwZS5fdHJhbnNwb3J0Q2xvc2UgPSBmdW5jdGlvbihjb2RlLCByZWFzb24pIHtcbiAgZGVidWcoJ190cmFuc3BvcnRDbG9zZScsIHRoaXMudHJhbnNwb3J0LCBjb2RlLCByZWFzb24pO1xuICBpZiAodGhpcy5fdHJhbnNwb3J0KSB7XG4gICAgdGhpcy5fdHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIHRoaXMuX3RyYW5zcG9ydCA9IG51bGw7XG4gICAgdGhpcy50cmFuc3BvcnQgPSBudWxsO1xuICB9XG5cbiAgaWYgKCF1c2VyU2V0Q29kZShjb2RlKSAmJiBjb2RlICE9PSAyMDAwICYmIHRoaXMucmVhZHlTdGF0ZSA9PT0gU29ja0pTLkNPTk5FQ1RJTkcpIHtcbiAgICB0aGlzLl9jb25uZWN0KCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fY2xvc2UoY29kZSwgcmVhc29uKTtcbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX29wZW4gPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19vcGVuJywgdGhpcy5fdHJhbnNwb3J0ICYmIHRoaXMuX3RyYW5zcG9ydC50cmFuc3BvcnROYW1lLCB0aGlzLnJlYWR5U3RhdGUpO1xuICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBTb2NrSlMuQ09OTkVDVElORykge1xuICAgIGlmICh0aGlzLl90cmFuc3BvcnRUaW1lb3V0SWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90cmFuc3BvcnRUaW1lb3V0SWQpO1xuICAgICAgdGhpcy5fdHJhbnNwb3J0VGltZW91dElkID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gU29ja0pTLk9QRU47XG4gICAgdGhpcy50cmFuc3BvcnQgPSB0aGlzLl90cmFuc3BvcnQudHJhbnNwb3J0TmFtZTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdvcGVuJykpO1xuICAgIGRlYnVnKCdjb25uZWN0ZWQnLCB0aGlzLnRyYW5zcG9ydCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIHNlcnZlciBtaWdodCBoYXZlIGJlZW4gcmVzdGFydGVkLCBhbmQgbG9zdCB0cmFjayBvZiBvdXJcbiAgICAvLyBjb25uZWN0aW9uLlxuICAgIHRoaXMuX2Nsb3NlKDEwMDYsICdTZXJ2ZXIgbG9zdCBzZXNzaW9uJyk7XG4gIH1cbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX2Nsb3NlID0gZnVuY3Rpb24oY29kZSwgcmVhc29uLCB3YXNDbGVhbikge1xuICBkZWJ1ZygnX2Nsb3NlJywgdGhpcy50cmFuc3BvcnQsIGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4sIHRoaXMucmVhZHlTdGF0ZSk7XG4gIHZhciBmb3JjZUZhaWwgPSBmYWxzZTtcblxuICBpZiAodGhpcy5faXIpIHtcbiAgICBmb3JjZUZhaWwgPSB0cnVlO1xuICAgIHRoaXMuX2lyLmNsb3NlKCk7XG4gICAgdGhpcy5faXIgPSBudWxsO1xuICB9XG4gIGlmICh0aGlzLl90cmFuc3BvcnQpIHtcbiAgICB0aGlzLl90cmFuc3BvcnQuY2xvc2UoKTtcbiAgICB0aGlzLl90cmFuc3BvcnQgPSBudWxsO1xuICAgIHRoaXMudHJhbnNwb3J0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DTE9TRUQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yOiBTb2NrSlMgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQnKTtcbiAgfVxuXG4gIHRoaXMucmVhZHlTdGF0ZSA9IFNvY2tKUy5DTE9TSU5HO1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNvY2tKUy5DTE9TRUQ7XG5cbiAgICBpZiAoZm9yY2VGYWlsKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdlcnJvcicpKTtcbiAgICB9XG5cbiAgICB2YXIgZSA9IG5ldyBDbG9zZUV2ZW50KCdjbG9zZScpO1xuICAgIGUud2FzQ2xlYW4gPSB3YXNDbGVhbiB8fCBmYWxzZTtcbiAgICBlLmNvZGUgPSBjb2RlIHx8IDEwMDA7XG4gICAgZS5yZWFzb24gPSByZWFzb247XG5cbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgdGhpcy5vbm1lc3NhZ2UgPSB0aGlzLm9uY2xvc2UgPSB0aGlzLm9uZXJyb3IgPSBudWxsO1xuICAgIGRlYnVnKCdkaXNjb25uZWN0ZWQnKTtcbiAgfS5iaW5kKHRoaXMpLCAwKTtcbn07XG5cbi8vIFNlZTogaHR0cDovL3d3dy5lcmcuYWJkbi5hYy51ay9+Z2Vycml0L2RjY3Avbm90ZXMvY2NpZDIvcnRvX2VzdGltYXRvci9cbi8vIGFuZCBSRkMgMjk4OC5cblNvY2tKUy5wcm90b3R5cGUuY291bnRSVE8gPSBmdW5jdGlvbihydHQpIHtcbiAgLy8gSW4gYSBsb2NhbCBlbnZpcm9ubWVudCwgd2hlbiB1c2luZyBJRTgvOSBhbmQgdGhlIGBqc29ucC1wb2xsaW5nYFxuICAvLyB0cmFuc3BvcnQgdGhlIHRpbWUgbmVlZGVkIHRvIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gKHRoZSB0aW1lIHRoYXQgcGFzc1xuICAvLyBmcm9tIHRoZSBvcGVuaW5nIG9mIHRoZSB0cmFuc3BvcnQgdG8gdGhlIGNhbGwgb2YgYF9kaXNwYXRjaE9wZW5gKSBpc1xuICAvLyBhcm91bmQgMjAwbXNlYyAodGhlIGxvd2VyIGJvdW5kIHVzZWQgaW4gdGhlIGFydGljbGUgYWJvdmUpIGFuZCB0aGlzXG4gIC8vIGNhdXNlcyBzcHVyaW91cyB0aW1lb3V0cy4gRm9yIHRoaXMgcmVhc29uIHdlIGNhbGN1bGF0ZSBhIHZhbHVlIHNsaWdodGx5XG4gIC8vIGxhcmdlciB0aGFuIHRoYXQgdXNlZCBpbiB0aGUgYXJ0aWNsZS5cbiAgaWYgKHJ0dCA+IDEwMCkge1xuICAgIHJldHVybiA0ICogcnR0OyAvLyBydG8gPiA0MDBtc2VjXG4gIH1cbiAgcmV0dXJuIDMwMCArIHJ0dDsgLy8gMzAwbXNlYyA8IHJ0byA8PSA0MDBtc2VjXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGF2YWlsYWJsZVRyYW5zcG9ydHMpIHtcbiAgdHJhbnNwb3J0cyA9IHRyYW5zcG9ydChhdmFpbGFibGVUcmFuc3BvcnRzKTtcbiAgcmVxdWlyZSgnLi9pZnJhbWUtYm9vdHN0cmFwJykoU29ja0pTLCBhdmFpbGFibGVUcmFuc3BvcnRzKTtcbiAgcmV0dXJuIFNvY2tKUztcbn07XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4vZXZlbnQvY2xvc2VcIjoyLFwiLi9ldmVudC9ldmVudFwiOjQsXCIuL2V2ZW50L2V2ZW50dGFyZ2V0XCI6NSxcIi4vZXZlbnQvdHJhbnMtbWVzc2FnZVwiOjYsXCIuL2lmcmFtZS1ib290c3RyYXBcIjo4LFwiLi9pbmZvLXJlY2VpdmVyXCI6MTIsXCIuL2xvY2F0aW9uXCI6MTMsXCIuL3NoaW1zXCI6MTUsXCIuL3V0aWxzL2Jyb3dzZXJcIjo0NCxcIi4vdXRpbHMvZXNjYXBlXCI6NDUsXCIuL3V0aWxzL2V2ZW50XCI6NDYsXCIuL3V0aWxzL2xvZ1wiOjQ4LFwiLi91dGlscy9vYmplY3RcIjo0OSxcIi4vdXRpbHMvcmFuZG9tXCI6NTAsXCIuL3V0aWxzL3RyYW5zcG9ydFwiOjUxLFwiLi91dGlscy91cmxcIjo1MixcIi4vdmVyc2lvblwiOjUzLFwiZGVidWdcIjo1NSxcImluaGVyaXRzXCI6NTcsXCJqc29uM1wiOjU4LFwidXJsLXBhcnNlXCI6NjF9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoganNjczogZGlzYWJsZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBwdWxsZWQgc3BlY2lmaWMgc2hpbXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cblxudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgU3RyaW5nUHJvdG90eXBlID0gU3RyaW5nLnByb3RvdHlwZTtcbnZhciBhcnJheV9zbGljZSA9IEFycmF5UHJvdG90eXBlLnNsaWNlO1xuXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIE9iamVjdFByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xudmFyIGlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KG9iaikge1xuICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbnZhciBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKG9iaikge1xuICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBTdHJpbmddJztcbn07XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIChmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAneCcsIHt9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkgeyAvKiB0aGlzIGlzIEVTMyAqL1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufSgpKTtcblxuLy8gRGVmaW5lIGNvbmZpZ3VyYWJsZSwgd3JpdGFibGUgYW5kIG5vbi1lbnVtZXJhYmxlIHByb3BzXG4vLyBpZiB0aGV5IGRvbid0IGV4aXN0LlxudmFyIGRlZmluZVByb3BlcnR5O1xuaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIG1ldGhvZCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgICAgaWYgKCFmb3JjZUFzc2lnbiAmJiAobmFtZSBpbiBvYmplY3QpKSB7IHJldHVybjsgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG1ldGhvZFxuICAgICAgICB9KTtcbiAgICB9O1xufSBlbHNlIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIG1ldGhvZCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgICAgaWYgKCFmb3JjZUFzc2lnbiAmJiAobmFtZSBpbiBvYmplY3QpKSB7IHJldHVybjsgfVxuICAgICAgICBvYmplY3RbbmFtZV0gPSBtZXRob2Q7XG4gICAgfTtcbn1cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwLCBmb3JjZUFzc2lnbikge1xuICAgIGZvciAodmFyIG5hbWUgaW4gbWFwKSB7XG4gICAgICAgIGlmIChPYmplY3RQcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtYXAsIG5hbWUpKSB7XG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCBtYXBbbmFtZV0sIGZvcmNlQXNzaWduKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciB0b09iamVjdCA9IGZ1bmN0aW9uIChvKSB7XG4gICAgaWYgKG8gPT0gbnVsbCkgeyAvLyB0aGlzIG1hdGNoZXMgYm90aCBudWxsIGFuZCB1bmRlZmluZWRcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbid0IGNvbnZlcnQgXCIgKyBvICsgJyB0byBvYmplY3QnKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdChvKTtcbn07XG5cbi8vXG4vLyBVdGlsXG4vLyA9PT09PT1cbi8vXG5cbi8vIEVTNSA5LjRcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDkuNFxuLy8gaHR0cDovL2pzcGVyZi5jb20vdG8taW50ZWdlclxuXG5mdW5jdGlvbiB0b0ludGVnZXIobnVtKSB7XG4gICAgdmFyIG4gPSArbnVtO1xuICAgIGlmIChuICE9PSBuKSB7IC8vIGlzTmFOXG4gICAgICAgIG4gPSAwO1xuICAgIH0gZWxzZSBpZiAobiAhPT0gMCAmJiBuICE9PSAoMSAvIDApICYmIG4gIT09IC0oMSAvIDApKSB7XG4gICAgICAgIG4gPSAobiA+IDAgfHwgLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhuKSk7XG4gICAgfVxuICAgIHJldHVybiBuO1xufVxuXG5mdW5jdGlvbiBUb1VpbnQzMih4KSB7XG4gICAgcmV0dXJuIHggPj4+IDA7XG59XG5cbi8vXG4vLyBGdW5jdGlvblxuLy8gPT09PT09PT1cbi8vXG5cbi8vIEVTLTUgMTUuMy40LjVcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjMuNC41XG5cbmZ1bmN0aW9uIEVtcHR5KCkge31cblxuZGVmaW5lUHJvcGVydGllcyhGdW5jdGlvblByb3RvdHlwZSwge1xuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQodGhhdCkgeyAvLyAubGVuZ3RoIGlzIDFcbiAgICAgICAgLy8gMS4gTGV0IFRhcmdldCBiZSB0aGUgdGhpcyB2YWx1ZS5cbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgICAgIC8vIDIuIElmIElzQ2FsbGFibGUoVGFyZ2V0KSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24odGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnICsgdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLiBMZXQgQSBiZSBhIG5ldyAocG9zc2libHkgZW1wdHkpIGludGVybmFsIGxpc3Qgb2YgYWxsIG9mIHRoZVxuICAgICAgICAvLyAgIGFyZ3VtZW50IHZhbHVlcyBwcm92aWRlZCBhZnRlciB0aGlzQXJnIChhcmcxLCBhcmcyIGV0YyksIGluIG9yZGVyLlxuICAgICAgICAvLyBYWFggc2xpY2VkQXJncyB3aWxsIHN0YW5kIGluIGZvciBcIkFcIiBpZiB1c2VkXG4gICAgICAgIHZhciBhcmdzID0gYXJyYXlfc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOyAvLyBmb3Igbm9ybWFsIGNhbGxcbiAgICAgICAgLy8gNC4gTGV0IEYgYmUgYSBuZXcgbmF0aXZlIEVDTUFTY3JpcHQgb2JqZWN0LlxuICAgICAgICAvLyAxMS4gU2V0IHRoZSBbW1Byb3RvdHlwZV1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgdG8gdGhlIHN0YW5kYXJkXG4gICAgICAgIC8vICAgYnVpbHQtaW4gRnVuY3Rpb24gcHJvdG90eXBlIG9iamVjdCBhcyBzcGVjaWZpZWQgaW4gMTUuMy4zLjEuXG4gICAgICAgIC8vIDEyLiBTZXQgdGhlIFtbQ2FsbF1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgIC8vICAgMTUuMy40LjUuMS5cbiAgICAgICAgLy8gMTMuIFNldCB0aGUgW1tDb25zdHJ1Y3RdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICAvLyAgIDE1LjMuNC41LjIuXG4gICAgICAgIC8vIDE0LiBTZXQgdGhlIFtbSGFzSW5zdGFuY2VdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICAvLyAgIDE1LjMuNC41LjMuXG4gICAgICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgICAgICAvLyAxNS4zLjQuNS4yIFtbQ29uc3RydWN0XV1cbiAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCBvZiBhIGZ1bmN0aW9uIG9iamVjdCxcbiAgICAgICAgICAgICAgICAvLyBGIHRoYXQgd2FzIGNyZWF0ZWQgdXNpbmcgdGhlIGJpbmQgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYVxuICAgICAgICAgICAgICAgIC8vIGxpc3Qgb2YgYXJndW1lbnRzIEV4dHJhQXJncywgdGhlIGZvbGxvd2luZyBzdGVwcyBhcmUgdGFrZW46XG4gICAgICAgICAgICAgICAgLy8gMS4gTGV0IHRhcmdldCBiZSB0aGUgdmFsdWUgb2YgRidzIFtbVGFyZ2V0RnVuY3Rpb25dXVxuICAgICAgICAgICAgICAgIC8vICAgaW50ZXJuYWwgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgLy8gMi4gSWYgdGFyZ2V0IGhhcyBubyBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCwgYVxuICAgICAgICAgICAgICAgIC8vICAgVHlwZUVycm9yIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gICAgICAgICAgICAgICAgLy8gMy4gTGV0IGJvdW5kQXJncyBiZSB0aGUgdmFsdWUgb2YgRidzIFtbQm91bmRBcmdzXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDQuIExldCBhcmdzIGJlIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlXG4gICAgICAgICAgICAgICAgLy8gICBsaXN0IGJvdW5kQXJncyBpbiB0aGUgc2FtZSBvcmRlciBmb2xsb3dlZCBieSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgIC8vICAgdmFsdWVzIGFzIHRoZSBsaXN0IEV4dHJhQXJncyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICAgICAgICAgICAgICAvLyA1LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsXG4gICAgICAgICAgICAgICAgLy8gICBtZXRob2Qgb2YgdGFyZ2V0IHByb3ZpZGluZyBhcmdzIGFzIHRoZSBhcmd1bWVudHMuXG5cbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChhcnJheV9zbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAxNS4zLjQuNS4xIFtbQ2FsbF1dXG4gICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgW1tDYWxsXV0gaW50ZXJuYWwgbWV0aG9kIG9mIGEgZnVuY3Rpb24gb2JqZWN0LCBGLFxuICAgICAgICAgICAgICAgIC8vIHdoaWNoIHdhcyBjcmVhdGVkIHVzaW5nIHRoZSBiaW5kIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFcbiAgICAgICAgICAgICAgICAvLyB0aGlzIHZhbHVlIGFuZCBhIGxpc3Qgb2YgYXJndW1lbnRzIEV4dHJhQXJncywgdGhlIGZvbGxvd2luZ1xuICAgICAgICAgICAgICAgIC8vIHN0ZXBzIGFyZSB0YWtlbjpcbiAgICAgICAgICAgICAgICAvLyAxLiBMZXQgYm91bmRBcmdzIGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tCb3VuZEFyZ3NdXSBpbnRlcm5hbFxuICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgLy8gMi4gTGV0IGJvdW5kVGhpcyBiZSB0aGUgdmFsdWUgb2YgRidzIFtbQm91bmRUaGlzXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDMuIExldCB0YXJnZXQgYmUgdGhlIHZhbHVlIG9mIEYncyBbW1RhcmdldEZ1bmN0aW9uXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDQuIExldCBhcmdzIGJlIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlXG4gICAgICAgICAgICAgICAgLy8gICBsaXN0IGJvdW5kQXJncyBpbiB0aGUgc2FtZSBvcmRlciBmb2xsb3dlZCBieSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgIC8vICAgdmFsdWVzIGFzIHRoZSBsaXN0IEV4dHJhQXJncyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICAgICAgICAgICAgICAvLyA1LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2RcbiAgICAgICAgICAgICAgICAvLyAgIG9mIHRhcmdldCBwcm92aWRpbmcgYm91bmRUaGlzIGFzIHRoZSB0aGlzIHZhbHVlIGFuZFxuICAgICAgICAgICAgICAgIC8vICAgcHJvdmlkaW5nIGFyZ3MgYXMgdGhlIGFyZ3VtZW50cy5cblxuICAgICAgICAgICAgICAgIC8vIGVxdWl2OiB0YXJnZXQuY2FsbCh0aGlzLCAuLi5ib3VuZEFyZ3MsIC4uLmFyZ3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICAgICAgYXJncy5jb25jYXQoYXJyYXlfc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIDE1LiBJZiB0aGUgW1tDbGFzc11dIGludGVybmFsIHByb3BlcnR5IG9mIFRhcmdldCBpcyBcIkZ1bmN0aW9uXCIsIHRoZW5cbiAgICAgICAgLy8gICAgIGEuIExldCBMIGJlIHRoZSBsZW5ndGggcHJvcGVydHkgb2YgVGFyZ2V0IG1pbnVzIHRoZSBsZW5ndGggb2YgQS5cbiAgICAgICAgLy8gICAgIGIuIFNldCB0aGUgbGVuZ3RoIG93biBwcm9wZXJ0eSBvZiBGIHRvIGVpdGhlciAwIG9yIEwsIHdoaWNoZXZlciBpc1xuICAgICAgICAvLyAgICAgICBsYXJnZXIuXG4gICAgICAgIC8vIDE2LiBFbHNlIHNldCB0aGUgbGVuZ3RoIG93biBwcm9wZXJ0eSBvZiBGIHRvIDAuXG5cbiAgICAgICAgdmFyIGJvdW5kTGVuZ3RoID0gTWF0aC5tYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcblxuICAgICAgICAvLyAxNy4gU2V0IHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBsZW5ndGggb3duIHByb3BlcnR5IG9mIEYgdG8gdGhlIHZhbHVlc1xuICAgICAgICAvLyAgIHNwZWNpZmllZCBpbiAxNS4zLjUuMS5cbiAgICAgICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJvdW5kQXJncy5wdXNoKCckJyArIGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWFhYIEJ1aWxkIGEgZHluYW1pYyBmdW5jdGlvbiB3aXRoIGRlc2lyZWQgYW1vdW50IG9mIGFyZ3VtZW50cyBpcyB0aGUgb25seVxuICAgICAgICAvLyB3YXkgdG8gc2V0IHRoZSBsZW5ndGggcHJvcGVydHkgb2YgYSBmdW5jdGlvbi5cbiAgICAgICAgLy8gSW4gZW52aXJvbm1lbnRzIHdoZXJlIENvbnRlbnQgU2VjdXJpdHkgUG9saWNpZXMgZW5hYmxlZCAoQ2hyb21lIGV4dGVuc2lvbnMsXG4gICAgICAgIC8vIGZvciBleC4pIGFsbCB1c2Ugb2YgZXZhbCBvciBGdW5jdGlvbiBjb3N0cnVjdG9yIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICAgIC8vIEhvd2V2ZXIgaW4gYWxsIG9mIHRoZXNlIGVudmlyb25tZW50cyBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBleGlzdHNcbiAgICAgICAgLy8gYW5kIHNvIHRoaXMgY29kZSB3aWxsIG5ldmVyIGJlIGV4ZWN1dGVkLlxuICAgICAgICB2YXIgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGJvdW5kQXJncy5qb2luKCcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgICAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgZGFuZ2xpbmcgcmVmZXJlbmNlcy5cbiAgICAgICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPXG4gICAgICAgIC8vIDE4LiBTZXQgdGhlIFtbRXh0ZW5zaWJsZV1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgdG8gdHJ1ZS5cblxuICAgICAgICAvLyBUT0RPXG4gICAgICAgIC8vIDE5LiBMZXQgdGhyb3dlciBiZSB0aGUgW1tUaHJvd1R5cGVFcnJvcl1dIGZ1bmN0aW9uIE9iamVjdCAoMTMuMi4zKS5cbiAgICAgICAgLy8gMjAuIENhbGwgdGhlIFtbRGVmaW5lT3duUHJvcGVydHldXSBpbnRlcm5hbCBtZXRob2Qgb2YgRiB3aXRoXG4gICAgICAgIC8vICAgYXJndW1lbnRzIFwiY2FsbGVyXCIsIFByb3BlcnR5RGVzY3JpcHRvciB7W1tHZXRdXTogdGhyb3dlciwgW1tTZXRdXTpcbiAgICAgICAgLy8gICB0aHJvd2VyLCBbW0VudW1lcmFibGVdXTogZmFsc2UsIFtbQ29uZmlndXJhYmxlXV06IGZhbHNlfSwgYW5kXG4gICAgICAgIC8vICAgZmFsc2UuXG4gICAgICAgIC8vIDIxLiBDYWxsIHRoZSBbW0RlZmluZU93blByb3BlcnR5XV0gaW50ZXJuYWwgbWV0aG9kIG9mIEYgd2l0aFxuICAgICAgICAvLyAgIGFyZ3VtZW50cyBcImFyZ3VtZW50c1wiLCBQcm9wZXJ0eURlc2NyaXB0b3Ige1tbR2V0XV06IHRocm93ZXIsXG4gICAgICAgIC8vICAgW1tTZXRdXTogdGhyb3dlciwgW1tFbnVtZXJhYmxlXV06IGZhbHNlLCBbW0NvbmZpZ3VyYWJsZV1dOiBmYWxzZX0sXG4gICAgICAgIC8vICAgYW5kIGZhbHNlLlxuXG4gICAgICAgIC8vIFRPRE9cbiAgICAgICAgLy8gTk9URSBGdW5jdGlvbiBvYmplY3RzIGNyZWF0ZWQgdXNpbmcgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgZG8gbm90XG4gICAgICAgIC8vIGhhdmUgYSBwcm90b3R5cGUgcHJvcGVydHkgb3IgdGhlIFtbQ29kZV1dLCBbW0Zvcm1hbFBhcmFtZXRlcnNdXSwgYW5kXG4gICAgICAgIC8vIFtbU2NvcGVdXSBpbnRlcm5hbCBwcm9wZXJ0aWVzLlxuICAgICAgICAvLyBYWFggY2FuJ3QgZGVsZXRlIHByb3RvdHlwZSBpbiBwdXJlLWpzLlxuXG4gICAgICAgIC8vIDIyLiBSZXR1cm4gRi5cbiAgICAgICAgcmV0dXJuIGJvdW5kO1xuICAgIH1cbn0pO1xuXG4vL1xuLy8gQXJyYXlcbi8vID09PT09XG4vL1xuXG4vLyBFUzUgMTUuNC4zLjJcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuMy4yXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pc0FycmF5XG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5LCB7IGlzQXJyYXk6IGlzQXJyYXkgfSk7XG5cblxudmFyIGJveGVkU3RyaW5nID0gT2JqZWN0KCdhJyk7XG52YXIgc3BsaXRTdHJpbmcgPSBib3hlZFN0cmluZ1swXSAhPT0gJ2EnIHx8ICEoMCBpbiBib3hlZFN0cmluZyk7XG5cbnZhciBwcm9wZXJseUJveGVzQ29udGV4dCA9IGZ1bmN0aW9uIHByb3Blcmx5Qm94ZWQobWV0aG9kKSB7XG4gICAgLy8gQ2hlY2sgbm9kZSAwLjYuMjEgYnVnIHdoZXJlIHRoaXJkIHBhcmFtZXRlciBpcyBub3QgYm94ZWRcbiAgICB2YXIgcHJvcGVybHlCb3hlc05vblN0cmljdCA9IHRydWU7XG4gICAgdmFyIHByb3Blcmx5Qm94ZXNTdHJpY3QgPSB0cnVlO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgICAgbWV0aG9kLmNhbGwoJ2ZvbycsIGZ1bmN0aW9uIChfLCBfXywgY29udGV4dCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnb2JqZWN0JykgeyBwcm9wZXJseUJveGVzTm9uU3RyaWN0ID0gZmFsc2U7IH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWV0aG9kLmNhbGwoWzFdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAndXNlIHN0cmljdCc7XG4gICAgICAgICAgICBwcm9wZXJseUJveGVzU3RyaWN0ID0gdHlwZW9mIHRoaXMgPT09ICdzdHJpbmcnO1xuICAgICAgICB9LCAneCcpO1xuICAgIH1cbiAgICByZXR1cm4gISFtZXRob2QgJiYgcHJvcGVybHlCb3hlc05vblN0cmljdCAmJiBwcm9wZXJseUJveGVzU3RyaWN0O1xufTtcblxuZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZnVuIC8qLCB0aGlzcCovKSB7XG4gICAgICAgIHZhciBvYmplY3QgPSB0b09iamVjdCh0aGlzKSxcbiAgICAgICAgICAgIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHRoaXMuc3BsaXQoJycpIDogb2JqZWN0LFxuICAgICAgICAgICAgdGhpc3AgPSBhcmd1bWVudHNbMV0sXG4gICAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzZWxmLmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpOyAvLyBUT0RPIG1lc3NhZ2VcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlICgrK2kgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChpIGluIHNlbGYpIHtcbiAgICAgICAgICAgICAgICAvLyBJbnZva2UgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpdGggY2FsbCwgcGFzc2luZyBhcmd1bWVudHM6XG4gICAgICAgICAgICAgICAgLy8gY29udGV4dCwgcHJvcGVydHkgdmFsdWUsIHByb3BlcnR5IGtleSwgdGhpc0FyZyBvYmplY3RcbiAgICAgICAgICAgICAgICAvLyBjb250ZXh0XG4gICAgICAgICAgICAgICAgZnVuLmNhbGwodGhpc3AsIHNlbGZbaV0sIGksIG9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59LCAhcHJvcGVybHlCb3hlc0NvbnRleHQoQXJyYXlQcm90b3R5cGUuZm9yRWFjaCkpO1xuXG4vLyBFUzUgMTUuNC40LjE0XG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTRcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2luZGV4T2ZcbnZhciBoYXNGaXJlZm94MkluZGV4T2ZCdWcgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiAmJiBbMCwgMV0uaW5kZXhPZigxLCAyKSAhPT0gLTE7XG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzb3VnaHQgLyosIGZyb21JbmRleCAqLyApIHtcbiAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHRoaXMuc3BsaXQoJycpIDogdG9PYmplY3QodGhpcyksXG4gICAgICAgICAgICBsZW5ndGggPSBzZWxmLmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGkgPSB0b0ludGVnZXIoYXJndW1lbnRzWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhbmRsZSBuZWdhdGl2ZSBpbmRpY2VzXG4gICAgICAgIGkgPSBpID49IDAgPyBpIDogTWF0aC5tYXgoMCwgbGVuZ3RoICsgaSk7XG4gICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpIGluIHNlbGYgJiYgc2VsZltpXSA9PT0gc291Z2h0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbn0sIGhhc0ZpcmVmb3gySW5kZXhPZkJ1Zyk7XG5cbi8vXG4vLyBTdHJpbmdcbi8vID09PT09PVxuLy9cblxuLy8gRVM1IDE1LjUuNC4xNFxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNS40LjE0XG5cbi8vIFtidWdmaXgsIElFIGx0IDksIGZpcmVmb3ggNCwgS29ucXVlcm9yLCBPcGVyYSwgb2JzY3VyZSBicm93c2Vyc11cbi8vIE1hbnkgYnJvd3NlcnMgZG8gbm90IHNwbGl0IHByb3Blcmx5IHdpdGggcmVndWxhciBleHByZXNzaW9ucyBvciB0aGV5XG4vLyBkbyBub3QgcGVyZm9ybSB0aGUgc3BsaXQgY29ycmVjdGx5IHVuZGVyIG9ic2N1cmUgY29uZGl0aW9ucy5cbi8vIFNlZSBodHRwOi8vYmxvZy5zdGV2ZW5sZXZpdGhhbi5jb20vYXJjaGl2ZXMvY3Jvc3MtYnJvd3Nlci1zcGxpdFxuLy8gSSd2ZSB0ZXN0ZWQgaW4gbWFueSBicm93c2VycyBhbmQgdGhpcyBzZWVtcyB0byBjb3ZlciB0aGUgZGV2aWFudCBvbmVzOlxuLy8gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pIHNob3VsZCBiZSBbXCJcIiwgXCJcIl0sIG5vdCBbXCJcIl1cbi8vICAgICcuJy5zcGxpdCgvKC4/KSguPykvKSBzaG91bGQgYmUgW1wiXCIsIFwiLlwiLCBcIlwiLCBcIlwiXSwgbm90IFtcIlwiLCBcIlwiXVxuLy8gICAgJ3Rlc3N0Jy5zcGxpdCgvKHMpKi8pIHNob3VsZCBiZSBbXCJ0XCIsIHVuZGVmaW5lZCwgXCJlXCIsIFwic1wiLCBcInRcIl0sIG5vdFxuLy8gICAgICAgW3VuZGVmaW5lZCwgXCJ0XCIsIHVuZGVmaW5lZCwgXCJlXCIsIC4uLl1cbi8vICAgICcnLnNwbGl0KC8uPy8pIHNob3VsZCBiZSBbXSwgbm90IFtcIlwiXVxuLy8gICAgJy4nLnNwbGl0KC8oKSgpLykgc2hvdWxkIGJlIFtcIi5cIl0sIG5vdCBbXCJcIiwgXCJcIiwgXCIuXCJdXG5cbnZhciBzdHJpbmdfc3BsaXQgPSBTdHJpbmdQcm90b3R5cGUuc3BsaXQ7XG5pZiAoXG4gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aCAhPT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT09IDQgfHxcbiAgICAndGVzc3QnLnNwbGl0KC8ocykqLylbMV0gPT09ICd0JyB8fFxuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT09IDQgfHxcbiAgICAnJy5zcGxpdCgvLj8vKS5sZW5ndGggfHxcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxXG4pIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29tcGxpYW50RXhlY05wY2cgPSAvKCk/Py8uZXhlYygnJylbMV0gPT09IHZvaWQgMDsgLy8gTlBDRzogbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcblxuICAgICAgICBTdHJpbmdQcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgICAgICAgdmFyIHN0cmluZyA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoc2VwYXJhdG9yID09PSB2b2lkIDAgJiYgbGltaXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICAgICAgICBpZiAoX3RvU3RyaW5nLmNhbGwoc2VwYXJhdG9yKSAhPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBbXSxcbiAgICAgICAgICAgICAgICBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSAgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5leHRlbmRlZCAgID8gJ3gnIDogJycpICsgLy8gUHJvcG9zZWQgZm9yIEVTNlxuICAgICAgICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgICAgID8gJ3knIDogJycpLCAvLyBGaXJlZm94IDMrXG4gICAgICAgICAgICAgICAgbGFzdExhc3RJbmRleCA9IDAsXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICAgICAgICBzdHJpbmcgKz0gJyc7IC8vIFR5cGUtY29udmVydFxuICAgICAgICAgICAgaWYgKCFjb21wbGlhbnRFeGVjTnBjZykge1xuICAgICAgICAgICAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgICAgICAgICAgIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvci5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIFZhbHVlcyBmb3IgYGxpbWl0YCwgcGVyIHRoZSBzcGVjOlxuICAgICAgICAgICAgICogSWYgdW5kZWZpbmVkOiA0Mjk0OTY3Mjk1IC8vIE1hdGgucG93KDIsIDMyKSAtIDFcbiAgICAgICAgICAgICAqIElmIDAsIEluZmluaXR5LCBvciBOYU46IDBcbiAgICAgICAgICAgICAqIElmIHBvc2l0aXZlIG51bWJlcjogbGltaXQgPSBNYXRoLmZsb29yKGxpbWl0KTsgaWYgKGxpbWl0ID4gNDI5NDk2NzI5NSkgbGltaXQgLT0gNDI5NDk2NzI5NjtcbiAgICAgICAgICAgICAqIElmIG5lZ2F0aXZlIG51bWJlcjogNDI5NDk2NzI5NiAtIE1hdGguZmxvb3IoTWF0aC5hYnMobGltaXQpKVxuICAgICAgICAgICAgICogSWYgb3RoZXI6IFR5cGUtY29udmVydCwgdGhlbiB1c2UgdGhlIGFib3ZlIHJ1bGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxpbWl0ID0gbGltaXQgPT09IHZvaWQgMCA/XG4gICAgICAgICAgICAgICAgLTEgPj4+IDAgOiAvLyBNYXRoLnBvdygyLCAzMikgLSAxXG4gICAgICAgICAgICAgICAgVG9VaW50MzIobGltaXQpO1xuICAgICAgICAgICAgd2hpbGUgKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgIC8vIGBzZXBhcmF0b3IubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3JcbiAgICAgICAgICAgICAgICAgICAgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBzXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29tcGxpYW50RXhlY05wY2cgJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbaV0gPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5UHJvdG90eXBlLnB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gbGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzZXBhcmF0b3IubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3IubGFzdEluZGV4Kys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3IudGVzdCgnJykpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgbGltaXQpIDogb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH0oKSk7XG5cbi8vIFtidWdmaXgsIGNocm9tZV1cbi8vIElmIHNlcGFyYXRvciBpcyB1bmRlZmluZWQsIHRoZW4gdGhlIHJlc3VsdCBhcnJheSBjb250YWlucyBqdXN0IG9uZSBTdHJpbmcsXG4vLyB3aGljaCBpcyB0aGUgdGhpcyB2YWx1ZSAoY29udmVydGVkIHRvIGEgU3RyaW5nKS4gSWYgbGltaXQgaXMgbm90IHVuZGVmaW5lZCxcbi8vIHRoZW4gdGhlIG91dHB1dCBhcnJheSBpcyB0cnVuY2F0ZWQgc28gdGhhdCBpdCBjb250YWlucyBubyBtb3JlIHRoYW4gbGltaXRcbi8vIGVsZW1lbnRzLlxuLy8gXCIwXCIuc3BsaXQodW5kZWZpbmVkLCAwKSAtPiBbXVxufSBlbHNlIGlmICgnMCcuc3BsaXQodm9pZCAwLCAwKS5sZW5ndGgpIHtcbiAgICBTdHJpbmdQcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICAgIGlmIChzZXBhcmF0b3IgPT09IHZvaWQgMCAmJiBsaW1pdCA9PT0gMCkgeyByZXR1cm4gW107IH1cbiAgICAgICAgcmV0dXJuIHN0cmluZ19zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG59XG5cbi8vIEVDTUEtMjYyLCAzcmQgQi4yLjNcbi8vIE5vdCBhbiBFQ01BU2NyaXB0IHN0YW5kYXJkLCBhbHRob3VnaCBFQ01BU2NyaXB0IDNyZCBFZGl0aW9uIGhhcyBhXG4vLyBub24tbm9ybWF0aXZlIHNlY3Rpb24gc3VnZ2VzdGluZyB1bmlmb3JtIHNlbWFudGljcyBhbmQgaXQgc2hvdWxkIGJlXG4vLyBub3JtYWxpemVkIGFjcm9zcyBhbGwgYnJvd3NlcnNcbi8vIFtidWdmaXgsIElFIGx0IDldIElFIDwgOSBzdWJzdHIoKSB3aXRoIG5lZ2F0aXZlIHZhbHVlIG5vdCB3b3JraW5nIGluIElFXG52YXIgc3RyaW5nX3N1YnN0ciA9IFN0cmluZ1Byb3RvdHlwZS5zdWJzdHI7XG52YXIgaGFzTmVnYXRpdmVTdWJzdHJCdWcgPSAnJy5zdWJzdHIgJiYgJzBiJy5zdWJzdHIoLTEpICE9PSAnYic7XG5kZWZpbmVQcm9wZXJ0aWVzKFN0cmluZ1Byb3RvdHlwZSwge1xuICAgIHN1YnN0cjogZnVuY3Rpb24gc3Vic3RyKHN0YXJ0LCBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ19zdWJzdHIuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBzdGFydCA8IDAgPyAoKHN0YXJ0ID0gdGhpcy5sZW5ndGggKyBzdGFydCkgPCAwID8gMCA6IHN0YXJ0KSA6IHN0YXJ0LFxuICAgICAgICAgICAgbGVuZ3RoXG4gICAgICAgICk7XG4gICAgfVxufSwgaGFzTmVnYXRpdmVTdWJzdHJCdWcpO1xuXG59LHt9XSwxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gW1xuICAvLyBzdHJlYW1pbmcgdHJhbnNwb3J0c1xuICByZXF1aXJlKCcuL3RyYW5zcG9ydC93ZWJzb2NrZXQnKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC94aHItc3RyZWFtaW5nJylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQveGRyLXN0cmVhbWluZycpXG4sIHJlcXVpcmUoJy4vdHJhbnNwb3J0L2V2ZW50c291cmNlJylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvbGliL2lmcmFtZS13cmFwJykocmVxdWlyZSgnLi90cmFuc3BvcnQvZXZlbnRzb3VyY2UnKSlcblxuICAvLyBwb2xsaW5nIHRyYW5zcG9ydHNcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvaHRtbGZpbGUnKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC9saWIvaWZyYW1lLXdyYXAnKShyZXF1aXJlKCcuL3RyYW5zcG9ydC9odG1sZmlsZScpKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC94aHItcG9sbGluZycpXG4sIHJlcXVpcmUoJy4vdHJhbnNwb3J0L3hkci1wb2xsaW5nJylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvbGliL2lmcmFtZS13cmFwJykocmVxdWlyZSgnLi90cmFuc3BvcnQveGhyLXBvbGxpbmcnKSlcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvanNvbnAtcG9sbGluZycpXG5dO1xuXG59LHtcIi4vdHJhbnNwb3J0L2V2ZW50c291cmNlXCI6MjAsXCIuL3RyYW5zcG9ydC9odG1sZmlsZVwiOjIxLFwiLi90cmFuc3BvcnQvanNvbnAtcG9sbGluZ1wiOjIzLFwiLi90cmFuc3BvcnQvbGliL2lmcmFtZS13cmFwXCI6MjYsXCIuL3RyYW5zcG9ydC93ZWJzb2NrZXRcIjozOCxcIi4vdHJhbnNwb3J0L3hkci1wb2xsaW5nXCI6MzksXCIuL3RyYW5zcG9ydC94ZHItc3RyZWFtaW5nXCI6NDAsXCIuL3RyYW5zcG9ydC94aHItcG9sbGluZ1wiOjQxLFwiLi90cmFuc3BvcnQveGhyLXN0cmVhbWluZ1wiOjQyfV0sMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2V2ZW50JylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3VybCcpXG4gICwgWEhSID0gZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0XG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpicm93c2VyOnhocicpO1xufVxuXG5mdW5jdGlvbiBBYnN0cmFjdFhIUk9iamVjdChtZXRob2QsIHVybCwgcGF5bG9hZCwgb3B0cykge1xuICBkZWJ1ZyhtZXRob2QsIHVybCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5fc3RhcnQobWV0aG9kLCB1cmwsIHBheWxvYWQsIG9wdHMpO1xuICB9LCAwKTtcbn1cblxuaW5oZXJpdHMoQWJzdHJhY3RYSFJPYmplY3QsIEV2ZW50RW1pdHRlcik7XG5cbkFic3RyYWN0WEhST2JqZWN0LnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbihtZXRob2QsIHVybCwgcGF5bG9hZCwgb3B0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdHJ5IHtcbiAgICB0aGlzLnhociA9IG5ldyBYSFIoKTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgfVxuXG4gIGlmICghdGhpcy54aHIpIHtcbiAgICBkZWJ1Zygnbm8geGhyJyk7XG4gICAgdGhpcy5lbWl0KCdmaW5pc2gnLCAwLCAnbm8geGhyIHN1cHBvcnQnKTtcbiAgICB0aGlzLl9jbGVhbnVwKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gc2V2ZXJhbCBicm93c2VycyBjYWNoZSBQT1NUc1xuICB1cmwgPSB1cmxVdGlscy5hZGRRdWVyeSh1cmwsICd0PScgKyAoK25ldyBEYXRlKCkpKTtcblxuICAvLyBFeHBsb3JlciB0ZW5kcyB0byBrZWVwIGNvbm5lY3Rpb24gb3BlbiwgZXZlbiBhZnRlciB0aGVcbiAgLy8gdGFiIGdldHMgY2xvc2VkOiBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC81MjgwXG4gIHRoaXMudW5sb2FkUmVmID0gdXRpbHMudW5sb2FkQWRkKGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCd1bmxvYWQgY2xlYW51cCcpO1xuICAgIHNlbGYuX2NsZWFudXAodHJ1ZSk7XG4gIH0pO1xuICB0cnkge1xuICAgIHRoaXMueGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICAgIGlmICh0aGlzLnRpbWVvdXQgJiYgJ3RpbWVvdXQnIGluIHRoaXMueGhyKSB7XG4gICAgICB0aGlzLnhoci50aW1lb3V0ID0gdGhpcy50aW1lb3V0O1xuICAgICAgdGhpcy54aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGRlYnVnKCd4aHIgdGltZW91dCcpO1xuICAgICAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIDAsICcnKTtcbiAgICAgICAgc2VsZi5fY2xlYW51cChmYWxzZSk7XG4gICAgICB9O1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGRlYnVnKCdleGNlcHRpb24nLCBlKTtcbiAgICAvLyBJRSByYWlzZXMgYW4gZXhjZXB0aW9uIG9uIHdyb25nIHBvcnQuXG4gICAgdGhpcy5lbWl0KCdmaW5pc2gnLCAwLCAnJyk7XG4gICAgdGhpcy5fY2xlYW51cChmYWxzZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCghb3B0cyB8fCAhb3B0cy5ub0NyZWRlbnRpYWxzKSAmJiBBYnN0cmFjdFhIUk9iamVjdC5zdXBwb3J0c0NPUlMpIHtcbiAgICBkZWJ1Zygnd2l0aENyZWRlbnRpYWxzJyk7XG4gICAgLy8gTW96aWxsYSBkb2NzIHNheXMgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vWE1MSHR0cFJlcXVlc3QgOlxuICAgIC8vIFwiVGhpcyBuZXZlciBhZmZlY3RzIHNhbWUtc2l0ZSByZXF1ZXN0cy5cIlxuXG4gICAgdGhpcy54aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgfVxuICBpZiAob3B0cyAmJiBvcHRzLmhlYWRlcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gb3B0cy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLnhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgb3B0cy5oZWFkZXJzW2tleV0pO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxmLnhocikge1xuICAgICAgdmFyIHggPSBzZWxmLnhocjtcbiAgICAgIHZhciB0ZXh0LCBzdGF0dXM7XG4gICAgICBkZWJ1ZygncmVhZHlTdGF0ZScsIHgucmVhZHlTdGF0ZSk7XG4gICAgICBzd2l0Y2ggKHgucmVhZHlTdGF0ZSkge1xuICAgICAgY2FzZSAzOlxuICAgICAgICAvLyBJRSBkb2Vzbid0IGxpa2UgcGVla2luZyBpbnRvIHJlc3BvbnNlVGV4dCBvciBzdGF0dXNcbiAgICAgICAgLy8gb24gTWljcm9zb2Z0LlhNTEhUVFAgYW5kIHJlYWR5c3RhdGU9M1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHN0YXR1cyA9IHguc3RhdHVzO1xuICAgICAgICAgIHRleHQgPSB4LnJlc3BvbnNlVGV4dDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICAgICAgfVxuICAgICAgICBkZWJ1Zygnc3RhdHVzJywgc3RhdHVzKTtcbiAgICAgICAgLy8gSUUgcmV0dXJucyAxMjIzIGZvciAyMDQ6IGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzE0NTBcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gMTIyMykge1xuICAgICAgICAgIHN0YXR1cyA9IDIwNDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElFIGRvZXMgcmV0dXJuIHJlYWR5c3RhdGUgPT0gMyBmb3IgNDA0IGFuc3dlcnMuXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDIwMCAmJiB0ZXh0ICYmIHRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGRlYnVnKCdjaHVuaycpO1xuICAgICAgICAgIHNlbGYuZW1pdCgnY2h1bmsnLCBzdGF0dXMsIHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBzdGF0dXMgPSB4LnN0YXR1cztcbiAgICAgICAgZGVidWcoJ3N0YXR1cycsIHN0YXR1cyk7XG4gICAgICAgIC8vIElFIHJldHVybnMgMTIyMyBmb3IgMjA0OiBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xNDUwXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDEyMjMpIHtcbiAgICAgICAgICBzdGF0dXMgPSAyMDQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSUUgcmV0dXJucyB0aGlzIGZvciBhIGJhZCBwb3J0XG4gICAgICAgIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS93aW5kb3dzL2Rlc2t0b3AvYWEzODM3NzAodj12cy44NSkuYXNweFxuICAgICAgICBpZiAoc3RhdHVzID09PSAxMjAwNSB8fCBzdGF0dXMgPT09IDEyMDI5KSB7XG4gICAgICAgICAgc3RhdHVzID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlYnVnKCdmaW5pc2gnLCBzdGF0dXMsIHgucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgc2VsZi5lbWl0KCdmaW5pc2gnLCBzdGF0dXMsIHgucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgc2VsZi5fY2xlYW51cChmYWxzZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0cnkge1xuICAgIHNlbGYueGhyLnNlbmQocGF5bG9hZCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIDAsICcnKTtcbiAgICBzZWxmLl9jbGVhbnVwKGZhbHNlKTtcbiAgfVxufTtcblxuQWJzdHJhY3RYSFJPYmplY3QucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oYWJvcnQpIHtcbiAgZGVidWcoJ2NsZWFudXAnKTtcbiAgaWYgKCF0aGlzLnhocikge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB1dGlscy51bmxvYWREZWwodGhpcy51bmxvYWRSZWYpO1xuXG4gIC8vIElFIG5lZWRzIHRoaXMgZmllbGQgdG8gYmUgYSBmdW5jdGlvblxuICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHt9O1xuICBpZiAodGhpcy54aHIub250aW1lb3V0KSB7XG4gICAgdGhpcy54aHIub250aW1lb3V0ID0gbnVsbDtcbiAgfVxuXG4gIGlmIChhYm9ydCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnhoci5hYm9ydCgpO1xuICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICB9XG4gIH1cbiAgdGhpcy51bmxvYWRSZWYgPSB0aGlzLnhociA9IG51bGw7XG59O1xuXG5BYnN0cmFjdFhIUk9iamVjdC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMuX2NsZWFudXAodHJ1ZSk7XG59O1xuXG5BYnN0cmFjdFhIUk9iamVjdC5lbmFibGVkID0gISFYSFI7XG4vLyBvdmVycmlkZSBYTUxIdHRwUmVxdWVzdCBmb3IgSUU2Lzdcbi8vIG9iZnVzY2F0ZSB0byBhdm9pZCBmaXJld2FsbHNcbnZhciBheG8gPSBbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpO1xuaWYgKCFBYnN0cmFjdFhIUk9iamVjdC5lbmFibGVkICYmIChheG8gaW4gZ2xvYmFsKSkge1xuICBkZWJ1Zygnb3ZlcnJpZGluZyB4bWxodHRwcmVxdWVzdCcpO1xuICBYSFIgPSBmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBnbG9iYWxbYXhvXSgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG4gIEFic3RyYWN0WEhST2JqZWN0LmVuYWJsZWQgPSAhIW5ldyBYSFIoKTtcbn1cblxudmFyIGNvcnMgPSBmYWxzZTtcbnRyeSB7XG4gIGNvcnMgPSAnd2l0aENyZWRlbnRpYWxzJyBpbiBuZXcgWEhSKCk7XG59IGNhdGNoIChpZ25vcmVkKSB7XG4gIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbn1cblxuQWJzdHJhY3RYSFJPYmplY3Quc3VwcG9ydHNDT1JTID0gY29ycztcblxubW9kdWxlLmV4cG9ydHMgPSBBYnN0cmFjdFhIUk9iamVjdDtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9LHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se1wiLi4vLi4vdXRpbHMvZXZlbnRcIjo0NixcIi4uLy4uL3V0aWxzL3VybFwiOjUyLFwiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3fV0sMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuRXZlbnRTb3VyY2U7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHt9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcml2ZXIgPSBnbG9iYWwuV2ViU29ja2V0IHx8IGdsb2JhbC5Nb3pXZWJTb2NrZXQ7XG5pZiAoRHJpdmVyKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gV2ViU29ja2V0QnJvd3NlckRyaXZlcih1cmwpIHtcblx0XHRyZXR1cm4gbmV3IERyaXZlcih1cmwpO1xuXHR9O1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMgPSB1bmRlZmluZWQ7XG59XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHt9XSwyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBBamF4QmFzZWRUcmFuc3BvcnQgPSByZXF1aXJlKCcuL2xpYi9hamF4LWJhc2VkJylcbiAgLCBFdmVudFNvdXJjZVJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci9ldmVudHNvdXJjZScpXG4gICwgWEhSQ29yc09iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hoci1jb3JzJylcbiAgLCBFdmVudFNvdXJjZURyaXZlciA9IHJlcXVpcmUoJ2V2ZW50c291cmNlJylcbiAgO1xuXG5mdW5jdGlvbiBFdmVudFNvdXJjZVRyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIUV2ZW50U291cmNlVHJhbnNwb3J0LmVuYWJsZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG5cbiAgQWpheEJhc2VkVHJhbnNwb3J0LmNhbGwodGhpcywgdHJhbnNVcmwsICcvZXZlbnRzb3VyY2UnLCBFdmVudFNvdXJjZVJlY2VpdmVyLCBYSFJDb3JzT2JqZWN0KTtcbn1cblxuaW5oZXJpdHMoRXZlbnRTb3VyY2VUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cbkV2ZW50U291cmNlVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICEhRXZlbnRTb3VyY2VEcml2ZXI7XG59O1xuXG5FdmVudFNvdXJjZVRyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ2V2ZW50c291cmNlJztcbkV2ZW50U291cmNlVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50U291cmNlVHJhbnNwb3J0O1xuXG59LHtcIi4vbGliL2FqYXgtYmFzZWRcIjoyNCxcIi4vcmVjZWl2ZXIvZXZlbnRzb3VyY2VcIjoyOSxcIi4vc2VuZGVyL3hoci1jb3JzXCI6MzUsXCJldmVudHNvdXJjZVwiOjE4LFwiaW5oZXJpdHNcIjo1N31dLDIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEh0bWxmaWxlUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL2h0bWxmaWxlJylcbiAgLCBYSFJMb2NhbE9iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hoci1sb2NhbCcpXG4gICwgQWpheEJhc2VkVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi9saWIvYWpheC1iYXNlZCcpXG4gIDtcblxuZnVuY3Rpb24gSHRtbEZpbGVUcmFuc3BvcnQodHJhbnNVcmwpIHtcbiAgaWYgKCFIdG1sZmlsZVJlY2VpdmVyLmVuYWJsZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBBamF4QmFzZWRUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy9odG1sZmlsZScsIEh0bWxmaWxlUmVjZWl2ZXIsIFhIUkxvY2FsT2JqZWN0KTtcbn1cblxuaW5oZXJpdHMoSHRtbEZpbGVUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cbkh0bWxGaWxlVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbihpbmZvKSB7XG4gIHJldHVybiBIdG1sZmlsZVJlY2VpdmVyLmVuYWJsZWQgJiYgaW5mby5zYW1lT3JpZ2luO1xufTtcblxuSHRtbEZpbGVUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICdodG1sZmlsZSc7XG5IdG1sRmlsZVRyYW5zcG9ydC5yb3VuZFRyaXBzID0gMjtcblxubW9kdWxlLmV4cG9ydHMgPSBIdG1sRmlsZVRyYW5zcG9ydDtcblxufSx7XCIuL2xpYi9hamF4LWJhc2VkXCI6MjQsXCIuL3JlY2VpdmVyL2h0bWxmaWxlXCI6MzAsXCIuL3NlbmRlci94aHItbG9jYWxcIjozNyxcImluaGVyaXRzXCI6NTd9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBGZXcgY29vbCB0cmFuc3BvcnRzIGRvIHdvcmsgb25seSBmb3Igc2FtZS1vcmlnaW4uIEluIG9yZGVyIHRvIG1ha2Vcbi8vIHRoZW0gd29yayBjcm9zcy1kb21haW4gd2Ugc2hhbGwgdXNlIGlmcmFtZSwgc2VydmVkIGZyb20gdGhlXG4vLyByZW1vdGUgZG9tYWluLiBOZXcgYnJvd3NlcnMgaGF2ZSBjYXBhYmlsaXRpZXMgdG8gY29tbXVuaWNhdGUgd2l0aFxuLy8gY3Jvc3MgZG9tYWluIGlmcmFtZSB1c2luZyBwb3N0TWVzc2FnZSgpLiBJbiBJRSBpdCB3YXMgaW1wbGVtZW50ZWRcbi8vIGZyb20gSUUgOCssIGJ1dCBvZiBjb3Vyc2UsIElFIGdvdCBzb21lIGRldGFpbHMgd3Jvbmc6XG4vLyAgICBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvY2MxOTcwMTUodj1WUy44NSkuYXNweFxuLy8gICAgaHR0cDovL3N0ZXZlc291ZGVycy5jb20vbWlzYy90ZXN0LXBvc3RtZXNzYWdlLnBocFxuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgSlNPTjMgPSByZXF1aXJlKCdqc29uMycpXG4gICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgdmVyc2lvbiA9IHJlcXVpcmUoJy4uL3ZlcnNpb24nKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXJsJylcbiAgLCBpZnJhbWVVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2lmcmFtZScpXG4gICwgZXZlbnRVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2V2ZW50JylcbiAgLCByYW5kb20gPSByZXF1aXJlKCcuLi91dGlscy9yYW5kb20nKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6dHJhbnNwb3J0OmlmcmFtZScpO1xufVxuXG5mdW5jdGlvbiBJZnJhbWVUcmFuc3BvcnQodHJhbnNwb3J0LCB0cmFuc1VybCwgYmFzZVVybCkge1xuICBpZiAoIUlmcmFtZVRyYW5zcG9ydC5lbmFibGVkKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMub3JpZ2luID0gdXJsVXRpbHMuZ2V0T3JpZ2luKGJhc2VVcmwpO1xuICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICB0aGlzLnRyYW5zVXJsID0gdHJhbnNVcmw7XG4gIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICB0aGlzLndpbmRvd0lkID0gcmFuZG9tLnN0cmluZyg4KTtcblxuICB2YXIgaWZyYW1lVXJsID0gdXJsVXRpbHMuYWRkUGF0aChiYXNlVXJsLCAnL2lmcmFtZS5odG1sJykgKyAnIycgKyB0aGlzLndpbmRvd0lkO1xuICBkZWJ1Zyh0cmFuc3BvcnQsIHRyYW5zVXJsLCBpZnJhbWVVcmwpO1xuXG4gIHRoaXMuaWZyYW1lT2JqID0gaWZyYW1lVXRpbHMuY3JlYXRlSWZyYW1lKGlmcmFtZVVybCwgZnVuY3Rpb24ocikge1xuICAgIGRlYnVnKCdlcnIgY2FsbGJhY2snKTtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgMTAwNiwgJ1VuYWJsZSB0byBsb2FkIGFuIGlmcmFtZSAoJyArIHIgKyAnKScpO1xuICAgIHNlbGYuY2xvc2UoKTtcbiAgfSk7XG5cbiAgdGhpcy5vbm1lc3NhZ2VDYWxsYmFjayA9IHRoaXMuX21lc3NhZ2UuYmluZCh0aGlzKTtcbiAgZXZlbnRVdGlscy5hdHRhY2hFdmVudCgnbWVzc2FnZScsIHRoaXMub25tZXNzYWdlQ2FsbGJhY2spO1xufVxuXG5pbmhlcml0cyhJZnJhbWVUcmFuc3BvcnQsIEV2ZW50RW1pdHRlcik7XG5cbklmcmFtZVRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIGlmICh0aGlzLmlmcmFtZU9iaikge1xuICAgIGV2ZW50VXRpbHMuZGV0YWNoRXZlbnQoJ21lc3NhZ2UnLCB0aGlzLm9ubWVzc2FnZUNhbGxiYWNrKTtcbiAgICB0cnkge1xuICAgICAgLy8gV2hlbiB0aGUgaWZyYW1lIGlzIG5vdCBsb2FkZWQsIElFIHJhaXNlcyBhbiBleGNlcHRpb25cbiAgICAgIC8vIG9uICdjb250ZW50V2luZG93Jy5cbiAgICAgIHRoaXMucG9zdE1lc3NhZ2UoJ2MnKTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgfVxuICAgIHRoaXMuaWZyYW1lT2JqLmNsZWFudXAoKTtcbiAgICB0aGlzLmlmcmFtZU9iaiA9IG51bGw7XG4gICAgdGhpcy5vbm1lc3NhZ2VDYWxsYmFjayA9IHRoaXMuaWZyYW1lT2JqID0gbnVsbDtcbiAgfVxufTtcblxuSWZyYW1lVHJhbnNwb3J0LnByb3RvdHlwZS5fbWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcbiAgZGVidWcoJ21lc3NhZ2UnLCBlLmRhdGEpO1xuICBpZiAoIXVybFV0aWxzLmlzT3JpZ2luRXF1YWwoZS5vcmlnaW4sIHRoaXMub3JpZ2luKSkge1xuICAgIGRlYnVnKCdub3Qgc2FtZSBvcmlnaW4nLCBlLm9yaWdpbiwgdGhpcy5vcmlnaW4pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpZnJhbWVNZXNzYWdlO1xuICB0cnkge1xuICAgIGlmcmFtZU1lc3NhZ2UgPSBKU09OMy5wYXJzZShlLmRhdGEpO1xuICB9IGNhdGNoIChpZ25vcmVkKSB7XG4gICAgZGVidWcoJ2JhZCBqc29uJywgZS5kYXRhKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaWZyYW1lTWVzc2FnZS53aW5kb3dJZCAhPT0gdGhpcy53aW5kb3dJZCkge1xuICAgIGRlYnVnKCdtaXNtYXRjaGVkIHdpbmRvdyBpZCcsIGlmcmFtZU1lc3NhZ2Uud2luZG93SWQsIHRoaXMud2luZG93SWQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN3aXRjaCAoaWZyYW1lTWVzc2FnZS50eXBlKSB7XG4gIGNhc2UgJ3MnOlxuICAgIHRoaXMuaWZyYW1lT2JqLmxvYWRlZCgpO1xuICAgIC8vIHdpbmRvdyBnbG9iYWwgZGVwZW5kZW5jeVxuICAgIHRoaXMucG9zdE1lc3NhZ2UoJ3MnLCBKU09OMy5zdHJpbmdpZnkoW1xuICAgICAgdmVyc2lvblxuICAgICwgdGhpcy50cmFuc3BvcnRcbiAgICAsIHRoaXMudHJhbnNVcmxcbiAgICAsIHRoaXMuYmFzZVVybFxuICAgIF0pKTtcbiAgICBicmVhaztcbiAgY2FzZSAndCc6XG4gICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICBicmVhaztcbiAgY2FzZSAnYyc6XG4gICAgdmFyIGNkYXRhO1xuICAgIHRyeSB7XG4gICAgICBjZGF0YSA9IEpTT04zLnBhcnNlKGlmcmFtZU1lc3NhZ2UuZGF0YSk7XG4gICAgfSBjYXRjaCAoaWdub3JlZCkge1xuICAgICAgZGVidWcoJ2JhZCBqc29uJywgaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIGNkYXRhWzBdLCBjZGF0YVsxXSk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICAgIGJyZWFrO1xuICB9XG59O1xuXG5JZnJhbWVUcmFuc3BvcnQucHJvdG90eXBlLnBvc3RNZXNzYWdlID0gZnVuY3Rpb24odHlwZSwgZGF0YSkge1xuICBkZWJ1ZygncG9zdE1lc3NhZ2UnLCB0eXBlLCBkYXRhKTtcbiAgdGhpcy5pZnJhbWVPYmoucG9zdChKU09OMy5zdHJpbmdpZnkoe1xuICAgIHdpbmRvd0lkOiB0aGlzLndpbmRvd0lkXG4gICwgdHlwZTogdHlwZVxuICAsIGRhdGE6IGRhdGEgfHwgJydcbiAgfSksIHRoaXMub3JpZ2luKTtcbn07XG5cbklmcmFtZVRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgZGVidWcoJ3NlbmQnLCBtZXNzYWdlKTtcbiAgdGhpcy5wb3N0TWVzc2FnZSgnbScsIG1lc3NhZ2UpO1xufTtcblxuSWZyYW1lVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGlmcmFtZVV0aWxzLmlmcmFtZUVuYWJsZWQ7XG59O1xuXG5JZnJhbWVUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICdpZnJhbWUnO1xuSWZyYW1lVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IElmcmFtZVRyYW5zcG9ydDtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9KVxuXG59LHtcIi4uL3V0aWxzL2V2ZW50XCI6NDYsXCIuLi91dGlscy9pZnJhbWVcIjo0NyxcIi4uL3V0aWxzL3JhbmRvbVwiOjUwLFwiLi4vdXRpbHMvdXJsXCI6NTIsXCIuLi92ZXJzaW9uXCI6NTMsXCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTcsXCJqc29uM1wiOjU4fV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGUgc2ltcGxlc3QgYW5kIG1vc3Qgcm9idXN0IHRyYW5zcG9ydCwgdXNpbmcgdGhlIHdlbGwta25vdyBjcm9zc1xuLy8gZG9tYWluIGhhY2sgLSBKU09OUC4gVGhpcyB0cmFuc3BvcnQgaXMgcXVpdGUgaW5lZmZpY2llbnQgLSBvbmVcbi8vIG1lc3NhZ2UgY291bGQgdXNlIHVwIHRvIG9uZSBodHRwIHJlcXVlc3QuIEJ1dCBhdCBsZWFzdCBpdCB3b3JrcyBhbG1vc3Rcbi8vIGV2ZXJ5d2hlcmUuXG4vLyBLbm93biBsaW1pdGF0aW9uczpcbi8vICAgbyB5b3Ugd2lsbCBnZXQgYSBzcGlubmluZyBjdXJzb3Jcbi8vICAgbyBmb3IgS29ucXVlcm9yIGEgZHVtYiB0aW1lciBpcyBuZWVkZWQgdG8gZGV0ZWN0IGVycm9yc1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgU2VuZGVyUmVjZWl2ZXIgPSByZXF1aXJlKCcuL2xpYi9zZW5kZXItcmVjZWl2ZXInKVxuICAsIEpzb25wUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL2pzb25wJylcbiAgLCBqc29ucFNlbmRlciA9IHJlcXVpcmUoJy4vc2VuZGVyL2pzb25wJylcbiAgO1xuXG5mdW5jdGlvbiBKc29uUFRyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIUpzb25QVHJhbnNwb3J0LmVuYWJsZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG4gIFNlbmRlclJlY2VpdmVyLmNhbGwodGhpcywgdHJhbnNVcmwsICcvanNvbnAnLCBqc29ucFNlbmRlciwgSnNvbnBSZWNlaXZlcik7XG59XG5cbmluaGVyaXRzKEpzb25QVHJhbnNwb3J0LCBTZW5kZXJSZWNlaXZlcik7XG5cbkpzb25QVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICEhZ2xvYmFsLmRvY3VtZW50O1xufTtcblxuSnNvblBUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICdqc29ucC1wb2xsaW5nJztcbkpzb25QVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAxO1xuSnNvblBUcmFuc3BvcnQubmVlZEJvZHkgPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpzb25QVHJhbnNwb3J0O1xuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7XCIuL2xpYi9zZW5kZXItcmVjZWl2ZXJcIjoyOCxcIi4vcmVjZWl2ZXIvanNvbnBcIjozMSxcIi4vc2VuZGVyL2pzb25wXCI6MzMsXCJpbmhlcml0c1wiOjU3fV0sMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgLCBTZW5kZXJSZWNlaXZlciA9IHJlcXVpcmUoJy4vc2VuZGVyLXJlY2VpdmVyJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OmFqYXgtYmFzZWQnKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQWpheFNlbmRlcihBamF4T2JqZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbih1cmwsIHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgZGVidWcoJ2NyZWF0ZSBhamF4IHNlbmRlcicsIHVybCwgcGF5bG9hZCk7XG4gICAgdmFyIG9wdCA9IHt9O1xuICAgIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdC5oZWFkZXJzID0geydDb250ZW50LXR5cGUnOiAndGV4dC9wbGFpbid9O1xuICAgIH1cbiAgICB2YXIgYWpheFVybCA9IHVybFV0aWxzLmFkZFBhdGgodXJsLCAnL3hocl9zZW5kJyk7XG4gICAgdmFyIHhvID0gbmV3IEFqYXhPYmplY3QoJ1BPU1QnLCBhamF4VXJsLCBwYXlsb2FkLCBvcHQpO1xuICAgIHhvLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgZGVidWcoJ2ZpbmlzaCcsIHN0YXR1cyk7XG4gICAgICB4byA9IG51bGw7XG5cbiAgICAgIGlmIChzdGF0dXMgIT09IDIwMCAmJiBzdGF0dXMgIT09IDIwNCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCdodHRwIHN0YXR1cyAnICsgc3RhdHVzKSk7XG4gICAgICB9XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdhYm9ydCcpO1xuICAgICAgeG8uY2xvc2UoKTtcbiAgICAgIHhvID0gbnVsbDtcblxuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignQWJvcnRlZCcpO1xuICAgICAgZXJyLmNvZGUgPSAxMDAwO1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBBamF4QmFzZWRUcmFuc3BvcnQodHJhbnNVcmwsIHVybFN1ZmZpeCwgUmVjZWl2ZXIsIEFqYXhPYmplY3QpIHtcbiAgU2VuZGVyUmVjZWl2ZXIuY2FsbCh0aGlzLCB0cmFuc1VybCwgdXJsU3VmZml4LCBjcmVhdGVBamF4U2VuZGVyKEFqYXhPYmplY3QpLCBSZWNlaXZlciwgQWpheE9iamVjdCk7XG59XG5cbmluaGVyaXRzKEFqYXhCYXNlZFRyYW5zcG9ydCwgU2VuZGVyUmVjZWl2ZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFqYXhCYXNlZFRyYW5zcG9ydDtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9KVxuXG59LHtcIi4uLy4uL3V0aWxzL3VybFwiOjUyLFwiLi9zZW5kZXItcmVjZWl2ZXJcIjoyOCxcImRlYnVnXCI6NTUsXCJpbmhlcml0c1wiOjU3fV0sMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6YnVmZmVyZWQtc2VuZGVyJyk7XG59XG5cbmZ1bmN0aW9uIEJ1ZmZlcmVkU2VuZGVyKHVybCwgc2VuZGVyKSB7XG4gIGRlYnVnKHVybCk7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgdGhpcy5zZW5kZXIgPSBzZW5kZXI7XG4gIHRoaXMudXJsID0gdXJsO1xufVxuXG5pbmhlcml0cyhCdWZmZXJlZFNlbmRlciwgRXZlbnRFbWl0dGVyKTtcblxuQnVmZmVyZWRTZW5kZXIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gIGRlYnVnKCdzZW5kJywgbWVzc2FnZSk7XG4gIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKG1lc3NhZ2UpO1xuICBpZiAoIXRoaXMuc2VuZFN0b3ApIHtcbiAgICB0aGlzLnNlbmRTY2hlZHVsZSgpO1xuICB9XG59O1xuXG4vLyBGb3IgcG9sbGluZyB0cmFuc3BvcnRzIGluIGEgc2l0dWF0aW9uIHdoZW4gaW4gdGhlIG1lc3NhZ2UgY2FsbGJhY2ssXG4vLyBuZXcgbWVzc2FnZSBpcyBiZWluZyBzZW5kLiBJZiB0aGUgc2VuZGluZyBjb25uZWN0aW9uIHdhcyBzdGFydGVkXG4vLyBiZWZvcmUgcmVjZWl2aW5nIG9uZSwgaXQgaXMgcG9zc2libGUgdG8gc2F0dXJhdGUgdGhlIG5ldHdvcmsgYW5kXG4vLyB0aW1lb3V0IGR1ZSB0byB0aGUgbGFjayBvZiByZWNlaXZpbmcgc29ja2V0LiBUbyBhdm9pZCB0aGF0IHdlIGRlbGF5XG4vLyBzZW5kaW5nIG1lc3NhZ2VzIGJ5IHNvbWUgc21hbGwgdGltZSwgaW4gb3JkZXIgdG8gbGV0IHJlY2VpdmluZ1xuLy8gY29ubmVjdGlvbiBiZSBzdGFydGVkIGJlZm9yZWhhbmQuIFRoaXMgaXMgb25seSBhIGhhbGZtZWFzdXJlIGFuZFxuLy8gZG9lcyBub3QgZml4IHRoZSBiaWcgcHJvYmxlbSwgYnV0IGl0IGRvZXMgbWFrZSB0aGUgdGVzdHMgZ28gbW9yZVxuLy8gc3RhYmxlIG9uIHNsb3cgbmV0d29ya3MuXG5CdWZmZXJlZFNlbmRlci5wcm90b3R5cGUuc2VuZFNjaGVkdWxlV2FpdCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1Zygnc2VuZFNjaGVkdWxlV2FpdCcpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB0cmVmO1xuICB0aGlzLnNlbmRTdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ3NlbmRTdG9wJyk7XG4gICAgc2VsZi5zZW5kU3RvcCA9IG51bGw7XG4gICAgY2xlYXJUaW1lb3V0KHRyZWYpO1xuICB9O1xuICB0cmVmID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygndGltZW91dCcpO1xuICAgIHNlbGYuc2VuZFN0b3AgPSBudWxsO1xuICAgIHNlbGYuc2VuZFNjaGVkdWxlKCk7XG4gIH0sIDI1KTtcbn07XG5cbkJ1ZmZlcmVkU2VuZGVyLnByb3RvdHlwZS5zZW5kU2NoZWR1bGUgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ3NlbmRTY2hlZHVsZScsIHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGgpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmICh0aGlzLnNlbmRCdWZmZXIubGVuZ3RoID4gMCkge1xuICAgIHZhciBwYXlsb2FkID0gJ1snICsgdGhpcy5zZW5kQnVmZmVyLmpvaW4oJywnKSArICddJztcbiAgICB0aGlzLnNlbmRTdG9wID0gdGhpcy5zZW5kZXIodGhpcy51cmwsIHBheWxvYWQsIGZ1bmN0aW9uKGVycikge1xuICAgICAgc2VsZi5zZW5kU3RvcCA9IG51bGw7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGRlYnVnKCdlcnJvcicsIGVycik7XG4gICAgICAgIHNlbGYuZW1pdCgnY2xvc2UnLCBlcnIuY29kZSB8fCAxMDA2LCAnU2VuZGluZyBlcnJvcjogJyArIGVycik7XG4gICAgICAgIHNlbGYuY2xvc2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuc2VuZFNjaGVkdWxlV2FpdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICB9XG59O1xuXG5CdWZmZXJlZFNlbmRlci5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19jbGVhbnVwJyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5CdWZmZXJlZFNlbmRlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMuX2NsZWFudXAoKTtcbiAgaWYgKHRoaXMuc2VuZFN0b3ApIHtcbiAgICB0aGlzLnNlbmRTdG9wKCk7XG4gICAgdGhpcy5zZW5kU3RvcCA9IG51bGw7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyZWRTZW5kZXI7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSlcblxufSx7XCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTd9XSwyNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBJZnJhbWVUcmFuc3BvcnQgPSByZXF1aXJlKCcuLi9pZnJhbWUnKVxuICAsIG9iamVjdFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvb2JqZWN0JylcbiAgO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRyYW5zcG9ydCkge1xuXG4gIGZ1bmN0aW9uIElmcmFtZVdyYXBUcmFuc3BvcnQodHJhbnNVcmwsIGJhc2VVcmwpIHtcbiAgICBJZnJhbWVUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc3BvcnQudHJhbnNwb3J0TmFtZSwgdHJhbnNVcmwsIGJhc2VVcmwpO1xuICB9XG5cbiAgaW5oZXJpdHMoSWZyYW1lV3JhcFRyYW5zcG9ydCwgSWZyYW1lVHJhbnNwb3J0KTtcblxuICBJZnJhbWVXcmFwVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbih1cmwsIGluZm8pIHtcbiAgICBpZiAoIWdsb2JhbC5kb2N1bWVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBpZnJhbWVJbmZvID0gb2JqZWN0VXRpbHMuZXh0ZW5kKHt9LCBpbmZvKTtcbiAgICBpZnJhbWVJbmZvLnNhbWVPcmlnaW4gPSB0cnVlO1xuICAgIHJldHVybiB0cmFuc3BvcnQuZW5hYmxlZChpZnJhbWVJbmZvKSAmJiBJZnJhbWVUcmFuc3BvcnQuZW5hYmxlZCgpO1xuICB9O1xuXG4gIElmcmFtZVdyYXBUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICdpZnJhbWUtJyArIHRyYW5zcG9ydC50cmFuc3BvcnROYW1lO1xuICBJZnJhbWVXcmFwVHJhbnNwb3J0Lm5lZWRCb2R5ID0gdHJ1ZTtcbiAgSWZyYW1lV3JhcFRyYW5zcG9ydC5yb3VuZFRyaXBzID0gSWZyYW1lVHJhbnNwb3J0LnJvdW5kVHJpcHMgKyB0cmFuc3BvcnQucm91bmRUcmlwcyAtIDE7IC8vIGh0bWwsIGphdmFzY3JpcHQgKDIpICsgdHJhbnNwb3J0IC0gbm8gQ09SUyAoMSlcblxuICBJZnJhbWVXcmFwVHJhbnNwb3J0LmZhY2FkZVRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcblxuICByZXR1cm4gSWZyYW1lV3JhcFRyYW5zcG9ydDtcbn07XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4uLy4uL3V0aWxzL29iamVjdFwiOjQ5LFwiLi4vaWZyYW1lXCI6MjIsXCJpbmhlcml0c1wiOjU3fV0sMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6cG9sbGluZycpO1xufVxuXG5mdW5jdGlvbiBQb2xsaW5nKFJlY2VpdmVyLCByZWNlaXZlVXJsLCBBamF4T2JqZWN0KSB7XG4gIGRlYnVnKHJlY2VpdmVVcmwpO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcbiAgdGhpcy5SZWNlaXZlciA9IFJlY2VpdmVyO1xuICB0aGlzLnJlY2VpdmVVcmwgPSByZWNlaXZlVXJsO1xuICB0aGlzLkFqYXhPYmplY3QgPSBBamF4T2JqZWN0O1xuICB0aGlzLl9zY2hlZHVsZVJlY2VpdmVyKCk7XG59XG5cbmluaGVyaXRzKFBvbGxpbmcsIEV2ZW50RW1pdHRlcik7XG5cblBvbGxpbmcucHJvdG90eXBlLl9zY2hlZHVsZVJlY2VpdmVyID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfc2NoZWR1bGVSZWNlaXZlcicpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBwb2xsID0gdGhpcy5wb2xsID0gbmV3IHRoaXMuUmVjZWl2ZXIodGhpcy5yZWNlaXZlVXJsLCB0aGlzLkFqYXhPYmplY3QpO1xuXG4gIHBvbGwub24oJ21lc3NhZ2UnLCBmdW5jdGlvbihtc2cpIHtcbiAgICBkZWJ1ZygnbWVzc2FnZScsIG1zZyk7XG4gICAgc2VsZi5lbWl0KCdtZXNzYWdlJywgbXNnKTtcbiAgfSk7XG5cbiAgcG9sbC5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uKGNvZGUsIHJlYXNvbikge1xuICAgIGRlYnVnKCdjbG9zZScsIGNvZGUsIHJlYXNvbiwgc2VsZi5wb2xsSXNDbG9zaW5nKTtcbiAgICBzZWxmLnBvbGwgPSBwb2xsID0gbnVsbDtcblxuICAgIGlmICghc2VsZi5wb2xsSXNDbG9zaW5nKSB7XG4gICAgICBpZiAocmVhc29uID09PSAnbmV0d29yaycpIHtcbiAgICAgICAgc2VsZi5fc2NoZWR1bGVSZWNlaXZlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5lbWl0KCdjbG9zZScsIGNvZGUgfHwgMTAwNiwgcmVhc29uKTtcbiAgICAgICAgc2VsZi5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuUG9sbGluZy5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Fib3J0Jyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHRoaXMucG9sbElzQ2xvc2luZyA9IHRydWU7XG4gIGlmICh0aGlzLnBvbGwpIHtcbiAgICB0aGlzLnBvbGwuYWJvcnQoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3fV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgLCBCdWZmZXJlZFNlbmRlciA9IHJlcXVpcmUoJy4vYnVmZmVyZWQtc2VuZGVyJylcbiAgLCBQb2xsaW5nID0gcmVxdWlyZSgnLi9wb2xsaW5nJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnNlbmRlci1yZWNlaXZlcicpO1xufVxuXG5mdW5jdGlvbiBTZW5kZXJSZWNlaXZlcih0cmFuc1VybCwgdXJsU3VmZml4LCBzZW5kZXJGdW5jLCBSZWNlaXZlciwgQWpheE9iamVjdCkge1xuICB2YXIgcG9sbFVybCA9IHVybFV0aWxzLmFkZFBhdGgodHJhbnNVcmwsIHVybFN1ZmZpeCk7XG4gIGRlYnVnKHBvbGxVcmwpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIEJ1ZmZlcmVkU2VuZGVyLmNhbGwodGhpcywgdHJhbnNVcmwsIHNlbmRlckZ1bmMpO1xuXG4gIHRoaXMucG9sbCA9IG5ldyBQb2xsaW5nKFJlY2VpdmVyLCBwb2xsVXJsLCBBamF4T2JqZWN0KTtcbiAgdGhpcy5wb2xsLm9uKCdtZXNzYWdlJywgZnVuY3Rpb24obXNnKSB7XG4gICAgZGVidWcoJ3BvbGwgbWVzc2FnZScsIG1zZyk7XG4gICAgc2VsZi5lbWl0KCdtZXNzYWdlJywgbXNnKTtcbiAgfSk7XG4gIHRoaXMucG9sbC5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uKGNvZGUsIHJlYXNvbikge1xuICAgIGRlYnVnKCdwb2xsIGNsb3NlJywgY29kZSwgcmVhc29uKTtcbiAgICBzZWxmLnBvbGwgPSBudWxsO1xuICAgIHNlbGYuZW1pdCgnY2xvc2UnLCBjb2RlLCByZWFzb24pO1xuICAgIHNlbGYuY2xvc2UoKTtcbiAgfSk7XG59XG5cbmluaGVyaXRzKFNlbmRlclJlY2VpdmVyLCBCdWZmZXJlZFNlbmRlcik7XG5cblNlbmRlclJlY2VpdmVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBCdWZmZXJlZFNlbmRlci5wcm90b3R5cGUuY2xvc2UuY2FsbCh0aGlzKTtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIGlmICh0aGlzLnBvbGwpIHtcbiAgICB0aGlzLnBvbGwuYWJvcnQoKTtcbiAgICB0aGlzLnBvbGwgPSBudWxsO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbmRlclJlY2VpdmVyO1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiLi4vLi4vdXRpbHMvdXJsXCI6NTIsXCIuL2J1ZmZlcmVkLXNlbmRlclwiOjI1LFwiLi9wb2xsaW5nXCI6MjcsXCJkZWJ1Z1wiOjU1LFwiaW5oZXJpdHNcIjo1N31dLDI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBFdmVudFNvdXJjZURyaXZlciA9IHJlcXVpcmUoJ2V2ZW50c291cmNlJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnJlY2VpdmVyOmV2ZW50c291cmNlJyk7XG59XG5cbmZ1bmN0aW9uIEV2ZW50U291cmNlUmVjZWl2ZXIodXJsKSB7XG4gIGRlYnVnKHVybCk7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGVzID0gdGhpcy5lcyA9IG5ldyBFdmVudFNvdXJjZURyaXZlcih1cmwpO1xuICBlcy5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgZGVidWcoJ21lc3NhZ2UnLCBlLmRhdGEpO1xuICAgIHNlbGYuZW1pdCgnbWVzc2FnZScsIGRlY29kZVVSSShlLmRhdGEpKTtcbiAgfTtcbiAgZXMub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcbiAgICBkZWJ1ZygnZXJyb3InLCBlcy5yZWFkeVN0YXRlLCBlKTtcbiAgICAvLyBFUyBvbiByZWNvbm5lY3Rpb24gaGFzIHJlYWR5U3RhdGUgPSAwIG9yIDEuXG4gICAgLy8gb24gbmV0d29yayBlcnJvciBpdCdzIENMT1NFRCA9IDJcbiAgICB2YXIgcmVhc29uID0gKGVzLnJlYWR5U3RhdGUgIT09IDIgPyAnbmV0d29yaycgOiAncGVybWFuZW50Jyk7XG4gICAgc2VsZi5fY2xlYW51cCgpO1xuICAgIHNlbGYuX2Nsb3NlKHJlYXNvbik7XG4gIH07XG59XG5cbmluaGVyaXRzKEV2ZW50U291cmNlUmVjZWl2ZXIsIEV2ZW50RW1pdHRlcik7XG5cbkV2ZW50U291cmNlUmVjZWl2ZXIucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdhYm9ydCcpO1xuICB0aGlzLl9jbGVhbnVwKCk7XG4gIHRoaXMuX2Nsb3NlKCd1c2VyJyk7XG59O1xuXG5FdmVudFNvdXJjZVJlY2VpdmVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuICB2YXIgZXMgPSB0aGlzLmVzO1xuICBpZiAoZXMpIHtcbiAgICBlcy5vbm1lc3NhZ2UgPSBlcy5vbmVycm9yID0gbnVsbDtcbiAgICBlcy5jbG9zZSgpO1xuICAgIHRoaXMuZXMgPSBudWxsO1xuICB9XG59O1xuXG5FdmVudFNvdXJjZVJlY2VpdmVyLnByb3RvdHlwZS5fY2xvc2UgPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgZGVidWcoJ2Nsb3NlJywgcmVhc29uKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICAvLyBTYWZhcmkgYW5kIGNocm9tZSA8IDE1IGNyYXNoIGlmIHdlIGNsb3NlIHdpbmRvdyBiZWZvcmVcbiAgLy8gd2FpdGluZyBmb3IgRVMgY2xlYW51cC4gU2VlOlxuICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODkxNTVcbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgbnVsbCwgcmVhc29uKTtcbiAgICBzZWxmLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9LCAyMDApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFNvdXJjZVJlY2VpdmVyO1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJldmVudHNvdXJjZVwiOjE4LFwiaW5oZXJpdHNcIjo1N31dLDMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgaWZyYW1lVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9pZnJhbWUnKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCByYW5kb20gPSByZXF1aXJlKCcuLi8uLi91dGlscy9yYW5kb20nKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6cmVjZWl2ZXI6aHRtbGZpbGUnKTtcbn1cblxuZnVuY3Rpb24gSHRtbGZpbGVSZWNlaXZlcih1cmwpIHtcbiAgZGVidWcodXJsKTtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWZyYW1lVXRpbHMucG9sbHV0ZUdsb2JhbE5hbWVzcGFjZSgpO1xuXG4gIHRoaXMuaWQgPSAnYScgKyByYW5kb20uc3RyaW5nKDYpO1xuICB1cmwgPSB1cmxVdGlscy5hZGRRdWVyeSh1cmwsICdjPScgKyBkZWNvZGVVUklDb21wb25lbnQoaWZyYW1lVXRpbHMuV1ByZWZpeCArICcuJyArIHRoaXMuaWQpKTtcblxuICBkZWJ1ZygndXNpbmcgaHRtbGZpbGUnLCBIdG1sZmlsZVJlY2VpdmVyLmh0bWxmaWxlRW5hYmxlZCk7XG4gIHZhciBjb25zdHJ1Y3RGdW5jID0gSHRtbGZpbGVSZWNlaXZlci5odG1sZmlsZUVuYWJsZWQgP1xuICAgICAgaWZyYW1lVXRpbHMuY3JlYXRlSHRtbGZpbGUgOiBpZnJhbWVVdGlscy5jcmVhdGVJZnJhbWU7XG5cbiAgZ2xvYmFsW2lmcmFtZVV0aWxzLldQcmVmaXhdW3RoaXMuaWRdID0ge1xuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdzdGFydCcpO1xuICAgICAgc2VsZi5pZnJhbWVPYmoubG9hZGVkKCk7XG4gICAgfVxuICAsIG1lc3NhZ2U6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGRlYnVnKCdtZXNzYWdlJywgZGF0YSk7XG4gICAgICBzZWxmLmVtaXQoJ21lc3NhZ2UnLCBkYXRhKTtcbiAgICB9XG4gICwgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICBkZWJ1Zygnc3RvcCcpO1xuICAgICAgc2VsZi5fY2xlYW51cCgpO1xuICAgICAgc2VsZi5fY2xvc2UoJ25ldHdvcmsnKTtcbiAgICB9XG4gIH07XG4gIHRoaXMuaWZyYW1lT2JqID0gY29uc3RydWN0RnVuYyh1cmwsIGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdjYWxsYmFjaycpO1xuICAgIHNlbGYuX2NsZWFudXAoKTtcbiAgICBzZWxmLl9jbG9zZSgncGVybWFuZW50Jyk7XG4gIH0pO1xufVxuXG5pbmhlcml0cyhIdG1sZmlsZVJlY2VpdmVyLCBFdmVudEVtaXR0ZXIpO1xuXG5IdG1sZmlsZVJlY2VpdmVyLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnYWJvcnQnKTtcbiAgdGhpcy5fY2xlYW51cCgpO1xuICB0aGlzLl9jbG9zZSgndXNlcicpO1xufTtcblxuSHRtbGZpbGVSZWNlaXZlci5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19jbGVhbnVwJyk7XG4gIGlmICh0aGlzLmlmcmFtZU9iaikge1xuICAgIHRoaXMuaWZyYW1lT2JqLmNsZWFudXAoKTtcbiAgICB0aGlzLmlmcmFtZU9iaiA9IG51bGw7XG4gIH1cbiAgZGVsZXRlIGdsb2JhbFtpZnJhbWVVdGlscy5XUHJlZml4XVt0aGlzLmlkXTtcbn07XG5cbkh0bWxmaWxlUmVjZWl2ZXIucHJvdG90eXBlLl9jbG9zZSA9IGZ1bmN0aW9uKHJlYXNvbikge1xuICBkZWJ1ZygnX2Nsb3NlJywgcmVhc29uKTtcbiAgdGhpcy5lbWl0KCdjbG9zZScsIG51bGwsIHJlYXNvbik7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5IdG1sZmlsZVJlY2VpdmVyLmh0bWxmaWxlRW5hYmxlZCA9IGZhbHNlO1xuXG4vLyBvYmZ1c2NhdGUgdG8gYXZvaWQgZmlyZXdhbGxzXG52YXIgYXhvID0gWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKTtcbmlmIChheG8gaW4gZ2xvYmFsKSB7XG4gIHRyeSB7XG4gICAgSHRtbGZpbGVSZWNlaXZlci5odG1sZmlsZUVuYWJsZWQgPSAhIW5ldyBnbG9iYWxbYXhvXSgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgfVxufVxuXG5IdG1sZmlsZVJlY2VpdmVyLmVuYWJsZWQgPSBIdG1sZmlsZVJlY2VpdmVyLmh0bWxmaWxlRW5hYmxlZCB8fCBpZnJhbWVVdGlscy5pZnJhbWVFbmFibGVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEh0bWxmaWxlUmVjZWl2ZXI7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4uLy4uL3V0aWxzL2lmcmFtZVwiOjQ3LFwiLi4vLi4vdXRpbHMvcmFuZG9tXCI6NTAsXCIuLi8uLi91dGlscy91cmxcIjo1MixcImRlYnVnXCI6NTUsXCJldmVudHNcIjozLFwiaW5oZXJpdHNcIjo1N31dLDMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9pZnJhbWUnKVxuICAsIHJhbmRvbSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3JhbmRvbScpXG4gICwgYnJvd3NlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2Jyb3dzZXInKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnJlY2VpdmVyOmpzb25wJyk7XG59XG5cbmZ1bmN0aW9uIEpzb25wUmVjZWl2ZXIodXJsKSB7XG4gIGRlYnVnKHVybCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgdXRpbHMucG9sbHV0ZUdsb2JhbE5hbWVzcGFjZSgpO1xuXG4gIHRoaXMuaWQgPSAnYScgKyByYW5kb20uc3RyaW5nKDYpO1xuICB2YXIgdXJsV2l0aElkID0gdXJsVXRpbHMuYWRkUXVlcnkodXJsLCAnYz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHV0aWxzLldQcmVmaXggKyAnLicgKyB0aGlzLmlkKSk7XG5cbiAgZ2xvYmFsW3V0aWxzLldQcmVmaXhdW3RoaXMuaWRdID0gdGhpcy5fY2FsbGJhY2suYmluZCh0aGlzKTtcbiAgdGhpcy5fY3JlYXRlU2NyaXB0KHVybFdpdGhJZCk7XG5cbiAgLy8gRmFsbGJhY2sgbW9zdGx5IGZvciBLb25xdWVyb3IgLSBzdHVwaWQgdGltZXIsIDM1IHNlY29uZHMgc2hhbGwgYmUgcGxlbnR5LlxuICB0aGlzLnRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ3RpbWVvdXQnKTtcbiAgICBzZWxmLl9hYm9ydChuZXcgRXJyb3IoJ0pTT05QIHNjcmlwdCBsb2FkZWQgYWJub3JtYWxseSAodGltZW91dCknKSk7XG4gIH0sIEpzb25wUmVjZWl2ZXIudGltZW91dCk7XG59XG5cbmluaGVyaXRzKEpzb25wUmVjZWl2ZXIsIEV2ZW50RW1pdHRlcik7XG5cbkpzb25wUmVjZWl2ZXIucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdhYm9ydCcpO1xuICBpZiAoZ2xvYmFsW3V0aWxzLldQcmVmaXhdW3RoaXMuaWRdKSB7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignSlNPTlAgdXNlciBhYm9ydGVkIHJlYWQnKTtcbiAgICBlcnIuY29kZSA9IDEwMDA7XG4gICAgdGhpcy5fYWJvcnQoZXJyKTtcbiAgfVxufTtcblxuSnNvbnBSZWNlaXZlci50aW1lb3V0ID0gMzUwMDA7XG5Kc29ucFJlY2VpdmVyLnNjcmlwdEVycm9yVGltZW91dCA9IDEwMDA7XG5cbkpzb25wUmVjZWl2ZXIucHJvdG90eXBlLl9jYWxsYmFjayA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgZGVidWcoJ19jYWxsYmFjaycsIGRhdGEpO1xuICB0aGlzLl9jbGVhbnVwKCk7XG5cbiAgaWYgKHRoaXMuYWJvcnRpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZGF0YSkge1xuICAgIGRlYnVnKCdtZXNzYWdlJywgZGF0YSk7XG4gICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgZGF0YSk7XG4gIH1cbiAgdGhpcy5lbWl0KCdjbG9zZScsIG51bGwsICduZXR3b3JrJyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5Kc29ucFJlY2VpdmVyLnByb3RvdHlwZS5fYWJvcnQgPSBmdW5jdGlvbihlcnIpIHtcbiAgZGVidWcoJ19hYm9ydCcsIGVycik7XG4gIHRoaXMuX2NsZWFudXAoKTtcbiAgdGhpcy5hYm9ydGluZyA9IHRydWU7XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCBlcnIuY29kZSwgZXJyLm1lc3NhZ2UpO1xuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcblxuSnNvbnBSZWNlaXZlci5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19jbGVhbnVwJyk7XG4gIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XG4gIGlmICh0aGlzLnNjcmlwdDIpIHtcbiAgICB0aGlzLnNjcmlwdDIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdDIpO1xuICAgIHRoaXMuc2NyaXB0MiA9IG51bGw7XG4gIH1cbiAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgdmFyIHNjcmlwdCA9IHRoaXMuc2NyaXB0O1xuICAgIC8vIFVuZm9ydHVuYXRlbHksIHlvdSBjYW4ndCByZWFsbHkgYWJvcnQgc2NyaXB0IGxvYWRpbmcgb2ZcbiAgICAvLyB0aGUgc2NyaXB0LlxuICAgIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHNjcmlwdC5vbmVycm9yID1cbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbmNsaWNrID0gbnVsbDtcbiAgICB0aGlzLnNjcmlwdCA9IG51bGw7XG4gIH1cbiAgZGVsZXRlIGdsb2JhbFt1dGlscy5XUHJlZml4XVt0aGlzLmlkXTtcbn07XG5cbkpzb25wUmVjZWl2ZXIucHJvdG90eXBlLl9zY3JpcHRFcnJvciA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnX3NjcmlwdEVycm9yJyk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWYgKHRoaXMuZXJyb3JUaW1lcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuZXJyb3JUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFzZWxmLmxvYWRlZE9rYXkpIHtcbiAgICAgIHNlbGYuX2Fib3J0KG5ldyBFcnJvcignSlNPTlAgc2NyaXB0IGxvYWRlZCBhYm5vcm1hbGx5IChvbmVycm9yKScpKTtcbiAgICB9XG4gIH0sIEpzb25wUmVjZWl2ZXIuc2NyaXB0RXJyb3JUaW1lb3V0KTtcbn07XG5cbkpzb25wUmVjZWl2ZXIucHJvdG90eXBlLl9jcmVhdGVTY3JpcHQgPSBmdW5jdGlvbih1cmwpIHtcbiAgZGVidWcoJ19jcmVhdGVTY3JpcHQnLCB1cmwpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzY3JpcHQgPSB0aGlzLnNjcmlwdCA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgdmFyIHNjcmlwdDI7ICAvLyBPcGVyYSBzeW5jaHJvbm91cyBsb2FkIHRyaWNrLlxuXG4gIHNjcmlwdC5pZCA9ICdhJyArIHJhbmRvbS5zdHJpbmcoOCk7XG4gIHNjcmlwdC5zcmMgPSB1cmw7XG4gIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gIHNjcmlwdC5jaGFyc2V0ID0gJ1VURi04JztcbiAgc2NyaXB0Lm9uZXJyb3IgPSB0aGlzLl9zY3JpcHRFcnJvci5iaW5kKHRoaXMpO1xuICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ29ubG9hZCcpO1xuICAgIHNlbGYuX2Fib3J0KG5ldyBFcnJvcignSlNPTlAgc2NyaXB0IGxvYWRlZCBhYm5vcm1hbGx5IChvbmxvYWQpJykpO1xuICB9O1xuXG4gIC8vIElFOSBmaXJlcyAnZXJyb3InIGV2ZW50IGFmdGVyIG9ucmVhZHlzdGF0ZWNoYW5nZSBvciBiZWZvcmUsIGluIHJhbmRvbSBvcmRlci5cbiAgLy8gVXNlIGxvYWRlZE9rYXkgdG8gZGV0ZXJtaW5lIGlmIGFjdHVhbGx5IGVycm9yZWRcbiAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdvbnJlYWR5c3RhdGVjaGFuZ2UnLCBzY3JpcHQucmVhZHlTdGF0ZSk7XG4gICAgaWYgKC9sb2FkZWR8Y2xvc2VkLy50ZXN0KHNjcmlwdC5yZWFkeVN0YXRlKSkge1xuICAgICAgaWYgKHNjcmlwdCAmJiBzY3JpcHQuaHRtbEZvciAmJiBzY3JpcHQub25jbGljaykge1xuICAgICAgICBzZWxmLmxvYWRlZE9rYXkgPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEluIElFLCBhY3R1YWxseSBleGVjdXRlIHRoZSBzY3JpcHQuXG4gICAgICAgICAgc2NyaXB0Lm9uY2xpY2soKTtcbiAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNjcmlwdCkge1xuICAgICAgICBzZWxmLl9hYm9ydChuZXcgRXJyb3IoJ0pTT05QIHNjcmlwdCBsb2FkZWQgYWJub3JtYWxseSAob25yZWFkeXN0YXRlY2hhbmdlKScpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIC8vIElFOiBldmVudC9odG1sRm9yL29uY2xpY2sgdHJpY2suXG4gIC8vIE9uZSBjYW4ndCByZWx5IG9uIHByb3BlciBvcmRlciBmb3Igb25yZWFkeXN0YXRlY2hhbmdlLiBJbiBvcmRlciB0b1xuICAvLyBtYWtlIHN1cmUsIHNldCBhICdodG1sRm9yJyBhbmQgJ2V2ZW50JyBwcm9wZXJ0aWVzLCBzbyB0aGF0XG4gIC8vIHNjcmlwdCBjb2RlIHdpbGwgYmUgaW5zdGFsbGVkIGFzICdvbmNsaWNrJyBoYW5kbGVyIGZvciB0aGVcbiAgLy8gc2NyaXB0IG9iamVjdC4gTGF0ZXIsIG9ucmVhZHlzdGF0ZWNoYW5nZSwgbWFudWFsbHkgZXhlY3V0ZSB0aGlzXG4gIC8vIGNvZGUuIEZGIGFuZCBDaHJvbWUgZG9lc24ndCB3b3JrIHdpdGggJ2V2ZW50JyBhbmQgJ2h0bWxGb3InXG4gIC8vIHNldC4gRm9yIHJlZmVyZW5jZSBzZWU6XG4gIC8vICAgaHR0cDovL2phdWJvdXJnLm5ldC8yMDEwLzA3L2xvYWRpbmctc2NyaXB0LWFzLW9uY2xpY2staGFuZGxlci1vZi5odG1sXG4gIC8vIEFsc28sIHJlYWQgb24gdGhhdCBhYm91dCBzY3JpcHQgb3JkZXJpbmc6XG4gIC8vICAgaHR0cDovL3dpa2kud2hhdHdnLm9yZy93aWtpL0R5bmFtaWNfU2NyaXB0X0V4ZWN1dGlvbl9PcmRlclxuICBpZiAodHlwZW9mIHNjcmlwdC5hc3luYyA9PT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsLmRvY3VtZW50LmF0dGFjaEV2ZW50KSB7XG4gICAgLy8gQWNjb3JkaW5nIHRvIG1vemlsbGEgZG9jcywgaW4gcmVjZW50IGJyb3dzZXJzIHNjcmlwdC5hc3luYyBkZWZhdWx0c1xuICAgIC8vIHRvICd0cnVlJywgc28gd2UgbWF5IHVzZSBpdCB0byBkZXRlY3QgYSBnb29kIGJyb3dzZXI6XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSFRNTC9FbGVtZW50L3NjcmlwdFxuICAgIGlmICghYnJvd3Nlci5pc09wZXJhKCkpIHtcbiAgICAgIC8vIE5haXZlbHkgYXNzdW1lIHdlJ3JlIGluIElFXG4gICAgICB0cnkge1xuICAgICAgICBzY3JpcHQuaHRtbEZvciA9IHNjcmlwdC5pZDtcbiAgICAgICAgc2NyaXB0LmV2ZW50ID0gJ29uY2xpY2snO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgICB9XG4gICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPcGVyYSwgc2Vjb25kIHN5bmMgc2NyaXB0IGhhY2tcbiAgICAgIHNjcmlwdDIgPSB0aGlzLnNjcmlwdDIgPSBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBzY3JpcHQyLnRleHQgPSBcInRyeXt2YXIgYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdcIiArIHNjcmlwdC5pZCArIFwiJyk7IGlmKGEpYS5vbmVycm9yKCk7fWNhdGNoKHgpe307XCI7XG4gICAgICBzY3JpcHQuYXN5bmMgPSBzY3JpcHQyLmFzeW5jID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2Ygc2NyaXB0LmFzeW5jICE9PSAndW5kZWZpbmVkJykge1xuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gIH1cblxuICB2YXIgaGVhZCA9IGdsb2JhbC5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICBoZWFkLmluc2VydEJlZm9yZShzY3JpcHQsIGhlYWQuZmlyc3RDaGlsZCk7XG4gIGlmIChzY3JpcHQyKSB7XG4gICAgaGVhZC5pbnNlcnRCZWZvcmUoc2NyaXB0MiwgaGVhZC5maXJzdENoaWxkKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBKc29ucFJlY2VpdmVyO1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0sdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7XCIuLi8uLi91dGlscy9icm93c2VyXCI6NDQsXCIuLi8uLi91dGlscy9pZnJhbWVcIjo0NyxcIi4uLy4uL3V0aWxzL3JhbmRvbVwiOjUwLFwiLi4vLi4vdXRpbHMvdXJsXCI6NTIsXCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTd9XSwzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpyZWNlaXZlcjp4aHInKTtcbn1cblxuZnVuY3Rpb24gWGhyUmVjZWl2ZXIodXJsLCBBamF4T2JqZWN0KSB7XG4gIGRlYnVnKHVybCk7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5idWZmZXJQb3NpdGlvbiA9IDA7XG5cbiAgdGhpcy54byA9IG5ldyBBamF4T2JqZWN0KCdQT1NUJywgdXJsLCBudWxsKTtcbiAgdGhpcy54by5vbignY2h1bmsnLCB0aGlzLl9jaHVua0hhbmRsZXIuYmluZCh0aGlzKSk7XG4gIHRoaXMueG8ub25jZSgnZmluaXNoJywgZnVuY3Rpb24oc3RhdHVzLCB0ZXh0KSB7XG4gICAgZGVidWcoJ2ZpbmlzaCcsIHN0YXR1cywgdGV4dCk7XG4gICAgc2VsZi5fY2h1bmtIYW5kbGVyKHN0YXR1cywgdGV4dCk7XG4gICAgc2VsZi54byA9IG51bGw7XG4gICAgdmFyIHJlYXNvbiA9IHN0YXR1cyA9PT0gMjAwID8gJ25ldHdvcmsnIDogJ3Blcm1hbmVudCc7XG4gICAgZGVidWcoJ2Nsb3NlJywgcmVhc29uKTtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgbnVsbCwgcmVhc29uKTtcbiAgICBzZWxmLl9jbGVhbnVwKCk7XG4gIH0pO1xufVxuXG5pbmhlcml0cyhYaHJSZWNlaXZlciwgRXZlbnRFbWl0dGVyKTtcblxuWGhyUmVjZWl2ZXIucHJvdG90eXBlLl9jaHVua0hhbmRsZXIgPSBmdW5jdGlvbihzdGF0dXMsIHRleHQpIHtcbiAgZGVidWcoJ19jaHVua0hhbmRsZXInLCBzdGF0dXMpO1xuICBpZiAoc3RhdHVzICE9PSAyMDAgfHwgIXRleHQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKHZhciBpZHggPSAtMTsgOyB0aGlzLmJ1ZmZlclBvc2l0aW9uICs9IGlkeCArIDEpIHtcbiAgICB2YXIgYnVmID0gdGV4dC5zbGljZSh0aGlzLmJ1ZmZlclBvc2l0aW9uKTtcbiAgICBpZHggPSBidWYuaW5kZXhPZignXFxuJyk7XG4gICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgbXNnID0gYnVmLnNsaWNlKDAsIGlkeCk7XG4gICAgaWYgKG1zZykge1xuICAgICAgZGVidWcoJ21lc3NhZ2UnLCBtc2cpO1xuICAgICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgbXNnKTtcbiAgICB9XG4gIH1cbn07XG5cblhoclJlY2VpdmVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnX2NsZWFudXAnKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG5cblhoclJlY2VpdmVyLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnYWJvcnQnKTtcbiAgaWYgKHRoaXMueG8pIHtcbiAgICB0aGlzLnhvLmNsb3NlKCk7XG4gICAgZGVidWcoJ2Nsb3NlJyk7XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIG51bGwsICd1c2VyJyk7XG4gICAgdGhpcy54byA9IG51bGw7XG4gIH1cbiAgdGhpcy5fY2xlYW51cCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBYaHJSZWNlaXZlcjtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9KVxuXG59LHtcImRlYnVnXCI6NTUsXCJldmVudHNcIjozLFwiaW5oZXJpdHNcIjo1N31dLDMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmFuZG9tID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvcmFuZG9tJylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3VybCcpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpzZW5kZXI6anNvbnAnKTtcbn1cblxudmFyIGZvcm0sIGFyZWE7XG5cbmZ1bmN0aW9uIGNyZWF0ZUlmcmFtZShpZCkge1xuICBkZWJ1ZygnY3JlYXRlSWZyYW1lJywgaWQpO1xuICB0cnkge1xuICAgIC8vIGllNiBkeW5hbWljIGlmcmFtZXMgd2l0aCB0YXJnZXQ9XCJcIiBzdXBwb3J0ICh0aGFua3MgQ2hyaXMgTGFtYmFjaGVyKVxuICAgIHJldHVybiBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnPGlmcmFtZSBuYW1lPVwiJyArIGlkICsgJ1wiPicpO1xuICB9IGNhdGNoICh4KSB7XG4gICAgdmFyIGlmcmFtZSA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICBpZnJhbWUubmFtZSA9IGlkO1xuICAgIHJldHVybiBpZnJhbWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRm9ybSgpIHtcbiAgZGVidWcoJ2NyZWF0ZUZvcm0nKTtcbiAgZm9ybSA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gIGZvcm0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIGZvcm0ubWV0aG9kID0gJ1BPU1QnO1xuICBmb3JtLmVuY3R5cGUgPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcbiAgZm9ybS5hY2NlcHRDaGFyc2V0ID0gJ1VURi04JztcblxuICBhcmVhID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gIGFyZWEubmFtZSA9ICdkJztcbiAgZm9ybS5hcHBlbmRDaGlsZChhcmVhKTtcblxuICBnbG9iYWwuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1cmwsIHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gIGRlYnVnKHVybCwgcGF5bG9hZCk7XG4gIGlmICghZm9ybSkge1xuICAgIGNyZWF0ZUZvcm0oKTtcbiAgfVxuICB2YXIgaWQgPSAnYScgKyByYW5kb20uc3RyaW5nKDgpO1xuICBmb3JtLnRhcmdldCA9IGlkO1xuICBmb3JtLmFjdGlvbiA9IHVybFV0aWxzLmFkZFF1ZXJ5KHVybFV0aWxzLmFkZFBhdGgodXJsLCAnL2pzb25wX3NlbmQnKSwgJ2k9JyArIGlkKTtcblxuICB2YXIgaWZyYW1lID0gY3JlYXRlSWZyYW1lKGlkKTtcbiAgaWZyYW1lLmlkID0gaWQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBmb3JtLmFwcGVuZENoaWxkKGlmcmFtZSk7XG5cbiAgdHJ5IHtcbiAgICBhcmVhLnZhbHVlID0gcGF5bG9hZDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHNlcmlvdXNseSBicm9rZW4gYnJvd3NlcnMgZ2V0IGhlcmVcbiAgfVxuICBmb3JtLnN1Ym1pdCgpO1xuXG4gIHZhciBjb21wbGV0ZWQgPSBmdW5jdGlvbihlcnIpIHtcbiAgICBkZWJ1ZygnY29tcGxldGVkJywgaWQsIGVycik7XG4gICAgaWYgKCFpZnJhbWUub25lcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZnJhbWUub25yZWFkeXN0YXRlY2hhbmdlID0gaWZyYW1lLm9uZXJyb3IgPSBpZnJhbWUub25sb2FkID0gbnVsbDtcbiAgICAvLyBPcGVyYSBtaW5pIGRvZXNuJ3QgbGlrZSBpZiB3ZSBHQyBpZnJhbWVcbiAgICAvLyBpbW1lZGlhdGVseSwgdGh1cyB0aGlzIHRpbWVvdXQuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdjbGVhbmluZyB1cCcsIGlkKTtcbiAgICAgIGlmcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgICBpZnJhbWUgPSBudWxsO1xuICAgIH0sIDUwMCk7XG4gICAgYXJlYS52YWx1ZSA9ICcnO1xuICAgIC8vIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBkZXRlY3QgaWYgdGhlIGlmcmFtZSBzdWNjZWVkZWQgb3JcbiAgICAvLyBmYWlsZWQgdG8gc3VibWl0IG91ciBmb3JtLlxuICAgIGNhbGxiYWNrKGVycik7XG4gIH07XG4gIGlmcmFtZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBpZCk7XG4gICAgY29tcGxldGVkKCk7XG4gIH07XG4gIGlmcmFtZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb25sb2FkJywgaWQpO1xuICAgIGNvbXBsZXRlZCgpO1xuICB9O1xuICBpZnJhbWUub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgIGRlYnVnKCdvbnJlYWR5c3RhdGVjaGFuZ2UnLCBpZCwgaWZyYW1lLnJlYWR5U3RhdGUsIGUpO1xuICAgIGlmIChpZnJhbWUucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgY29tcGxldGVkKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ2Fib3J0ZWQnLCBpZCk7XG4gICAgY29tcGxldGVkKG5ldyBFcnJvcignQWJvcnRlZCcpKTtcbiAgfTtcbn07XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4uLy4uL3V0aWxzL3JhbmRvbVwiOjUwLFwiLi4vLi4vdXRpbHMvdXJsXCI6NTIsXCJkZWJ1Z1wiOjU1fV0sMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBldmVudFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZXZlbnQnKVxuICAsIGJyb3dzZXIgPSByZXF1aXJlKCcuLi8uLi91dGlscy9icm93c2VyJylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3VybCcpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpzZW5kZXI6eGRyJyk7XG59XG5cbi8vIFJlZmVyZW5jZXM6XG4vLyAgIGh0dHA6Ly9hamF4aWFuLmNvbS9hcmNoaXZlcy8xMDAtbGluZS1hamF4LXdyYXBwZXJcbi8vICAgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjMjg4MDYwKHY9VlMuODUpLmFzcHhcblxuZnVuY3Rpb24gWERST2JqZWN0KG1ldGhvZCwgdXJsLCBwYXlsb2FkKSB7XG4gIGRlYnVnKG1ldGhvZCwgdXJsKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuX3N0YXJ0KG1ldGhvZCwgdXJsLCBwYXlsb2FkKTtcbiAgfSwgMCk7XG59XG5cbmluaGVyaXRzKFhEUk9iamVjdCwgRXZlbnRFbWl0dGVyKTtcblxuWERST2JqZWN0LnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbihtZXRob2QsIHVybCwgcGF5bG9hZCkge1xuICBkZWJ1ZygnX3N0YXJ0Jyk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHhkciA9IG5ldyBnbG9iYWwuWERvbWFpblJlcXVlc3QoKTtcbiAgLy8gSUUgY2FjaGVzIGV2ZW4gUE9TVHNcbiAgdXJsID0gdXJsVXRpbHMuYWRkUXVlcnkodXJsLCAndD0nICsgKCtuZXcgRGF0ZSgpKSk7XG5cbiAgeGRyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicpO1xuICAgIHNlbGYuX2Vycm9yKCk7XG4gIH07XG4gIHhkci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb250aW1lb3V0Jyk7XG4gICAgc2VsZi5fZXJyb3IoKTtcbiAgfTtcbiAgeGRyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygncHJvZ3Jlc3MnLCB4ZHIucmVzcG9uc2VUZXh0KTtcbiAgICBzZWxmLmVtaXQoJ2NodW5rJywgMjAwLCB4ZHIucmVzcG9uc2VUZXh0KTtcbiAgfTtcbiAgeGRyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdsb2FkJyk7XG4gICAgc2VsZi5lbWl0KCdmaW5pc2gnLCAyMDAsIHhkci5yZXNwb25zZVRleHQpO1xuICAgIHNlbGYuX2NsZWFudXAoZmFsc2UpO1xuICB9O1xuICB0aGlzLnhkciA9IHhkcjtcbiAgdGhpcy51bmxvYWRSZWYgPSBldmVudFV0aWxzLnVubG9hZEFkZChmdW5jdGlvbigpIHtcbiAgICBzZWxmLl9jbGVhbnVwKHRydWUpO1xuICB9KTtcbiAgdHJ5IHtcbiAgICAvLyBGYWlscyB3aXRoIEFjY2Vzc0RlbmllZCBpZiBwb3J0IG51bWJlciBpcyBib2d1c1xuICAgIHRoaXMueGRyLm9wZW4obWV0aG9kLCB1cmwpO1xuICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgIHRoaXMueGRyLnRpbWVvdXQgPSB0aGlzLnRpbWVvdXQ7XG4gICAgfVxuICAgIHRoaXMueGRyLnNlbmQocGF5bG9hZCk7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICB0aGlzLl9lcnJvcigpO1xuICB9XG59O1xuXG5YRFJPYmplY3QucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVtaXQoJ2ZpbmlzaCcsIDAsICcnKTtcbiAgdGhpcy5fY2xlYW51cChmYWxzZSk7XG59O1xuXG5YRFJPYmplY3QucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oYWJvcnQpIHtcbiAgZGVidWcoJ2NsZWFudXAnLCBhYm9ydCk7XG4gIGlmICghdGhpcy54ZHIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgZXZlbnRVdGlscy51bmxvYWREZWwodGhpcy51bmxvYWRSZWYpO1xuXG4gIHRoaXMueGRyLm9udGltZW91dCA9IHRoaXMueGRyLm9uZXJyb3IgPSB0aGlzLnhkci5vbnByb2dyZXNzID0gdGhpcy54ZHIub25sb2FkID0gbnVsbDtcbiAgaWYgKGFib3J0KSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMueGRyLmFib3J0KCk7XG4gICAgfSBjYXRjaCAoeCkge1xuICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgIH1cbiAgfVxuICB0aGlzLnVubG9hZFJlZiA9IHRoaXMueGRyID0gbnVsbDtcbn07XG5cblhEUk9iamVjdC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMuX2NsZWFudXAodHJ1ZSk7XG59O1xuXG4vLyBJRSA4LzkgaWYgdGhlIHJlcXVlc3QgdGFyZ2V0IHVzZXMgdGhlIHNhbWUgc2NoZW1lIC0gIzc5XG5YRFJPYmplY3QuZW5hYmxlZCA9ICEhKGdsb2JhbC5YRG9tYWluUmVxdWVzdCAmJiBicm93c2VyLmhhc0RvbWFpbigpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBYRFJPYmplY3Q7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4uLy4uL3V0aWxzL2Jyb3dzZXJcIjo0NCxcIi4uLy4uL3V0aWxzL2V2ZW50XCI6NDYsXCIuLi8uLi91dGlscy91cmxcIjo1MixcImRlYnVnXCI6NTUsXCJldmVudHNcIjozLFwiaW5oZXJpdHNcIjo1N31dLDM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIFhockRyaXZlciA9IHJlcXVpcmUoJy4uL2RyaXZlci94aHInKVxuICA7XG5cbmZ1bmN0aW9uIFhIUkNvcnNPYmplY3QobWV0aG9kLCB1cmwsIHBheWxvYWQsIG9wdHMpIHtcbiAgWGhyRHJpdmVyLmNhbGwodGhpcywgbWV0aG9kLCB1cmwsIHBheWxvYWQsIG9wdHMpO1xufVxuXG5pbmhlcml0cyhYSFJDb3JzT2JqZWN0LCBYaHJEcml2ZXIpO1xuXG5YSFJDb3JzT2JqZWN0LmVuYWJsZWQgPSBYaHJEcml2ZXIuZW5hYmxlZCAmJiBYaHJEcml2ZXIuc3VwcG9ydHNDT1JTO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUkNvcnNPYmplY3Q7XG5cbn0se1wiLi4vZHJpdmVyL3hoclwiOjE3LFwiaW5oZXJpdHNcIjo1N31dLDM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICA7XG5cbmZ1bmN0aW9uIFhIUkZha2UoLyogbWV0aG9kLCB1cmwsIHBheWxvYWQsIG9wdHMgKi8pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB0aGlzLnRvID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIDIwMCwgJ3t9Jyk7XG4gIH0sIFhIUkZha2UudGltZW91dCk7XG59XG5cbmluaGVyaXRzKFhIUkZha2UsIEV2ZW50RW1pdHRlcik7XG5cblhIUkZha2UucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIGNsZWFyVGltZW91dCh0aGlzLnRvKTtcbn07XG5cblhIUkZha2UudGltZW91dCA9IDIwMDA7XG5cbm1vZHVsZS5leHBvcnRzID0gWEhSRmFrZTtcblxufSx7XCJldmVudHNcIjozLFwiaW5oZXJpdHNcIjo1N31dLDM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIFhockRyaXZlciA9IHJlcXVpcmUoJy4uL2RyaXZlci94aHInKVxuICA7XG5cbmZ1bmN0aW9uIFhIUkxvY2FsT2JqZWN0KG1ldGhvZCwgdXJsLCBwYXlsb2FkIC8qLCBvcHRzICovKSB7XG4gIFhockRyaXZlci5jYWxsKHRoaXMsIG1ldGhvZCwgdXJsLCBwYXlsb2FkLCB7XG4gICAgbm9DcmVkZW50aWFsczogdHJ1ZVxuICB9KTtcbn1cblxuaW5oZXJpdHMoWEhSTG9jYWxPYmplY3QsIFhockRyaXZlcik7XG5cblhIUkxvY2FsT2JqZWN0LmVuYWJsZWQgPSBYaHJEcml2ZXIuZW5hYmxlZDtcblxubW9kdWxlLmV4cG9ydHMgPSBYSFJMb2NhbE9iamVjdDtcblxufSx7XCIuLi9kcml2ZXIveGhyXCI6MTcsXCJpbmhlcml0c1wiOjU3fV0sMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvZXZlbnQnKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXJsJylcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBXZWJzb2NrZXREcml2ZXIgPSByZXF1aXJlKCcuL2RyaXZlci93ZWJzb2NrZXQnKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6d2Vic29ja2V0Jyk7XG59XG5cbmZ1bmN0aW9uIFdlYlNvY2tldFRyYW5zcG9ydCh0cmFuc1VybCwgaWdub3JlLCBvcHRpb25zKSB7XG4gIGlmICghV2ViU29ja2V0VHJhbnNwb3J0LmVuYWJsZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG5cbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG4gIGRlYnVnKCdjb25zdHJ1Y3RvcicsIHRyYW5zVXJsKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB1cmwgPSB1cmxVdGlscy5hZGRQYXRoKHRyYW5zVXJsLCAnL3dlYnNvY2tldCcpO1xuICBpZiAodXJsLnNsaWNlKDAsIDUpID09PSAnaHR0cHMnKSB7XG4gICAgdXJsID0gJ3dzcycgKyB1cmwuc2xpY2UoNSk7XG4gIH0gZWxzZSB7XG4gICAgdXJsID0gJ3dzJyArIHVybC5zbGljZSg0KTtcbiAgfVxuICB0aGlzLnVybCA9IHVybDtcblxuICB0aGlzLndzID0gbmV3IFdlYnNvY2tldERyaXZlcih0aGlzLnVybCwgW10sIG9wdGlvbnMpO1xuICB0aGlzLndzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICBkZWJ1ZygnbWVzc2FnZSBldmVudCcsIGUuZGF0YSk7XG4gICAgc2VsZi5lbWl0KCdtZXNzYWdlJywgZS5kYXRhKTtcbiAgfTtcbiAgLy8gRmlyZWZveCBoYXMgYW4gaW50ZXJlc3RpbmcgYnVnLiBJZiBhIHdlYnNvY2tldCBjb25uZWN0aW9uIGlzXG4gIC8vIGNyZWF0ZWQgYWZ0ZXIgb251bmxvYWQsIGl0IHN0YXlzIGFsaXZlIGV2ZW4gd2hlbiB1c2VyXG4gIC8vIG5hdmlnYXRlcyBhd2F5IGZyb20gdGhlIHBhZ2UuIEluIHN1Y2ggc2l0dWF0aW9uIGxldCdzIGxpZSAtXG4gIC8vIGxldCdzIG5vdCBvcGVuIHRoZSB3cyBjb25uZWN0aW9uIGF0IGFsbC4gU2VlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vc29ja2pzL3NvY2tqcy1jbGllbnQvaXNzdWVzLzI4XG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NjA4NVxuICB0aGlzLnVubG9hZFJlZiA9IHV0aWxzLnVubG9hZEFkZChmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygndW5sb2FkJyk7XG4gICAgc2VsZi53cy5jbG9zZSgpO1xuICB9KTtcbiAgdGhpcy53cy5vbmNsb3NlID0gZnVuY3Rpb24oZSkge1xuICAgIGRlYnVnKCdjbG9zZSBldmVudCcsIGUuY29kZSwgZS5yZWFzb24pO1xuICAgIHNlbGYuZW1pdCgnY2xvc2UnLCBlLmNvZGUsIGUucmVhc29uKTtcbiAgICBzZWxmLl9jbGVhbnVwKCk7XG4gIH07XG4gIHRoaXMud3Mub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcbiAgICBkZWJ1ZygnZXJyb3IgZXZlbnQnLCBlKTtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgMTAwNiwgJ1dlYlNvY2tldCBjb25uZWN0aW9uIGJyb2tlbicpO1xuICAgIHNlbGYuX2NsZWFudXAoKTtcbiAgfTtcbn1cblxuaW5oZXJpdHMoV2ViU29ja2V0VHJhbnNwb3J0LCBFdmVudEVtaXR0ZXIpO1xuXG5XZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihkYXRhKSB7XG4gIHZhciBtc2cgPSAnWycgKyBkYXRhICsgJ10nO1xuICBkZWJ1Zygnc2VuZCcsIG1zZyk7XG4gIHRoaXMud3Muc2VuZChtc2cpO1xufTtcblxuV2ViU29ja2V0VHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xvc2UnKTtcbiAgdmFyIHdzID0gdGhpcy53cztcbiAgdGhpcy5fY2xlYW51cCgpO1xuICBpZiAod3MpIHtcbiAgICB3cy5jbG9zZSgpO1xuICB9XG59O1xuXG5XZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfY2xlYW51cCcpO1xuICB2YXIgd3MgPSB0aGlzLndzO1xuICBpZiAod3MpIHtcbiAgICB3cy5vbm1lc3NhZ2UgPSB3cy5vbmNsb3NlID0gd3Mub25lcnJvciA9IG51bGw7XG4gIH1cbiAgdXRpbHMudW5sb2FkRGVsKHRoaXMudW5sb2FkUmVmKTtcbiAgdGhpcy51bmxvYWRSZWYgPSB0aGlzLndzID0gbnVsbDtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG5cbldlYlNvY2tldFRyYW5zcG9ydC5lbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdlbmFibGVkJyk7XG4gIHJldHVybiAhIVdlYnNvY2tldERyaXZlcjtcbn07XG5XZWJTb2NrZXRUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICd3ZWJzb2NrZXQnO1xuXG4vLyBJbiB0aGVvcnksIHdzIHNob3VsZCByZXF1aXJlIDEgcm91bmQgdHJpcC4gQnV0IGluIGNocm9tZSwgdGhpcyBpc1xuLy8gbm90IHZlcnkgc3RhYmxlIG92ZXIgU1NMLiBNb3N0IGxpa2VseSBhIHdzIGNvbm5lY3Rpb24gcmVxdWlyZXMgYVxuLy8gc2VwYXJhdGUgU1NMIGNvbm5lY3Rpb24sIGluIHdoaWNoIGNhc2UgMiByb3VuZCB0cmlwcyBhcmUgYW5cbi8vIGFic29sdXRlIG1pbnVtdW0uXG5XZWJTb2NrZXRUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViU29ja2V0VHJhbnNwb3J0O1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiLi4vdXRpbHMvZXZlbnRcIjo0NixcIi4uL3V0aWxzL3VybFwiOjUyLFwiLi9kcml2ZXIvd2Vic29ja2V0XCI6MTksXCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTd9XSwzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBBamF4QmFzZWRUcmFuc3BvcnQgPSByZXF1aXJlKCcuL2xpYi9hamF4LWJhc2VkJylcbiAgLCBYZHJTdHJlYW1pbmdUcmFuc3BvcnQgPSByZXF1aXJlKCcuL3hkci1zdHJlYW1pbmcnKVxuICAsIFhoclJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci94aHInKVxuICAsIFhEUk9iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hkcicpXG4gIDtcblxuZnVuY3Rpb24gWGRyUG9sbGluZ1RyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIVhEUk9iamVjdC5lbmFibGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgY3JlYXRlZCB3aGVuIGRpc2FibGVkJyk7XG4gIH1cbiAgQWpheEJhc2VkVHJhbnNwb3J0LmNhbGwodGhpcywgdHJhbnNVcmwsICcveGhyJywgWGhyUmVjZWl2ZXIsIFhEUk9iamVjdCk7XG59XG5cbmluaGVyaXRzKFhkclBvbGxpbmdUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cblhkclBvbGxpbmdUcmFuc3BvcnQuZW5hYmxlZCA9IFhkclN0cmVhbWluZ1RyYW5zcG9ydC5lbmFibGVkO1xuWGRyUG9sbGluZ1RyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ3hkci1wb2xsaW5nJztcblhkclBvbGxpbmdUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7IC8vIHByZWZsaWdodCwgYWpheFxuXG5tb2R1bGUuZXhwb3J0cyA9IFhkclBvbGxpbmdUcmFuc3BvcnQ7XG5cbn0se1wiLi9saWIvYWpheC1iYXNlZFwiOjI0LFwiLi9yZWNlaXZlci94aHJcIjozMixcIi4vc2VuZGVyL3hkclwiOjM0LFwiLi94ZHItc3RyZWFtaW5nXCI6NDAsXCJpbmhlcml0c1wiOjU3fV0sNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgQWpheEJhc2VkVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi9saWIvYWpheC1iYXNlZCcpXG4gICwgWGhyUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL3hocicpXG4gICwgWERST2JqZWN0ID0gcmVxdWlyZSgnLi9zZW5kZXIveGRyJylcbiAgO1xuXG4vLyBBY2NvcmRpbmcgdG86XG4vLyAgIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTY0MTUwNy9kZXRlY3QtYnJvd3Nlci1zdXBwb3J0LWZvci1jcm9zcy1kb21haW4teG1saHR0cHJlcXVlc3RzXG4vLyAgIGh0dHA6Ly9oYWNrcy5tb3ppbGxhLm9yZy8yMDA5LzA3L2Nyb3NzLXNpdGUteG1saHR0cHJlcXVlc3Qtd2l0aC1jb3JzL1xuXG5mdW5jdGlvbiBYZHJTdHJlYW1pbmdUcmFuc3BvcnQodHJhbnNVcmwpIHtcbiAgaWYgKCFYRFJPYmplY3QuZW5hYmxlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG4gIEFqYXhCYXNlZFRyYW5zcG9ydC5jYWxsKHRoaXMsIHRyYW5zVXJsLCAnL3hocl9zdHJlYW1pbmcnLCBYaHJSZWNlaXZlciwgWERST2JqZWN0KTtcbn1cblxuaW5oZXJpdHMoWGRyU3RyZWFtaW5nVHJhbnNwb3J0LCBBamF4QmFzZWRUcmFuc3BvcnQpO1xuXG5YZHJTdHJlYW1pbmdUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKGluZm8pIHtcbiAgaWYgKGluZm8uY29va2llX25lZWRlZCB8fCBpbmZvLm51bGxPcmlnaW4pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIFhEUk9iamVjdC5lbmFibGVkICYmIGluZm8uc2FtZVNjaGVtZTtcbn07XG5cblhkclN0cmVhbWluZ1RyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ3hkci1zdHJlYW1pbmcnO1xuWGRyU3RyZWFtaW5nVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyOyAvLyBwcmVmbGlnaHQsIGFqYXhcblxubW9kdWxlLmV4cG9ydHMgPSBYZHJTdHJlYW1pbmdUcmFuc3BvcnQ7XG5cbn0se1wiLi9saWIvYWpheC1iYXNlZFwiOjI0LFwiLi9yZWNlaXZlci94aHJcIjozMixcIi4vc2VuZGVyL3hkclwiOjM0LFwiaW5oZXJpdHNcIjo1N31dLDQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEFqYXhCYXNlZFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vbGliL2FqYXgtYmFzZWQnKVxuICAsIFhoclJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci94aHInKVxuICAsIFhIUkNvcnNPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94aHItY29ycycpXG4gICwgWEhSTG9jYWxPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94aHItbG9jYWwnKVxuICA7XG5cbmZ1bmN0aW9uIFhoclBvbGxpbmdUcmFuc3BvcnQodHJhbnNVcmwpIHtcbiAgaWYgKCFYSFJMb2NhbE9iamVjdC5lbmFibGVkICYmICFYSFJDb3JzT2JqZWN0LmVuYWJsZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBBamF4QmFzZWRUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy94aHInLCBYaHJSZWNlaXZlciwgWEhSQ29yc09iamVjdCk7XG59XG5cbmluaGVyaXRzKFhoclBvbGxpbmdUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cblhoclBvbGxpbmdUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKGluZm8pIHtcbiAgaWYgKGluZm8ubnVsbE9yaWdpbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChYSFJMb2NhbE9iamVjdC5lbmFibGVkICYmIGluZm8uc2FtZU9yaWdpbikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBYSFJDb3JzT2JqZWN0LmVuYWJsZWQ7XG59O1xuXG5YaHJQb2xsaW5nVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAneGhyLXBvbGxpbmcnO1xuWGhyUG9sbGluZ1RyYW5zcG9ydC5yb3VuZFRyaXBzID0gMjsgLy8gcHJlZmxpZ2h0LCBhamF4XG5cbm1vZHVsZS5leHBvcnRzID0gWGhyUG9sbGluZ1RyYW5zcG9ydDtcblxufSx7XCIuL2xpYi9hamF4LWJhc2VkXCI6MjQsXCIuL3JlY2VpdmVyL3hoclwiOjMyLFwiLi9zZW5kZXIveGhyLWNvcnNcIjozNSxcIi4vc2VuZGVyL3hoci1sb2NhbFwiOjM3LFwiaW5oZXJpdHNcIjo1N31dLDQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEFqYXhCYXNlZFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vbGliL2FqYXgtYmFzZWQnKVxuICAsIFhoclJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci94aHInKVxuICAsIFhIUkNvcnNPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94aHItY29ycycpXG4gICwgWEhSTG9jYWxPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94aHItbG9jYWwnKVxuICAsIGJyb3dzZXIgPSByZXF1aXJlKCcuLi91dGlscy9icm93c2VyJylcbiAgO1xuXG5mdW5jdGlvbiBYaHJTdHJlYW1pbmdUcmFuc3BvcnQodHJhbnNVcmwpIHtcbiAgaWYgKCFYSFJMb2NhbE9iamVjdC5lbmFibGVkICYmICFYSFJDb3JzT2JqZWN0LmVuYWJsZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBBamF4QmFzZWRUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy94aHJfc3RyZWFtaW5nJywgWGhyUmVjZWl2ZXIsIFhIUkNvcnNPYmplY3QpO1xufVxuXG5pbmhlcml0cyhYaHJTdHJlYW1pbmdUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cblhoclN0cmVhbWluZ1RyYW5zcG9ydC5lbmFibGVkID0gZnVuY3Rpb24oaW5mbykge1xuICBpZiAoaW5mby5udWxsT3JpZ2luKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIE9wZXJhIGRvZXNuJ3Qgc3VwcG9ydCB4aHItc3RyZWFtaW5nICM2MFxuICAvLyBCdXQgaXQgbWlnaHQgYmUgYWJsZSB0byAjOTJcbiAgaWYgKGJyb3dzZXIuaXNPcGVyYSgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIFhIUkNvcnNPYmplY3QuZW5hYmxlZDtcbn07XG5cblhoclN0cmVhbWluZ1RyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ3hoci1zdHJlYW1pbmcnO1xuWGhyU3RyZWFtaW5nVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyOyAvLyBwcmVmbGlnaHQsIGFqYXhcblxuLy8gU2FmYXJpIGdldHMgY29uZnVzZWQgd2hlbiBhIHN0cmVhbWluZyBhamF4IHJlcXVlc3QgaXMgc3RhcnRlZFxuLy8gYmVmb3JlIG9ubG9hZC4gVGhpcyBjYXVzZXMgdGhlIGxvYWQgaW5kaWNhdG9yIHRvIHNwaW4gaW5kZWZpbmV0ZWx5LlxuLy8gT25seSByZXF1aXJlIGJvZHkgd2hlbiB1c2VkIGluIGEgYnJvd3NlclxuWGhyU3RyZWFtaW5nVHJhbnNwb3J0Lm5lZWRCb2R5ID0gISFnbG9iYWwuZG9jdW1lbnQ7XG5cbm1vZHVsZS5leHBvcnRzID0gWGhyU3RyZWFtaW5nVHJhbnNwb3J0O1xuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7XCIuLi91dGlscy9icm93c2VyXCI6NDQsXCIuL2xpYi9hamF4LWJhc2VkXCI6MjQsXCIuL3JlY2VpdmVyL3hoclwiOjMyLFwiLi9zZW5kZXIveGhyLWNvcnNcIjozNSxcIi4vc2VuZGVyL3hoci1sb2NhbFwiOjM3LFwiaW5oZXJpdHNcIjo1N31dLDQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxuaWYgKGdsb2JhbC5jcnlwdG8gJiYgZ2xvYmFsLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgbW9kdWxlLmV4cG9ydHMucmFuZG9tQnl0ZXMgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGdsb2JhbC5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGJ5dGVzKTtcbiAgICByZXR1cm4gYnl0ZXM7XG4gIH07XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cy5yYW5kb21CeXRlcyA9IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgIHZhciBieXRlcyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ5dGVzW2ldID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xuICB9O1xufVxuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7fV0sNDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNPcGVyYTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5uYXZpZ2F0b3IgJiZcbiAgICAgIC9vcGVyYS9pLnRlc3QoZ2xvYmFsLm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB9XG5cbiwgaXNLb25xdWVyb3I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBnbG9iYWwubmF2aWdhdG9yICYmXG4gICAgICAva29ucXVlcm9yL2kudGVzdChnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIH1cblxuICAvLyAjMTg3IHdyYXAgZG9jdW1lbnQuZG9tYWluIGluIHRyeS9jYXRjaCBiZWNhdXNlIG9mIFdQOCBmcm9tIGZpbGU6Ly8vXG4sIGhhc0RvbWFpbjogZnVuY3Rpb24gKCkge1xuICAgIC8vIG5vbi1icm93c2VyIGNsaWVudCBhbHdheXMgaGFzIGEgZG9tYWluXG4gICAgaWYgKCFnbG9iYWwuZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gISFnbG9iYWwuZG9jdW1lbnQuZG9tYWluO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHt9XSw0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBKU09OMyA9IHJlcXVpcmUoJ2pzb24zJyk7XG5cbi8vIFNvbWUgZXh0cmEgY2hhcmFjdGVycyB0aGF0IENocm9tZSBnZXRzIHdyb25nLCBhbmQgc3Vic3RpdHV0ZXMgd2l0aFxuLy8gc29tZXRoaW5nIGVsc2Ugb24gdGhlIHdpcmUuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxudmFyIGV4dHJhRXNjYXBhYmxlID0gL1tcXHgwMC1cXHgxZlxcdWQ4MDAtXFx1ZGZmZlxcdWZmZmVcXHVmZmZmXFx1MDMwMC1cXHUwMzMzXFx1MDMzZC1cXHUwMzQ2XFx1MDM0YS1cXHUwMzRjXFx1MDM1MC1cXHUwMzUyXFx1MDM1Ny1cXHUwMzU4XFx1MDM1Yy1cXHUwMzYyXFx1MDM3NFxcdTAzN2VcXHUwMzg3XFx1MDU5MS1cXHUwNWFmXFx1MDVjNFxcdTA2MTAtXFx1MDYxN1xcdTA2NTMtXFx1MDY1NFxcdTA2NTctXFx1MDY1YlxcdTA2NWQtXFx1MDY1ZVxcdTA2ZGYtXFx1MDZlMlxcdTA2ZWItXFx1MDZlY1xcdTA3MzBcXHUwNzMyLVxcdTA3MzNcXHUwNzM1LVxcdTA3MzZcXHUwNzNhXFx1MDczZFxcdTA3M2YtXFx1MDc0MVxcdTA3NDNcXHUwNzQ1XFx1MDc0N1xcdTA3ZWItXFx1MDdmMVxcdTA5NTFcXHUwOTU4LVxcdTA5NWZcXHUwOWRjLVxcdTA5ZGRcXHUwOWRmXFx1MGEzM1xcdTBhMzZcXHUwYTU5LVxcdTBhNWJcXHUwYTVlXFx1MGI1Yy1cXHUwYjVkXFx1MGUzOC1cXHUwZTM5XFx1MGY0M1xcdTBmNGRcXHUwZjUyXFx1MGY1N1xcdTBmNWNcXHUwZjY5XFx1MGY3Mi1cXHUwZjc2XFx1MGY3OFxcdTBmODAtXFx1MGY4M1xcdTBmOTNcXHUwZjlkXFx1MGZhMlxcdTBmYTdcXHUwZmFjXFx1MGZiOVxcdTE5MzktXFx1MTkzYVxcdTFhMTdcXHUxYjZiXFx1MWNkYS1cXHUxY2RiXFx1MWRjMC1cXHUxZGNmXFx1MWRmY1xcdTFkZmVcXHUxZjcxXFx1MWY3M1xcdTFmNzVcXHUxZjc3XFx1MWY3OVxcdTFmN2JcXHUxZjdkXFx1MWZiYlxcdTFmYmVcXHUxZmM5XFx1MWZjYlxcdTFmZDNcXHUxZmRiXFx1MWZlM1xcdTFmZWJcXHUxZmVlLVxcdTFmZWZcXHUxZmY5XFx1MWZmYlxcdTFmZmRcXHUyMDAwLVxcdTIwMDFcXHUyMGQwLVxcdTIwZDFcXHUyMGQ0LVxcdTIwZDdcXHUyMGU3LVxcdTIwZTlcXHUyMTI2XFx1MjEyYS1cXHUyMTJiXFx1MjMyOS1cXHUyMzJhXFx1MmFkY1xcdTMwMmItXFx1MzAyY1xcdWFhYjItXFx1YWFiM1xcdWY5MDAtXFx1ZmEwZFxcdWZhMTBcXHVmYTEyXFx1ZmExNS1cXHVmYTFlXFx1ZmEyMFxcdWZhMjJcXHVmYTI1LVxcdWZhMjZcXHVmYTJhLVxcdWZhMmRcXHVmYTMwLVxcdWZhNmRcXHVmYTcwLVxcdWZhZDlcXHVmYjFkXFx1ZmIxZlxcdWZiMmEtXFx1ZmIzNlxcdWZiMzgtXFx1ZmIzY1xcdWZiM2VcXHVmYjQwLVxcdWZiNDFcXHVmYjQzLVxcdWZiNDRcXHVmYjQ2LVxcdWZiNGVcXHVmZmYwLVxcdWZmZmZdL2dcbiAgLCBleHRyYUxvb2t1cDtcblxuLy8gVGhpcyBtYXkgYmUgcXVpdGUgc2xvdywgc28gbGV0J3MgZGVsYXkgdW50aWwgdXNlciBhY3R1YWxseSB1c2VzIGJhZFxuLy8gY2hhcmFjdGVycy5cbnZhciB1bnJvbGxMb29rdXAgPSBmdW5jdGlvbihlc2NhcGFibGUpIHtcbiAgdmFyIGk7XG4gIHZhciB1bnJvbGxlZCA9IHt9O1xuICB2YXIgYyA9IFtdO1xuICBmb3IgKGkgPSAwOyBpIDwgNjU1MzY7IGkrKykge1xuICAgIGMucHVzaCggU3RyaW5nLmZyb21DaGFyQ29kZShpKSApO1xuICB9XG4gIGVzY2FwYWJsZS5sYXN0SW5kZXggPSAwO1xuICBjLmpvaW4oJycpLnJlcGxhY2UoZXNjYXBhYmxlLCBmdW5jdGlvbihhKSB7XG4gICAgdW5yb2xsZWRbIGEgXSA9ICdcXFxcdScgKyAoJzAwMDAnICsgYS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO1xuICAgIHJldHVybiAnJztcbiAgfSk7XG4gIGVzY2FwYWJsZS5sYXN0SW5kZXggPSAwO1xuICByZXR1cm4gdW5yb2xsZWQ7XG59O1xuXG4vLyBRdW90ZSBzdHJpbmcsIGFsc28gdGFraW5nIGNhcmUgb2YgdW5pY29kZSBjaGFyYWN0ZXJzIHRoYXQgYnJvd3NlcnNcbi8vIG9mdGVuIGJyZWFrLiBFc3BlY2lhbGx5LCB0YWtlIGNhcmUgb2YgdW5pY29kZSBzdXJyb2dhdGVzOlxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NYXBwaW5nX29mX1VuaWNvZGVfY2hhcmFjdGVycyNTdXJyb2dhdGVzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcXVvdGU6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHZhciBxdW90ZWQgPSBKU09OMy5zdHJpbmdpZnkoc3RyaW5nKTtcblxuICAgIC8vIEluIG1vc3QgY2FzZXMgdGhpcyBzaG91bGQgYmUgdmVyeSBmYXN0IGFuZCBnb29kIGVub3VnaC5cbiAgICBleHRyYUVzY2FwYWJsZS5sYXN0SW5kZXggPSAwO1xuICAgIGlmICghZXh0cmFFc2NhcGFibGUudGVzdChxdW90ZWQpKSB7XG4gICAgICByZXR1cm4gcXVvdGVkO1xuICAgIH1cblxuICAgIGlmICghZXh0cmFMb29rdXApIHtcbiAgICAgIGV4dHJhTG9va3VwID0gdW5yb2xsTG9va3VwKGV4dHJhRXNjYXBhYmxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcXVvdGVkLnJlcGxhY2UoZXh0cmFFc2NhcGFibGUsIGZ1bmN0aW9uKGEpIHtcbiAgICAgIHJldHVybiBleHRyYUxvb2t1cFthXTtcbiAgICB9KTtcbiAgfVxufTtcblxufSx7XCJqc29uM1wiOjU4fV0sNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmFuZG9tID0gcmVxdWlyZSgnLi9yYW5kb20nKTtcblxudmFyIG9uVW5sb2FkID0ge31cbiAgLCBhZnRlclVubG9hZCA9IGZhbHNlXG4gICAgLy8gZGV0ZWN0IGdvb2dsZSBjaHJvbWUgcGFja2FnZWQgYXBwcyBiZWNhdXNlIHRoZXkgZG9uJ3QgYWxsb3cgdGhlICd1bmxvYWQnIGV2ZW50XG4gICwgaXNDaHJvbWVQYWNrYWdlZEFwcCA9IGdsb2JhbC5jaHJvbWUgJiYgZ2xvYmFsLmNocm9tZS5hcHAgJiYgZ2xvYmFsLmNocm9tZS5hcHAucnVudGltZVxuICA7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhdHRhY2hFdmVudDogZnVuY3Rpb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLmRvY3VtZW50ICYmIGdsb2JhbC5hdHRhY2hFdmVudCkge1xuICAgICAgLy8gSUUgcXVpcmtzLlxuICAgICAgLy8gQWNjb3JkaW5nIHRvOiBodHRwOi8vc3RldmVzb3VkZXJzLmNvbS9taXNjL3Rlc3QtcG9zdG1lc3NhZ2UucGhwXG4gICAgICAvLyB0aGUgbWVzc2FnZSBnZXRzIGRlbGl2ZXJlZCBvbmx5IHRvICdkb2N1bWVudCcsIG5vdCAnd2luZG93Jy5cbiAgICAgIGdsb2JhbC5kb2N1bWVudC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgIC8vIEkgZ2V0ICd3aW5kb3cnIGZvciBpZTguXG4gICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICB9XG5cbiwgZGV0YWNoRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBnbG9iYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5kb2N1bWVudCAmJiBnbG9iYWwuZGV0YWNoRXZlbnQpIHtcbiAgICAgIGdsb2JhbC5kb2N1bWVudC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgIGdsb2JhbC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH1cblxuLCB1bmxvYWRBZGQ6IGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgaWYgKGlzQ2hyb21lUGFja2FnZWRBcHApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciByZWYgPSByYW5kb20uc3RyaW5nKDgpO1xuICAgIG9uVW5sb2FkW3JlZl0gPSBsaXN0ZW5lcjtcbiAgICBpZiAoYWZ0ZXJVbmxvYWQpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy50cmlnZ2VyVW5sb2FkQ2FsbGJhY2tzLCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZjtcbiAgfVxuXG4sIHVubG9hZERlbDogZnVuY3Rpb24ocmVmKSB7XG4gICAgaWYgKHJlZiBpbiBvblVubG9hZCkge1xuICAgICAgZGVsZXRlIG9uVW5sb2FkW3JlZl07XG4gICAgfVxuICB9XG5cbiwgdHJpZ2dlclVubG9hZENhbGxiYWNrczogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcmVmIGluIG9uVW5sb2FkKSB7XG4gICAgICBvblVubG9hZFtyZWZdKCk7XG4gICAgICBkZWxldGUgb25VbmxvYWRbcmVmXTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB1bmxvYWRUcmlnZ2VyZWQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKGFmdGVyVW5sb2FkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFmdGVyVW5sb2FkID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMudHJpZ2dlclVubG9hZENhbGxiYWNrcygpO1xufTtcblxuLy8gJ3VubG9hZCcgYWxvbmUgaXMgbm90IHJlbGlhYmxlIGluIG9wZXJhIHdpdGhpbiBhbiBpZnJhbWUsIGJ1dCB3ZVxuLy8gY2FuJ3QgdXNlIGBiZWZvcmV1bmxvYWRgIGFzIElFIGZpcmVzIGl0IG9uIGphdmFzY3JpcHQ6IGxpbmtzLlxuaWYgKCFpc0Nocm9tZVBhY2thZ2VkQXBwKSB7XG4gIG1vZHVsZS5leHBvcnRzLmF0dGFjaEV2ZW50KCd1bmxvYWQnLCB1bmxvYWRUcmlnZ2VyZWQpO1xufVxuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7XCIuL3JhbmRvbVwiOjUwfV0sNDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBldmVudFV0aWxzID0gcmVxdWlyZSgnLi9ldmVudCcpXG4gICwgSlNPTjMgPSByZXF1aXJlKCdqc29uMycpXG4gICwgYnJvd3NlciA9IHJlcXVpcmUoJy4vYnJvd3NlcicpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDp1dGlsczppZnJhbWUnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFdQcmVmaXg6ICdfanAnXG4sIGN1cnJlbnRXaW5kb3dJZDogbnVsbFxuXG4sIHBvbGx1dGVHbG9iYWxOYW1lc3BhY2U6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghKG1vZHVsZS5leHBvcnRzLldQcmVmaXggaW4gZ2xvYmFsKSkge1xuICAgICAgZ2xvYmFsW21vZHVsZS5leHBvcnRzLldQcmVmaXhdID0ge307XG4gICAgfVxuICB9XG5cbiwgcG9zdE1lc3NhZ2U6IGZ1bmN0aW9uKHR5cGUsIGRhdGEpIHtcbiAgICBpZiAoZ2xvYmFsLnBhcmVudCAhPT0gZ2xvYmFsKSB7XG4gICAgICBnbG9iYWwucGFyZW50LnBvc3RNZXNzYWdlKEpTT04zLnN0cmluZ2lmeSh7XG4gICAgICAgIHdpbmRvd0lkOiBtb2R1bGUuZXhwb3J0cy5jdXJyZW50V2luZG93SWRcbiAgICAgICwgdHlwZTogdHlwZVxuICAgICAgLCBkYXRhOiBkYXRhIHx8ICcnXG4gICAgICB9KSwgJyonKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ0Nhbm5vdCBwb3N0TWVzc2FnZSwgbm8gcGFyZW50IHdpbmRvdy4nLCB0eXBlLCBkYXRhKTtcbiAgICB9XG4gIH1cblxuLCBjcmVhdGVJZnJhbWU6IGZ1bmN0aW9uKGlmcmFtZVVybCwgZXJyb3JDYWxsYmFjaykge1xuICAgIHZhciBpZnJhbWUgPSBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgdmFyIHRyZWYsIHVubG9hZFJlZjtcbiAgICB2YXIgdW5hdHRhY2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCd1bmF0dGFjaCcpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRyZWYpO1xuICAgICAgLy8gRXhwbG9yZXIgaGFkIHByb2JsZW1zIHdpdGggdGhhdC5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmcmFtZS5vbmxvYWQgPSBudWxsO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgICB9XG4gICAgICBpZnJhbWUub25lcnJvciA9IG51bGw7XG4gICAgfTtcbiAgICB2YXIgY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgdW5hdHRhY2goKTtcbiAgICAgICAgLy8gVGhpcyB0aW1lb3V0IG1ha2VzIGNocm9tZSBmaXJlIG9uYmVmb3JldW5sb2FkIGV2ZW50XG4gICAgICAgIC8vIHdpdGhpbiBpZnJhbWUuIFdpdGhvdXQgdGhlIHRpbWVvdXQgaXQgZ29lcyBzdHJhaWdodCB0b1xuICAgICAgICAvLyBvbnVubG9hZC5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoaWZyYW1lKSB7XG4gICAgICAgICAgICBpZnJhbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZnJhbWUgPSBudWxsO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgZXZlbnRVdGlscy51bmxvYWREZWwodW5sb2FkUmVmKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvbmVycm9yID0gZnVuY3Rpb24oZXJyKSB7XG4gICAgICBkZWJ1Zygnb25lcnJvcicsIGVycik7XG4gICAgICBpZiAoaWZyYW1lKSB7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgZXJyb3JDYWxsYmFjayhlcnIpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHBvc3QgPSBmdW5jdGlvbihtc2csIG9yaWdpbikge1xuICAgICAgZGVidWcoJ3Bvc3QnLCBtc2csIG9yaWdpbik7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFdoZW4gdGhlIGlmcmFtZSBpcyBub3QgbG9hZGVkLCBJRSByYWlzZXMgYW4gZXhjZXB0aW9uXG4gICAgICAgICAgLy8gb24gJ2NvbnRlbnRXaW5kb3cnLlxuICAgICAgICAgIGlmIChpZnJhbWUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKG1zZywgb3JpZ2luKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgICAgIH1cbiAgICAgIH0sIDApO1xuICAgIH07XG5cbiAgICBpZnJhbWUuc3JjID0gaWZyYW1lVXJsO1xuICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGlmcmFtZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgaWZyYW1lLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIG9uZXJyb3IoJ29uZXJyb3InKTtcbiAgICB9O1xuICAgIGlmcmFtZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdvbmxvYWQnKTtcbiAgICAgIC8vIGBvbmxvYWRgIGlzIHRyaWdnZXJlZCBiZWZvcmUgc2NyaXB0cyBvbiB0aGUgaWZyYW1lIGFyZVxuICAgICAgLy8gZXhlY3V0ZWQuIEdpdmUgaXQgZmV3IHNlY29uZHMgdG8gYWN0dWFsbHkgbG9hZCBzdHVmZi5cbiAgICAgIGNsZWFyVGltZW91dCh0cmVmKTtcbiAgICAgIHRyZWYgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBvbmVycm9yKCdvbmxvYWQgdGltZW91dCcpO1xuICAgICAgfSwgMjAwMCk7XG4gICAgfTtcbiAgICBnbG9iYWwuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIHRyZWYgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgb25lcnJvcigndGltZW91dCcpO1xuICAgIH0sIDE1MDAwKTtcbiAgICB1bmxvYWRSZWYgPSBldmVudFV0aWxzLnVubG9hZEFkZChjbGVhbnVwKTtcbiAgICByZXR1cm4ge1xuICAgICAgcG9zdDogcG9zdFxuICAgICwgY2xlYW51cDogY2xlYW51cFxuICAgICwgbG9hZGVkOiB1bmF0dGFjaFxuICAgIH07XG4gIH1cblxuLyogZXNsaW50IG5vLXVuZGVmOiBcIm9mZlwiLCBuZXctY2FwOiBcIm9mZlwiICovXG4sIGNyZWF0ZUh0bWxmaWxlOiBmdW5jdGlvbihpZnJhbWVVcmwsIGVycm9yQ2FsbGJhY2spIHtcbiAgICB2YXIgYXhvID0gWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKTtcbiAgICB2YXIgZG9jID0gbmV3IGdsb2JhbFtheG9dKCdodG1sZmlsZScpO1xuICAgIHZhciB0cmVmLCB1bmxvYWRSZWY7XG4gICAgdmFyIGlmcmFtZTtcbiAgICB2YXIgdW5hdHRhY2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0cmVmKTtcbiAgICAgIGlmcmFtZS5vbmVycm9yID0gbnVsbDtcbiAgICB9O1xuICAgIHZhciBjbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoZG9jKSB7XG4gICAgICAgIHVuYXR0YWNoKCk7XG4gICAgICAgIGV2ZW50VXRpbHMudW5sb2FkRGVsKHVubG9hZFJlZik7XG4gICAgICAgIGlmcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgICAgIGlmcmFtZSA9IGRvYyA9IG51bGw7XG4gICAgICAgIENvbGxlY3RHYXJiYWdlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgb25lcnJvciA9IGZ1bmN0aW9uKHIpIHtcbiAgICAgIGRlYnVnKCdvbmVycm9yJywgcik7XG4gICAgICBpZiAoZG9jKSB7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgZXJyb3JDYWxsYmFjayhyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBwb3N0ID0gZnVuY3Rpb24obXNnLCBvcmlnaW4pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFdoZW4gdGhlIGlmcmFtZSBpcyBub3QgbG9hZGVkLCBJRSByYWlzZXMgYW4gZXhjZXB0aW9uXG4gICAgICAgIC8vIG9uICdjb250ZW50V2luZG93Jy5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoaWZyYW1lICYmIGlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKG1zZywgb3JpZ2luKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDApO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRvYy5vcGVuKCk7XG4gICAgZG9jLndyaXRlKCc8aHRtbD48cycgKyAnY3JpcHQ+JyArXG4gICAgICAgICAgICAgICdkb2N1bWVudC5kb21haW49XCInICsgZ2xvYmFsLmRvY3VtZW50LmRvbWFpbiArICdcIjsnICtcbiAgICAgICAgICAgICAgJzwvcycgKyAnY3JpcHQ+PC9odG1sPicpO1xuICAgIGRvYy5jbG9zZSgpO1xuICAgIGRvYy5wYXJlbnRXaW5kb3dbbW9kdWxlLmV4cG9ydHMuV1ByZWZpeF0gPSBnbG9iYWxbbW9kdWxlLmV4cG9ydHMuV1ByZWZpeF07XG4gICAgdmFyIGMgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQoYyk7XG4gICAgaWZyYW1lID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGMuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBpZnJhbWUuc3JjID0gaWZyYW1lVXJsO1xuICAgIGlmcmFtZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICBvbmVycm9yKCdvbmVycm9yJyk7XG4gICAgfTtcbiAgICB0cmVmID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIG9uZXJyb3IoJ3RpbWVvdXQnKTtcbiAgICB9LCAxNTAwMCk7XG4gICAgdW5sb2FkUmVmID0gZXZlbnRVdGlscy51bmxvYWRBZGQoY2xlYW51cCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvc3Q6IHBvc3RcbiAgICAsIGNsZWFudXA6IGNsZWFudXBcbiAgICAsIGxvYWRlZDogdW5hdHRhY2hcbiAgICB9O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5pZnJhbWVFbmFibGVkID0gZmFsc2U7XG5pZiAoZ2xvYmFsLmRvY3VtZW50KSB7XG4gIC8vIHBvc3RNZXNzYWdlIG1pc2JlaGF2ZXMgaW4ga29ucXVlcm9yIDQuNi41IC0gdGhlIG1lc3NhZ2VzIGFyZSBkZWxpdmVyZWQgd2l0aFxuICAvLyBodWdlIGRlbGF5LCBvciBub3QgYXQgYWxsLlxuICBtb2R1bGUuZXhwb3J0cy5pZnJhbWVFbmFibGVkID0gKHR5cGVvZiBnbG9iYWwucG9zdE1lc3NhZ2UgPT09ICdmdW5jdGlvbicgfHxcbiAgICB0eXBlb2YgZ2xvYmFsLnBvc3RNZXNzYWdlID09PSAnb2JqZWN0JykgJiYgKCFicm93c2VyLmlzS29ucXVlcm9yKCkpO1xufVxuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0sdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7XCIuL2Jyb3dzZXJcIjo0NCxcIi4vZXZlbnRcIjo0NixcImRlYnVnXCI6NTUsXCJqc29uM1wiOjU4fV0sNDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbG9nT2JqZWN0ID0ge307XG5bJ2xvZycsICdkZWJ1ZycsICd3YXJuJ10uZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgdmFyIGxldmVsRXhpc3RzO1xuXG4gIHRyeSB7XG4gICAgbGV2ZWxFeGlzdHMgPSBnbG9iYWwuY29uc29sZSAmJiBnbG9iYWwuY29uc29sZVtsZXZlbF0gJiYgZ2xvYmFsLmNvbnNvbGVbbGV2ZWxdLmFwcGx5O1xuICB9IGNhdGNoKGUpIHtcbiAgICAvLyBkbyBub3RoaW5nXG4gIH1cblxuICBsb2dPYmplY3RbbGV2ZWxdID0gbGV2ZWxFeGlzdHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5jb25zb2xlW2xldmVsXS5hcHBseShnbG9iYWwuY29uc29sZSwgYXJndW1lbnRzKTtcbiAgfSA6IChsZXZlbCA9PT0gJ2xvZycgPyBmdW5jdGlvbiAoKSB7fSA6IGxvZ09iamVjdC5sb2cpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9nT2JqZWN0O1xuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7fV0sNDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNPYmplY3Q6IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIG9iajtcbiAgICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlID09PSAnb2JqZWN0JyAmJiAhIW9iajtcbiAgfVxuXG4sIGV4dGVuZDogZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCF0aGlzLmlzT2JqZWN0KG9iaikpIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIHZhciBzb3VyY2UsIHByb3A7XG4gICAgZm9yICh2YXIgaSA9IDEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yIChwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwgcHJvcCkpIHtcbiAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfVxufTtcblxufSx7fV0sNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vKiBnbG9iYWwgY3J5cHRvOnRydWUgKi9cbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblxuLy8gVGhpcyBzdHJpbmcgaGFzIGxlbmd0aCAzMiwgYSBwb3dlciBvZiAyLCBzbyB0aGUgbW9kdWx1cyBkb2Vzbid0IGludHJvZHVjZSBhXG4vLyBiaWFzLlxudmFyIF9yYW5kb21TdHJpbmdDaGFycyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NSc7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RyaW5nOiBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICB2YXIgbWF4ID0gX3JhbmRvbVN0cmluZ0NoYXJzLmxlbmd0aDtcbiAgICB2YXIgYnl0ZXMgPSBjcnlwdG8ucmFuZG9tQnl0ZXMobGVuZ3RoKTtcbiAgICB2YXIgcmV0ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmV0LnB1c2goX3JhbmRvbVN0cmluZ0NoYXJzLnN1YnN0cihieXRlc1tpXSAlIG1heCwgMSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0LmpvaW4oJycpO1xuICB9XG5cbiwgbnVtYmVyOiBmdW5jdGlvbihtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4KTtcbiAgfVxuXG4sIG51bWJlclN0cmluZzogZnVuY3Rpb24obWF4KSB7XG4gICAgdmFyIHQgPSAoJycgKyAobWF4IC0gMSkpLmxlbmd0aDtcbiAgICB2YXIgcCA9IG5ldyBBcnJheSh0ICsgMSkuam9pbignMCcpO1xuICAgIHJldHVybiAocCArIHRoaXMubnVtYmVyKG1heCkpLnNsaWNlKC10KTtcbiAgfVxufTtcblxufSx7XCJjcnlwdG9cIjo0M31dLDUxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6dXRpbHM6dHJhbnNwb3J0Jyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXZhaWxhYmxlVHJhbnNwb3J0cykge1xuICByZXR1cm4ge1xuICAgIGZpbHRlclRvRW5hYmxlZDogZnVuY3Rpb24odHJhbnNwb3J0c1doaXRlbGlzdCwgaW5mbykge1xuICAgICAgdmFyIHRyYW5zcG9ydHMgPSB7XG4gICAgICAgIG1haW46IFtdXG4gICAgICAsIGZhY2FkZTogW11cbiAgICAgIH07XG4gICAgICBpZiAoIXRyYW5zcG9ydHNXaGl0ZWxpc3QpIHtcbiAgICAgICAgdHJhbnNwb3J0c1doaXRlbGlzdCA9IFtdO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdHJhbnNwb3J0c1doaXRlbGlzdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdHJhbnNwb3J0c1doaXRlbGlzdCA9IFt0cmFuc3BvcnRzV2hpdGVsaXN0XTtcbiAgICAgIH1cblxuICAgICAgYXZhaWxhYmxlVHJhbnNwb3J0cy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zKSB7XG4gICAgICAgIGlmICghdHJhbnMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnMudHJhbnNwb3J0TmFtZSA9PT0gJ3dlYnNvY2tldCcgJiYgaW5mby53ZWJzb2NrZXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgZGVidWcoJ2Rpc2FibGVkIGZyb20gc2VydmVyJywgJ3dlYnNvY2tldCcpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc3BvcnRzV2hpdGVsaXN0Lmxlbmd0aCAmJlxuICAgICAgICAgICAgdHJhbnNwb3J0c1doaXRlbGlzdC5pbmRleE9mKHRyYW5zLnRyYW5zcG9ydE5hbWUpID09PSAtMSkge1xuICAgICAgICAgIGRlYnVnKCdub3QgaW4gd2hpdGVsaXN0JywgdHJhbnMudHJhbnNwb3J0TmFtZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zLmVuYWJsZWQoaW5mbykpIHtcbiAgICAgICAgICBkZWJ1ZygnZW5hYmxlZCcsIHRyYW5zLnRyYW5zcG9ydE5hbWUpO1xuICAgICAgICAgIHRyYW5zcG9ydHMubWFpbi5wdXNoKHRyYW5zKTtcbiAgICAgICAgICBpZiAodHJhbnMuZmFjYWRlVHJhbnNwb3J0KSB7XG4gICAgICAgICAgICB0cmFuc3BvcnRzLmZhY2FkZS5wdXNoKHRyYW5zLmZhY2FkZVRyYW5zcG9ydCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdkaXNhYmxlZCcsIHRyYW5zLnRyYW5zcG9ydE5hbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cmFuc3BvcnRzO1xuICAgIH1cbiAgfTtcbn07XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSlcblxufSx7XCJkZWJ1Z1wiOjU1fV0sNTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFVSTCA9IHJlcXVpcmUoJ3VybC1wYXJzZScpO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnV0aWxzOnVybCcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0T3JpZ2luOiBmdW5jdGlvbih1cmwpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHAgPSBuZXcgVVJMKHVybCk7XG4gICAgaWYgKHAucHJvdG9jb2wgPT09ICdmaWxlOicpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBwb3J0ID0gcC5wb3J0O1xuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IChwLnByb3RvY29sID09PSAnaHR0cHM6JykgPyAnNDQzJyA6ICc4MCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHAucHJvdG9jb2wgKyAnLy8nICsgcC5ob3N0bmFtZSArICc6JyArIHBvcnQ7XG4gIH1cblxuLCBpc09yaWdpbkVxdWFsOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHJlcyA9IHRoaXMuZ2V0T3JpZ2luKGEpID09PSB0aGlzLmdldE9yaWdpbihiKTtcbiAgICBkZWJ1Zygnc2FtZScsIGEsIGIsIHJlcyk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4sIGlzU2NoZW1lRXF1YWw6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gKGEuc3BsaXQoJzonKVswXSA9PT0gYi5zcGxpdCgnOicpWzBdKTtcbiAgfVxuXG4sIGFkZFBhdGg6IGZ1bmN0aW9uICh1cmwsIHBhdGgpIHtcbiAgICB2YXIgcXMgPSB1cmwuc3BsaXQoJz8nKTtcbiAgICByZXR1cm4gcXNbMF0gKyBwYXRoICsgKHFzWzFdID8gJz8nICsgcXNbMV0gOiAnJyk7XG4gIH1cblxuLCBhZGRRdWVyeTogZnVuY3Rpb24gKHVybCwgcSkge1xuICAgIHJldHVybiB1cmwgKyAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAoJz8nICsgcSkgOiAoJyYnICsgcSkpO1xuICB9XG59O1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiZGVidWdcIjo1NSxcInVybC1wYXJzZVwiOjYxfV0sNTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSAnMS40LjAnO1xuXG59LHt9XSw1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLT9cXGQ/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG5cbn0se31dLDU1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICovXG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gbG9jYWxzdG9yYWdlKCk7XG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFsnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJywgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLCAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJywgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLCAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJywgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLCAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMyddO1xuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmICh3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInIHx8IHdpbmRvdy5wcm9jZXNzLl9fbndqcykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG5cblxuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gSXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcblxuXG4gIHJldHVybiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UgfHwgLy8gSXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCB3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpIHx8IC8vIElzIGZpcmVmb3ggPj0gdjMxP1xuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSB8fCAvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG4gIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pO1xufVxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICBhcmdzWzBdID0gKHRoaXMudXNlQ29sb3JzID8gJyVjJyA6ICcnKSArIHRoaXMubmFtZXNwYWNlICsgKHRoaXMudXNlQ29sb3JzID8gJyAlYycgOiAnICcpICsgYXJnc1swXSArICh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArICcrJyArIG1vZHVsZS5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF0aGlzLnVzZUNvbG9ycykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0Jyk7IC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIGlmIChtYXRjaCA9PT0gJyUlJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluZGV4Kys7XG5cbiAgICBpZiAobWF0Y2ggPT09ICclYycpIHtcbiAgICAgIC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgdmFyIF9jb25zb2xlO1xuXG4gIC8vIFRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAodHlwZW9mIGNvbnNvbGUgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihjb25zb2xlKSkgPT09ICdvYmplY3QnICYmIGNvbnNvbGUubG9nICYmIChfY29uc29sZSA9IGNvbnNvbGUpLmxvZy5hcHBseShfY29uc29sZSwgYXJndW1lbnRzKTtcbn1cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5zZXRJdGVtKCdkZWJ1ZycsIG5hbWVzcGFjZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7Ly8gU3dhbGxvd1xuICAgIC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuICB9XG59XG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG5cbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7fSAvLyBTd2FsbG93XG4gIC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuICAvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cblxuICBpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcbiAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cblxuICByZXR1cm4gcjtcbn1cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG4gIHRyeSB7XG4gICAgLy8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuICAgIC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsvLyBTd2FsbG93XG4gICAgLy8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xudmFyIGZvcm1hdHRlcnMgPSBtb2R1bGUuZXhwb3J0cy5mb3JtYXR0ZXJzO1xuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9KVxuXG59LHtcIi4vY29tbW9uXCI6NTZ9XSw1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcbiAgY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1ZztcbiAgY3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuICBjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG4gIGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuICBjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG4gIGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuICBjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG4gIE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgY3JlYXRlRGVidWdba2V5XSA9IGVudltrZXldO1xuICB9KTtcbiAgLyoqXG4gICogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuICAqL1xuXG4gIGNyZWF0ZURlYnVnLmluc3RhbmNlcyA9IFtdO1xuICAvKipcbiAgKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAgKi9cblxuICBjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuICBjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuICAvKipcbiAgKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gICpcbiAgKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gICovXG5cbiAgY3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuICAvKipcbiAgKiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG4gICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuICAqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuICAqIEBhcGkgcHJpdmF0ZVxuICAqL1xuXG4gIGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICAgIHZhciBoYXNoID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcbiAgfVxuXG4gIGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG4gIC8qKlxuICAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICAqXG4gICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAqIEBhcGkgcHVibGljXG4gICovXG5cbiAgZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG4gICAgdmFyIHByZXZUaW1lO1xuXG4gICAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgLy8gRGlzYWJsZWQ/XG4gICAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VsZiA9IGRlYnVnOyAvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXG4gICAgICB2YXIgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcbiAgICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgICBzZWxmLmRpZmYgPSBtcztcbiAgICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICAgIHByZXZUaW1lID0gY3VycjtcbiAgICAgIGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICAgIGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgICAgfSAvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXG5cbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24gKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgICAgLy8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgICBpZiAobWF0Y2ggPT09ICclJScpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleCsrO1xuICAgICAgICB2YXIgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTsgLy8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXG4gICAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIGluZGV4LS07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTsgLy8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblxuICAgICAgY3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuICAgICAgdmFyIGxvZ0ZuID0gc2VsZi5sb2cgfHwgY3JlYXRlRGVidWcubG9nO1xuICAgICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuXG4gICAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICAgIGRlYnVnLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gICAgZGVidWcudXNlQ29sb3JzID0gY3JlYXRlRGVidWcudXNlQ29sb3JzKCk7XG4gICAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICAgIGRlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuICAgIGRlYnVnLmV4dGVuZCA9IGV4dGVuZDsgLy8gRGVidWcuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG4gICAgLy8gZGVidWcucmF3TG9nID0gcmF3TG9nO1xuICAgIC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cbiAgICBpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuICAgIH1cblxuICAgIGNyZWF0ZURlYnVnLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcbiAgICByZXR1cm4gZGVidWc7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHZhciBpbmRleCA9IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgY3JlYXRlRGVidWcuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcbiAgICByZXR1cm4gY3JlYXRlRGVidWcodGhpcy5uYW1lc3BhY2UgKyAodHlwZW9mIGRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnOicgOiBkZWxpbWl0ZXIpICsgbmFtZXNwYWNlKTtcbiAgfVxuICAvKipcbiAgKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAgKlxuICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gICogQGFwaSBwdWJsaWNcbiAgKi9cblxuXG4gIGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gICAgY3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcbiAgICBjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuICAgIGNyZWF0ZURlYnVnLnNraXBzID0gW107XG4gICAgdmFyIGk7XG4gICAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoIXNwbGl0W2ldKSB7XG4gICAgICAgIC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuICAgICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgICBjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGluc3RhbmNlID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzW2ldO1xuICAgICAgaW5zdGFuY2UuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gICpcbiAgKiBAYXBpIHB1YmxpY1xuICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuICB9XG4gIC8qKlxuICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgKlxuICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICogQHJldHVybiB7Qm9vbGVhbn1cbiAgKiBAYXBpIHB1YmxpY1xuICAqL1xuXG5cbiAgZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gICAgaWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuXG4gICAgZm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChjcmVhdGVEZWJ1Zy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGNyZWF0ZURlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAqIENvZXJjZSBgdmFsYC5cbiAgKlxuICAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICAqIEByZXR1cm4ge01peGVkfVxuICAqIEBhcGkgcHJpdmF0ZVxuICAqL1xuXG5cbiAgZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICAgIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgY3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG4gIHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcblxuXG59LHtcIm1zXCI6NTR9XSw1NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5pZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cblxufSx7fV0sNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuLyohIEpTT04gdjMuMy4yIHwgaHR0cDovL2Jlc3RpZWpzLmdpdGh1Yi5pby9qc29uMyB8IENvcHlyaWdodCAyMDEyLTIwMTQsIEtpdCBDYW1icmlkZ2UgfCBodHRwOi8va2l0Lm1pdC1saWNlbnNlLm9yZyAqL1xuOyhmdW5jdGlvbiAoKSB7XG4gIC8vIERldGVjdCB0aGUgYGRlZmluZWAgZnVuY3Rpb24gZXhwb3NlZCBieSBhc3luY2hyb25vdXMgbW9kdWxlIGxvYWRlcnMuIFRoZVxuICAvLyBzdHJpY3QgYGRlZmluZWAgY2hlY2sgaXMgbmVjZXNzYXJ5IGZvciBjb21wYXRpYmlsaXR5IHdpdGggYHIuanNgLlxuICB2YXIgaXNMb2FkZXIgPSB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZDtcblxuICAvLyBBIHNldCBvZiB0eXBlcyB1c2VkIHRvIGRpc3Rpbmd1aXNoIG9iamVjdHMgZnJvbSBwcmltaXRpdmVzLlxuICB2YXIgb2JqZWN0VHlwZXMgPSB7XG4gICAgXCJmdW5jdGlvblwiOiB0cnVlLFxuICAgIFwib2JqZWN0XCI6IHRydWVcbiAgfTtcblxuICAvLyBEZXRlY3QgdGhlIGBleHBvcnRzYCBvYmplY3QgZXhwb3NlZCBieSBDb21tb25KUyBpbXBsZW1lbnRhdGlvbnMuXG4gIHZhciBmcmVlRXhwb3J0cyA9IG9iamVjdFR5cGVzW3R5cGVvZiBleHBvcnRzXSAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLy8gVXNlIHRoZSBgZ2xvYmFsYCBvYmplY3QgZXhwb3NlZCBieSBOb2RlIChpbmNsdWRpbmcgQnJvd3NlcmlmeSB2aWFcbiAgLy8gYGluc2VydC1tb2R1bGUtZ2xvYmFsc2ApLCBOYXJ3aGFsLCBhbmQgUmluZ28gYXMgdGhlIGRlZmF1bHQgY29udGV4dCxcbiAgLy8gYW5kIHRoZSBgd2luZG93YCBvYmplY3QgaW4gYnJvd3NlcnMuIFJoaW5vIGV4cG9ydHMgYSBgZ2xvYmFsYCBmdW5jdGlvblxuICAvLyBpbnN0ZWFkLlxuICB2YXIgcm9vdCA9IG9iamVjdFR5cGVzW3R5cGVvZiB3aW5kb3ddICYmIHdpbmRvdyB8fCB0aGlzLFxuICAgICAgZnJlZUdsb2JhbCA9IGZyZWVFeHBvcnRzICYmIG9iamVjdFR5cGVzW3R5cGVvZiBtb2R1bGVdICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIHR5cGVvZiBnbG9iYWwgPT0gXCJvYmplY3RcIiAmJiBnbG9iYWw7XG5cbiAgaWYgKGZyZWVHbG9iYWwgJiYgKGZyZWVHbG9iYWxbXCJnbG9iYWxcIl0gPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbFtcIndpbmRvd1wiXSA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsW1wic2VsZlwiXSA9PT0gZnJlZUdsb2JhbCkpIHtcbiAgICByb290ID0gZnJlZUdsb2JhbDtcbiAgfVxuXG4gIC8vIFB1YmxpYzogSW5pdGlhbGl6ZXMgSlNPTiAzIHVzaW5nIHRoZSBnaXZlbiBgY29udGV4dGAgb2JqZWN0LCBhdHRhY2hpbmcgdGhlXG4gIC8vIGBzdHJpbmdpZnlgIGFuZCBgcGFyc2VgIGZ1bmN0aW9ucyB0byB0aGUgc3BlY2lmaWVkIGBleHBvcnRzYCBvYmplY3QuXG4gIGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0LCBleHBvcnRzKSB7XG4gICAgY29udGV4dCB8fCAoY29udGV4dCA9IHJvb3RbXCJPYmplY3RcIl0oKSk7XG4gICAgZXhwb3J0cyB8fCAoZXhwb3J0cyA9IHJvb3RbXCJPYmplY3RcIl0oKSk7XG5cbiAgICAvLyBOYXRpdmUgY29uc3RydWN0b3IgYWxpYXNlcy5cbiAgICB2YXIgTnVtYmVyID0gY29udGV4dFtcIk51bWJlclwiXSB8fCByb290W1wiTnVtYmVyXCJdLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0W1wiU3RyaW5nXCJdIHx8IHJvb3RbXCJTdHJpbmdcIl0sXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHRbXCJPYmplY3RcIl0gfHwgcm9vdFtcIk9iamVjdFwiXSxcbiAgICAgICAgRGF0ZSA9IGNvbnRleHRbXCJEYXRlXCJdIHx8IHJvb3RbXCJEYXRlXCJdLFxuICAgICAgICBTeW50YXhFcnJvciA9IGNvbnRleHRbXCJTeW50YXhFcnJvclwiXSB8fCByb290W1wiU3ludGF4RXJyb3JcIl0sXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHRbXCJUeXBlRXJyb3JcIl0gfHwgcm9vdFtcIlR5cGVFcnJvclwiXSxcbiAgICAgICAgTWF0aCA9IGNvbnRleHRbXCJNYXRoXCJdIHx8IHJvb3RbXCJNYXRoXCJdLFxuICAgICAgICBuYXRpdmVKU09OID0gY29udGV4dFtcIkpTT05cIl0gfHwgcm9vdFtcIkpTT05cIl07XG5cbiAgICAvLyBEZWxlZ2F0ZSB0byB0aGUgbmF0aXZlIGBzdHJpbmdpZnlgIGFuZCBgcGFyc2VgIGltcGxlbWVudGF0aW9ucy5cbiAgICBpZiAodHlwZW9mIG5hdGl2ZUpTT04gPT0gXCJvYmplY3RcIiAmJiBuYXRpdmVKU09OKSB7XG4gICAgICBleHBvcnRzLnN0cmluZ2lmeSA9IG5hdGl2ZUpTT04uc3RyaW5naWZ5O1xuICAgICAgZXhwb3J0cy5wYXJzZSA9IG5hdGl2ZUpTT04ucGFyc2U7XG4gICAgfVxuXG4gICAgLy8gQ29udmVuaWVuY2UgYWxpYXNlcy5cbiAgICB2YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLFxuICAgICAgICBnZXRDbGFzcyA9IG9iamVjdFByb3RvLnRvU3RyaW5nLFxuICAgICAgICBpc1Byb3BlcnR5LCBmb3JFYWNoLCB1bmRlZjtcblxuICAgIC8vIFRlc3QgdGhlIGBEYXRlI2dldFVUQypgIG1ldGhvZHMuIEJhc2VkIG9uIHdvcmsgYnkgQFlhZmZsZS5cbiAgICB2YXIgaXNFeHRlbmRlZCA9IG5ldyBEYXRlKC0zNTA5ODI3MzM0NTczMjkyKTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlIGBnZXRVVENGdWxsWWVhcmAsIGBNb250aGAsIGFuZCBgRGF0ZWAgbWV0aG9kcyByZXR1cm4gbm9uc2Vuc2ljYWxcbiAgICAgIC8vIHJlc3VsdHMgZm9yIGNlcnRhaW4gZGF0ZXMgaW4gT3BlcmEgPj0gMTAuNTMuXG4gICAgICBpc0V4dGVuZGVkID0gaXNFeHRlbmRlZC5nZXRVVENGdWxsWWVhcigpID09IC0xMDkyNTIgJiYgaXNFeHRlbmRlZC5nZXRVVENNb250aCgpID09PSAwICYmIGlzRXh0ZW5kZWQuZ2V0VVRDRGF0ZSgpID09PSAxICYmXG4gICAgICAgIC8vIFNhZmFyaSA8IDIuMC4yIHN0b3JlcyB0aGUgaW50ZXJuYWwgbWlsbGlzZWNvbmQgdGltZSB2YWx1ZSBjb3JyZWN0bHksXG4gICAgICAgIC8vIGJ1dCBjbGlwcyB0aGUgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBkYXRlIG1ldGhvZHMgdG8gdGhlIHJhbmdlIG9mXG4gICAgICAgIC8vIHNpZ25lZCAzMi1iaXQgaW50ZWdlcnMgKFstMiAqKiAzMSwgMiAqKiAzMSAtIDFdKS5cbiAgICAgICAgaXNFeHRlbmRlZC5nZXRVVENIb3VycygpID09IDEwICYmIGlzRXh0ZW5kZWQuZ2V0VVRDTWludXRlcygpID09IDM3ICYmIGlzRXh0ZW5kZWQuZ2V0VVRDU2Vjb25kcygpID09IDYgJiYgaXNFeHRlbmRlZC5nZXRVVENNaWxsaXNlY29uZHMoKSA9PSA3MDg7XG4gICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7fVxuXG4gICAgLy8gSW50ZXJuYWw6IERldGVybWluZXMgd2hldGhlciB0aGUgbmF0aXZlIGBKU09OLnN0cmluZ2lmeWAgYW5kIGBwYXJzZWBcbiAgICAvLyBpbXBsZW1lbnRhdGlvbnMgYXJlIHNwZWMtY29tcGxpYW50LiBCYXNlZCBvbiB3b3JrIGJ5IEtlbiBTbnlkZXIuXG4gICAgZnVuY3Rpb24gaGFzKG5hbWUpIHtcbiAgICAgIGlmIChoYXNbbmFtZV0gIT09IHVuZGVmKSB7XG4gICAgICAgIC8vIFJldHVybiBjYWNoZWQgZmVhdHVyZSB0ZXN0IHJlc3VsdC5cbiAgICAgICAgcmV0dXJuIGhhc1tuYW1lXTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1N1cHBvcnRlZDtcbiAgICAgIGlmIChuYW1lID09IFwiYnVnLXN0cmluZy1jaGFyLWluZGV4XCIpIHtcbiAgICAgICAgLy8gSUUgPD0gNyBkb2Vzbid0IHN1cHBvcnQgYWNjZXNzaW5nIHN0cmluZyBjaGFyYWN0ZXJzIHVzaW5nIHNxdWFyZVxuICAgICAgICAvLyBicmFja2V0IG5vdGF0aW9uLiBJRSA4IG9ubHkgc3VwcG9ydHMgdGhpcyBmb3IgcHJpbWl0aXZlcy5cbiAgICAgICAgaXNTdXBwb3J0ZWQgPSBcImFcIlswXSAhPSBcImFcIjtcbiAgICAgIH0gZWxzZSBpZiAobmFtZSA9PSBcImpzb25cIikge1xuICAgICAgICAvLyBJbmRpY2F0ZXMgd2hldGhlciBib3RoIGBKU09OLnN0cmluZ2lmeWAgYW5kIGBKU09OLnBhcnNlYCBhcmVcbiAgICAgICAgLy8gc3VwcG9ydGVkLlxuICAgICAgICBpc1N1cHBvcnRlZCA9IGhhcyhcImpzb24tc3RyaW5naWZ5XCIpICYmIGhhcyhcImpzb24tcGFyc2VcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdmFsdWUsIHNlcmlhbGl6ZWQgPSAne1wiYVwiOlsxLHRydWUsZmFsc2UsbnVsbCxcIlxcXFx1MDAwMFxcXFxiXFxcXG5cXFxcZlxcXFxyXFxcXHRcIl19JztcbiAgICAgICAgLy8gVGVzdCBgSlNPTi5zdHJpbmdpZnlgLlxuICAgICAgICBpZiAobmFtZSA9PSBcImpzb24tc3RyaW5naWZ5XCIpIHtcbiAgICAgICAgICB2YXIgc3RyaW5naWZ5ID0gZXhwb3J0cy5zdHJpbmdpZnksIHN0cmluZ2lmeVN1cHBvcnRlZCA9IHR5cGVvZiBzdHJpbmdpZnkgPT0gXCJmdW5jdGlvblwiICYmIGlzRXh0ZW5kZWQ7XG4gICAgICAgICAgaWYgKHN0cmluZ2lmeVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgLy8gQSB0ZXN0IGZ1bmN0aW9uIG9iamVjdCB3aXRoIGEgY3VzdG9tIGB0b0pTT05gIG1ldGhvZC5cbiAgICAgICAgICAgICh2YWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9KS50b0pTT04gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHN0cmluZ2lmeVN1cHBvcnRlZCA9XG4gICAgICAgICAgICAgICAgLy8gRmlyZWZveCAzLjFiMSBhbmQgYjIgc2VyaWFsaXplIHN0cmluZywgbnVtYmVyLCBhbmQgYm9vbGVhblxuICAgICAgICAgICAgICAgIC8vIHByaW1pdGl2ZXMgYXMgb2JqZWN0IGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSgwKSA9PT0gXCIwXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgYjIsIGFuZCBKU09OIDIgc2VyaWFsaXplIHdyYXBwZWQgcHJpbWl0aXZlcyBhcyBvYmplY3RcbiAgICAgICAgICAgICAgICAvLyBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IE51bWJlcigpKSA9PT0gXCIwXCIgJiZcbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IFN0cmluZygpKSA9PSAnXCJcIicgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgMiB0aHJvdyBhbiBlcnJvciBpZiB0aGUgdmFsdWUgaXMgYG51bGxgLCBgdW5kZWZpbmVkYCwgb3JcbiAgICAgICAgICAgICAgICAvLyBkb2VzIG5vdCBkZWZpbmUgYSBjYW5vbmljYWwgSlNPTiByZXByZXNlbnRhdGlvbiAodGhpcyBhcHBsaWVzIHRvXG4gICAgICAgICAgICAgICAgLy8gb2JqZWN0cyB3aXRoIGB0b0pTT05gIHByb3BlcnRpZXMgYXMgd2VsbCwgKnVubGVzcyogdGhleSBhcmUgbmVzdGVkXG4gICAgICAgICAgICAgICAgLy8gd2l0aGluIGFuIG9iamVjdCBvciBhcnJheSkuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KGdldENsYXNzKSA9PT0gdW5kZWYgJiZcbiAgICAgICAgICAgICAgICAvLyBJRSA4IHNlcmlhbGl6ZXMgYHVuZGVmaW5lZGAgYXMgYFwidW5kZWZpbmVkXCJgLiBTYWZhcmkgPD0gNS4xLjcgYW5kXG4gICAgICAgICAgICAgICAgLy8gRkYgMy4xYjMgcGFzcyB0aGlzIHRlc3QuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KHVuZGVmKSA9PT0gdW5kZWYgJiZcbiAgICAgICAgICAgICAgICAvLyBTYWZhcmkgPD0gNS4xLjcgYW5kIEZGIDMuMWIzIHRocm93IGBFcnJvcmBzIGFuZCBgVHlwZUVycm9yYHMsXG4gICAgICAgICAgICAgICAgLy8gcmVzcGVjdGl2ZWx5LCBpZiB0aGUgdmFsdWUgaXMgb21pdHRlZCBlbnRpcmVseS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoKSA9PT0gdW5kZWYgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgMiB0aHJvdyBhbiBlcnJvciBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgbm90IGEgbnVtYmVyLFxuICAgICAgICAgICAgICAgIC8vIHN0cmluZywgYXJyYXksIG9iamVjdCwgQm9vbGVhbiwgb3IgYG51bGxgIGxpdGVyYWwuIFRoaXMgYXBwbGllcyB0b1xuICAgICAgICAgICAgICAgIC8vIG9iamVjdHMgd2l0aCBjdXN0b20gYHRvSlNPTmAgbWV0aG9kcyBhcyB3ZWxsLCB1bmxlc3MgdGhleSBhcmUgbmVzdGVkXG4gICAgICAgICAgICAgICAgLy8gaW5zaWRlIG9iamVjdCBvciBhcnJheSBsaXRlcmFscy4gWVVJIDMuMC4wYjEgaWdub3JlcyBjdXN0b20gYHRvSlNPTmBcbiAgICAgICAgICAgICAgICAvLyBtZXRob2RzIGVudGlyZWx5LlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSh2YWx1ZSkgPT09IFwiMVwiICYmXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KFt2YWx1ZV0pID09IFwiWzFdXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBQcm90b3R5cGUgPD0gMS42LjEgc2VyaWFsaXplcyBgW3VuZGVmaW5lZF1gIGFzIGBcIltdXCJgIGluc3RlYWQgb2ZcbiAgICAgICAgICAgICAgICAvLyBgXCJbbnVsbF1cImAuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KFt1bmRlZl0pID09IFwiW251bGxdXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBZVUkgMy4wLjBiMSBmYWlscyB0byBzZXJpYWxpemUgYG51bGxgIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShudWxsKSA9PSBcIm51bGxcIiAmJlxuICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCAyIGhhbHRzIHNlcmlhbGl6YXRpb24gaWYgYW4gYXJyYXkgY29udGFpbnMgYSBmdW5jdGlvbjpcbiAgICAgICAgICAgICAgICAvLyBgWzEsIHRydWUsIGdldENsYXNzLCAxXWAgc2VyaWFsaXplcyBhcyBcIlsxLHRydWUsXSxcIi4gRkYgMy4xYjNcbiAgICAgICAgICAgICAgICAvLyBlbGlkZXMgbm9uLUpTT04gdmFsdWVzIGZyb20gb2JqZWN0cyBhbmQgYXJyYXlzLCB1bmxlc3MgdGhleVxuICAgICAgICAgICAgICAgIC8vIGRlZmluZSBjdXN0b20gYHRvSlNPTmAgbWV0aG9kcy5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoW3VuZGVmLCBnZXRDbGFzcywgbnVsbF0pID09IFwiW251bGwsbnVsbCxudWxsXVwiICYmXG4gICAgICAgICAgICAgICAgLy8gU2ltcGxlIHNlcmlhbGl6YXRpb24gdGVzdC4gRkYgMy4xYjEgdXNlcyBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZXNcbiAgICAgICAgICAgICAgICAvLyB3aGVyZSBjaGFyYWN0ZXIgZXNjYXBlIGNvZGVzIGFyZSBleHBlY3RlZCAoZS5nLiwgYFxcYmAgPT4gYFxcdTAwMDhgKS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoeyBcImFcIjogW3ZhbHVlLCB0cnVlLCBmYWxzZSwgbnVsbCwgXCJcXHgwMFxcYlxcblxcZlxcclxcdFwiXSB9KSA9PSBzZXJpYWxpemVkICYmXG4gICAgICAgICAgICAgICAgLy8gRkYgMy4xYjEgYW5kIGIyIGlnbm9yZSB0aGUgYGZpbHRlcmAgYW5kIGB3aWR0aGAgYXJndW1lbnRzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShudWxsLCB2YWx1ZSkgPT09IFwiMVwiICYmXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KFsxLCAyXSwgbnVsbCwgMSkgPT0gXCJbXFxuIDEsXFxuIDJcXG5dXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBKU09OIDIsIFByb3RvdHlwZSA8PSAxLjcsIGFuZCBvbGRlciBXZWJLaXQgYnVpbGRzIGluY29ycmVjdGx5XG4gICAgICAgICAgICAgICAgLy8gc2VyaWFsaXplIGV4dGVuZGVkIHllYXJzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgRGF0ZSgtOC42NGUxNSkpID09ICdcIi0yNzE4MjEtMDQtMjBUMDA6MDA6MDAuMDAwWlwiJyAmJlxuICAgICAgICAgICAgICAgIC8vIFRoZSBtaWxsaXNlY29uZHMgYXJlIG9wdGlvbmFsIGluIEVTIDUsIGJ1dCByZXF1aXJlZCBpbiA1LjEuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBEYXRlKDguNjRlMTUpKSA9PSAnXCIrMjc1NzYwLTA5LTEzVDAwOjAwOjAwLjAwMFpcIicgJiZcbiAgICAgICAgICAgICAgICAvLyBGaXJlZm94IDw9IDExLjAgaW5jb3JyZWN0bHkgc2VyaWFsaXplcyB5ZWFycyBwcmlvciB0byAwIGFzIG5lZ2F0aXZlXG4gICAgICAgICAgICAgICAgLy8gZm91ci1kaWdpdCB5ZWFycyBpbnN0ZWFkIG9mIHNpeC1kaWdpdCB5ZWFycy4gQ3JlZGl0czogQFlhZmZsZS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IERhdGUoLTYyMTk4NzU1MmU1KSkgPT0gJ1wiLTAwMDAwMS0wMS0wMVQwMDowMDowMC4wMDBaXCInICYmXG4gICAgICAgICAgICAgICAgLy8gU2FmYXJpIDw9IDUuMS41IGFuZCBPcGVyYSA+PSAxMC41MyBpbmNvcnJlY3RseSBzZXJpYWxpemUgbWlsbGlzZWNvbmRcbiAgICAgICAgICAgICAgICAvLyB2YWx1ZXMgbGVzcyB0aGFuIDEwMDAuIENyZWRpdHM6IEBZYWZmbGUuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBEYXRlKC0xKSkgPT0gJ1wiMTk2OS0xMi0zMVQyMzo1OTo1OS45OTlaXCInO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgIHN0cmluZ2lmeVN1cHBvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpc1N1cHBvcnRlZCA9IHN0cmluZ2lmeVN1cHBvcnRlZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUZXN0IGBKU09OLnBhcnNlYC5cbiAgICAgICAgaWYgKG5hbWUgPT0gXCJqc29uLXBhcnNlXCIpIHtcbiAgICAgICAgICB2YXIgcGFyc2UgPSBleHBvcnRzLnBhcnNlO1xuICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2UgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgYjIgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYSBiYXJlIGxpdGVyYWwgaXMgcHJvdmlkZWQuXG4gICAgICAgICAgICAgIC8vIENvbmZvcm1pbmcgaW1wbGVtZW50YXRpb25zIHNob3VsZCBhbHNvIGNvZXJjZSB0aGUgaW5pdGlhbCBhcmd1bWVudCB0b1xuICAgICAgICAgICAgICAvLyBhIHN0cmluZyBwcmlvciB0byBwYXJzaW5nLlxuICAgICAgICAgICAgICBpZiAocGFyc2UoXCIwXCIpID09PSAwICYmICFwYXJzZShmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBTaW1wbGUgcGFyc2luZyB0ZXN0LlxuICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2Uoc2VyaWFsaXplZCk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnNlU3VwcG9ydGVkID0gdmFsdWVbXCJhXCJdLmxlbmd0aCA9PSA1ICYmIHZhbHVlW1wiYVwiXVswXSA9PT0gMTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNhZmFyaSA8PSA1LjEuMiBhbmQgRkYgMy4xYjEgYWxsb3cgdW5lc2NhcGVkIHRhYnMgaW4gc3RyaW5ncy5cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSAhcGFyc2UoJ1wiXFx0XCInKTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge31cbiAgICAgICAgICAgICAgICAgIGlmIChwYXJzZVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIEZGIDQuMCBhbmQgNC4wLjEgYWxsb3cgbGVhZGluZyBgK2Agc2lnbnMgYW5kIGxlYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAvLyBkZWNpbWFsIHBvaW50cy4gRkYgNC4wLCA0LjAuMSwgYW5kIElFIDktMTAgYWxzbyBhbGxvd1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGNlcnRhaW4gb2N0YWwgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSBwYXJzZShcIjAxXCIpICE9PSAxO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAocGFyc2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBGRiA0LjAsIDQuMC4xLCBhbmQgUmhpbm8gMS43UjMtUjQgYWxsb3cgdHJhaWxpbmcgZGVjaW1hbFxuICAgICAgICAgICAgICAgICAgICAgIC8vIHBvaW50cy4gVGhlc2UgZW52aXJvbm1lbnRzLCBhbG9uZyB3aXRoIEZGIDMuMWIxIGFuZCAyLFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGFsc28gYWxsb3cgdHJhaWxpbmcgY29tbWFzIGluIEpTT04gb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgICAgICAgICAgICAgICAgICAgIHBhcnNlU3VwcG9ydGVkID0gcGFyc2UoXCIxLlwiKSAhPT0gMTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7fVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgIHBhcnNlU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlzU3VwcG9ydGVkID0gcGFyc2VTdXBwb3J0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNbbmFtZV0gPSAhIWlzU3VwcG9ydGVkO1xuICAgIH1cblxuICAgIGlmICghaGFzKFwianNvblwiKSkge1xuICAgICAgLy8gQ29tbW9uIGBbW0NsYXNzXV1gIG5hbWUgYWxpYXNlcy5cbiAgICAgIHZhciBmdW5jdGlvbkNsYXNzID0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiLFxuICAgICAgICAgIGRhdGVDbGFzcyA9IFwiW29iamVjdCBEYXRlXVwiLFxuICAgICAgICAgIG51bWJlckNsYXNzID0gXCJbb2JqZWN0IE51bWJlcl1cIixcbiAgICAgICAgICBzdHJpbmdDbGFzcyA9IFwiW29iamVjdCBTdHJpbmddXCIsXG4gICAgICAgICAgYXJyYXlDbGFzcyA9IFwiW29iamVjdCBBcnJheV1cIixcbiAgICAgICAgICBib29sZWFuQ2xhc3MgPSBcIltvYmplY3QgQm9vbGVhbl1cIjtcblxuICAgICAgLy8gRGV0ZWN0IGluY29tcGxldGUgc3VwcG9ydCBmb3IgYWNjZXNzaW5nIHN0cmluZyBjaGFyYWN0ZXJzIGJ5IGluZGV4LlxuICAgICAgdmFyIGNoYXJJbmRleEJ1Z2d5ID0gaGFzKFwiYnVnLXN0cmluZy1jaGFyLWluZGV4XCIpO1xuXG4gICAgICAvLyBEZWZpbmUgYWRkaXRpb25hbCB1dGlsaXR5IG1ldGhvZHMgaWYgdGhlIGBEYXRlYCBtZXRob2RzIGFyZSBidWdneS5cbiAgICAgIGlmICghaXNFeHRlbmRlZCkge1xuICAgICAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgICAgICAvLyBBIG1hcHBpbmcgYmV0d2VlbiB0aGUgbW9udGhzIG9mIHRoZSB5ZWFyIGFuZCB0aGUgbnVtYmVyIG9mIGRheXMgYmV0d2VlblxuICAgICAgICAvLyBKYW51YXJ5IDFzdCBhbmQgdGhlIGZpcnN0IG9mIHRoZSByZXNwZWN0aXZlIG1vbnRoLlxuICAgICAgICB2YXIgTW9udGhzID0gWzAsIDMxLCA1OSwgOTAsIDEyMCwgMTUxLCAxODEsIDIxMiwgMjQzLCAyNzMsIDMwNCwgMzM0XTtcbiAgICAgICAgLy8gSW50ZXJuYWw6IENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBkYXlzIGJldHdlZW4gdGhlIFVuaXggZXBvY2ggYW5kIHRoZVxuICAgICAgICAvLyBmaXJzdCBkYXkgb2YgdGhlIGdpdmVuIG1vbnRoLlxuICAgICAgICB2YXIgZ2V0RGF5ID0gZnVuY3Rpb24gKHllYXIsIG1vbnRoKSB7XG4gICAgICAgICAgcmV0dXJuIE1vbnRoc1ttb250aF0gKyAzNjUgKiAoeWVhciAtIDE5NzApICsgZmxvb3IoKHllYXIgLSAxOTY5ICsgKG1vbnRoID0gKyhtb250aCA+IDEpKSkgLyA0KSAtIGZsb29yKCh5ZWFyIC0gMTkwMSArIG1vbnRoKSAvIDEwMCkgKyBmbG9vcigoeWVhciAtIDE2MDEgKyBtb250aCkgLyA0MDApO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBJbnRlcm5hbDogRGV0ZXJtaW5lcyBpZiBhIHByb3BlcnR5IGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIHRoZSBnaXZlblxuICAgICAgLy8gb2JqZWN0LiBEZWxlZ2F0ZXMgdG8gdGhlIG5hdGl2ZSBgT2JqZWN0I2hhc093blByb3BlcnR5YCBtZXRob2QuXG4gICAgICBpZiAoIShpc1Byb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHkpKSB7XG4gICAgICAgIGlzUHJvcGVydHkgPSBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICB2YXIgbWVtYmVycyA9IHt9LCBjb25zdHJ1Y3RvcjtcbiAgICAgICAgICBpZiAoKG1lbWJlcnMuX19wcm90b19fID0gbnVsbCwgbWVtYmVycy5fX3Byb3RvX18gPSB7XG4gICAgICAgICAgICAvLyBUaGUgKnByb3RvKiBwcm9wZXJ0eSBjYW5ub3QgYmUgc2V0IG11bHRpcGxlIHRpbWVzIGluIHJlY2VudFxuICAgICAgICAgICAgLy8gdmVyc2lvbnMgb2YgRmlyZWZveCBhbmQgU2VhTW9ua2V5LlxuICAgICAgICAgICAgXCJ0b1N0cmluZ1wiOiAxXG4gICAgICAgICAgfSwgbWVtYmVycykudG9TdHJpbmcgIT0gZ2V0Q2xhc3MpIHtcbiAgICAgICAgICAgIC8vIFNhZmFyaSA8PSAyLjAuMyBkb2Vzbid0IGltcGxlbWVudCBgT2JqZWN0I2hhc093blByb3BlcnR5YCwgYnV0XG4gICAgICAgICAgICAvLyBzdXBwb3J0cyB0aGUgbXV0YWJsZSAqcHJvdG8qIHByb3BlcnR5LlxuICAgICAgICAgICAgaXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAvLyBDYXB0dXJlIGFuZCBicmVhayB0aGUgb2JqZWN0J3MgcHJvdG90eXBlIGNoYWluIChzZWUgc2VjdGlvbiA4LjYuMlxuICAgICAgICAgICAgICAvLyBvZiB0aGUgRVMgNS4xIHNwZWMpLiBUaGUgcGFyZW50aGVzaXplZCBleHByZXNzaW9uIHByZXZlbnRzIGFuXG4gICAgICAgICAgICAgIC8vIHVuc2FmZSB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgQ2xvc3VyZSBDb21waWxlci5cbiAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsID0gdGhpcy5fX3Byb3RvX18sIHJlc3VsdCA9IHByb3BlcnR5IGluICh0aGlzLl9fcHJvdG9fXyA9IG51bGwsIHRoaXMpO1xuICAgICAgICAgICAgICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgICAgICAgIHRoaXMuX19wcm90b19fID0gb3JpZ2luYWw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDYXB0dXJlIGEgcmVmZXJlbmNlIHRvIHRoZSB0b3AtbGV2ZWwgYE9iamVjdGAgY29uc3RydWN0b3IuXG4gICAgICAgICAgICBjb25zdHJ1Y3RvciA9IG1lbWJlcnMuY29uc3RydWN0b3I7XG4gICAgICAgICAgICAvLyBVc2UgdGhlIGBjb25zdHJ1Y3RvcmAgcHJvcGVydHkgdG8gc2ltdWxhdGUgYE9iamVjdCNoYXNPd25Qcm9wZXJ0eWAgaW5cbiAgICAgICAgICAgIC8vIG90aGVyIGVudmlyb25tZW50cy5cbiAgICAgICAgICAgIGlzUHJvcGVydHkgPSBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgdmFyIHBhcmVudCA9ICh0aGlzLmNvbnN0cnVjdG9yIHx8IGNvbnN0cnVjdG9yKS5wcm90b3R5cGU7XG4gICAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmICEocHJvcGVydHkgaW4gcGFyZW50ICYmIHRoaXNbcHJvcGVydHldID09PSBwYXJlbnRbcHJvcGVydHldKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIG1lbWJlcnMgPSBudWxsO1xuICAgICAgICAgIHJldHVybiBpc1Byb3BlcnR5LmNhbGwodGhpcywgcHJvcGVydHkpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBJbnRlcm5hbDogTm9ybWFsaXplcyB0aGUgYGZvci4uLmluYCBpdGVyYXRpb24gYWxnb3JpdGhtIGFjcm9zc1xuICAgICAgLy8gZW52aXJvbm1lbnRzLiBFYWNoIGVudW1lcmF0ZWQga2V5IGlzIHlpZWxkZWQgdG8gYSBgY2FsbGJhY2tgIGZ1bmN0aW9uLlxuICAgICAgZm9yRWFjaCA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzaXplID0gMCwgUHJvcGVydGllcywgbWVtYmVycywgcHJvcGVydHk7XG5cbiAgICAgICAgLy8gVGVzdHMgZm9yIGJ1Z3MgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQncyBgZm9yLi4uaW5gIGFsZ29yaXRobS4gVGhlXG4gICAgICAgIC8vIGB2YWx1ZU9mYCBwcm9wZXJ0eSBpbmhlcml0cyB0aGUgbm9uLWVudW1lcmFibGUgZmxhZyBmcm9tXG4gICAgICAgIC8vIGBPYmplY3QucHJvdG90eXBlYCBpbiBvbGRlciB2ZXJzaW9ucyBvZiBJRSwgTmV0c2NhcGUsIGFuZCBNb3ppbGxhLlxuICAgICAgICAoUHJvcGVydGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLnZhbHVlT2YgPSAwO1xuICAgICAgICB9KS5wcm90b3R5cGUudmFsdWVPZiA9IDA7XG5cbiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBgUHJvcGVydGllc2AgY2xhc3MuXG4gICAgICAgIG1lbWJlcnMgPSBuZXcgUHJvcGVydGllcygpO1xuICAgICAgICBmb3IgKHByb3BlcnR5IGluIG1lbWJlcnMpIHtcbiAgICAgICAgICAvLyBJZ25vcmUgYWxsIHByb3BlcnRpZXMgaW5oZXJpdGVkIGZyb20gYE9iamVjdC5wcm90b3R5cGVgLlxuICAgICAgICAgIGlmIChpc1Byb3BlcnR5LmNhbGwobWVtYmVycywgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICBzaXplKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFByb3BlcnRpZXMgPSBtZW1iZXJzID0gbnVsbDtcblxuICAgICAgICAvLyBOb3JtYWxpemUgdGhlIGl0ZXJhdGlvbiBhbGdvcml0aG0uXG4gICAgICAgIGlmICghc2l6ZSkge1xuICAgICAgICAgIC8vIEEgbGlzdCBvZiBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGluaGVyaXRlZCBmcm9tIGBPYmplY3QucHJvdG90eXBlYC5cbiAgICAgICAgICBtZW1iZXJzID0gW1widmFsdWVPZlwiLCBcInRvU3RyaW5nXCIsIFwidG9Mb2NhbGVTdHJpbmdcIiwgXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLCBcImlzUHJvdG90eXBlT2ZcIiwgXCJoYXNPd25Qcm9wZXJ0eVwiLCBcImNvbnN0cnVjdG9yXCJdO1xuICAgICAgICAgIC8vIElFIDw9IDgsIE1vemlsbGEgMS4wLCBhbmQgTmV0c2NhcGUgNi4yIGlnbm9yZSBzaGFkb3dlZCBub24tZW51bWVyYWJsZVxuICAgICAgICAgIC8vIHByb3BlcnRpZXMuXG4gICAgICAgICAgZm9yRWFjaCA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgaXNGdW5jdGlvbiA9IGdldENsYXNzLmNhbGwob2JqZWN0KSA9PSBmdW5jdGlvbkNsYXNzLCBwcm9wZXJ0eSwgbGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGhhc1Byb3BlcnR5ID0gIWlzRnVuY3Rpb24gJiYgdHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciAhPSBcImZ1bmN0aW9uXCIgJiYgb2JqZWN0VHlwZXNbdHlwZW9mIG9iamVjdC5oYXNPd25Qcm9wZXJ0eV0gJiYgb2JqZWN0Lmhhc093blByb3BlcnR5IHx8IGlzUHJvcGVydHk7XG4gICAgICAgICAgICBmb3IgKHByb3BlcnR5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgICAvLyBHZWNrbyA8PSAxLjAgZW51bWVyYXRlcyB0aGUgYHByb3RvdHlwZWAgcHJvcGVydHkgb2YgZnVuY3Rpb25zIHVuZGVyXG4gICAgICAgICAgICAgIC8vIGNlcnRhaW4gY29uZGl0aW9uczsgSUUgZG9lcyBub3QuXG4gICAgICAgICAgICAgIGlmICghKGlzRnVuY3Rpb24gJiYgcHJvcGVydHkgPT0gXCJwcm90b3R5cGVcIikgJiYgaGFzUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWFudWFsbHkgaW52b2tlIHRoZSBjYWxsYmFjayBmb3IgZWFjaCBub24tZW51bWVyYWJsZSBwcm9wZXJ0eS5cbiAgICAgICAgICAgIGZvciAobGVuZ3RoID0gbWVtYmVycy5sZW5ndGg7IHByb3BlcnR5ID0gbWVtYmVyc1stLWxlbmd0aF07IGhhc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkgJiYgY2FsbGJhY2socHJvcGVydHkpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHNpemUgPT0gMikge1xuICAgICAgICAgIC8vIFNhZmFyaSA8PSAyLjAuNCBlbnVtZXJhdGVzIHNoYWRvd2VkIHByb3BlcnRpZXMgdHdpY2UuXG4gICAgICAgICAgZm9yRWFjaCA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBzZXQgb2YgaXRlcmF0ZWQgcHJvcGVydGllcy5cbiAgICAgICAgICAgIHZhciBtZW1iZXJzID0ge30sIGlzRnVuY3Rpb24gPSBnZXRDbGFzcy5jYWxsKG9iamVjdCkgPT0gZnVuY3Rpb25DbGFzcywgcHJvcGVydHk7XG4gICAgICAgICAgICBmb3IgKHByb3BlcnR5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgICAvLyBTdG9yZSBlYWNoIHByb3BlcnR5IG5hbWUgdG8gcHJldmVudCBkb3VibGUgZW51bWVyYXRpb24uIFRoZVxuICAgICAgICAgICAgICAvLyBgcHJvdG90eXBlYCBwcm9wZXJ0eSBvZiBmdW5jdGlvbnMgaXMgbm90IGVudW1lcmF0ZWQgZHVlIHRvIGNyb3NzLVxuICAgICAgICAgICAgICAvLyBlbnZpcm9ubWVudCBpbmNvbnNpc3RlbmNpZXMuXG4gICAgICAgICAgICAgIGlmICghKGlzRnVuY3Rpb24gJiYgcHJvcGVydHkgPT0gXCJwcm90b3R5cGVcIikgJiYgIWlzUHJvcGVydHkuY2FsbChtZW1iZXJzLCBwcm9wZXJ0eSkgJiYgKG1lbWJlcnNbcHJvcGVydHldID0gMSkgJiYgaXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBObyBidWdzIGRldGVjdGVkOyB1c2UgdGhlIHN0YW5kYXJkIGBmb3IuLi5pbmAgYWxnb3JpdGhtLlxuICAgICAgICAgIGZvckVhY2ggPSBmdW5jdGlvbiAob2JqZWN0LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGlzRnVuY3Rpb24gPSBnZXRDbGFzcy5jYWxsKG9iamVjdCkgPT0gZnVuY3Rpb25DbGFzcywgcHJvcGVydHksIGlzQ29uc3RydWN0b3I7XG4gICAgICAgICAgICBmb3IgKHByb3BlcnR5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgICBpZiAoIShpc0Z1bmN0aW9uICYmIHByb3BlcnR5ID09IFwicHJvdG90eXBlXCIpICYmIGlzUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSAmJiAhKGlzQ29uc3RydWN0b3IgPSBwcm9wZXJ0eSA9PT0gXCJjb25zdHJ1Y3RvclwiKSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWFudWFsbHkgaW52b2tlIHRoZSBjYWxsYmFjayBmb3IgdGhlIGBjb25zdHJ1Y3RvcmAgcHJvcGVydHkgZHVlIHRvXG4gICAgICAgICAgICAvLyBjcm9zcy1lbnZpcm9ubWVudCBpbmNvbnNpc3RlbmNpZXMuXG4gICAgICAgICAgICBpZiAoaXNDb25zdHJ1Y3RvciB8fCBpc1Byb3BlcnR5LmNhbGwob2JqZWN0LCAocHJvcGVydHkgPSBcImNvbnN0cnVjdG9yXCIpKSkge1xuICAgICAgICAgICAgICBjYWxsYmFjayhwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9yRWFjaChvYmplY3QsIGNhbGxiYWNrKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIFB1YmxpYzogU2VyaWFsaXplcyBhIEphdmFTY3JpcHQgYHZhbHVlYCBhcyBhIEpTT04gc3RyaW5nLiBUaGUgb3B0aW9uYWxcbiAgICAgIC8vIGBmaWx0ZXJgIGFyZ3VtZW50IG1heSBzcGVjaWZ5IGVpdGhlciBhIGZ1bmN0aW9uIHRoYXQgYWx0ZXJzIGhvdyBvYmplY3QgYW5kXG4gICAgICAvLyBhcnJheSBtZW1iZXJzIGFyZSBzZXJpYWxpemVkLCBvciBhbiBhcnJheSBvZiBzdHJpbmdzIGFuZCBudW1iZXJzIHRoYXRcbiAgICAgIC8vIGluZGljYXRlcyB3aGljaCBwcm9wZXJ0aWVzIHNob3VsZCBiZSBzZXJpYWxpemVkLiBUaGUgb3B0aW9uYWwgYHdpZHRoYFxuICAgICAgLy8gYXJndW1lbnQgbWF5IGJlIGVpdGhlciBhIHN0cmluZyBvciBudW1iZXIgdGhhdCBzcGVjaWZpZXMgdGhlIGluZGVudGF0aW9uXG4gICAgICAvLyBsZXZlbCBvZiB0aGUgb3V0cHV0LlxuICAgICAgaWYgKCFoYXMoXCJqc29uLXN0cmluZ2lmeVwiKSkge1xuICAgICAgICAvLyBJbnRlcm5hbDogQSBtYXAgb2YgY29udHJvbCBjaGFyYWN0ZXJzIGFuZCB0aGVpciBlc2NhcGVkIGVxdWl2YWxlbnRzLlxuICAgICAgICB2YXIgRXNjYXBlcyA9IHtcbiAgICAgICAgICA5MjogXCJcXFxcXFxcXFwiLFxuICAgICAgICAgIDM0OiAnXFxcXFwiJyxcbiAgICAgICAgICA4OiBcIlxcXFxiXCIsXG4gICAgICAgICAgMTI6IFwiXFxcXGZcIixcbiAgICAgICAgICAxMDogXCJcXFxcblwiLFxuICAgICAgICAgIDEzOiBcIlxcXFxyXCIsXG4gICAgICAgICAgOTogXCJcXFxcdFwiXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IENvbnZlcnRzIGB2YWx1ZWAgaW50byBhIHplcm8tcGFkZGVkIHN0cmluZyBzdWNoIHRoYXQgaXRzXG4gICAgICAgIC8vIGxlbmd0aCBpcyBhdCBsZWFzdCBlcXVhbCB0byBgd2lkdGhgLiBUaGUgYHdpZHRoYCBtdXN0IGJlIDw9IDYuXG4gICAgICAgIHZhciBsZWFkaW5nWmVyb2VzID0gXCIwMDAwMDBcIjtcbiAgICAgICAgdmFyIHRvUGFkZGVkU3RyaW5nID0gZnVuY3Rpb24gKHdpZHRoLCB2YWx1ZSkge1xuICAgICAgICAgIC8vIFRoZSBgfHwgMGAgZXhwcmVzc2lvbiBpcyBuZWNlc3NhcnkgdG8gd29yayBhcm91bmQgYSBidWcgaW5cbiAgICAgICAgICAvLyBPcGVyYSA8PSA3LjU0dTIgd2hlcmUgYDAgPT0gLTBgLCBidXQgYFN0cmluZygtMCkgIT09IFwiMFwiYC5cbiAgICAgICAgICByZXR1cm4gKGxlYWRpbmdaZXJvZXMgKyAodmFsdWUgfHwgMCkpLnNsaWNlKC13aWR0aCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IERvdWJsZS1xdW90ZXMgYSBzdHJpbmcgYHZhbHVlYCwgcmVwbGFjaW5nIGFsbCBBU0NJSSBjb250cm9sXG4gICAgICAgIC8vIGNoYXJhY3RlcnMgKGNoYXJhY3RlcnMgd2l0aCBjb2RlIHVuaXQgdmFsdWVzIGJldHdlZW4gMCBhbmQgMzEpIHdpdGhcbiAgICAgICAgLy8gdGhlaXIgZXNjYXBlZCBlcXVpdmFsZW50cy4gVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGVcbiAgICAgICAgLy8gYFF1b3RlKHZhbHVlKWAgb3BlcmF0aW9uIGRlZmluZWQgaW4gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMy5cbiAgICAgICAgdmFyIHVuaWNvZGVQcmVmaXggPSBcIlxcXFx1MDBcIjtcbiAgICAgICAgdmFyIHF1b3RlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9ICdcIicsIGluZGV4ID0gMCwgbGVuZ3RoID0gdmFsdWUubGVuZ3RoLCB1c2VDaGFySW5kZXggPSAhY2hhckluZGV4QnVnZ3kgfHwgbGVuZ3RoID4gMTA7XG4gICAgICAgICAgdmFyIHN5bWJvbHMgPSB1c2VDaGFySW5kZXggJiYgKGNoYXJJbmRleEJ1Z2d5ID8gdmFsdWUuc3BsaXQoXCJcIikgOiB2YWx1ZSk7XG4gICAgICAgICAgZm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIgY2hhckNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgYSBjb250cm9sIGNoYXJhY3RlciwgYXBwZW5kIGl0cyBVbmljb2RlIG9yXG4gICAgICAgICAgICAvLyBzaG9ydGhhbmQgZXNjYXBlIHNlcXVlbmNlOyBvdGhlcndpc2UsIGFwcGVuZCB0aGUgY2hhcmFjdGVyIGFzLWlzLlxuICAgICAgICAgICAgc3dpdGNoIChjaGFyQ29kZSkge1xuICAgICAgICAgICAgICBjYXNlIDg6IGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMjogY2FzZSAxMzogY2FzZSAzNDogY2FzZSA5MjpcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gRXNjYXBlc1tjaGFyQ29kZV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlIDwgMzIpIHtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB1bmljb2RlUHJlZml4ICsgdG9QYWRkZWRTdHJpbmcoMiwgY2hhckNvZGUudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gdXNlQ2hhckluZGV4ID8gc3ltYm9sc1tpbmRleF0gOiB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ1wiJztcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUmVjdXJzaXZlbHkgc2VyaWFsaXplcyBhbiBvYmplY3QuIEltcGxlbWVudHMgdGhlXG4gICAgICAgIC8vIGBTdHIoa2V5LCBob2xkZXIpYCwgYEpPKHZhbHVlKWAsIGFuZCBgSkEodmFsdWUpYCBvcGVyYXRpb25zLlxuICAgICAgICB2YXIgc2VyaWFsaXplID0gZnVuY3Rpb24gKHByb3BlcnR5LCBvYmplY3QsIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCB3aGl0ZXNwYWNlLCBpbmRlbnRhdGlvbiwgc3RhY2spIHtcbiAgICAgICAgICB2YXIgdmFsdWUsIGNsYXNzTmFtZSwgeWVhciwgbW9udGgsIGRhdGUsIHRpbWUsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMsIHJlc3VsdHMsIGVsZW1lbnQsIGluZGV4LCBsZW5ndGgsIHByZWZpeCwgcmVzdWx0O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBOZWNlc3NhcnkgZm9yIGhvc3Qgb2JqZWN0IHN1cHBvcnQuXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7fVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lID09IGRhdGVDbGFzcyAmJiAhaXNQcm9wZXJ0eS5jYWxsKHZhbHVlLCBcInRvSlNPTlwiKSkge1xuICAgICAgICAgICAgICBpZiAodmFsdWUgPiAtMSAvIDAgJiYgdmFsdWUgPCAxIC8gMCkge1xuICAgICAgICAgICAgICAgIC8vIERhdGVzIGFyZSBzZXJpYWxpemVkIGFjY29yZGluZyB0byB0aGUgYERhdGUjdG9KU09OYCBtZXRob2RcbiAgICAgICAgICAgICAgICAvLyBzcGVjaWZpZWQgaW4gRVMgNS4xIHNlY3Rpb24gMTUuOS41LjQ0LiBTZWUgc2VjdGlvbiAxNS45LjEuMTVcbiAgICAgICAgICAgICAgICAvLyBmb3IgdGhlIElTTyA4NjAxIGRhdGUgdGltZSBzdHJpbmcgZm9ybWF0LlxuICAgICAgICAgICAgICAgIGlmIChnZXREYXkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIE1hbnVhbGx5IGNvbXB1dGUgdGhlIHllYXIsIG1vbnRoLCBkYXRlLCBob3VycywgbWludXRlcyxcbiAgICAgICAgICAgICAgICAgIC8vIHNlY29uZHMsIGFuZCBtaWxsaXNlY29uZHMgaWYgdGhlIGBnZXRVVEMqYCBtZXRob2RzIGFyZVxuICAgICAgICAgICAgICAgICAgLy8gYnVnZ3kuIEFkYXB0ZWQgZnJvbSBAWWFmZmxlJ3MgYGRhdGUtc2hpbWAgcHJvamVjdC5cbiAgICAgICAgICAgICAgICAgIGRhdGUgPSBmbG9vcih2YWx1ZSAvIDg2NGU1KTtcbiAgICAgICAgICAgICAgICAgIGZvciAoeWVhciA9IGZsb29yKGRhdGUgLyAzNjUuMjQyNSkgKyAxOTcwIC0gMTsgZ2V0RGF5KHllYXIgKyAxLCAwKSA8PSBkYXRlOyB5ZWFyKyspO1xuICAgICAgICAgICAgICAgICAgZm9yIChtb250aCA9IGZsb29yKChkYXRlIC0gZ2V0RGF5KHllYXIsIDApKSAvIDMwLjQyKTsgZ2V0RGF5KHllYXIsIG1vbnRoICsgMSkgPD0gZGF0ZTsgbW9udGgrKyk7XG4gICAgICAgICAgICAgICAgICBkYXRlID0gMSArIGRhdGUgLSBnZXREYXkoeWVhciwgbW9udGgpO1xuICAgICAgICAgICAgICAgICAgLy8gVGhlIGB0aW1lYCB2YWx1ZSBzcGVjaWZpZXMgdGhlIHRpbWUgd2l0aGluIHRoZSBkYXkgKHNlZSBFU1xuICAgICAgICAgICAgICAgICAgLy8gNS4xIHNlY3Rpb24gMTUuOS4xLjIpLiBUaGUgZm9ybXVsYSBgKEEgJSBCICsgQikgJSBCYCBpcyB1c2VkXG4gICAgICAgICAgICAgICAgICAvLyB0byBjb21wdXRlIGBBIG1vZHVsbyBCYCwgYXMgdGhlIGAlYCBvcGVyYXRvciBkb2VzIG5vdFxuICAgICAgICAgICAgICAgICAgLy8gY29ycmVzcG9uZCB0byB0aGUgYG1vZHVsb2Agb3BlcmF0aW9uIGZvciBuZWdhdGl2ZSBudW1iZXJzLlxuICAgICAgICAgICAgICAgICAgdGltZSA9ICh2YWx1ZSAlIDg2NGU1ICsgODY0ZTUpICUgODY0ZTU7XG4gICAgICAgICAgICAgICAgICAvLyBUaGUgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGFuZCBtaWxsaXNlY29uZHMgYXJlIG9idGFpbmVkIGJ5XG4gICAgICAgICAgICAgICAgICAvLyBkZWNvbXBvc2luZyB0aGUgdGltZSB3aXRoaW4gdGhlIGRheS4gU2VlIHNlY3Rpb24gMTUuOS4xLjEwLlxuICAgICAgICAgICAgICAgICAgaG91cnMgPSBmbG9vcih0aW1lIC8gMzZlNSkgJSAyNDtcbiAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSBmbG9vcih0aW1lIC8gNmU0KSAlIDYwO1xuICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IGZsb29yKHRpbWUgLyAxZTMpICUgNjA7XG4gICAgICAgICAgICAgICAgICBtaWxsaXNlY29uZHMgPSB0aW1lICUgMWUzO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB5ZWFyID0gdmFsdWUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgICAgICAgICAgICAgIG1vbnRoID0gdmFsdWUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgICAgICAgIGRhdGUgPSB2YWx1ZS5nZXRVVENEYXRlKCk7XG4gICAgICAgICAgICAgICAgICBob3VycyA9IHZhbHVlLmdldFVUQ0hvdXJzKCk7XG4gICAgICAgICAgICAgICAgICBtaW51dGVzID0gdmFsdWUuZ2V0VVRDTWludXRlcygpO1xuICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IHZhbHVlLmdldFVUQ1NlY29uZHMoKTtcbiAgICAgICAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IHZhbHVlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTZXJpYWxpemUgZXh0ZW5kZWQgeWVhcnMgY29ycmVjdGx5LlxuICAgICAgICAgICAgICAgIHZhbHVlID0gKHllYXIgPD0gMCB8fCB5ZWFyID49IDFlNCA/ICh5ZWFyIDwgMCA/IFwiLVwiIDogXCIrXCIpICsgdG9QYWRkZWRTdHJpbmcoNiwgeWVhciA8IDAgPyAteWVhciA6IHllYXIpIDogdG9QYWRkZWRTdHJpbmcoNCwgeWVhcikpICtcbiAgICAgICAgICAgICAgICAgIFwiLVwiICsgdG9QYWRkZWRTdHJpbmcoMiwgbW9udGggKyAxKSArIFwiLVwiICsgdG9QYWRkZWRTdHJpbmcoMiwgZGF0ZSkgK1xuICAgICAgICAgICAgICAgICAgLy8gTW9udGhzLCBkYXRlcywgaG91cnMsIG1pbnV0ZXMsIGFuZCBzZWNvbmRzIHNob3VsZCBoYXZlIHR3b1xuICAgICAgICAgICAgICAgICAgLy8gZGlnaXRzOyBtaWxsaXNlY29uZHMgc2hvdWxkIGhhdmUgdGhyZWUuXG4gICAgICAgICAgICAgICAgICBcIlRcIiArIHRvUGFkZGVkU3RyaW5nKDIsIGhvdXJzKSArIFwiOlwiICsgdG9QYWRkZWRTdHJpbmcoMiwgbWludXRlcykgKyBcIjpcIiArIHRvUGFkZGVkU3RyaW5nKDIsIHNlY29uZHMpICtcbiAgICAgICAgICAgICAgICAgIC8vIE1pbGxpc2Vjb25kcyBhcmUgb3B0aW9uYWwgaW4gRVMgNS4wLCBidXQgcmVxdWlyZWQgaW4gNS4xLlxuICAgICAgICAgICAgICAgICAgXCIuXCIgKyB0b1BhZGRlZFN0cmluZygzLCBtaWxsaXNlY29uZHMpICsgXCJaXCI7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZS50b0pTT04gPT0gXCJmdW5jdGlvblwiICYmICgoY2xhc3NOYW1lICE9IG51bWJlckNsYXNzICYmIGNsYXNzTmFtZSAhPSBzdHJpbmdDbGFzcyAmJiBjbGFzc05hbWUgIT0gYXJyYXlDbGFzcykgfHwgaXNQcm9wZXJ0eS5jYWxsKHZhbHVlLCBcInRvSlNPTlwiKSkpIHtcbiAgICAgICAgICAgICAgLy8gUHJvdG90eXBlIDw9IDEuNi4xIGFkZHMgbm9uLXN0YW5kYXJkIGB0b0pTT05gIG1ldGhvZHMgdG8gdGhlXG4gICAgICAgICAgICAgIC8vIGBOdW1iZXJgLCBgU3RyaW5nYCwgYERhdGVgLCBhbmQgYEFycmF5YCBwcm90b3R5cGVzLiBKU09OIDNcbiAgICAgICAgICAgICAgLy8gaWdub3JlcyBhbGwgYHRvSlNPTmAgbWV0aG9kcyBvbiB0aGVzZSBvYmplY3RzIHVubGVzcyB0aGV5IGFyZVxuICAgICAgICAgICAgICAvLyBkZWZpbmVkIGRpcmVjdGx5IG9uIGFuIGluc3RhbmNlLlxuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gSWYgYSByZXBsYWNlbWVudCBmdW5jdGlvbiB3YXMgcHJvdmlkZWQsIGNhbGwgaXQgdG8gb2J0YWluIHRoZSB2YWx1ZVxuICAgICAgICAgICAgLy8gZm9yIHNlcmlhbGl6YXRpb24uXG4gICAgICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrLmNhbGwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBcIm51bGxcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKGNsYXNzTmFtZSA9PSBib29sZWFuQ2xhc3MpIHtcbiAgICAgICAgICAgIC8vIEJvb2xlYW5zIGFyZSByZXByZXNlbnRlZCBsaXRlcmFsbHkuXG4gICAgICAgICAgICByZXR1cm4gXCJcIiArIHZhbHVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lID09IG51bWJlckNsYXNzKSB7XG4gICAgICAgICAgICAvLyBKU09OIG51bWJlcnMgbXVzdCBiZSBmaW5pdGUuIGBJbmZpbml0eWAgYW5kIGBOYU5gIGFyZSBzZXJpYWxpemVkIGFzXG4gICAgICAgICAgICAvLyBgXCJudWxsXCJgLlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID4gLTEgLyAwICYmIHZhbHVlIDwgMSAvIDAgPyBcIlwiICsgdmFsdWUgOiBcIm51bGxcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNsYXNzTmFtZSA9PSBzdHJpbmdDbGFzcykge1xuICAgICAgICAgICAgLy8gU3RyaW5ncyBhcmUgZG91YmxlLXF1b3RlZCBhbmQgZXNjYXBlZC5cbiAgICAgICAgICAgIHJldHVybiBxdW90ZShcIlwiICsgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZWN1cnNpdmVseSBzZXJpYWxpemUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGlzIGlzIGEgbGluZWFyIHNlYXJjaDsgcGVyZm9ybWFuY2VcbiAgICAgICAgICAgIC8vIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZiB1bmlxdWUgbmVzdGVkIG9iamVjdHMuXG4gICAgICAgICAgICBmb3IgKGxlbmd0aCA9IHN0YWNrLmxlbmd0aDsgbGVuZ3RoLS07KSB7XG4gICAgICAgICAgICAgIGlmIChzdGFja1tsZW5ndGhdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIEN5Y2xpYyBzdHJ1Y3R1cmVzIGNhbm5vdCBiZSBzZXJpYWxpemVkIGJ5IGBKU09OLnN0cmluZ2lmeWAuXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFkZCB0aGUgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgICAgICAgIHN0YWNrLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgY3VycmVudCBpbmRlbnRhdGlvbiBsZXZlbCBhbmQgaW5kZW50IG9uZSBhZGRpdGlvbmFsIGxldmVsLlxuICAgICAgICAgICAgcHJlZml4ID0gaW5kZW50YXRpb247XG4gICAgICAgICAgICBpbmRlbnRhdGlvbiArPSB3aGl0ZXNwYWNlO1xuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSA9PSBhcnJheUNsYXNzKSB7XG4gICAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHNlcmlhbGl6ZSBhcnJheSBlbGVtZW50cy5cbiAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gc2VyaWFsaXplKGluZGV4LCB2YWx1ZSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIGluZGVudGF0aW9uLCBzdGFjayk7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGVsZW1lbnQgPT09IHVuZGVmID8gXCJudWxsXCIgOiBlbGVtZW50KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHRzLmxlbmd0aCA/ICh3aGl0ZXNwYWNlID8gXCJbXFxuXCIgKyBpbmRlbnRhdGlvbiArIHJlc3VsdHMuam9pbihcIixcXG5cIiArIGluZGVudGF0aW9uKSArIFwiXFxuXCIgKyBwcmVmaXggKyBcIl1cIiA6IChcIltcIiArIHJlc3VsdHMuam9pbihcIixcIikgKyBcIl1cIikpIDogXCJbXVwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgc2VyaWFsaXplIG9iamVjdCBtZW1iZXJzLiBNZW1iZXJzIGFyZSBzZWxlY3RlZCBmcm9tXG4gICAgICAgICAgICAgIC8vIGVpdGhlciBhIHVzZXItc3BlY2lmaWVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMsIG9yIHRoZSBvYmplY3RcbiAgICAgICAgICAgICAgLy8gaXRzZWxmLlxuICAgICAgICAgICAgICBmb3JFYWNoKHByb3BlcnRpZXMgfHwgdmFsdWUsIGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gc2VyaWFsaXplKHByb3BlcnR5LCB2YWx1ZSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIGluZGVudGF0aW9uLCBzdGFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgIT09IHVuZGVmKSB7XG4gICAgICAgICAgICAgICAgICAvLyBBY2NvcmRpbmcgdG8gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMzogXCJJZiBgZ2FwYCB7d2hpdGVzcGFjZX1cbiAgICAgICAgICAgICAgICAgIC8vIGlzIG5vdCB0aGUgZW1wdHkgc3RyaW5nLCBsZXQgYG1lbWJlcmAge3F1b3RlKHByb3BlcnR5KSArIFwiOlwifVxuICAgICAgICAgICAgICAgICAgLy8gYmUgdGhlIGNvbmNhdGVuYXRpb24gb2YgYG1lbWJlcmAgYW5kIHRoZSBgc3BhY2VgIGNoYXJhY3Rlci5cIlxuICAgICAgICAgICAgICAgICAgLy8gVGhlIFwiYHNwYWNlYCBjaGFyYWN0ZXJcIiByZWZlcnMgdG8gdGhlIGxpdGVyYWwgc3BhY2VcbiAgICAgICAgICAgICAgICAgIC8vIGNoYXJhY3Rlciwgbm90IHRoZSBgc3BhY2VgIHt3aWR0aH0gYXJndW1lbnQgcHJvdmlkZWQgdG9cbiAgICAgICAgICAgICAgICAgIC8vIGBKU09OLnN0cmluZ2lmeWAuXG4gICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocXVvdGUocHJvcGVydHkpICsgXCI6XCIgKyAod2hpdGVzcGFjZSA/IFwiIFwiIDogXCJcIikgKyBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHRzLmxlbmd0aCA/ICh3aGl0ZXNwYWNlID8gXCJ7XFxuXCIgKyBpbmRlbnRhdGlvbiArIHJlc3VsdHMuam9pbihcIixcXG5cIiArIGluZGVudGF0aW9uKSArIFwiXFxuXCIgKyBwcmVmaXggKyBcIn1cIiA6IChcIntcIiArIHJlc3VsdHMuam9pbihcIixcIikgKyBcIn1cIikpIDogXCJ7fVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBvYmplY3QgZnJvbSB0aGUgdHJhdmVyc2VkIG9iamVjdCBzdGFjay5cbiAgICAgICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUHVibGljOiBgSlNPTi5zdHJpbmdpZnlgLiBTZWUgRVMgNS4xIHNlY3Rpb24gMTUuMTIuMy5cbiAgICAgICAgZXhwb3J0cy5zdHJpbmdpZnkgPSBmdW5jdGlvbiAoc291cmNlLCBmaWx0ZXIsIHdpZHRoKSB7XG4gICAgICAgICAgdmFyIHdoaXRlc3BhY2UsIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCBjbGFzc05hbWU7XG4gICAgICAgICAgaWYgKG9iamVjdFR5cGVzW3R5cGVvZiBmaWx0ZXJdICYmIGZpbHRlcikge1xuICAgICAgICAgICAgaWYgKChjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKGZpbHRlcikpID09IGZ1bmN0aW9uQ2xhc3MpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmaWx0ZXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNsYXNzTmFtZSA9PSBhcnJheUNsYXNzKSB7XG4gICAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIHByb3BlcnR5IG5hbWVzIGFycmF5IGludG8gYSBtYWtlc2hpZnQgc2V0LlxuICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0ge307XG4gICAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoID0gZmlsdGVyLmxlbmd0aCwgdmFsdWU7IGluZGV4IDwgbGVuZ3RoOyB2YWx1ZSA9IGZpbHRlcltpbmRleCsrXSwgKChjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKHZhbHVlKSksIGNsYXNzTmFtZSA9PSBzdHJpbmdDbGFzcyB8fCBjbGFzc05hbWUgPT0gbnVtYmVyQ2xhc3MpICYmIChwcm9wZXJ0aWVzW3ZhbHVlXSA9IDEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHdpZHRoKSB7XG4gICAgICAgICAgICBpZiAoKGNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwod2lkdGgpKSA9PSBudW1iZXJDbGFzcykge1xuICAgICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSBgd2lkdGhgIHRvIGFuIGludGVnZXIgYW5kIGNyZWF0ZSBhIHN0cmluZyBjb250YWluaW5nXG4gICAgICAgICAgICAgIC8vIGB3aWR0aGAgbnVtYmVyIG9mIHNwYWNlIGNoYXJhY3RlcnMuXG4gICAgICAgICAgICAgIGlmICgod2lkdGggLT0gd2lkdGggJSAxKSA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKHdoaXRlc3BhY2UgPSBcIlwiLCB3aWR0aCA+IDEwICYmICh3aWR0aCA9IDEwKTsgd2hpdGVzcGFjZS5sZW5ndGggPCB3aWR0aDsgd2hpdGVzcGFjZSArPSBcIiBcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lID09IHN0cmluZ0NsYXNzKSB7XG4gICAgICAgICAgICAgIHdoaXRlc3BhY2UgPSB3aWR0aC5sZW5ndGggPD0gMTAgPyB3aWR0aCA6IHdpZHRoLnNsaWNlKDAsIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gT3BlcmEgPD0gNy41NHUyIGRpc2NhcmRzIHRoZSB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIGVtcHR5IHN0cmluZyBrZXlzXG4gICAgICAgICAgLy8gKGBcIlwiYCkgb25seSBpZiB0aGV5IGFyZSB1c2VkIGRpcmVjdGx5IHdpdGhpbiBhbiBvYmplY3QgbWVtYmVyIGxpc3RcbiAgICAgICAgICAvLyAoZS5nLiwgYCEoXCJcIiBpbiB7IFwiXCI6IDF9KWApLlxuICAgICAgICAgIHJldHVybiBzZXJpYWxpemUoXCJcIiwgKHZhbHVlID0ge30sIHZhbHVlW1wiXCJdID0gc291cmNlLCB2YWx1ZSksIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCB3aGl0ZXNwYWNlLCBcIlwiLCBbXSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIFB1YmxpYzogUGFyc2VzIGEgSlNPTiBzb3VyY2Ugc3RyaW5nLlxuICAgICAgaWYgKCFoYXMoXCJqc29uLXBhcnNlXCIpKSB7XG4gICAgICAgIHZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4gICAgICAgIC8vIEludGVybmFsOiBBIG1hcCBvZiBlc2NhcGVkIGNvbnRyb2wgY2hhcmFjdGVycyBhbmQgdGhlaXIgdW5lc2NhcGVkXG4gICAgICAgIC8vIGVxdWl2YWxlbnRzLlxuICAgICAgICB2YXIgVW5lc2NhcGVzID0ge1xuICAgICAgICAgIDkyOiBcIlxcXFxcIixcbiAgICAgICAgICAzNDogJ1wiJyxcbiAgICAgICAgICA0NzogXCIvXCIsXG4gICAgICAgICAgOTg6IFwiXFxiXCIsXG4gICAgICAgICAgMTE2OiBcIlxcdFwiLFxuICAgICAgICAgIDExMDogXCJcXG5cIixcbiAgICAgICAgICAxMDI6IFwiXFxmXCIsXG4gICAgICAgICAgMTE0OiBcIlxcclwiXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFN0b3JlcyB0aGUgcGFyc2VyIHN0YXRlLlxuICAgICAgICB2YXIgSW5kZXgsIFNvdXJjZTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUmVzZXRzIHRoZSBwYXJzZXIgc3RhdGUgYW5kIHRocm93cyBhIGBTeW50YXhFcnJvcmAuXG4gICAgICAgIHZhciBhYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBJbmRleCA9IFNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgdGhyb3cgU3ludGF4RXJyb3IoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUmV0dXJucyB0aGUgbmV4dCB0b2tlbiwgb3IgYFwiJFwiYCBpZiB0aGUgcGFyc2VyIGhhcyByZWFjaGVkXG4gICAgICAgIC8vIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBzdHJpbmcuIEEgdG9rZW4gbWF5IGJlIGEgc3RyaW5nLCBudW1iZXIsIGBudWxsYFxuICAgICAgICAvLyBsaXRlcmFsLCBvciBCb29sZWFuIGxpdGVyYWwuXG4gICAgICAgIHZhciBsZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IFNvdXJjZSwgbGVuZ3RoID0gc291cmNlLmxlbmd0aCwgdmFsdWUsIGJlZ2luLCBwb3NpdGlvbiwgaXNTaWduZWQsIGNoYXJDb2RlO1xuICAgICAgICAgIHdoaWxlIChJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGNoYXJDb2RlKSB7XG4gICAgICAgICAgICAgIGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAvLyBTa2lwIHdoaXRlc3BhY2UgdG9rZW5zLCBpbmNsdWRpbmcgdGFicywgY2FycmlhZ2UgcmV0dXJucywgbGluZVxuICAgICAgICAgICAgICAgIC8vIGZlZWRzLCBhbmQgc3BhY2UgY2hhcmFjdGVycy5cbiAgICAgICAgICAgICAgICBJbmRleCsrO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDEyMzogY2FzZSAxMjU6IGNhc2UgOTE6IGNhc2UgOTM6IGNhc2UgNTg6IGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgYSBwdW5jdHVhdG9yIHRva2VuIChge2AsIGB9YCwgYFtgLCBgXWAsIGA6YCwgb3IgYCxgKSBhdFxuICAgICAgICAgICAgICAgIC8vIHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuICAgICAgICAgICAgICAgIHZhbHVlID0gY2hhckluZGV4QnVnZ3kgPyBzb3VyY2UuY2hhckF0KEluZGV4KSA6IHNvdXJjZVtJbmRleF07XG4gICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgICAgLy8gYFwiYCBkZWxpbWl0cyBhIEpTT04gc3RyaW5nOyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNoYXJhY3RlciBhbmRcbiAgICAgICAgICAgICAgICAvLyBiZWdpbiBwYXJzaW5nIHRoZSBzdHJpbmcuIFN0cmluZyB0b2tlbnMgYXJlIHByZWZpeGVkIHdpdGggdGhlXG4gICAgICAgICAgICAgICAgLy8gc2VudGluZWwgYEBgIGNoYXJhY3RlciB0byBkaXN0aW5ndWlzaCB0aGVtIGZyb20gcHVuY3R1YXRvcnMgYW5kXG4gICAgICAgICAgICAgICAgLy8gZW5kLW9mLXN0cmluZyB0b2tlbnMuXG4gICAgICAgICAgICAgICAgZm9yICh2YWx1ZSA9IFwiQFwiLCBJbmRleCsrOyBJbmRleCA8IGxlbmd0aDspIHtcbiAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlIDwgMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVW5lc2NhcGVkIEFTQ0lJIGNvbnRyb2wgY2hhcmFjdGVycyAodGhvc2Ugd2l0aCBhIGNvZGUgdW5pdFxuICAgICAgICAgICAgICAgICAgICAvLyBsZXNzIHRoYW4gdGhlIHNwYWNlIGNoYXJhY3RlcikgYXJlIG5vdCBwZXJtaXR0ZWQuXG4gICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoYXJDb2RlID09IDkyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgcmV2ZXJzZSBzb2xpZHVzIChgXFxgKSBtYXJrcyB0aGUgYmVnaW5uaW5nIG9mIGFuIGVzY2FwZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gY29udHJvbCBjaGFyYWN0ZXIgKGluY2x1ZGluZyBgXCJgLCBgXFxgLCBhbmQgYC9gKSBvciBVbmljb2RlXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzY2FwZSBzZXF1ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyQ29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTI6IGNhc2UgMzQ6IGNhc2UgNDc6IGNhc2UgOTg6IGNhc2UgMTE2OiBjYXNlIDExMDogY2FzZSAxMDI6IGNhc2UgMTE0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV2aXZlIGVzY2FwZWQgY29udHJvbCBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gVW5lc2NhcGVzW2NoYXJDb2RlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGBcXHVgIG1hcmtzIHRoZSBiZWdpbm5pbmcgb2YgYSBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgdG8gdGhlIGZpcnN0IGNoYXJhY3RlciBhbmQgdmFsaWRhdGUgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3VyLWRpZ2l0IGNvZGUgcG9pbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbiA9ICsrSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHBvc2l0aW9uID0gSW5kZXggKyA0OyBJbmRleCA8IHBvc2l0aW9uOyBJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBIHZhbGlkIHNlcXVlbmNlIGNvbXByaXNlcyBmb3VyIGhleGRpZ2l0cyAoY2FzZS1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5zZW5zaXRpdmUpIHRoYXQgZm9ybSBhIHNpbmdsZSBoZXhhZGVjaW1hbCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcgfHwgY2hhckNvZGUgPj0gOTcgJiYgY2hhckNvZGUgPD0gMTAyIHx8IGNoYXJDb2RlID49IDY1ICYmIGNoYXJDb2RlIDw9IDcwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEludmFsaWQgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV2aXZlIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IGZyb21DaGFyQ29kZShcIjB4XCIgKyBzb3VyY2Uuc2xpY2UoYmVnaW4sIEluZGV4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZCBlc2NhcGUgc2VxdWVuY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gMzQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBBbiB1bmVzY2FwZWQgZG91YmxlLXF1b3RlIGNoYXJhY3RlciBtYXJrcyB0aGUgZW5kIG9mIHRoZVxuICAgICAgICAgICAgICAgICAgICAgIC8vIHN0cmluZy5cbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSBJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3B0aW1pemUgZm9yIHRoZSBjb21tb24gY2FzZSB3aGVyZSBhIHN0cmluZyBpcyB2YWxpZC5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNoYXJDb2RlID49IDMyICYmIGNoYXJDb2RlICE9IDkyICYmIGNoYXJDb2RlICE9IDM0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgdGhlIHN0cmluZyBhcy1pcy5cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gc291cmNlLnNsaWNlKGJlZ2luLCBJbmRleCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuY2hhckNvZGVBdChJbmRleCkgPT0gMzQpIHtcbiAgICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgdG8gdGhlIG5leHQgY2hhcmFjdGVyIGFuZCByZXR1cm4gdGhlIHJldml2ZWQgc3RyaW5nLlxuICAgICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVW50ZXJtaW5hdGVkIHN0cmluZy5cbiAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIFBhcnNlIG51bWJlcnMgYW5kIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgIGJlZ2luID0gSW5kZXg7XG4gICAgICAgICAgICAgICAgLy8gQWR2YW5jZSBwYXN0IHRoZSBuZWdhdGl2ZSBzaWduLCBpZiBvbmUgaXMgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PSA0NSkge1xuICAgICAgICAgICAgICAgICAgaXNTaWduZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgYW4gaW50ZWdlciBvciBmbG9hdGluZy1wb2ludCB2YWx1ZS5cbiAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcpIHtcbiAgICAgICAgICAgICAgICAgIC8vIExlYWRpbmcgemVyb2VzIGFyZSBpbnRlcnByZXRlZCBhcyBvY3RhbCBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PSA0OCAmJiAoKGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXggKyAxKSksIGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbGxlZ2FsIG9jdGFsIGxpdGVyYWwuXG4gICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpc1NpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgdGhlIGludGVnZXIgY29tcG9uZW50LlxuICAgICAgICAgICAgICAgICAgZm9yICg7IEluZGV4IDwgbGVuZ3RoICYmICgoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCkpLCBjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1Nyk7IEluZGV4KyspO1xuICAgICAgICAgICAgICAgICAgLy8gRmxvYXRzIGNhbm5vdCBjb250YWluIGEgbGVhZGluZyBkZWNpbWFsIHBvaW50OyBob3dldmVyLCB0aGlzXG4gICAgICAgICAgICAgICAgICAvLyBjYXNlIGlzIGFscmVhZHkgYWNjb3VudGVkIGZvciBieSB0aGUgcGFyc2VyLlxuICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KSA9PSA0Nikge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9ICsrSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBkZWNpbWFsIGNvbXBvbmVudC5cbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IHBvc2l0aW9uIDwgbGVuZ3RoICYmICgoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChwb3NpdGlvbikpLCBjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1Nyk7IHBvc2l0aW9uKyspO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT0gSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBJbGxlZ2FsIHRyYWlsaW5nIGRlY2ltYWwuXG4gICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBJbmRleCA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgZXhwb25lbnRzLiBUaGUgYGVgIGRlbm90aW5nIHRoZSBleHBvbmVudCBpc1xuICAgICAgICAgICAgICAgICAgLy8gY2FzZS1pbnNlbnNpdGl2ZS5cbiAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDEwMSB8fCBjaGFyQ29kZSA9PSA2OSkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KCsrSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBTa2lwIHBhc3QgdGhlIHNpZ24gZm9sbG93aW5nIHRoZSBleHBvbmVudCwgaWYgb25lIGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDQzIHx8IGNoYXJDb2RlID09IDQ1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSB0aGUgZXhwb25lbnRpYWwgY29tcG9uZW50LlxuICAgICAgICAgICAgICAgICAgICBmb3IgKHBvc2l0aW9uID0gSW5kZXg7IHBvc2l0aW9uIDwgbGVuZ3RoICYmICgoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChwb3NpdGlvbikpLCBjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1Nyk7IHBvc2l0aW9uKyspO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT0gSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBJbGxlZ2FsIGVtcHR5IGV4cG9uZW50LlxuICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgSW5kZXggPSBwb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC8vIENvZXJjZSB0aGUgcGFyc2VkIHZhbHVlIHRvIGEgSmF2YVNjcmlwdCBudW1iZXIuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gK3NvdXJjZS5zbGljZShiZWdpbiwgSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBIG5lZ2F0aXZlIHNpZ24gbWF5IG9ubHkgcHJlY2VkZSBudW1iZXJzLlxuICAgICAgICAgICAgICAgIGlmIChpc1NpZ25lZCkge1xuICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYHRydWVgLCBgZmFsc2VgLCBhbmQgYG51bGxgIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2Uuc2xpY2UoSW5kZXgsIEluZGV4ICsgNCkgPT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICAgICAgICAgIEluZGV4ICs9IDQ7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZS5zbGljZShJbmRleCwgSW5kZXggKyA1KSA9PSBcImZhbHNlXCIpIHtcbiAgICAgICAgICAgICAgICAgIEluZGV4ICs9IDU7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2Uuc2xpY2UoSW5kZXgsIEluZGV4ICsgNCkgPT0gXCJudWxsXCIpIHtcbiAgICAgICAgICAgICAgICAgIEluZGV4ICs9IDQ7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVW5yZWNvZ25pemVkIHRva2VuLlxuICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFJldHVybiB0aGUgc2VudGluZWwgYCRgIGNoYXJhY3RlciBpZiB0aGUgcGFyc2VyIGhhcyByZWFjaGVkIHRoZSBlbmRcbiAgICAgICAgICAvLyBvZiB0aGUgc291cmNlIHN0cmluZy5cbiAgICAgICAgICByZXR1cm4gXCIkXCI7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFBhcnNlcyBhIEpTT04gYHZhbHVlYCB0b2tlbi5cbiAgICAgICAgdmFyIGdldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHZhciByZXN1bHRzLCBoYXNNZW1iZXJzO1xuICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIiRcIikge1xuICAgICAgICAgICAgLy8gVW5leHBlY3RlZCBlbmQgb2YgaW5wdXQuXG4gICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmICgoY2hhckluZGV4QnVnZ3kgPyB2YWx1ZS5jaGFyQXQoMCkgOiB2YWx1ZVswXSkgPT0gXCJAXCIpIHtcbiAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBzZW50aW5lbCBgQGAgY2hhcmFjdGVyLlxuICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuc2xpY2UoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQYXJzZSBvYmplY3QgYW5kIGFycmF5IGxpdGVyYWxzLlxuICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiW1wiKSB7XG4gICAgICAgICAgICAgIC8vIFBhcnNlcyBhIEpTT04gYXJyYXksIHJldHVybmluZyBhIG5ldyBKYXZhU2NyaXB0IGFycmF5LlxuICAgICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICAgIGZvciAoOzsgaGFzTWVtYmVycyB8fCAoaGFzTWVtYmVycyA9IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBsZXgoKTtcbiAgICAgICAgICAgICAgICAvLyBBIGNsb3Npbmcgc3F1YXJlIGJyYWNrZXQgbWFya3MgdGhlIGVuZCBvZiB0aGUgYXJyYXkgbGl0ZXJhbC5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCJdXCIpIHtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYXJyYXkgbGl0ZXJhbCBjb250YWlucyBlbGVtZW50cywgdGhlIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgICAgICAgICAvLyBzaG91bGQgYmUgYSBjb21tYSBzZXBhcmF0aW5nIHRoZSBwcmV2aW91cyBlbGVtZW50IGZyb20gdGhlXG4gICAgICAgICAgICAgICAgLy8gbmV4dC5cbiAgICAgICAgICAgICAgICBpZiAoaGFzTWVtYmVycykge1xuICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIl1cIikge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgdHJhaWxpbmcgYCxgIGluIGFycmF5IGxpdGVyYWwuXG4gICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQSBgLGAgbXVzdCBzZXBhcmF0ZSBlYWNoIGFycmF5IGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEVsaXNpb25zIGFuZCBsZWFkaW5nIGNvbW1hcyBhcmUgbm90IHBlcm1pdHRlZC5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCIsXCIpIHtcbiAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChnZXQodmFsdWUpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gXCJ7XCIpIHtcbiAgICAgICAgICAgICAgLy8gUGFyc2VzIGEgSlNPTiBvYmplY3QsIHJldHVybmluZyBhIG5ldyBKYXZhU2NyaXB0IG9iamVjdC5cbiAgICAgICAgICAgICAgcmVzdWx0cyA9IHt9O1xuICAgICAgICAgICAgICBmb3IgKDs7IGhhc01lbWJlcnMgfHwgKGhhc01lbWJlcnMgPSB0cnVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgLy8gQSBjbG9zaW5nIGN1cmx5IGJyYWNlIG1hcmtzIHRoZSBlbmQgb2YgdGhlIG9iamVjdCBsaXRlcmFsLlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIn1cIikge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvYmplY3QgbGl0ZXJhbCBjb250YWlucyBtZW1iZXJzLCB0aGUgY3VycmVudCB0b2tlblxuICAgICAgICAgICAgICAgIC8vIHNob3VsZCBiZSBhIGNvbW1hIHNlcGFyYXRvci5cbiAgICAgICAgICAgICAgICBpZiAoaGFzTWVtYmVycykge1xuICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIn1cIikge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgdHJhaWxpbmcgYCxgIGluIG9iamVjdCBsaXRlcmFsLlxuICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgYCxgIG11c3Qgc2VwYXJhdGUgZWFjaCBvYmplY3QgbWVtYmVyLlxuICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBMZWFkaW5nIGNvbW1hcyBhcmUgbm90IHBlcm1pdHRlZCwgb2JqZWN0IHByb3BlcnR5IG5hbWVzIG11c3QgYmVcbiAgICAgICAgICAgICAgICAvLyBkb3VibGUtcXVvdGVkIHN0cmluZ3MsIGFuZCBhIGA6YCBtdXN0IHNlcGFyYXRlIGVhY2ggcHJvcGVydHlcbiAgICAgICAgICAgICAgICAvLyBuYW1lIGFuZCB2YWx1ZS5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCIsXCIgfHwgdHlwZW9mIHZhbHVlICE9IFwic3RyaW5nXCIgfHwgKGNoYXJJbmRleEJ1Z2d5ID8gdmFsdWUuY2hhckF0KDApIDogdmFsdWVbMF0pICE9IFwiQFwiIHx8IGxleCgpICE9IFwiOlwiKSB7XG4gICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHRzW3ZhbHVlLnNsaWNlKDEpXSA9IGdldChsZXgoKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVbmV4cGVjdGVkIHRva2VuIGVuY291bnRlcmVkLlxuICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBVcGRhdGVzIGEgdHJhdmVyc2VkIG9iamVjdCBtZW1iZXIuXG4gICAgICAgIHZhciB1cGRhdGUgPSBmdW5jdGlvbiAoc291cmNlLCBwcm9wZXJ0eSwgY2FsbGJhY2spIHtcbiAgICAgICAgICB2YXIgZWxlbWVudCA9IHdhbGsoc291cmNlLCBwcm9wZXJ0eSwgY2FsbGJhY2spO1xuICAgICAgICAgIGlmIChlbGVtZW50ID09PSB1bmRlZikge1xuICAgICAgICAgICAgZGVsZXRlIHNvdXJjZVtwcm9wZXJ0eV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvdXJjZVtwcm9wZXJ0eV0gPSBlbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUmVjdXJzaXZlbHkgdHJhdmVyc2VzIGEgcGFyc2VkIEpTT04gb2JqZWN0LCBpbnZva2luZyB0aGVcbiAgICAgICAgLy8gYGNhbGxiYWNrYCBmdW5jdGlvbiBmb3IgZWFjaCB2YWx1ZS4gVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGVcbiAgICAgICAgLy8gYFdhbGsoaG9sZGVyLCBuYW1lKWAgb3BlcmF0aW9uIGRlZmluZWQgaW4gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMi5cbiAgICAgICAgdmFyIHdhbGsgPSBmdW5jdGlvbiAoc291cmNlLCBwcm9wZXJ0eSwgY2FsbGJhY2spIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbcHJvcGVydHldLCBsZW5ndGg7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiICYmIHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBgZm9yRWFjaGAgY2FuJ3QgYmUgdXNlZCB0byB0cmF2ZXJzZSBhbiBhcnJheSBpbiBPcGVyYSA8PSA4LjU0XG4gICAgICAgICAgICAvLyBiZWNhdXNlIGl0cyBgT2JqZWN0I2hhc093blByb3BlcnR5YCBpbXBsZW1lbnRhdGlvbiByZXR1cm5zIGBmYWxzZWBcbiAgICAgICAgICAgIC8vIGZvciBhcnJheSBpbmRpY2VzIChlLmcuLCBgIVsxLCAyLCAzXS5oYXNPd25Qcm9wZXJ0eShcIjBcIilgKS5cbiAgICAgICAgICAgIGlmIChnZXRDbGFzcy5jYWxsKHZhbHVlKSA9PSBhcnJheUNsYXNzKSB7XG4gICAgICAgICAgICAgIGZvciAobGVuZ3RoID0gdmFsdWUubGVuZ3RoOyBsZW5ndGgtLTspIHtcbiAgICAgICAgICAgICAgICB1cGRhdGUodmFsdWUsIGxlbmd0aCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGUodmFsdWUsIHByb3BlcnR5LCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbChzb3VyY2UsIHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUHVibGljOiBgSlNPTi5wYXJzZWAuIFNlZSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4yLlxuICAgICAgICBleHBvcnRzLnBhcnNlID0gZnVuY3Rpb24gKHNvdXJjZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICB2YXIgcmVzdWx0LCB2YWx1ZTtcbiAgICAgICAgICBJbmRleCA9IDA7XG4gICAgICAgICAgU291cmNlID0gXCJcIiArIHNvdXJjZTtcbiAgICAgICAgICByZXN1bHQgPSBnZXQobGV4KCkpO1xuICAgICAgICAgIC8vIElmIGEgSlNPTiBzdHJpbmcgY29udGFpbnMgbXVsdGlwbGUgdG9rZW5zLCBpdCBpcyBpbnZhbGlkLlxuICAgICAgICAgIGlmIChsZXgoKSAhPSBcIiRcIikge1xuICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmVzZXQgdGhlIHBhcnNlciBzdGF0ZS5cbiAgICAgICAgICBJbmRleCA9IFNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrICYmIGdldENsYXNzLmNhbGwoY2FsbGJhY2spID09IGZ1bmN0aW9uQ2xhc3MgPyB3YWxrKCh2YWx1ZSA9IHt9LCB2YWx1ZVtcIlwiXSA9IHJlc3VsdCwgdmFsdWUpLCBcIlwiLCBjYWxsYmFjaykgOiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0c1tcInJ1bkluQ29udGV4dFwiXSA9IHJ1bkluQ29udGV4dDtcbiAgICByZXR1cm4gZXhwb3J0cztcbiAgfVxuXG4gIGlmIChmcmVlRXhwb3J0cyAmJiAhaXNMb2FkZXIpIHtcbiAgICAvLyBFeHBvcnQgZm9yIENvbW1vbkpTIGVudmlyb25tZW50cy5cbiAgICBydW5JbkNvbnRleHQocm9vdCwgZnJlZUV4cG9ydHMpO1xuICB9IGVsc2Uge1xuICAgIC8vIEV4cG9ydCBmb3Igd2ViIGJyb3dzZXJzIGFuZCBKYXZhU2NyaXB0IGVuZ2luZXMuXG4gICAgdmFyIG5hdGl2ZUpTT04gPSByb290LkpTT04sXG4gICAgICAgIHByZXZpb3VzSlNPTiA9IHJvb3RbXCJKU09OM1wiXSxcbiAgICAgICAgaXNSZXN0b3JlZCA9IGZhbHNlO1xuXG4gICAgdmFyIEpTT04zID0gcnVuSW5Db250ZXh0KHJvb3QsIChyb290W1wiSlNPTjNcIl0gPSB7XG4gICAgICAvLyBQdWJsaWM6IFJlc3RvcmVzIHRoZSBvcmlnaW5hbCB2YWx1ZSBvZiB0aGUgZ2xvYmFsIGBKU09OYCBvYmplY3QgYW5kXG4gICAgICAvLyByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBgSlNPTjNgIG9iamVjdC5cbiAgICAgIFwibm9Db25mbGljdFwiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSZXN0b3JlZCkge1xuICAgICAgICAgIGlzUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgICAgIHJvb3QuSlNPTiA9IG5hdGl2ZUpTT047XG4gICAgICAgICAgcm9vdFtcIkpTT04zXCJdID0gcHJldmlvdXNKU09OO1xuICAgICAgICAgIG5hdGl2ZUpTT04gPSBwcmV2aW91c0pTT04gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBKU09OMztcbiAgICAgIH1cbiAgICB9KSk7XG5cbiAgICByb290LkpTT04gPSB7XG4gICAgICBcInBhcnNlXCI6IEpTT04zLnBhcnNlLFxuICAgICAgXCJzdHJpbmdpZnlcIjogSlNPTjMuc3RyaW5naWZ5XG4gICAgfTtcbiAgfVxuXG4gIC8vIEV4cG9ydCBmb3IgYXN5bmNocm9ub3VzIG1vZHVsZSBsb2FkZXJzLlxuICBpZiAoaXNMb2FkZXIpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIEpTT04zO1xuICAgIH0pO1xuICB9XG59KS5jYWxsKHRoaXMpO1xuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7fV0sNTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBEZWNvZGUgYSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgZGVjb2RlZCBzdHJpbmcuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQucmVwbGFjZSgvXFwrL2csICcgJykpO1xufVxuXG4vKipcbiAqIFNpbXBsZSBxdWVyeSBzdHJpbmcgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeSBUaGUgcXVlcnkgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgcGFyc2VkLlxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5KSB7XG4gIHZhciBwYXJzZXIgPSAvKFtePT8mXSspPT8oW14mXSopL2dcbiAgICAsIHJlc3VsdCA9IHt9XG4gICAgLCBwYXJ0O1xuXG4gIHdoaWxlIChwYXJ0ID0gcGFyc2VyLmV4ZWMocXVlcnkpKSB7XG4gICAgdmFyIGtleSA9IGRlY29kZShwYXJ0WzFdKVxuICAgICAgLCB2YWx1ZSA9IGRlY29kZShwYXJ0WzJdKTtcblxuICAgIC8vXG4gICAgLy8gUHJldmVudCBvdmVycmlkaW5nIG9mIGV4aXN0aW5nIHByb3BlcnRpZXMuIFRoaXMgZW5zdXJlcyB0aGF0IGJ1aWxkLWluXG4gICAgLy8gbWV0aG9kcyBsaWtlIGB0b1N0cmluZ2Agb3IgX19wcm90b19fIGFyZSBub3Qgb3ZlcnJpZGVuIGJ5IG1hbGljaW91c1xuICAgIC8vIHF1ZXJ5c3RyaW5ncy5cbiAgICAvL1xuICAgIGlmIChrZXkgaW4gcmVzdWx0KSBjb250aW51ZTtcbiAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSBxdWVyeSBzdHJpbmcgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogT2JqZWN0IHRoYXQgc2hvdWxkIGJlIHRyYW5zZm9ybWVkLlxuICogQHBhcmFtIHtTdHJpbmd9IHByZWZpeCBPcHRpb25hbCBwcmVmaXguXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcXVlcnlzdHJpbmdpZnkob2JqLCBwcmVmaXgpIHtcbiAgcHJlZml4ID0gcHJlZml4IHx8ICcnO1xuXG4gIHZhciBwYWlycyA9IFtdO1xuXG4gIC8vXG4gIC8vIE9wdGlvbmFsbHkgcHJlZml4IHdpdGggYSAnPycgaWYgbmVlZGVkXG4gIC8vXG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIHByZWZpeCkgcHJlZml4ID0gJz8nO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICBwYWlycy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsnPScrIGVuY29kZVVSSUNvbXBvbmVudChvYmpba2V5XSkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYWlycy5sZW5ndGggPyBwcmVmaXggKyBwYWlycy5qb2luKCcmJykgOiAnJztcbn1cblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmV4cG9ydHMuc3RyaW5naWZ5ID0gcXVlcnlzdHJpbmdpZnk7XG5leHBvcnRzLnBhcnNlID0gcXVlcnlzdHJpbmc7XG5cbn0se31dLDYwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDaGVjayBpZiB3ZSdyZSByZXF1aXJlZCB0byBhZGQgYSBwb3J0IG51bWJlci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZGVmYXVsdC1wb3J0XG4gKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IHBvcnQgUG9ydCBudW1iZXIgd2UgbmVlZCB0byBjaGVja1xuICogQHBhcmFtIHtTdHJpbmd9IHByb3RvY29sIFByb3RvY29sIHdlIG5lZWQgdG8gY2hlY2sgYWdhaW5zdC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBJcyBpdCBhIGRlZmF1bHQgcG9ydCBmb3IgdGhlIGdpdmVuIHByb3RvY29sXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXF1aXJlZChwb3J0LCBwcm90b2NvbCkge1xuICBwcm90b2NvbCA9IHByb3RvY29sLnNwbGl0KCc6JylbMF07XG4gIHBvcnQgPSArcG9ydDtcblxuICBpZiAoIXBvcnQpIHJldHVybiBmYWxzZTtcblxuICBzd2l0Y2ggKHByb3RvY29sKSB7XG4gICAgY2FzZSAnaHR0cCc6XG4gICAgY2FzZSAnd3MnOlxuICAgIHJldHVybiBwb3J0ICE9PSA4MDtcblxuICAgIGNhc2UgJ2h0dHBzJzpcbiAgICBjYXNlICd3c3MnOlxuICAgIHJldHVybiBwb3J0ICE9PSA0NDM7XG5cbiAgICBjYXNlICdmdHAnOlxuICAgIHJldHVybiBwb3J0ICE9PSAyMTtcblxuICAgIGNhc2UgJ2dvcGhlcic6XG4gICAgcmV0dXJuIHBvcnQgIT09IDcwO1xuXG4gICAgY2FzZSAnZmlsZSc6XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHBvcnQgIT09IDA7XG59O1xuXG59LHt9XSw2MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciByZXF1aXJlZCA9IHJlcXVpcmUoJ3JlcXVpcmVzLXBvcnQnKVxuICAsIHFzID0gcmVxdWlyZSgncXVlcnlzdHJpbmdpZnknKVxuICAsIHByb3RvY29scmUgPSAvXihbYS16XVthLXowLTkuKy1dKjopPyhcXC9cXC8pPyhbXFxTXFxzXSopL2lcbiAgLCBzbGFzaGVzID0gL15bQS1aYS16XVtBLVphLXowLTkrLS5dKjpcXC9cXC8vO1xuXG4vKipcbiAqIFRoZXNlIGFyZSB0aGUgcGFyc2UgcnVsZXMgZm9yIHRoZSBVUkwgcGFyc2VyLCBpdCBpbmZvcm1zIHRoZSBwYXJzZXJcbiAqIGFib3V0OlxuICpcbiAqIDAuIFRoZSBjaGFyIGl0IE5lZWRzIHRvIHBhcnNlLCBpZiBpdCdzIGEgc3RyaW5nIGl0IHNob3VsZCBiZSBkb25lIHVzaW5nXG4gKiAgICBpbmRleE9mLCBSZWdFeHAgdXNpbmcgZXhlYyBhbmQgTmFOIG1lYW5zIHNldCBhcyBjdXJyZW50IHZhbHVlLlxuICogMS4gVGhlIHByb3BlcnR5IHdlIHNob3VsZCBzZXQgd2hlbiBwYXJzaW5nIHRoaXMgdmFsdWUuXG4gKiAyLiBJbmRpY2F0aW9uIGlmIGl0J3MgYmFja3dhcmRzIG9yIGZvcndhcmQgcGFyc2luZywgd2hlbiBzZXQgYXMgbnVtYmVyIGl0J3NcbiAqICAgIHRoZSB2YWx1ZSBvZiBleHRyYSBjaGFycyB0aGF0IHNob3VsZCBiZSBzcGxpdCBvZmYuXG4gKiAzLiBJbmhlcml0IGZyb20gbG9jYXRpb24gaWYgbm9uIGV4aXN0aW5nIGluIHRoZSBwYXJzZXIuXG4gKiA0LiBgdG9Mb3dlckNhc2VgIHRoZSByZXN1bHRpbmcgdmFsdWUuXG4gKi9cbnZhciBydWxlcyA9IFtcbiAgWycjJywgJ2hhc2gnXSwgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGJhY2suXG4gIFsnPycsICdxdWVyeSddLCAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBmdW5jdGlvbiBzYW5pdGl6ZShhZGRyZXNzKSB7ICAgICAgICAgIC8vIFNhbml0aXplIHdoYXQgaXMgbGVmdCBvZiB0aGUgYWRkcmVzc1xuICAgIHJldHVybiBhZGRyZXNzLnJlcGxhY2UoJ1xcXFwnLCAnLycpO1xuICB9LFxuICBbJy8nLCAncGF0aG5hbWUnXSwgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgZnJvbSB0aGUgYmFjay5cbiAgWydAJywgJ2F1dGgnLCAxXSwgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGZyb250LlxuICBbTmFOLCAnaG9zdCcsIHVuZGVmaW5lZCwgMSwgMV0sICAgICAgIC8vIFNldCBsZWZ0IG92ZXIgdmFsdWUuXG4gIFsvOihcXGQrKSQvLCAncG9ydCcsIHVuZGVmaW5lZCwgMV0sICAgIC8vIFJlZ0V4cCB0aGUgYmFjay5cbiAgW05hTiwgJ2hvc3RuYW1lJywgdW5kZWZpbmVkLCAxLCAxXSAgICAvLyBTZXQgbGVmdCBvdmVyLlxuXTtcblxuLyoqXG4gKiBUaGVzZSBwcm9wZXJ0aWVzIHNob3VsZCBub3QgYmUgY29waWVkIG9yIGluaGVyaXRlZCBmcm9tLiBUaGlzIGlzIG9ubHkgbmVlZGVkXG4gKiBmb3IgYWxsIG5vbiBibG9iIFVSTCdzIGFzIGEgYmxvYiBVUkwgZG9lcyBub3QgaW5jbHVkZSBhIGhhc2gsIG9ubHkgdGhlXG4gKiBvcmlnaW4uXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBpZ25vcmUgPSB7IGhhc2g6IDEsIHF1ZXJ5OiAxIH07XG5cbi8qKlxuICogVGhlIGxvY2F0aW9uIG9iamVjdCBkaWZmZXJzIHdoZW4geW91ciBjb2RlIGlzIGxvYWRlZCB0aHJvdWdoIGEgbm9ybWFsIHBhZ2UsXG4gKiBXb3JrZXIgb3IgdGhyb3VnaCBhIHdvcmtlciB1c2luZyBhIGJsb2IuIEFuZCB3aXRoIHRoZSBibG9iYmxlIGJlZ2lucyB0aGVcbiAqIHRyb3VibGUgYXMgdGhlIGxvY2F0aW9uIG9iamVjdCB3aWxsIGNvbnRhaW4gdGhlIFVSTCBvZiB0aGUgYmxvYiwgbm90IHRoZVxuICogbG9jYXRpb24gb2YgdGhlIHBhZ2Ugd2hlcmUgb3VyIGNvZGUgaXMgbG9hZGVkIGluLiBUaGUgYWN0dWFsIG9yaWdpbiBpc1xuICogZW5jb2RlZCBpbiB0aGUgYHBhdGhuYW1lYCBzbyB3ZSBjYW4gdGhhbmtmdWxseSBnZW5lcmF0ZSBhIGdvb2QgXCJkZWZhdWx0XCJcbiAqIGxvY2F0aW9uIGZyb20gaXQgc28gd2UgY2FuIGdlbmVyYXRlIHByb3BlciByZWxhdGl2ZSBVUkwncyBhZ2Fpbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGxvYyBPcHRpb25hbCBkZWZhdWx0IGxvY2F0aW9uIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IGxvbGNhdGlvbiBvYmplY3QuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGxvbGNhdGlvbihsb2MpIHtcbiAgdmFyIGxvY2F0aW9uID0gZ2xvYmFsICYmIGdsb2JhbC5sb2NhdGlvbiB8fCB7fTtcbiAgbG9jID0gbG9jIHx8IGxvY2F0aW9uO1xuXG4gIHZhciBmaW5hbGRlc3RpbmF0aW9uID0ge31cbiAgICAsIHR5cGUgPSB0eXBlb2YgbG9jXG4gICAgLCBrZXk7XG5cbiAgaWYgKCdibG9iOicgPT09IGxvYy5wcm90b2NvbCkge1xuICAgIGZpbmFsZGVzdGluYXRpb24gPSBuZXcgVXJsKHVuZXNjYXBlKGxvYy5wYXRobmFtZSksIHt9KTtcbiAgfSBlbHNlIGlmICgnc3RyaW5nJyA9PT0gdHlwZSkge1xuICAgIGZpbmFsZGVzdGluYXRpb24gPSBuZXcgVXJsKGxvYywge30pO1xuICAgIGZvciAoa2V5IGluIGlnbm9yZSkgZGVsZXRlIGZpbmFsZGVzdGluYXRpb25ba2V5XTtcbiAgfSBlbHNlIGlmICgnb2JqZWN0JyA9PT0gdHlwZSkge1xuICAgIGZvciAoa2V5IGluIGxvYykge1xuICAgICAgaWYgKGtleSBpbiBpZ25vcmUpIGNvbnRpbnVlO1xuICAgICAgZmluYWxkZXN0aW5hdGlvbltrZXldID0gbG9jW2tleV07XG4gICAgfVxuXG4gICAgaWYgKGZpbmFsZGVzdGluYXRpb24uc2xhc2hlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmaW5hbGRlc3RpbmF0aW9uLnNsYXNoZXMgPSBzbGFzaGVzLnRlc3QobG9jLmhyZWYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaW5hbGRlc3RpbmF0aW9uO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIFByb3RvY29sRXh0cmFjdFxuICogQHR5cGUgT2JqZWN0XG4gKiBAcHJvcGVydHkge1N0cmluZ30gcHJvdG9jb2wgUHJvdG9jb2wgbWF0Y2hlZCBpbiB0aGUgVVJMLCBpbiBsb3dlcmNhc2UuXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IHNsYXNoZXMgYHRydWVgIGlmIHByb3RvY29sIGlzIGZvbGxvd2VkIGJ5IFwiLy9cIiwgZWxzZSBgZmFsc2VgLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHJlc3QgUmVzdCBvZiB0aGUgVVJMIHRoYXQgaXMgbm90IHBhcnQgb2YgdGhlIHByb3RvY29sLlxuICovXG5cbi8qKlxuICogRXh0cmFjdCBwcm90b2NvbCBpbmZvcm1hdGlvbiBmcm9tIGEgVVJMIHdpdGgvd2l0aG91dCBkb3VibGUgc2xhc2ggKFwiLy9cIikuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3MgVVJMIHdlIHdhbnQgdG8gZXh0cmFjdCBmcm9tLlxuICogQHJldHVybiB7UHJvdG9jb2xFeHRyYWN0fSBFeHRyYWN0ZWQgaW5mb3JtYXRpb24uXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBleHRyYWN0UHJvdG9jb2woYWRkcmVzcykge1xuICB2YXIgbWF0Y2ggPSBwcm90b2NvbHJlLmV4ZWMoYWRkcmVzcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm90b2NvbDogbWF0Y2hbMV0gPyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIDogJycsXG4gICAgc2xhc2hlczogISFtYXRjaFsyXSxcbiAgICByZXN0OiBtYXRjaFszXVxuICB9O1xufVxuXG4vKipcbiAqIFJlc29sdmUgYSByZWxhdGl2ZSBVUkwgcGF0aG5hbWUgYWdhaW5zdCBhIGJhc2UgVVJMIHBhdGhuYW1lLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWxhdGl2ZSBQYXRobmFtZSBvZiB0aGUgcmVsYXRpdmUgVVJMLlxuICogQHBhcmFtIHtTdHJpbmd9IGJhc2UgUGF0aG5hbWUgb2YgdGhlIGJhc2UgVVJMLlxuICogQHJldHVybiB7U3RyaW5nfSBSZXNvbHZlZCBwYXRobmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmUocmVsYXRpdmUsIGJhc2UpIHtcbiAgdmFyIHBhdGggPSAoYmFzZSB8fCAnLycpLnNwbGl0KCcvJykuc2xpY2UoMCwgLTEpLmNvbmNhdChyZWxhdGl2ZS5zcGxpdCgnLycpKVxuICAgICwgaSA9IHBhdGgubGVuZ3RoXG4gICAgLCBsYXN0ID0gcGF0aFtpIC0gMV1cbiAgICAsIHVuc2hpZnQgPSBmYWxzZVxuICAgICwgdXAgPSAwO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAocGF0aFtpXSA9PT0gJy4nKSB7XG4gICAgICBwYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKHBhdGhbaV0gPT09ICcuLicpIHtcbiAgICAgIHBhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBpZiAoaSA9PT0gMCkgdW5zaGlmdCA9IHRydWU7XG4gICAgICBwYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKHVuc2hpZnQpIHBhdGgudW5zaGlmdCgnJyk7XG4gIGlmIChsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJykgcGF0aC5wdXNoKCcnKTtcblxuICByZXR1cm4gcGF0aC5qb2luKCcvJyk7XG59XG5cbi8qKlxuICogVGhlIGFjdHVhbCBVUkwgaW5zdGFuY2UuIEluc3RlYWQgb2YgcmV0dXJuaW5nIGFuIG9iamVjdCB3ZSd2ZSBvcHRlZC1pbiB0b1xuICogY3JlYXRlIGFuIGFjdHVhbCBjb25zdHJ1Y3RvciBhcyBpdCdzIG11Y2ggbW9yZSBtZW1vcnkgZWZmaWNpZW50IGFuZFxuICogZmFzdGVyIGFuZCBpdCBwbGVhc2VzIG15IE9DRC5cbiAqXG4gKiBJdCBpcyB3b3J0aCBub3RpbmcgdGhhdCB3ZSBzaG91bGQgbm90IHVzZSBgVVJMYCBhcyBjbGFzcyBuYW1lIHRvIHByZXZlbnRcbiAqIGNsYXNoZXMgd2l0aCB0aGUgZ2xvYmFsIFVSTCBpbnN0YW5jZSB0aGF0IGdvdCBpbnRyb2R1Y2VkIGluIGJyb3dzZXJzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3MgVVJMIHdlIHdhbnQgdG8gcGFyc2UuXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGxvY2F0aW9uIExvY2F0aW9uIGRlZmF1bHRzIGZvciByZWxhdGl2ZSBwYXRocy5cbiAqIEBwYXJhbSB7Qm9vbGVhbnxGdW5jdGlvbn0gcGFyc2VyIFBhcnNlciBmb3IgdGhlIHF1ZXJ5IHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIFVybChhZGRyZXNzLCBsb2NhdGlvbiwgcGFyc2VyKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBVcmwpKSB7XG4gICAgcmV0dXJuIG5ldyBVcmwoYWRkcmVzcywgbG9jYXRpb24sIHBhcnNlcik7XG4gIH1cblxuICB2YXIgcmVsYXRpdmUsIGV4dHJhY3RlZCwgcGFyc2UsIGluc3RydWN0aW9uLCBpbmRleCwga2V5XG4gICAgLCBpbnN0cnVjdGlvbnMgPSBydWxlcy5zbGljZSgpXG4gICAgLCB0eXBlID0gdHlwZW9mIGxvY2F0aW9uXG4gICAgLCB1cmwgPSB0aGlzXG4gICAgLCBpID0gMDtcblxuICAvL1xuICAvLyBUaGUgZm9sbG93aW5nIGlmIHN0YXRlbWVudHMgYWxsb3dzIHRoaXMgbW9kdWxlIHR3byBoYXZlIGNvbXBhdGliaWxpdHkgd2l0aFxuICAvLyAyIGRpZmZlcmVudCBBUEk6XG4gIC8vXG4gIC8vIDEuIE5vZGUuanMncyBgdXJsLnBhcnNlYCBhcGkgd2hpY2ggYWNjZXB0cyBhIFVSTCwgYm9vbGVhbiBhcyBhcmd1bWVudHNcbiAgLy8gICAgd2hlcmUgdGhlIGJvb2xlYW4gaW5kaWNhdGVzIHRoYXQgdGhlIHF1ZXJ5IHN0cmluZyBzaG91bGQgYWxzbyBiZSBwYXJzZWQuXG4gIC8vXG4gIC8vIDIuIFRoZSBgVVJMYCBpbnRlcmZhY2Ugb2YgdGhlIGJyb3dzZXIgd2hpY2ggYWNjZXB0cyBhIFVSTCwgb2JqZWN0IGFzXG4gIC8vICAgIGFyZ3VtZW50cy4gVGhlIHN1cHBsaWVkIG9iamVjdCB3aWxsIGJlIHVzZWQgYXMgZGVmYXVsdCB2YWx1ZXMgLyBmYWxsLWJhY2tcbiAgLy8gICAgZm9yIHJlbGF0aXZlIHBhdGhzLlxuICAvL1xuICBpZiAoJ29iamVjdCcgIT09IHR5cGUgJiYgJ3N0cmluZycgIT09IHR5cGUpIHtcbiAgICBwYXJzZXIgPSBsb2NhdGlvbjtcbiAgICBsb2NhdGlvbiA9IG51bGw7XG4gIH1cblxuICBpZiAocGFyc2VyICYmICdmdW5jdGlvbicgIT09IHR5cGVvZiBwYXJzZXIpIHBhcnNlciA9IHFzLnBhcnNlO1xuXG4gIGxvY2F0aW9uID0gbG9sY2F0aW9uKGxvY2F0aW9uKTtcblxuICAvL1xuICAvLyBFeHRyYWN0IHByb3RvY29sIGluZm9ybWF0aW9uIGJlZm9yZSBydW5uaW5nIHRoZSBpbnN0cnVjdGlvbnMuXG4gIC8vXG4gIGV4dHJhY3RlZCA9IGV4dHJhY3RQcm90b2NvbChhZGRyZXNzIHx8ICcnKTtcbiAgcmVsYXRpdmUgPSAhZXh0cmFjdGVkLnByb3RvY29sICYmICFleHRyYWN0ZWQuc2xhc2hlcztcbiAgdXJsLnNsYXNoZXMgPSBleHRyYWN0ZWQuc2xhc2hlcyB8fCByZWxhdGl2ZSAmJiBsb2NhdGlvbi5zbGFzaGVzO1xuICB1cmwucHJvdG9jb2wgPSBleHRyYWN0ZWQucHJvdG9jb2wgfHwgbG9jYXRpb24ucHJvdG9jb2wgfHwgJyc7XG4gIGFkZHJlc3MgPSBleHRyYWN0ZWQucmVzdDtcblxuICAvL1xuICAvLyBXaGVuIHRoZSBhdXRob3JpdHkgY29tcG9uZW50IGlzIGFic2VudCB0aGUgVVJMIHN0YXJ0cyB3aXRoIGEgcGF0aFxuICAvLyBjb21wb25lbnQuXG4gIC8vXG4gIGlmICghZXh0cmFjdGVkLnNsYXNoZXMpIGluc3RydWN0aW9uc1szXSA9IFsvKC4qKS8sICdwYXRobmFtZSddO1xuXG4gIGZvciAoOyBpIDwgaW5zdHJ1Y3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgaW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbnNbaV07XG5cbiAgICBpZiAodHlwZW9mIGluc3RydWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhZGRyZXNzID0gaW5zdHJ1Y3Rpb24oYWRkcmVzcyk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBwYXJzZSA9IGluc3RydWN0aW9uWzBdO1xuICAgIGtleSA9IGluc3RydWN0aW9uWzFdO1xuXG4gICAgaWYgKHBhcnNlICE9PSBwYXJzZSkge1xuICAgICAgdXJsW2tleV0gPSBhZGRyZXNzO1xuICAgIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBwYXJzZSkge1xuICAgICAgaWYgKH4oaW5kZXggPSBhZGRyZXNzLmluZGV4T2YocGFyc2UpKSkge1xuICAgICAgICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiBpbnN0cnVjdGlvblsyXSkge1xuICAgICAgICAgIHVybFtrZXldID0gYWRkcmVzcy5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgICAgYWRkcmVzcyA9IGFkZHJlc3Muc2xpY2UoaW5kZXggKyBpbnN0cnVjdGlvblsyXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXJsW2tleV0gPSBhZGRyZXNzLnNsaWNlKGluZGV4KTtcbiAgICAgICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKChpbmRleCA9IHBhcnNlLmV4ZWMoYWRkcmVzcykpKSB7XG4gICAgICB1cmxba2V5XSA9IGluZGV4WzFdO1xuICAgICAgYWRkcmVzcyA9IGFkZHJlc3Muc2xpY2UoMCwgaW5kZXguaW5kZXgpO1xuICAgIH1cblxuICAgIHVybFtrZXldID0gdXJsW2tleV0gfHwgKFxuICAgICAgcmVsYXRpdmUgJiYgaW5zdHJ1Y3Rpb25bM10gPyBsb2NhdGlvbltrZXldIHx8ICcnIDogJydcbiAgICApO1xuXG4gICAgLy9cbiAgICAvLyBIb3N0bmFtZSwgaG9zdCBhbmQgcHJvdG9jb2wgc2hvdWxkIGJlIGxvd2VyY2FzZWQgc28gdGhleSBjYW4gYmUgdXNlZCB0b1xuICAgIC8vIGNyZWF0ZSBhIHByb3BlciBgb3JpZ2luYC5cbiAgICAvL1xuICAgIGlmIChpbnN0cnVjdGlvbls0XSkgdXJsW2tleV0gPSB1cmxba2V5XS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgLy9cbiAgLy8gQWxzbyBwYXJzZSB0aGUgc3VwcGxpZWQgcXVlcnkgc3RyaW5nIGluIHRvIGFuIG9iamVjdC4gSWYgd2UncmUgc3VwcGxpZWRcbiAgLy8gd2l0aCBhIGN1c3RvbSBwYXJzZXIgYXMgZnVuY3Rpb24gdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBidWlsZC1pblxuICAvLyBwYXJzZXIuXG4gIC8vXG4gIGlmIChwYXJzZXIpIHVybC5xdWVyeSA9IHBhcnNlcih1cmwucXVlcnkpO1xuXG4gIC8vXG4gIC8vIElmIHRoZSBVUkwgaXMgcmVsYXRpdmUsIHJlc29sdmUgdGhlIHBhdGhuYW1lIGFnYWluc3QgdGhlIGJhc2UgVVJMLlxuICAvL1xuICBpZiAoXG4gICAgICByZWxhdGl2ZVxuICAgICYmIGxvY2F0aW9uLnNsYXNoZXNcbiAgICAmJiB1cmwucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLydcbiAgICAmJiAodXJsLnBhdGhuYW1lICE9PSAnJyB8fCBsb2NhdGlvbi5wYXRobmFtZSAhPT0gJycpXG4gICkge1xuICAgIHVybC5wYXRobmFtZSA9IHJlc29sdmUodXJsLnBhdGhuYW1lLCBsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH1cblxuICAvL1xuICAvLyBXZSBzaG91bGQgbm90IGFkZCBwb3J0IG51bWJlcnMgaWYgdGhleSBhcmUgYWxyZWFkeSB0aGUgZGVmYXVsdCBwb3J0IG51bWJlclxuICAvLyBmb3IgYSBnaXZlbiBwcm90b2NvbC4gQXMgdGhlIGhvc3QgYWxzbyBjb250YWlucyB0aGUgcG9ydCBudW1iZXIgd2UncmUgZ29pbmdcbiAgLy8gb3ZlcnJpZGUgaXQgd2l0aCB0aGUgaG9zdG5hbWUgd2hpY2ggY29udGFpbnMgbm8gcG9ydCBudW1iZXIuXG4gIC8vXG4gIGlmICghcmVxdWlyZWQodXJsLnBvcnQsIHVybC5wcm90b2NvbCkpIHtcbiAgICB1cmwuaG9zdCA9IHVybC5ob3N0bmFtZTtcbiAgICB1cmwucG9ydCA9ICcnO1xuICB9XG5cbiAgLy9cbiAgLy8gUGFyc2UgZG93biB0aGUgYGF1dGhgIGZvciB0aGUgdXNlcm5hbWUgYW5kIHBhc3N3b3JkLlxuICAvL1xuICB1cmwudXNlcm5hbWUgPSB1cmwucGFzc3dvcmQgPSAnJztcbiAgaWYgKHVybC5hdXRoKSB7XG4gICAgaW5zdHJ1Y3Rpb24gPSB1cmwuYXV0aC5zcGxpdCgnOicpO1xuICAgIHVybC51c2VybmFtZSA9IGluc3RydWN0aW9uWzBdIHx8ICcnO1xuICAgIHVybC5wYXNzd29yZCA9IGluc3RydWN0aW9uWzFdIHx8ICcnO1xuICB9XG5cbiAgdXJsLm9yaWdpbiA9IHVybC5wcm90b2NvbCAmJiB1cmwuaG9zdCAmJiB1cmwucHJvdG9jb2wgIT09ICdmaWxlOidcbiAgICA/IHVybC5wcm90b2NvbCArJy8vJysgdXJsLmhvc3RcbiAgICA6ICdudWxsJztcblxuICAvL1xuICAvLyBUaGUgaHJlZiBpcyBqdXN0IHRoZSBjb21waWxlZCByZXN1bHQuXG4gIC8vXG4gIHVybC5ocmVmID0gdXJsLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogVGhpcyBpcyBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGNoYW5naW5nIHByb3BlcnRpZXMgaW4gdGhlIFVSTCBpbnN0YW5jZSB0b1xuICogaW5zdXJlIHRoYXQgdGhleSBhbGwgcHJvcGFnYXRlIGNvcnJlY3RseS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFydCAgICAgICAgICBQcm9wZXJ0eSB3ZSBuZWVkIHRvIGFkanVzdC5cbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlICAgICAgICAgIFRoZSBuZXdseSBhc3NpZ25lZCB2YWx1ZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbnxGdW5jdGlvbn0gZm4gIFdoZW4gc2V0dGluZyB0aGUgcXVlcnksIGl0IHdpbGwgYmUgdGhlIGZ1bmN0aW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIHRvIHBhcnNlIHRoZSBxdWVyeS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoZW4gc2V0dGluZyB0aGUgcHJvdG9jb2wsIGRvdWJsZSBzbGFzaCB3aWxsIGJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkIGZyb20gdGhlIGZpbmFsIHVybCBpZiBpdCBpcyB0cnVlLlxuICogQHJldHVybnMge1VSTH0gVVJMIGluc3RhbmNlIGZvciBjaGFpbmluZy5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gc2V0KHBhcnQsIHZhbHVlLCBmbikge1xuICB2YXIgdXJsID0gdGhpcztcblxuICBzd2l0Y2ggKHBhcnQpIHtcbiAgICBjYXNlICdxdWVyeSc6XG4gICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgdmFsdWUgPSAoZm4gfHwgcXMucGFyc2UpKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3BvcnQnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmICghcmVxdWlyZWQodmFsdWUsIHVybC5wcm90b2NvbCkpIHtcbiAgICAgICAgdXJsLmhvc3QgPSB1cmwuaG9zdG5hbWU7XG4gICAgICAgIHVybFtwYXJ0XSA9ICcnO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICB1cmwuaG9zdCA9IHVybC5ob3N0bmFtZSArJzonKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdob3N0bmFtZSc6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcblxuICAgICAgaWYgKHVybC5wb3J0KSB2YWx1ZSArPSAnOicrIHVybC5wb3J0O1xuICAgICAgdXJsLmhvc3QgPSB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaG9zdCc6XG4gICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcblxuICAgICAgaWYgKC86XFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3BsaXQoJzonKTtcbiAgICAgICAgdXJsLnBvcnQgPSB2YWx1ZS5wb3AoKTtcbiAgICAgICAgdXJsLmhvc3RuYW1lID0gdmFsdWUuam9pbignOicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJsLmhvc3RuYW1lID0gdmFsdWU7XG4gICAgICAgIHVybC5wb3J0ID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncHJvdG9jb2wnOlxuICAgICAgdXJsLnByb3RvY29sID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHVybC5zbGFzaGVzID0gIWZuO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwYXRobmFtZSc6XG4gICAgY2FzZSAnaGFzaCc6XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNoYXIgPSBwYXJ0ID09PSAncGF0aG5hbWUnID8gJy8nIDogJyMnO1xuICAgICAgICB1cmxbcGFydF0gPSB2YWx1ZS5jaGFyQXQoMCkgIT09IGNoYXIgPyBjaGFyICsgdmFsdWUgOiB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGlucyA9IHJ1bGVzW2ldO1xuXG4gICAgaWYgKGluc1s0XSkgdXJsW2luc1sxXV0gPSB1cmxbaW5zWzFdXS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgdXJsLm9yaWdpbiA9IHVybC5wcm90b2NvbCAmJiB1cmwuaG9zdCAmJiB1cmwucHJvdG9jb2wgIT09ICdmaWxlOidcbiAgICA/IHVybC5wcm90b2NvbCArJy8vJysgdXJsLmhvc3RcbiAgICA6ICdudWxsJztcblxuICB1cmwuaHJlZiA9IHVybC50b1N0cmluZygpO1xuXG4gIHJldHVybiB1cmw7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBwcm9wZXJ0aWVzIGJhY2sgaW4gdG8gYSB2YWxpZCBhbmQgZnVsbCBVUkwgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZ2lmeSBPcHRpb25hbCBxdWVyeSBzdHJpbmdpZnkgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBDb21waWxlZCB2ZXJzaW9uIG9mIHRoZSBVUkwuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHN0cmluZ2lmeSkge1xuICBpZiAoIXN0cmluZ2lmeSB8fCAnZnVuY3Rpb24nICE9PSB0eXBlb2Ygc3RyaW5naWZ5KSBzdHJpbmdpZnkgPSBxcy5zdHJpbmdpZnk7XG5cbiAgdmFyIHF1ZXJ5XG4gICAgLCB1cmwgPSB0aGlzXG4gICAgLCBwcm90b2NvbCA9IHVybC5wcm90b2NvbDtcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuY2hhckF0KHByb3RvY29sLmxlbmd0aCAtIDEpICE9PSAnOicpIHByb3RvY29sICs9ICc6JztcblxuICB2YXIgcmVzdWx0ID0gcHJvdG9jb2wgKyAodXJsLnNsYXNoZXMgPyAnLy8nIDogJycpO1xuXG4gIGlmICh1cmwudXNlcm5hbWUpIHtcbiAgICByZXN1bHQgKz0gdXJsLnVzZXJuYW1lO1xuICAgIGlmICh1cmwucGFzc3dvcmQpIHJlc3VsdCArPSAnOicrIHVybC5wYXNzd29yZDtcbiAgICByZXN1bHQgKz0gJ0AnO1xuICB9XG5cbiAgcmVzdWx0ICs9IHVybC5ob3N0ICsgdXJsLnBhdGhuYW1lO1xuXG4gIHF1ZXJ5ID0gJ29iamVjdCcgPT09IHR5cGVvZiB1cmwucXVlcnkgPyBzdHJpbmdpZnkodXJsLnF1ZXJ5KSA6IHVybC5xdWVyeTtcbiAgaWYgKHF1ZXJ5KSByZXN1bHQgKz0gJz8nICE9PSBxdWVyeS5jaGFyQXQoMCkgPyAnPycrIHF1ZXJ5IDogcXVlcnk7XG5cbiAgaWYgKHVybC5oYXNoKSByZXN1bHQgKz0gdXJsLmhhc2g7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuVXJsLnByb3RvdHlwZSA9IHsgc2V0OiBzZXQsIHRvU3RyaW5nOiB0b1N0cmluZyB9O1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBVUkwgcGFyc2VyIGFuZCBzb21lIGFkZGl0aW9uYWwgcHJvcGVydGllcyB0aGF0IG1pZ2h0IGJlIHVzZWZ1bCBmb3Jcbi8vIG90aGVycyBvciB0ZXN0aW5nLlxuLy9cblVybC5leHRyYWN0UHJvdG9jb2wgPSBleHRyYWN0UHJvdG9jb2w7XG5VcmwubG9jYXRpb24gPSBsb2xjYXRpb247XG5VcmwucXMgPSBxcztcblxubW9kdWxlLmV4cG9ydHMgPSBVcmw7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcInF1ZXJ5c3RyaW5naWZ5XCI6NTksXCJyZXF1aXJlcy1wb3J0XCI6NjB9XX0se30sWzFdKSgxKVxufSk7XG5cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c29ja2pzLmpzLm1hcFxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHB1bnljb2RlID0gcmVxdWlyZSgncHVueWNvZGUnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbmV4cG9ydHMucGFyc2UgPSB1cmxQYXJzZTtcbmV4cG9ydHMucmVzb2x2ZSA9IHVybFJlc29sdmU7XG5leHBvcnRzLnJlc29sdmVPYmplY3QgPSB1cmxSZXNvbHZlT2JqZWN0O1xuZXhwb3J0cy5mb3JtYXQgPSB1cmxGb3JtYXQ7XG5cbmV4cG9ydHMuVXJsID0gVXJsO1xuXG5mdW5jdGlvbiBVcmwoKSB7XG4gIHRoaXMucHJvdG9jb2wgPSBudWxsO1xuICB0aGlzLnNsYXNoZXMgPSBudWxsO1xuICB0aGlzLmF1dGggPSBudWxsO1xuICB0aGlzLmhvc3QgPSBudWxsO1xuICB0aGlzLnBvcnQgPSBudWxsO1xuICB0aGlzLmhvc3RuYW1lID0gbnVsbDtcbiAgdGhpcy5oYXNoID0gbnVsbDtcbiAgdGhpcy5zZWFyY2ggPSBudWxsO1xuICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgdGhpcy5wYXRobmFtZSA9IG51bGw7XG4gIHRoaXMucGF0aCA9IG51bGw7XG4gIHRoaXMuaHJlZiA9IG51bGw7XG59XG5cbi8vIFJlZmVyZW5jZTogUkZDIDM5ODYsIFJGQyAxODA4LCBSRkMgMjM5NlxuXG4vLyBkZWZpbmUgdGhlc2UgaGVyZSBzbyBhdCBsZWFzdCB0aGV5IG9ubHkgaGF2ZSB0byBiZVxuLy8gY29tcGlsZWQgb25jZSBvbiB0aGUgZmlyc3QgbW9kdWxlIGxvYWQuXG52YXIgcHJvdG9jb2xQYXR0ZXJuID0gL14oW2EtejAtOS4rLV0rOikvaSxcbiAgICBwb3J0UGF0dGVybiA9IC86WzAtOV0qJC8sXG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIGEgc2ltcGxlIHBhdGggVVJMXG4gICAgc2ltcGxlUGF0aFBhdHRlcm4gPSAvXihcXC9cXC8/KD8hXFwvKVteXFw/XFxzXSopKFxcP1teXFxzXSopPyQvLFxuXG4gICAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgcmVzZXJ2ZWQgZm9yIGRlbGltaXRpbmcgVVJMcy5cbiAgICAvLyBXZSBhY3R1YWxseSBqdXN0IGF1dG8tZXNjYXBlIHRoZXNlLlxuICAgIGRlbGltcyA9IFsnPCcsICc+JywgJ1wiJywgJ2AnLCAnICcsICdcXHInLCAnXFxuJywgJ1xcdCddLFxuXG4gICAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgbm90IGFsbG93ZWQgZm9yIHZhcmlvdXMgcmVhc29ucy5cbiAgICB1bndpc2UgPSBbJ3snLCAnfScsICd8JywgJ1xcXFwnLCAnXicsICdgJ10uY29uY2F0KGRlbGltcyksXG5cbiAgICAvLyBBbGxvd2VkIGJ5IFJGQ3MsIGJ1dCBjYXVzZSBvZiBYU1MgYXR0YWNrcy4gIEFsd2F5cyBlc2NhcGUgdGhlc2UuXG4gICAgYXV0b0VzY2FwZSA9IFsnXFwnJ10uY29uY2F0KHVud2lzZSksXG4gICAgLy8gQ2hhcmFjdGVycyB0aGF0IGFyZSBuZXZlciBldmVyIGFsbG93ZWQgaW4gYSBob3N0bmFtZS5cbiAgICAvLyBOb3RlIHRoYXQgYW55IGludmFsaWQgY2hhcnMgYXJlIGFsc28gaGFuZGxlZCwgYnV0IHRoZXNlXG4gICAgLy8gYXJlIHRoZSBvbmVzIHRoYXQgYXJlICpleHBlY3RlZCogdG8gYmUgc2Vlbiwgc28gd2UgZmFzdC1wYXRoXG4gICAgLy8gdGhlbS5cbiAgICBub25Ib3N0Q2hhcnMgPSBbJyUnLCAnLycsICc/JywgJzsnLCAnIyddLmNvbmNhdChhdXRvRXNjYXBlKSxcbiAgICBob3N0RW5kaW5nQ2hhcnMgPSBbJy8nLCAnPycsICcjJ10sXG4gICAgaG9zdG5hbWVNYXhMZW4gPSAyNTUsXG4gICAgaG9zdG5hbWVQYXJ0UGF0dGVybiA9IC9eWythLXowLTlBLVpfLV17MCw2M30kLyxcbiAgICBob3N0bmFtZVBhcnRTdGFydCA9IC9eKFsrYS16MC05QS1aXy1dezAsNjN9KSguKikkLyxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBjYW4gYWxsb3cgXCJ1bnNhZmVcIiBhbmQgXCJ1bndpc2VcIiBjaGFycy5cbiAgICB1bnNhZmVQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IG5ldmVyIGhhdmUgYSBob3N0bmFtZS5cbiAgICBob3N0bGVzc1Byb3RvY29sID0ge1xuICAgICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICAgIH0sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgYWx3YXlzIGNvbnRhaW4gYSAvLyBiaXQuXG4gICAgc2xhc2hlZFByb3RvY29sID0ge1xuICAgICAgJ2h0dHAnOiB0cnVlLFxuICAgICAgJ2h0dHBzJzogdHJ1ZSxcbiAgICAgICdmdHAnOiB0cnVlLFxuICAgICAgJ2dvcGhlcic6IHRydWUsXG4gICAgICAnZmlsZSc6IHRydWUsXG4gICAgICAnaHR0cDonOiB0cnVlLFxuICAgICAgJ2h0dHBzOic6IHRydWUsXG4gICAgICAnZnRwOic6IHRydWUsXG4gICAgICAnZ29waGVyOic6IHRydWUsXG4gICAgICAnZmlsZTonOiB0cnVlXG4gICAgfSxcbiAgICBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5cbmZ1bmN0aW9uIHVybFBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKHVybCAmJiB1dGlsLmlzT2JqZWN0KHVybCkgJiYgdXJsIGluc3RhbmNlb2YgVXJsKSByZXR1cm4gdXJsO1xuXG4gIHZhciB1ID0gbmV3IFVybDtcbiAgdS5wYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KTtcbiAgcmV0dXJuIHU7XG59XG5cblVybC5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbih1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICghdXRpbC5pc1N0cmluZyh1cmwpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlBhcmFtZXRlciAndXJsJyBtdXN0IGJlIGEgc3RyaW5nLCBub3QgXCIgKyB0eXBlb2YgdXJsKTtcbiAgfVxuXG4gIC8vIENvcHkgY2hyb21lLCBJRSwgb3BlcmEgYmFja3NsYXNoLWhhbmRsaW5nIGJlaGF2aW9yLlxuICAvLyBCYWNrIHNsYXNoZXMgYmVmb3JlIHRoZSBxdWVyeSBzdHJpbmcgZ2V0IGNvbnZlcnRlZCB0byBmb3J3YXJkIHNsYXNoZXNcbiAgLy8gU2VlOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjU5MTZcbiAgdmFyIHF1ZXJ5SW5kZXggPSB1cmwuaW5kZXhPZignPycpLFxuICAgICAgc3BsaXR0ZXIgPVxuICAgICAgICAgIChxdWVyeUluZGV4ICE9PSAtMSAmJiBxdWVyeUluZGV4IDwgdXJsLmluZGV4T2YoJyMnKSkgPyAnPycgOiAnIycsXG4gICAgICB1U3BsaXQgPSB1cmwuc3BsaXQoc3BsaXR0ZXIpLFxuICAgICAgc2xhc2hSZWdleCA9IC9cXFxcL2c7XG4gIHVTcGxpdFswXSA9IHVTcGxpdFswXS5yZXBsYWNlKHNsYXNoUmVnZXgsICcvJyk7XG4gIHVybCA9IHVTcGxpdC5qb2luKHNwbGl0dGVyKTtcblxuICB2YXIgcmVzdCA9IHVybDtcblxuICAvLyB0cmltIGJlZm9yZSBwcm9jZWVkaW5nLlxuICAvLyBUaGlzIGlzIHRvIHN1cHBvcnQgcGFyc2Ugc3R1ZmYgbGlrZSBcIiAgaHR0cDovL2Zvby5jb20gIFxcblwiXG4gIHJlc3QgPSByZXN0LnRyaW0oKTtcblxuICBpZiAoIXNsYXNoZXNEZW5vdGVIb3N0ICYmIHVybC5zcGxpdCgnIycpLmxlbmd0aCA9PT0gMSkge1xuICAgIC8vIFRyeSBmYXN0IHBhdGggcmVnZXhwXG4gICAgdmFyIHNpbXBsZVBhdGggPSBzaW1wbGVQYXRoUGF0dGVybi5leGVjKHJlc3QpO1xuICAgIGlmIChzaW1wbGVQYXRoKSB7XG4gICAgICB0aGlzLnBhdGggPSByZXN0O1xuICAgICAgdGhpcy5ocmVmID0gcmVzdDtcbiAgICAgIHRoaXMucGF0aG5hbWUgPSBzaW1wbGVQYXRoWzFdO1xuICAgICAgaWYgKHNpbXBsZVBhdGhbMl0pIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSBzaW1wbGVQYXRoWzJdO1xuICAgICAgICBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnNlYXJjaC5zdWJzdHIoMSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucXVlcnkgPSB0aGlzLnNlYXJjaC5zdWJzdHIoMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0ge307XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgcHJvdG8gPSBwcm90b2NvbFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgaWYgKHByb3RvKSB7XG4gICAgcHJvdG8gPSBwcm90b1swXTtcbiAgICB2YXIgbG93ZXJQcm90byA9IHByb3RvLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5wcm90b2NvbCA9IGxvd2VyUHJvdG87XG4gICAgcmVzdCA9IHJlc3Quc3Vic3RyKHByb3RvLmxlbmd0aCk7XG4gIH1cblxuICAvLyBmaWd1cmUgb3V0IGlmIGl0J3MgZ290IGEgaG9zdFxuICAvLyB1c2VyQHNlcnZlciBpcyAqYWx3YXlzKiBpbnRlcnByZXRlZCBhcyBhIGhvc3RuYW1lLCBhbmQgdXJsXG4gIC8vIHJlc29sdXRpb24gd2lsbCB0cmVhdCAvL2Zvby9iYXIgYXMgaG9zdD1mb28scGF0aD1iYXIgYmVjYXVzZSB0aGF0J3NcbiAgLy8gaG93IHRoZSBicm93c2VyIHJlc29sdmVzIHJlbGF0aXZlIFVSTHMuXG4gIGlmIChzbGFzaGVzRGVub3RlSG9zdCB8fCBwcm90byB8fCByZXN0Lm1hdGNoKC9eXFwvXFwvW15AXFwvXStAW15AXFwvXSsvKSkge1xuICAgIHZhciBzbGFzaGVzID0gcmVzdC5zdWJzdHIoMCwgMikgPT09ICcvLyc7XG4gICAgaWYgKHNsYXNoZXMgJiYgIShwcm90byAmJiBob3N0bGVzc1Byb3RvY29sW3Byb3RvXSkpIHtcbiAgICAgIHJlc3QgPSByZXN0LnN1YnN0cigyKTtcbiAgICAgIHRoaXMuc2xhc2hlcyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFob3N0bGVzc1Byb3RvY29sW3Byb3RvXSAmJlxuICAgICAgKHNsYXNoZXMgfHwgKHByb3RvICYmICFzbGFzaGVkUHJvdG9jb2xbcHJvdG9dKSkpIHtcblxuICAgIC8vIHRoZXJlJ3MgYSBob3N0bmFtZS5cbiAgICAvLyB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgLywgPywgOywgb3IgIyBlbmRzIHRoZSBob3N0LlxuICAgIC8vXG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gQCBpbiB0aGUgaG9zdG5hbWUsIHRoZW4gbm9uLWhvc3QgY2hhcnMgKmFyZSogYWxsb3dlZFxuICAgIC8vIHRvIHRoZSBsZWZ0IG9mIHRoZSBsYXN0IEAgc2lnbiwgdW5sZXNzIHNvbWUgaG9zdC1lbmRpbmcgY2hhcmFjdGVyXG4gICAgLy8gY29tZXMgKmJlZm9yZSogdGhlIEAtc2lnbi5cbiAgICAvLyBVUkxzIGFyZSBvYm5veGlvdXMuXG4gICAgLy9cbiAgICAvLyBleDpcbiAgICAvLyBodHRwOi8vYUBiQGMvID0+IHVzZXI6YUBiIGhvc3Q6Y1xuICAgIC8vIGh0dHA6Ly9hQGI/QGMgPT4gdXNlcjphIGhvc3Q6YyBwYXRoOi8/QGNcblxuICAgIC8vIHYwLjEyIFRPRE8oaXNhYWNzKTogVGhpcyBpcyBub3QgcXVpdGUgaG93IENocm9tZSBkb2VzIHRoaW5ncy5cbiAgICAvLyBSZXZpZXcgb3VyIHRlc3QgY2FzZSBhZ2FpbnN0IGJyb3dzZXJzIG1vcmUgY29tcHJlaGVuc2l2ZWx5LlxuXG4gICAgLy8gZmluZCB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYW55IGhvc3RFbmRpbmdDaGFyc1xuICAgIHZhciBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob3N0RW5kaW5nQ2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2YoaG9zdEVuZGluZ0NoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG5cbiAgICAvLyBhdCB0aGlzIHBvaW50LCBlaXRoZXIgd2UgaGF2ZSBhbiBleHBsaWNpdCBwb2ludCB3aGVyZSB0aGVcbiAgICAvLyBhdXRoIHBvcnRpb24gY2Fubm90IGdvIHBhc3QsIG9yIHRoZSBsYXN0IEAgY2hhciBpcyB0aGUgZGVjaWRlci5cbiAgICB2YXIgYXV0aCwgYXRTaWduO1xuICAgIGlmIChob3N0RW5kID09PSAtMSkge1xuICAgICAgLy8gYXRTaWduIGNhbiBiZSBhbnl3aGVyZS5cbiAgICAgIGF0U2lnbiA9IHJlc3QubGFzdEluZGV4T2YoJ0AnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYXRTaWduIG11c3QgYmUgaW4gYXV0aCBwb3J0aW9uLlxuICAgICAgLy8gaHR0cDovL2FAYi9jQGQgPT4gaG9zdDpiIGF1dGg6YSBwYXRoOi9jQGRcbiAgICAgIGF0U2lnbiA9IHJlc3QubGFzdEluZGV4T2YoJ0AnLCBob3N0RW5kKTtcbiAgICB9XG5cbiAgICAvLyBOb3cgd2UgaGF2ZSBhIHBvcnRpb24gd2hpY2ggaXMgZGVmaW5pdGVseSB0aGUgYXV0aC5cbiAgICAvLyBQdWxsIHRoYXQgb2ZmLlxuICAgIGlmIChhdFNpZ24gIT09IC0xKSB7XG4gICAgICBhdXRoID0gcmVzdC5zbGljZSgwLCBhdFNpZ24pO1xuICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoYXRTaWduICsgMSk7XG4gICAgICB0aGlzLmF1dGggPSBkZWNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgfVxuXG4gICAgLy8gdGhlIGhvc3QgaXMgdGhlIHJlbWFpbmluZyB0byB0aGUgbGVmdCBvZiB0aGUgZmlyc3Qgbm9uLWhvc3QgY2hhclxuICAgIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vbkhvc3RDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhlYyA9IHJlc3QuaW5kZXhPZihub25Ib3N0Q2hhcnNbaV0pO1xuICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKVxuICAgICAgICBob3N0RW5kID0gaGVjO1xuICAgIH1cbiAgICAvLyBpZiB3ZSBzdGlsbCBoYXZlIG5vdCBoaXQgaXQsIHRoZW4gdGhlIGVudGlyZSB0aGluZyBpcyBhIGhvc3QuXG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKVxuICAgICAgaG9zdEVuZCA9IHJlc3QubGVuZ3RoO1xuXG4gICAgdGhpcy5ob3N0ID0gcmVzdC5zbGljZSgwLCBob3N0RW5kKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZShob3N0RW5kKTtcblxuICAgIC8vIHB1bGwgb3V0IHBvcnQuXG4gICAgdGhpcy5wYXJzZUhvc3QoKTtcblxuICAgIC8vIHdlJ3ZlIGluZGljYXRlZCB0aGF0IHRoZXJlIGlzIGEgaG9zdG5hbWUsXG4gICAgLy8gc28gZXZlbiBpZiBpdCdzIGVtcHR5LCBpdCBoYXMgdG8gYmUgcHJlc2VudC5cbiAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZSB8fCAnJztcblxuICAgIC8vIGlmIGhvc3RuYW1lIGJlZ2lucyB3aXRoIFsgYW5kIGVuZHMgd2l0aCBdXG4gICAgLy8gYXNzdW1lIHRoYXQgaXQncyBhbiBJUHY2IGFkZHJlc3MuXG4gICAgdmFyIGlwdjZIb3N0bmFtZSA9IHRoaXMuaG9zdG5hbWVbMF0gPT09ICdbJyAmJlxuICAgICAgICB0aGlzLmhvc3RuYW1lW3RoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMV0gPT09ICddJztcblxuICAgIC8vIHZhbGlkYXRlIGEgbGl0dGxlLlxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB2YXIgaG9zdHBhcnRzID0gdGhpcy5ob3N0bmFtZS5zcGxpdCgvXFwuLyk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGhvc3RwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcnQgPSBob3N0cGFydHNbaV07XG4gICAgICAgIGlmICghcGFydCkgY29udGludWU7XG4gICAgICAgIGlmICghcGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgIHZhciBuZXdwYXJ0ID0gJyc7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGsgPSBwYXJ0Lmxlbmd0aDsgaiA8IGs7IGorKykge1xuICAgICAgICAgICAgaWYgKHBhcnQuY2hhckNvZGVBdChqKSA+IDEyNykge1xuICAgICAgICAgICAgICAvLyB3ZSByZXBsYWNlIG5vbi1BU0NJSSBjaGFyIHdpdGggYSB0ZW1wb3JhcnkgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0aGlzIHRvIG1ha2Ugc3VyZSBzaXplIG9mIGhvc3RuYW1lIGlzIG5vdFxuICAgICAgICAgICAgICAvLyBicm9rZW4gYnkgcmVwbGFjaW5nIG5vbi1BU0NJSSBieSBub3RoaW5nXG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gJ3gnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3cGFydCArPSBwYXJ0W2pdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB3ZSB0ZXN0IGFnYWluIHdpdGggQVNDSUkgY2hhciBvbmx5XG4gICAgICAgICAgaWYgKCFuZXdwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWRQYXJ0cyA9IGhvc3RwYXJ0cy5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIHZhciBub3RIb3N0ID0gaG9zdHBhcnRzLnNsaWNlKGkgKyAxKTtcbiAgICAgICAgICAgIHZhciBiaXQgPSBwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFN0YXJ0KTtcbiAgICAgICAgICAgIGlmIChiaXQpIHtcbiAgICAgICAgICAgICAgdmFsaWRQYXJ0cy5wdXNoKGJpdFsxXSk7XG4gICAgICAgICAgICAgIG5vdEhvc3QudW5zaGlmdChiaXRbMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdEhvc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJlc3QgPSAnLycgKyBub3RIb3N0LmpvaW4oJy4nKSArIHJlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhvc3RuYW1lID0gdmFsaWRQYXJ0cy5qb2luKCcuJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5ob3N0bmFtZS5sZW5ndGggPiBob3N0bmFtZU1heExlbikge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBob3N0bmFtZXMgYXJlIGFsd2F5cyBsb3dlciBjYXNlLlxuICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgLy8gSUROQSBTdXBwb3J0OiBSZXR1cm5zIGEgcHVueWNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIFwiZG9tYWluXCIuXG4gICAgICAvLyBJdCBvbmx5IGNvbnZlcnRzIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB0aGF0XG4gICAgICAvLyBoYXZlIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLCBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmXG4gICAgICAvLyB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQgYWxyZWFkeSBpcyBBU0NJSS1vbmx5LlxuICAgICAgdGhpcy5ob3N0bmFtZSA9IHB1bnljb2RlLnRvQVNDSUkodGhpcy5ob3N0bmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIHAgPSB0aGlzLnBvcnQgPyAnOicgKyB0aGlzLnBvcnQgOiAnJztcbiAgICB2YXIgaCA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG4gICAgdGhpcy5ob3N0ID0gaCArIHA7XG4gICAgdGhpcy5ocmVmICs9IHRoaXMuaG9zdDtcblxuICAgIC8vIHN0cmlwIFsgYW5kIF0gZnJvbSB0aGUgaG9zdG5hbWVcbiAgICAvLyB0aGUgaG9zdCBmaWVsZCBzdGlsbCByZXRhaW5zIHRoZW0sIHRob3VnaFxuICAgIGlmIChpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnN1YnN0cigxLCB0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgaWYgKHJlc3RbMF0gIT09ICcvJykge1xuICAgICAgICByZXN0ID0gJy8nICsgcmVzdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBub3cgcmVzdCBpcyBzZXQgdG8gdGhlIHBvc3QtaG9zdCBzdHVmZi5cbiAgLy8gY2hvcCBvZmYgYW55IGRlbGltIGNoYXJzLlxuICBpZiAoIXVuc2FmZVByb3RvY29sW2xvd2VyUHJvdG9dKSB7XG5cbiAgICAvLyBGaXJzdCwgbWFrZSAxMDAlIHN1cmUgdGhhdCBhbnkgXCJhdXRvRXNjYXBlXCIgY2hhcnMgZ2V0XG4gICAgLy8gZXNjYXBlZCwgZXZlbiBpZiBlbmNvZGVVUklDb21wb25lbnQgZG9lc24ndCB0aGluayB0aGV5XG4gICAgLy8gbmVlZCB0byBiZS5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGF1dG9Fc2NhcGUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgYWUgPSBhdXRvRXNjYXBlW2ldO1xuICAgICAgaWYgKHJlc3QuaW5kZXhPZihhZSkgPT09IC0xKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIHZhciBlc2MgPSBlbmNvZGVVUklDb21wb25lbnQoYWUpO1xuICAgICAgaWYgKGVzYyA9PT0gYWUpIHtcbiAgICAgICAgZXNjID0gZXNjYXBlKGFlKTtcbiAgICAgIH1cbiAgICAgIHJlc3QgPSByZXN0LnNwbGl0KGFlKS5qb2luKGVzYyk7XG4gICAgfVxuICB9XG5cblxuICAvLyBjaG9wIG9mZiBmcm9tIHRoZSB0YWlsIGZpcnN0LlxuICB2YXIgaGFzaCA9IHJlc3QuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaCAhPT0gLTEpIHtcbiAgICAvLyBnb3QgYSBmcmFnbWVudCBzdHJpbmcuXG4gICAgdGhpcy5oYXNoID0gcmVzdC5zdWJzdHIoaGFzaCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgaGFzaCk7XG4gIH1cbiAgdmFyIHFtID0gcmVzdC5pbmRleE9mKCc/Jyk7XG4gIGlmIChxbSAhPT0gLTEpIHtcbiAgICB0aGlzLnNlYXJjaCA9IHJlc3Quc3Vic3RyKHFtKTtcbiAgICB0aGlzLnF1ZXJ5ID0gcmVzdC5zdWJzdHIocW0gKyAxKTtcbiAgICBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMucXVlcnkpO1xuICAgIH1cbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBxbSk7XG4gIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgIC8vIG5vIHF1ZXJ5IHN0cmluZywgYnV0IHBhcnNlUXVlcnlTdHJpbmcgc3RpbGwgcmVxdWVzdGVkXG4gICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICB0aGlzLnF1ZXJ5ID0ge307XG4gIH1cbiAgaWYgKHJlc3QpIHRoaXMucGF0aG5hbWUgPSByZXN0O1xuICBpZiAoc2xhc2hlZFByb3RvY29sW2xvd2VyUHJvdG9dICYmXG4gICAgICB0aGlzLmhvc3RuYW1lICYmICF0aGlzLnBhdGhuYW1lKSB7XG4gICAgdGhpcy5wYXRobmFtZSA9ICcvJztcbiAgfVxuXG4gIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgaWYgKHRoaXMucGF0aG5hbWUgfHwgdGhpcy5zZWFyY2gpIHtcbiAgICB2YXIgcCA9IHRoaXMucGF0aG5hbWUgfHwgJyc7XG4gICAgdmFyIHMgPSB0aGlzLnNlYXJjaCB8fCAnJztcbiAgICB0aGlzLnBhdGggPSBwICsgcztcbiAgfVxuXG4gIC8vIGZpbmFsbHksIHJlY29uc3RydWN0IHRoZSBocmVmIGJhc2VkIG9uIHdoYXQgaGFzIGJlZW4gdmFsaWRhdGVkLlxuICB0aGlzLmhyZWYgPSB0aGlzLmZvcm1hdCgpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGZvcm1hdCBhIHBhcnNlZCBvYmplY3QgaW50byBhIHVybCBzdHJpbmdcbmZ1bmN0aW9uIHVybEZvcm1hdChvYmopIHtcbiAgLy8gZW5zdXJlIGl0J3MgYW4gb2JqZWN0LCBhbmQgbm90IGEgc3RyaW5nIHVybC5cbiAgLy8gSWYgaXQncyBhbiBvYmosIHRoaXMgaXMgYSBuby1vcC5cbiAgLy8gdGhpcyB3YXksIHlvdSBjYW4gY2FsbCB1cmxfZm9ybWF0KCkgb24gc3RyaW5nc1xuICAvLyB0byBjbGVhbiB1cCBwb3RlbnRpYWxseSB3b25reSB1cmxzLlxuICBpZiAodXRpbC5pc1N0cmluZyhvYmopKSBvYmogPSB1cmxQYXJzZShvYmopO1xuICBpZiAoIShvYmogaW5zdGFuY2VvZiBVcmwpKSByZXR1cm4gVXJsLnByb3RvdHlwZS5mb3JtYXQuY2FsbChvYmopO1xuICByZXR1cm4gb2JqLmZvcm1hdCgpO1xufVxuXG5VcmwucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYXV0aCA9IHRoaXMuYXV0aCB8fCAnJztcbiAgaWYgKGF1dGgpIHtcbiAgICBhdXRoID0gZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIGF1dGggPSBhdXRoLnJlcGxhY2UoLyUzQS9pLCAnOicpO1xuICAgIGF1dGggKz0gJ0AnO1xuICB9XG5cbiAgdmFyIHByb3RvY29sID0gdGhpcy5wcm90b2NvbCB8fCAnJyxcbiAgICAgIHBhdGhuYW1lID0gdGhpcy5wYXRobmFtZSB8fCAnJyxcbiAgICAgIGhhc2ggPSB0aGlzLmhhc2ggfHwgJycsXG4gICAgICBob3N0ID0gZmFsc2UsXG4gICAgICBxdWVyeSA9ICcnO1xuXG4gIGlmICh0aGlzLmhvc3QpIHtcbiAgICBob3N0ID0gYXV0aCArIHRoaXMuaG9zdDtcbiAgfSBlbHNlIGlmICh0aGlzLmhvc3RuYW1lKSB7XG4gICAgaG9zdCA9IGF1dGggKyAodGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgPT09IC0xID9cbiAgICAgICAgdGhpcy5ob3N0bmFtZSA6XG4gICAgICAgICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScpO1xuICAgIGlmICh0aGlzLnBvcnQpIHtcbiAgICAgIGhvc3QgKz0gJzonICsgdGhpcy5wb3J0O1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLnF1ZXJ5ICYmXG4gICAgICB1dGlsLmlzT2JqZWN0KHRoaXMucXVlcnkpICYmXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnF1ZXJ5KS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeSh0aGlzLnF1ZXJ5KTtcbiAgfVxuXG4gIHZhciBzZWFyY2ggPSB0aGlzLnNlYXJjaCB8fCAocXVlcnkgJiYgKCc/JyArIHF1ZXJ5KSkgfHwgJyc7XG5cbiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLnN1YnN0cigtMSkgIT09ICc6JykgcHJvdG9jb2wgKz0gJzonO1xuXG4gIC8vIG9ubHkgdGhlIHNsYXNoZWRQcm90b2NvbHMgZ2V0IHRoZSAvLy4gIE5vdCBtYWlsdG86LCB4bXBwOiwgZXRjLlxuICAvLyB1bmxlc3MgdGhleSBoYWQgdGhlbSB0byBiZWdpbiB3aXRoLlxuICBpZiAodGhpcy5zbGFzaGVzIHx8XG4gICAgICAoIXByb3RvY29sIHx8IHNsYXNoZWRQcm90b2NvbFtwcm90b2NvbF0pICYmIGhvc3QgIT09IGZhbHNlKSB7XG4gICAgaG9zdCA9ICcvLycgKyAoaG9zdCB8fCAnJyk7XG4gICAgaWYgKHBhdGhuYW1lICYmIHBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSBwYXRobmFtZSA9ICcvJyArIHBhdGhuYW1lO1xuICB9IGVsc2UgaWYgKCFob3N0KSB7XG4gICAgaG9zdCA9ICcnO1xuICB9XG5cbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgaGFzaCA9ICcjJyArIGhhc2g7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBzZWFyY2ggPSAnPycgKyBzZWFyY2g7XG5cbiAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7XG4gIH0pO1xuICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZSgnIycsICclMjMnKTtcblxuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZShzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlKHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgcmV0dXJuIHRoaXMucmVzb2x2ZU9iamVjdCh1cmxQYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpKS5mb3JtYXQoKTtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmVPYmplY3Qoc291cmNlLCByZWxhdGl2ZSkge1xuICBpZiAoIXNvdXJjZSkgcmV0dXJuIHJlbGF0aXZlO1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZU9iamVjdChyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZU9iamVjdCA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIGlmICh1dGlsLmlzU3RyaW5nKHJlbGF0aXZlKSkge1xuICAgIHZhciByZWwgPSBuZXcgVXJsKCk7XG4gICAgcmVsLnBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgcmVsYXRpdmUgPSByZWw7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gbmV3IFVybCgpO1xuICB2YXIgdGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgZm9yICh2YXIgdGsgPSAwOyB0ayA8IHRrZXlzLmxlbmd0aDsgdGsrKykge1xuICAgIHZhciB0a2V5ID0gdGtleXNbdGtdO1xuICAgIHJlc3VsdFt0a2V5XSA9IHRoaXNbdGtleV07XG4gIH1cblxuICAvLyBoYXNoIGlzIGFsd2F5cyBvdmVycmlkZGVuLCBubyBtYXR0ZXIgd2hhdC5cbiAgLy8gZXZlbiBocmVmPVwiXCIgd2lsbCByZW1vdmUgaXQuXG4gIHJlc3VsdC5oYXNoID0gcmVsYXRpdmUuaGFzaDtcblxuICAvLyBpZiB0aGUgcmVsYXRpdmUgdXJsIGlzIGVtcHR5LCB0aGVuIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIGRvIGhlcmUuXG4gIGlmIChyZWxhdGl2ZS5ocmVmID09PSAnJykge1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBocmVmcyBsaWtlIC8vZm9vL2JhciBhbHdheXMgY3V0IHRvIHRoZSBwcm90b2NvbC5cbiAgaWYgKHJlbGF0aXZlLnNsYXNoZXMgJiYgIXJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgLy8gdGFrZSBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgcHJvdG9jb2wgZnJvbSByZWxhdGl2ZVxuICAgIHZhciBya2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICBmb3IgKHZhciByayA9IDA7IHJrIDwgcmtleXMubGVuZ3RoOyByaysrKSB7XG4gICAgICB2YXIgcmtleSA9IHJrZXlzW3JrXTtcbiAgICAgIGlmIChya2V5ICE9PSAncHJvdG9jb2wnKVxuICAgICAgICByZXN1bHRbcmtleV0gPSByZWxhdGl2ZVtya2V5XTtcbiAgICB9XG5cbiAgICAvL3VybFBhcnNlIGFwcGVuZHMgdHJhaWxpbmcgLyB0byB1cmxzIGxpa2UgaHR0cDovL3d3dy5leGFtcGxlLmNvbVxuICAgIGlmIChzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXSAmJlxuICAgICAgICByZXN1bHQuaG9zdG5hbWUgJiYgIXJlc3VsdC5wYXRobmFtZSkge1xuICAgICAgcmVzdWx0LnBhdGggPSByZXN1bHQucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuXG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChyZWxhdGl2ZS5wcm90b2NvbCAmJiByZWxhdGl2ZS5wcm90b2NvbCAhPT0gcmVzdWx0LnByb3RvY29sKSB7XG4gICAgLy8gaWYgaXQncyBhIGtub3duIHVybCBwcm90b2NvbCwgdGhlbiBjaGFuZ2luZ1xuICAgIC8vIHRoZSBwcm90b2NvbCBkb2VzIHdlaXJkIHRoaW5nc1xuICAgIC8vIGZpcnN0LCBpZiBpdCdzIG5vdCBmaWxlOiwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBob3N0LFxuICAgIC8vIGFuZCBpZiB0aGVyZSB3YXMgYSBwYXRoXG4gICAgLy8gdG8gYmVnaW4gd2l0aCwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBwYXRoLlxuICAgIC8vIGlmIGl0IGlzIGZpbGU6LCB0aGVuIHRoZSBob3N0IGlzIGRyb3BwZWQsXG4gICAgLy8gYmVjYXVzZSB0aGF0J3Mga25vd24gdG8gYmUgaG9zdGxlc3MuXG4gICAgLy8gYW55dGhpbmcgZWxzZSBpcyBhc3N1bWVkIHRvIGJlIGFic29sdXRlLlxuICAgIGlmICghc2xhc2hlZFByb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICAgICAgdmFyIGsgPSBrZXlzW3ZdO1xuICAgICAgICByZXN1bHRba10gPSByZWxhdGl2ZVtrXTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXN1bHQucHJvdG9jb2wgPSByZWxhdGl2ZS5wcm90b2NvbDtcbiAgICBpZiAoIXJlbGF0aXZlLmhvc3QgJiYgIWhvc3RsZXNzUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICB2YXIgcmVsUGF0aCA9IChyZWxhdGl2ZS5wYXRobmFtZSB8fCAnJykuc3BsaXQoJy8nKTtcbiAgICAgIHdoaWxlIChyZWxQYXRoLmxlbmd0aCAmJiAhKHJlbGF0aXZlLmhvc3QgPSByZWxQYXRoLnNoaWZ0KCkpKTtcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdCkgcmVsYXRpdmUuaG9zdCA9ICcnO1xuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0bmFtZSkgcmVsYXRpdmUuaG9zdG5hbWUgPSAnJztcbiAgICAgIGlmIChyZWxQYXRoWzBdICE9PSAnJykgcmVsUGF0aC51bnNoaWZ0KCcnKTtcbiAgICAgIGlmIChyZWxQYXRoLmxlbmd0aCA8IDIpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxQYXRoLmpvaW4oJy8nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsYXRpdmUucGF0aG5hbWU7XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgcmVzdWx0Lmhvc3QgPSByZWxhdGl2ZS5ob3N0IHx8ICcnO1xuICAgIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0O1xuICAgIHJlc3VsdC5wb3J0ID0gcmVsYXRpdmUucG9ydDtcbiAgICAvLyB0byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQucGF0aG5hbWUgfHwgcmVzdWx0LnNlYXJjaCkge1xuICAgICAgdmFyIHAgPSByZXN1bHQucGF0aG5hbWUgfHwgJyc7XG4gICAgICB2YXIgcyA9IHJlc3VsdC5zZWFyY2ggfHwgJyc7XG4gICAgICByZXN1bHQucGF0aCA9IHAgKyBzO1xuICAgIH1cbiAgICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHZhciBpc1NvdXJjZUFicyA9IChyZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSxcbiAgICAgIGlzUmVsQWJzID0gKFxuICAgICAgICAgIHJlbGF0aXZlLmhvc3QgfHxcbiAgICAgICAgICByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJ1xuICAgICAgKSxcbiAgICAgIG11c3RFbmRBYnMgPSAoaXNSZWxBYnMgfHwgaXNTb3VyY2VBYnMgfHxcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5ob3N0ICYmIHJlbGF0aXZlLnBhdGhuYW1lKSksXG4gICAgICByZW1vdmVBbGxEb3RzID0gbXVzdEVuZEFicyxcbiAgICAgIHNyY1BhdGggPSByZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICByZWxQYXRoID0gcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSxcbiAgICAgIHBzeWNob3RpYyA9IHJlc3VsdC5wcm90b2NvbCAmJiAhc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF07XG5cbiAgLy8gaWYgdGhlIHVybCBpcyBhIG5vbi1zbGFzaGVkIHVybCwgdGhlbiByZWxhdGl2ZVxuICAvLyBsaW5rcyBsaWtlIC4uLy4uIHNob3VsZCBiZSBhYmxlXG4gIC8vIHRvIGNyYXdsIHVwIHRvIHRoZSBob3N0bmFtZSwgYXMgd2VsbC4gIFRoaXMgaXMgc3RyYW5nZS5cbiAgLy8gcmVzdWx0LnByb3RvY29sIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IG5vdy5cbiAgLy8gTGF0ZXIgb24sIHB1dCB0aGUgZmlyc3QgcGF0aCBwYXJ0IGludG8gdGhlIGhvc3QgZmllbGQuXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAnJztcbiAgICByZXN1bHQucG9ydCA9IG51bGw7XG4gICAgaWYgKHJlc3VsdC5ob3N0KSB7XG4gICAgICBpZiAoc3JjUGF0aFswXSA9PT0gJycpIHNyY1BhdGhbMF0gPSByZXN1bHQuaG9zdDtcbiAgICAgIGVsc2Ugc3JjUGF0aC51bnNoaWZ0KHJlc3VsdC5ob3N0KTtcbiAgICB9XG4gICAgcmVzdWx0Lmhvc3QgPSAnJztcbiAgICBpZiAocmVsYXRpdmUucHJvdG9jb2wpIHtcbiAgICAgIHJlbGF0aXZlLmhvc3RuYW1lID0gbnVsbDtcbiAgICAgIHJlbGF0aXZlLnBvcnQgPSBudWxsO1xuICAgICAgaWYgKHJlbGF0aXZlLmhvc3QpIHtcbiAgICAgICAgaWYgKHJlbFBhdGhbMF0gPT09ICcnKSByZWxQYXRoWzBdID0gcmVsYXRpdmUuaG9zdDtcbiAgICAgICAgZWxzZSByZWxQYXRoLnVuc2hpZnQocmVsYXRpdmUuaG9zdCk7XG4gICAgICB9XG4gICAgICByZWxhdGl2ZS5ob3N0ID0gbnVsbDtcbiAgICB9XG4gICAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgJiYgKHJlbFBhdGhbMF0gPT09ICcnIHx8IHNyY1BhdGhbMF0gPT09ICcnKTtcbiAgfVxuXG4gIGlmIChpc1JlbEFicykge1xuICAgIC8vIGl0J3MgYWJzb2x1dGUuXG4gICAgcmVzdWx0Lmhvc3QgPSAocmVsYXRpdmUuaG9zdCB8fCByZWxhdGl2ZS5ob3N0ID09PSAnJykgP1xuICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdCA6IHJlc3VsdC5ob3N0O1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IChyZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0bmFtZSA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZS5ob3N0bmFtZSA6IHJlc3VsdC5ob3N0bmFtZTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHNyY1BhdGggPSByZWxQYXRoO1xuICAgIC8vIGZhbGwgdGhyb3VnaCB0byB0aGUgZG90LWhhbmRsaW5nIGJlbG93LlxuICB9IGVsc2UgaWYgKHJlbFBhdGgubGVuZ3RoKSB7XG4gICAgLy8gaXQncyByZWxhdGl2ZVxuICAgIC8vIHRocm93IGF3YXkgdGhlIGV4aXN0aW5nIGZpbGUsIGFuZCB0YWtlIHRoZSBuZXcgcGF0aCBpbnN0ZWFkLlxuICAgIGlmICghc3JjUGF0aCkgc3JjUGF0aCA9IFtdO1xuICAgIHNyY1BhdGgucG9wKCk7XG4gICAgc3JjUGF0aCA9IHNyY1BhdGguY29uY2F0KHJlbFBhdGgpO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gIH0gZWxzZSBpZiAoIXV0aWwuaXNOdWxsT3JVbmRlZmluZWQocmVsYXRpdmUuc2VhcmNoKSkge1xuICAgIC8vIGp1c3QgcHVsbCBvdXQgdGhlIHNlYXJjaC5cbiAgICAvLyBsaWtlIGhyZWY9Jz9mb28nLlxuICAgIC8vIFB1dCB0aGlzIGFmdGVyIHRoZSBvdGhlciB0d28gY2FzZXMgYmVjYXVzZSBpdCBzaW1wbGlmaWVzIHRoZSBib29sZWFuc1xuICAgIGlmIChwc3ljaG90aWMpIHtcbiAgICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0ID0gc3JjUGF0aC5zaGlmdCgpO1xuICAgICAgLy9vY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdFxuICAgICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID9cbiAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlO1xuICAgICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAoIXV0aWwuaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIXV0aWwuaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgLy8gbm8gcGF0aCBhdCBhbGwuICBlYXN5LlxuICAgIC8vIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgb3RoZXIgc3R1ZmYgYWJvdmUuXG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gJy8nICsgcmVzdWx0LnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaWYgYSB1cmwgRU5EcyBpbiAuIG9yIC4uLCB0aGVuIGl0IG11c3QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gIC8vIGhvd2V2ZXIsIGlmIGl0IGVuZHMgaW4gYW55dGhpbmcgZWxzZSBub24tc2xhc2h5LFxuICAvLyB0aGVuIGl0IG11c3QgTk9UIGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICB2YXIgbGFzdCA9IHNyY1BhdGguc2xpY2UoLTEpWzBdO1xuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IChcbiAgICAgIChyZXN1bHQuaG9zdCB8fCByZWxhdGl2ZS5ob3N0IHx8IHNyY1BhdGgubGVuZ3RoID4gMSkgJiZcbiAgICAgIChsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJykgfHwgbGFzdCA9PT0gJycpO1xuXG4gIC8vIHN0cmlwIHNpbmdsZSBkb3RzLCByZXNvbHZlIGRvdWJsZSBkb3RzIHRvIHBhcmVudCBkaXJcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHNyY1BhdGgubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIGxhc3QgPSBzcmNQYXRoW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmICghbXVzdEVuZEFicyAmJiAhcmVtb3ZlQWxsRG90cykge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgc3JjUGF0aC51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtdXN0RW5kQWJzICYmIHNyY1BhdGhbMF0gIT09ICcnICYmXG4gICAgICAoIXNyY1BhdGhbMF0gfHwgc3JjUGF0aFswXS5jaGFyQXQoMCkgIT09ICcvJykpIHtcbiAgICBzcmNQYXRoLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgKHNyY1BhdGguam9pbignLycpLnN1YnN0cigtMSkgIT09ICcvJykpIHtcbiAgICBzcmNQYXRoLnB1c2goJycpO1xuICB9XG5cbiAgdmFyIGlzQWJzb2x1dGUgPSBzcmNQYXRoWzBdID09PSAnJyB8fFxuICAgICAgKHNyY1BhdGhbMF0gJiYgc3JjUGF0aFswXS5jaGFyQXQoMCkgPT09ICcvJyk7XG5cbiAgLy8gcHV0IHRoZSBob3N0IGJhY2tcbiAgaWYgKHBzeWNob3RpYykge1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0ID0gaXNBYnNvbHV0ZSA/ICcnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyY1BhdGgubGVuZ3RoID8gc3JjUGF0aC5zaGlmdCgpIDogJyc7XG4gICAgLy9vY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdFxuICAgIC8vdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgIC8vdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID9cbiAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICB9XG4gIH1cblxuICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyB8fCAocmVzdWx0Lmhvc3QgJiYgc3JjUGF0aC5sZW5ndGgpO1xuXG4gIGlmIChtdXN0RW5kQWJzICYmICFpc0Fic29sdXRlKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmICghc3JjUGF0aC5sZW5ndGgpIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBzcmNQYXRoLmpvaW4oJy8nKTtcbiAgfVxuXG4gIC8vdG8gc3VwcG9ydCByZXF1ZXN0Lmh0dHBcbiAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gIH1cbiAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoIHx8IHJlc3VsdC5hdXRoO1xuICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7XG4gIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuVXJsLnByb3RvdHlwZS5wYXJzZUhvc3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGhvc3QgPSB0aGlzLmhvc3Q7XG4gIHZhciBwb3J0ID0gcG9ydFBhdHRlcm4uZXhlYyhob3N0KTtcbiAgaWYgKHBvcnQpIHtcbiAgICBwb3J0ID0gcG9ydFswXTtcbiAgICBpZiAocG9ydCAhPT0gJzonKSB7XG4gICAgICB0aGlzLnBvcnQgPSBwb3J0LnN1YnN0cigxKTtcbiAgICB9XG4gICAgaG9zdCA9IGhvc3Quc3Vic3RyKDAsIGhvc3QubGVuZ3RoIC0gcG9ydC5sZW5ndGgpO1xuICB9XG4gIGlmIChob3N0KSB0aGlzLmhvc3RuYW1lID0gaG9zdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1N0cmluZzogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnc3RyaW5nJztcbiAgfSxcbiAgaXNPYmplY3Q6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xuICB9LFxuICBpc051bGw6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbE9yVW5kZWZpbmVkOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09IG51bGw7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZVxuICBuby11bnVzZWQtdmFyc1xuKi9cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJhc2VDbGllbnQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VDbGllbnQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJhc2VDbGllbnQsIG51bGwsIFt7XG4gICAga2V5OiBcImdldENsaWVudFBhdGhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2xpZW50UGF0aChvcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWVudCBuZWVkcyBpbXBsZW1lbnRhdGlvbicpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCYXNlQ2xpZW50O1xufSgpOyIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlXG4gIG5vLXVudXNlZC12YXJzXG4qL1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG52YXIgU29ja0pTID0gcmVxdWlyZSgnc29ja2pzLWNsaWVudC9kaXN0L3NvY2tqcycpO1xuXG52YXIgQmFzZUNsaWVudCA9IHJlcXVpcmUoJy4vQmFzZUNsaWVudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VDbGllbnQpIHtcbiAgX2luaGVyaXRzKFNvY2tKU0NsaWVudCwgX0Jhc2VDbGllbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU29ja0pTQ2xpZW50KTtcblxuICBmdW5jdGlvbiBTb2NrSlNDbGllbnQodXJsKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNvY2tKU0NsaWVudCk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuICAgIF90aGlzLnNvY2sgPSBuZXcgU29ja0pTKHVybCk7XG5cbiAgICBfdGhpcy5zb2NrLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7Ly8gVE9ETzogdXNlIGxvZ2dlciB0byBsb2cgdGhlIGVycm9yIGV2ZW50IG9uY2UgY2xpZW50IGFuZCBjbGllbnQtc3JjXG4gICAgICAvLyBhcmUgcmVvcmdhbml6ZWQgdG8gaGF2ZSB0aGUgc2FtZSBkaXJlY3Rvcnkgc3RydWN0dXJlXG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTb2NrSlNDbGllbnQsIFt7XG4gICAga2V5OiBcIm9uT3BlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk9wZW4oZikge1xuICAgICAgdGhpcy5zb2NrLm9ub3BlbiA9IGY7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uQ2xvc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DbG9zZShmKSB7XG4gICAgICB0aGlzLnNvY2sub25jbG9zZSA9IGY7XG4gICAgfSAvLyBjYWxsIGYgd2l0aCB0aGUgbWVzc2FnZSBzdHJpbmcgYXMgdGhlIGZpcnN0IGFyZ3VtZW50XG5cbiAgfSwge1xuICAgIGtleTogXCJvbk1lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25NZXNzYWdlKGYpIHtcbiAgICAgIHRoaXMuc29jay5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBmKGUuZGF0YSk7XG4gICAgICB9O1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldENsaWVudFBhdGhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2xpZW50UGF0aChvcHRpb25zKSB7XG4gICAgICByZXR1cm4gcmVxdWlyZS5yZXNvbHZlKCcuL1NvY2tKU0NsaWVudCcpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTb2NrSlNDbGllbnQ7XG59KEJhc2VDbGllbnQpOyIsIid1c2Ugc3RyaWN0Jztcbi8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnkgV29ya2VyR2xvYmFsU2NvcGUgc2VsZiAqL1xuXG4vKiBlc2xpbnQgcHJlZmVyLWRlc3RydWN0dXJpbmc6IG9mZiAqL1xuXG52YXIgc3RyaXBBbnNpID0gcmVxdWlyZSgnc3RyaXAtYW5zaScpO1xuXG52YXIgc29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcblxudmFyIG92ZXJsYXkgPSByZXF1aXJlKCcuL292ZXJsYXknKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi91dGlscy9sb2cnKSxcbiAgICBsb2cgPSBfcmVxdWlyZS5sb2csXG4gICAgc2V0TG9nTGV2ZWwgPSBfcmVxdWlyZS5zZXRMb2dMZXZlbDtcblxudmFyIHNlbmRNZXNzYWdlID0gcmVxdWlyZSgnLi91dGlscy9zZW5kTWVzc2FnZScpO1xuXG52YXIgcmVsb2FkQXBwID0gcmVxdWlyZSgnLi91dGlscy9yZWxvYWRBcHAnKTtcblxudmFyIGNyZWF0ZVNvY2tldFVybCA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlU29ja2V0VXJsJyk7XG5cbnZhciBzdGF0dXMgPSB7XG4gIGlzVW5sb2FkaW5nOiBmYWxzZSxcbiAgY3VycmVudEhhc2g6ICcnXG59O1xudmFyIG9wdGlvbnMgPSB7XG4gIGhvdDogZmFsc2UsXG4gIGhvdFJlbG9hZDogdHJ1ZSxcbiAgbGl2ZVJlbG9hZDogZmFsc2UsXG4gIGluaXRpYWw6IHRydWUsXG4gIHVzZVdhcm5pbmdPdmVybGF5OiBmYWxzZSxcbiAgdXNlRXJyb3JPdmVybGF5OiBmYWxzZSxcbiAgdXNlUHJvZ3Jlc3M6IGZhbHNlXG59O1xudmFyIHNvY2tldFVybCA9IGNyZWF0ZVNvY2tldFVybChfX3Jlc291cmNlUXVlcnkpO1xuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbiAoKSB7XG4gIHN0YXR1cy5pc1VubG9hZGluZyA9IHRydWU7XG59KTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHZhciBxcyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gudG9Mb3dlckNhc2UoKTtcbiAgb3B0aW9ucy5ob3RSZWxvYWQgPSBxcy5pbmRleE9mKCdob3RyZWxvYWQ9ZmFsc2UnKSA9PT0gLTE7XG59XG5cbnZhciBvblNvY2tldE1lc3NhZ2UgPSB7XG4gIGhvdDogZnVuY3Rpb24gaG90KCkge1xuICAgIG9wdGlvbnMuaG90ID0gdHJ1ZTtcbiAgICBsb2cuaW5mbygnW1dEU10gSG90IE1vZHVsZSBSZXBsYWNlbWVudCBlbmFibGVkLicpO1xuICB9LFxuICBsaXZlUmVsb2FkOiBmdW5jdGlvbiBsaXZlUmVsb2FkKCkge1xuICAgIG9wdGlvbnMubGl2ZVJlbG9hZCA9IHRydWU7XG4gICAgbG9nLmluZm8oJ1tXRFNdIExpdmUgUmVsb2FkaW5nIGVuYWJsZWQuJyk7XG4gIH0sXG4gIGludmFsaWQ6IGZ1bmN0aW9uIGludmFsaWQoKSB7XG4gICAgbG9nLmluZm8oJ1tXRFNdIEFwcCB1cGRhdGVkLiBSZWNvbXBpbGluZy4uLicpOyAvLyBmaXhlcyAjMTA0Mi4gb3ZlcmxheSBkb2Vzbid0IGNsZWFyIGlmIGVycm9ycyBhcmUgZml4ZWQgYnV0IHdhcm5pbmdzIHJlbWFpbi5cblxuICAgIGlmIChvcHRpb25zLnVzZVdhcm5pbmdPdmVybGF5IHx8IG9wdGlvbnMudXNlRXJyb3JPdmVybGF5KSB7XG4gICAgICBvdmVybGF5LmNsZWFyKCk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoJ0ludmFsaWQnKTtcbiAgfSxcbiAgaGFzaDogZnVuY3Rpb24gaGFzaChfaGFzaCkge1xuICAgIHN0YXR1cy5jdXJyZW50SGFzaCA9IF9oYXNoO1xuICB9LFxuICAnc3RpbGwtb2snOiBmdW5jdGlvbiBzdGlsbE9rKCkge1xuICAgIGxvZy5pbmZvKCdbV0RTXSBOb3RoaW5nIGNoYW5nZWQuJyk7XG5cbiAgICBpZiAob3B0aW9ucy51c2VXYXJuaW5nT3ZlcmxheSB8fCBvcHRpb25zLnVzZUVycm9yT3ZlcmxheSkge1xuICAgICAgb3ZlcmxheS5jbGVhcigpO1xuICAgIH1cblxuICAgIHNlbmRNZXNzYWdlKCdTdGlsbE9rJyk7XG4gIH0sXG4gICdsb2ctbGV2ZWwnOiBmdW5jdGlvbiBsb2dMZXZlbChsZXZlbCkge1xuICAgIHZhciBob3RDdHggPSByZXF1aXJlLmNvbnRleHQoJ3dlYnBhY2svaG90JywgZmFsc2UsIC9eXFwuXFwvbG9nJC8pO1xuXG4gICAgaWYgKGhvdEN0eC5rZXlzKCkuaW5kZXhPZignLi9sb2cnKSAhPT0gLTEpIHtcbiAgICAgIGhvdEN0eCgnLi9sb2cnKS5zZXRMb2dMZXZlbChsZXZlbCk7XG4gICAgfVxuXG4gICAgc2V0TG9nTGV2ZWwobGV2ZWwpO1xuICB9LFxuICBvdmVybGF5OiBmdW5jdGlvbiBvdmVybGF5KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICBvcHRpb25zLnVzZVdhcm5pbmdPdmVybGF5ID0gZmFsc2U7XG4gICAgICAgIG9wdGlvbnMudXNlRXJyb3JPdmVybGF5ID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgIG9wdGlvbnMudXNlV2FybmluZ092ZXJsYXkgPSB2YWx1ZS53YXJuaW5ncztcbiAgICAgICAgb3B0aW9ucy51c2VFcnJvck92ZXJsYXkgPSB2YWx1ZS5lcnJvcnM7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBwcm9ncmVzczogZnVuY3Rpb24gcHJvZ3Jlc3MoX3Byb2dyZXNzKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG9wdGlvbnMudXNlUHJvZ3Jlc3MgPSBfcHJvZ3Jlc3M7XG4gICAgfVxuICB9LFxuICAncHJvZ3Jlc3MtdXBkYXRlJzogZnVuY3Rpb24gcHJvZ3Jlc3NVcGRhdGUoZGF0YSkge1xuICAgIGlmIChvcHRpb25zLnVzZVByb2dyZXNzKSB7XG4gICAgICBsb2cuaW5mbyhcIltXRFNdIFwiLmNvbmNhdChkYXRhLnBlcmNlbnQsIFwiJSAtIFwiKS5jb25jYXQoZGF0YS5tc2csIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoJ1Byb2dyZXNzJywgZGF0YSk7XG4gIH0sXG4gIG9rOiBmdW5jdGlvbiBvaygpIHtcbiAgICBzZW5kTWVzc2FnZSgnT2snKTtcblxuICAgIGlmIChvcHRpb25zLnVzZVdhcm5pbmdPdmVybGF5IHx8IG9wdGlvbnMudXNlRXJyb3JPdmVybGF5KSB7XG4gICAgICBvdmVybGF5LmNsZWFyKCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5pdGlhbCkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW5pdGlhbCA9IGZhbHNlO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXR1cm4tYXNzaWduXG5cblxuICAgIHJlbG9hZEFwcChvcHRpb25zLCBzdGF0dXMpO1xuICB9LFxuICAnY29udGVudC1jaGFuZ2VkJzogZnVuY3Rpb24gY29udGVudENoYW5nZWQoKSB7XG4gICAgbG9nLmluZm8oJ1tXRFNdIENvbnRlbnQgYmFzZSBjaGFuZ2VkLiBSZWxvYWRpbmcuLi4nKTtcbiAgICBzZWxmLmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9LFxuICB3YXJuaW5nczogZnVuY3Rpb24gd2FybmluZ3MoX3dhcm5pbmdzKSB7XG4gICAgbG9nLndhcm4oJ1tXRFNdIFdhcm5pbmdzIHdoaWxlIGNvbXBpbGluZy4nKTtcblxuICAgIHZhciBzdHJpcHBlZFdhcm5pbmdzID0gX3dhcm5pbmdzLm1hcChmdW5jdGlvbiAod2FybmluZykge1xuICAgICAgcmV0dXJuIHN0cmlwQW5zaSh3YXJuaW5nKTtcbiAgICB9KTtcblxuICAgIHNlbmRNZXNzYWdlKCdXYXJuaW5ncycsIHN0cmlwcGVkV2FybmluZ3MpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpcHBlZFdhcm5pbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsb2cud2FybihzdHJpcHBlZFdhcm5pbmdzW2ldKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy51c2VXYXJuaW5nT3ZlcmxheSkge1xuICAgICAgb3ZlcmxheS5zaG93TWVzc2FnZShfd2FybmluZ3MpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluaXRpYWwpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmluaXRpYWwgPSBmYWxzZTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmV0dXJuLWFzc2lnblxuXG5cbiAgICByZWxvYWRBcHAob3B0aW9ucywgc3RhdHVzKTtcbiAgfSxcbiAgZXJyb3JzOiBmdW5jdGlvbiBlcnJvcnMoX2Vycm9ycykge1xuICAgIGxvZy5lcnJvcignW1dEU10gRXJyb3JzIHdoaWxlIGNvbXBpbGluZy4gUmVsb2FkIHByZXZlbnRlZC4nKTtcblxuICAgIHZhciBzdHJpcHBlZEVycm9ycyA9IF9lcnJvcnMubWFwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmV0dXJuIHN0cmlwQW5zaShlcnJvcik7XG4gICAgfSk7XG5cbiAgICBzZW5kTWVzc2FnZSgnRXJyb3JzJywgc3RyaXBwZWRFcnJvcnMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpcHBlZEVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgbG9nLmVycm9yKHN0cmlwcGVkRXJyb3JzW2ldKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy51c2VFcnJvck92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuc2hvd01lc3NhZ2UoX2Vycm9ycyk7XG4gICAgfVxuXG4gICAgb3B0aW9ucy5pbml0aWFsID0gZmFsc2U7XG4gIH0sXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IpIHtcbiAgICBsb2cuZXJyb3IoX2Vycm9yKTtcbiAgfSxcbiAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGxvZy5lcnJvcignW1dEU10gRGlzY29ubmVjdGVkIScpO1xuICAgIHNlbmRNZXNzYWdlKCdDbG9zZScpO1xuICB9XG59O1xuc29ja2V0KHNvY2tldFVybCwgb25Tb2NrZXRNZXNzYWdlKTsiLCIndXNlIHN0cmljdCc7IC8vIFRoZSBlcnJvciBvdmVybGF5IGlzIGluc3BpcmVkIChhbmQgbW9zdGx5IGNvcGllZCkgZnJvbSBDcmVhdGUgUmVhY3QgQXBwIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tpbmN1YmF0b3IvY3JlYXRlLXJlYWN0LWFwcClcbi8vIFRoZXksIGluIHR1cm4sIGdvdCBpbnNwaXJlZCBieSB3ZWJwYWNrLWhvdC1taWRkbGV3YXJlIChodHRwczovL2dpdGh1Yi5jb20vZ2xlbmphbWluL3dlYnBhY2staG90LW1pZGRsZXdhcmUpLlxuXG52YXIgYW5zaUhUTUwgPSByZXF1aXJlKCdhbnNpLWh0bWwnKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnaHRtbC1lbnRpdGllcycpLFxuICAgIEFsbEh0bWxFbnRpdGllcyA9IF9yZXF1aXJlLkFsbEh0bWxFbnRpdGllcztcblxudmFyIGVudGl0aWVzID0gbmV3IEFsbEh0bWxFbnRpdGllcygpO1xudmFyIGNvbG9ycyA9IHtcbiAgcmVzZXQ6IFsndHJhbnNwYXJlbnQnLCAndHJhbnNwYXJlbnQnXSxcbiAgYmxhY2s6ICcxODE4MTgnLFxuICByZWQ6ICdFMzYwNDknLFxuICBncmVlbjogJ0IzQ0I3NCcsXG4gIHllbGxvdzogJ0ZGRDA4MCcsXG4gIGJsdWU6ICc3Q0FGQzInLFxuICBtYWdlbnRhOiAnN0ZBQ0NBJyxcbiAgY3lhbjogJ0MzQzJFRicsXG4gIGxpZ2h0Z3JleTogJ0VCRTdFMycsXG4gIGRhcmtncmV5OiAnNkQ3ODkxJ1xufTtcbnZhciBvdmVybGF5SWZyYW1lID0gbnVsbDtcbnZhciBvdmVybGF5RGl2ID0gbnVsbDtcbnZhciBsYXN0T25PdmVybGF5RGl2UmVhZHkgPSBudWxsO1xuYW5zaUhUTUwuc2V0Q29sb3JzKGNvbG9ycyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXlJZnJhbWUob25JZnJhbWVMb2FkKSB7XG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgaWZyYW1lLmlkID0gJ3dlYnBhY2stZGV2LXNlcnZlci1jbGllbnQtb3ZlcmxheSc7XG4gIGlmcmFtZS5zcmMgPSAnYWJvdXQ6YmxhbmsnO1xuICBpZnJhbWUuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICBpZnJhbWUuc3R5bGUubGVmdCA9IDA7XG4gIGlmcmFtZS5zdHlsZS50b3AgPSAwO1xuICBpZnJhbWUuc3R5bGUucmlnaHQgPSAwO1xuICBpZnJhbWUuc3R5bGUuYm90dG9tID0gMDtcbiAgaWZyYW1lLnN0eWxlLndpZHRoID0gJzEwMHZ3JztcbiAgaWZyYW1lLnN0eWxlLmhlaWdodCA9ICcxMDB2aCc7XG4gIGlmcmFtZS5zdHlsZS5ib3JkZXIgPSAnbm9uZSc7XG4gIGlmcmFtZS5zdHlsZS56SW5kZXggPSA5OTk5OTk5OTk5O1xuICBpZnJhbWUub25sb2FkID0gb25JZnJhbWVMb2FkO1xuICByZXR1cm4gaWZyYW1lO1xufVxuXG5mdW5jdGlvbiBhZGRPdmVybGF5RGl2VG8oaWZyYW1lKSB7XG4gIHZhciBkaXYgPSBpZnJhbWUuY29udGVudERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaWQgPSAnd2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5LWRpdic7XG4gIGRpdi5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIGRpdi5zdHlsZS5ib3hTaXppbmcgPSAnYm9yZGVyLWJveCc7XG4gIGRpdi5zdHlsZS5sZWZ0ID0gMDtcbiAgZGl2LnN0eWxlLnRvcCA9IDA7XG4gIGRpdi5zdHlsZS5yaWdodCA9IDA7XG4gIGRpdi5zdHlsZS5ib3R0b20gPSAwO1xuICBkaXYuc3R5bGUud2lkdGggPSAnMTAwdncnO1xuICBkaXYuc3R5bGUuaGVpZ2h0ID0gJzEwMHZoJztcbiAgZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDAsIDAsIDAsIDAuODUpJztcbiAgZGl2LnN0eWxlLmNvbG9yID0gJyNFOEU4RTgnO1xuICBkaXYuc3R5bGUuZm9udEZhbWlseSA9ICdNZW5sbywgQ29uc29sYXMsIG1vbm9zcGFjZSc7XG4gIGRpdi5zdHlsZS5mb250U2l6ZSA9ICdsYXJnZSc7XG4gIGRpdi5zdHlsZS5wYWRkaW5nID0gJzJyZW0nO1xuICBkaXYuc3R5bGUubGluZUhlaWdodCA9ICcxLjInO1xuICBkaXYuc3R5bGUud2hpdGVTcGFjZSA9ICdwcmUtd3JhcCc7XG4gIGRpdi5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJztcbiAgaWZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG4gIHJldHVybiBkaXY7XG59XG5cbmZ1bmN0aW9uIGVuc3VyZU92ZXJsYXlEaXZFeGlzdHMob25PdmVybGF5RGl2UmVhZHkpIHtcbiAgaWYgKG92ZXJsYXlEaXYpIHtcbiAgICAvLyBFdmVyeXRoaW5nIGlzIHJlYWR5LCBjYWxsIHRoZSBjYWxsYmFjayByaWdodCBhd2F5LlxuICAgIG9uT3ZlcmxheURpdlJlYWR5KG92ZXJsYXlEaXYpO1xuICAgIHJldHVybjtcbiAgfSAvLyBDcmVhdGluZyBhbiBpZnJhbWUgbWF5IGJlIGFzeW5jaHJvbm91cyBzbyB3ZSdsbCBzY2hlZHVsZSB0aGUgY2FsbGJhY2suXG4gIC8vIEluIGNhc2Ugb2YgbXVsdGlwbGUgY2FsbHMsIGxhc3QgY2FsbGJhY2sgd2lucy5cblxuXG4gIGxhc3RPbk92ZXJsYXlEaXZSZWFkeSA9IG9uT3ZlcmxheURpdlJlYWR5O1xuXG4gIGlmIChvdmVybGF5SWZyYW1lKSB7XG4gICAgLy8gV2UndmUgYWxyZWFkeSBjcmVhdGVkIGl0LlxuICAgIHJldHVybjtcbiAgfSAvLyBDcmVhdGUgaWZyYW1lIGFuZCwgd2hlbiBpdCBpcyByZWFkeSwgYSBkaXYgaW5zaWRlIGl0LlxuXG5cbiAgb3ZlcmxheUlmcmFtZSA9IGNyZWF0ZU92ZXJsYXlJZnJhbWUoZnVuY3Rpb24gKCkge1xuICAgIG92ZXJsYXlEaXYgPSBhZGRPdmVybGF5RGl2VG8ob3ZlcmxheUlmcmFtZSk7IC8vIE5vdyB3ZSBjYW4gdGFsayFcblxuICAgIGxhc3RPbk92ZXJsYXlEaXZSZWFkeShvdmVybGF5RGl2KTtcbiAgfSk7IC8vIFphbGdvIGFsZXJ0OiBvbklmcmFtZUxvYWQoKSB3aWxsIGJlIGNhbGxlZCBlaXRoZXIgc3luY2hyb25vdXNseVxuICAvLyBvciBhc3luY2hyb25vdXNseSBkZXBlbmRpbmcgb24gdGhlIGJyb3dzZXIuXG4gIC8vIFdlIGRlbGF5IGFkZGluZyBpdCBzbyBgb3ZlcmxheUlmcmFtZWAgaXMgc2V0IHdoZW4gYG9uSWZyYW1lTG9hZGAgZmlyZXMuXG5cbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvdmVybGF5SWZyYW1lKTtcbn0gLy8gU3VjY2Vzc2Z1bCBjb21waWxhdGlvbi5cblxuXG5mdW5jdGlvbiBjbGVhcigpIHtcbiAgaWYgKCFvdmVybGF5RGl2KSB7XG4gICAgLy8gSXQgaXMgbm90IHRoZXJlIGluIHRoZSBmaXJzdCBwbGFjZS5cbiAgICByZXR1cm47XG4gIH0gLy8gQ2xlYW4gdXAgYW5kIHJlc2V0IGludGVybmFsIHN0YXRlLlxuXG5cbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChvdmVybGF5SWZyYW1lKTtcbiAgb3ZlcmxheURpdiA9IG51bGw7XG4gIG92ZXJsYXlJZnJhbWUgPSBudWxsO1xuICBsYXN0T25PdmVybGF5RGl2UmVhZHkgPSBudWxsO1xufSAvLyBDb21waWxhdGlvbiB3aXRoIGVycm9ycyAoZS5nLiBzeW50YXggZXJyb3Igb3IgbWlzc2luZyBtb2R1bGVzKS5cblxuXG5mdW5jdGlvbiBzaG93TWVzc2FnZShtZXNzYWdlcykge1xuICBlbnN1cmVPdmVybGF5RGl2RXhpc3RzKGZ1bmN0aW9uIChkaXYpIHtcbiAgICAvLyBNYWtlIGl0IGxvb2sgc2ltaWxhciB0byBvdXIgdGVybWluYWwuXG4gICAgZGl2LmlubmVySFRNTCA9IFwiPHNwYW4gc3R5bGU9XFxcImNvbG9yOiAjXCIuY29uY2F0KGNvbG9ycy5yZWQsIFwiXFxcIj5GYWlsZWQgdG8gY29tcGlsZS48L3NwYW4+PGJyPjxicj5cIikuY29uY2F0KGFuc2lIVE1MKGVudGl0aWVzLmVuY29kZShtZXNzYWdlc1swXSkpKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjbGVhcjogY2xlYXIsXG4gIHNob3dNZXNzYWdlOiBzaG93TWVzc2FnZVxufTsiLCIndXNlIHN0cmljdCc7XG4vKiBnbG9iYWwgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gKi9cblxuLyogZXNsaW50LWRpc2FibGVcbiAgY2FtZWxjYXNlXG4qL1xuLy8gdGhpcyBTb2NrSlNDbGllbnQgaXMgaGVyZSBhcyBhIGRlZmF1bHQgZmFsbGJhY2ssIGluIGNhc2UgaW5saW5lIG1vZGVcbi8vIGlzIG9mZiBvciB0aGUgY2xpZW50IGlzIG5vdCBpbmplY3RlZC4gVGhpcyB3aWxsIGJlIHN3aXRjaGVkIHRvXG4vLyBXZWJzb2NrZXRDbGllbnQgd2hlbiBpdCBiZWNvbWVzIHRoZSBkZWZhdWx0XG4vLyBpbXBvcnRhbnQ6IHRoZSBwYXRoIHRvIFNvY2tKU0NsaWVudCBoZXJlIGlzIG1hZGUgdG8gd29yayBpbiB0aGUgJ2NsaWVudCdcbi8vIGRpcmVjdG9yeSwgYnV0IGlzIHVwZGF0ZWQgdmlhIHRoZSB3ZWJwYWNrIGNvbXBpbGF0aW9uIHdoZW4gY29tcGlsZWQgZnJvbVxuLy8gdGhlICdjbGllbnQtc3JjJyBkaXJlY3RvcnlcblxudmFyIENsaWVudCA9IHR5cGVvZiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyA6IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW5yZXNvbHZlZFxucmVxdWlyZSgnLi9jbGllbnRzL1NvY2tKU0NsaWVudCcpO1xudmFyIHJldHJpZXMgPSAwO1xudmFyIGNsaWVudCA9IG51bGw7XG5cbnZhciBzb2NrZXQgPSBmdW5jdGlvbiBpbml0U29ja2V0KHVybCwgaGFuZGxlcnMpIHtcbiAgY2xpZW50ID0gbmV3IENsaWVudCh1cmwpO1xuICBjbGllbnQub25PcGVuKGZ1bmN0aW9uICgpIHtcbiAgICByZXRyaWVzID0gMDtcbiAgfSk7XG4gIGNsaWVudC5vbkNsb3NlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmV0cmllcyA9PT0gMCkge1xuICAgICAgaGFuZGxlcnMuY2xvc2UoKTtcbiAgICB9IC8vIFRyeSB0byByZWNvbm5lY3QuXG5cblxuICAgIGNsaWVudCA9IG51bGw7IC8vIEFmdGVyIDEwIHJldHJpZXMgc3RvcCB0cnlpbmcsIHRvIHByZXZlbnQgbG9nc3BhbS5cblxuICAgIGlmIChyZXRyaWVzIDw9IDEwKSB7XG4gICAgICAvLyBFeHBvbmVudGlhbGx5IGluY3JlYXNlIHRpbWVvdXQgdG8gcmVjb25uZWN0LlxuICAgICAgLy8gUmVzcGVjdGZ1bGx5IGNvcGllZCBmcm9tIHRoZSBwYWNrYWdlIGBnb3RgLlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW1peGVkLW9wZXJhdG9ycywgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG4gICAgICB2YXIgcmV0cnlJbk1zID0gMTAwMCAqIE1hdGgucG93KDIsIHJldHJpZXMpICsgTWF0aC5yYW5kb20oKSAqIDEwMDtcbiAgICAgIHJldHJpZXMgKz0gMTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzb2NrZXQodXJsLCBoYW5kbGVycyk7XG4gICAgICB9LCByZXRyeUluTXMpO1xuICAgIH1cbiAgfSk7XG4gIGNsaWVudC5vbk1lc3NhZ2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgbXNnID0gSlNPTi5wYXJzZShkYXRhKTtcblxuICAgIGlmIChoYW5kbGVyc1ttc2cudHlwZV0pIHtcbiAgICAgIGhhbmRsZXJzW21zZy50eXBlXShtc2cuZGF0YSk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc29ja2V0OyIsIid1c2Ugc3RyaWN0Jztcbi8qIGdsb2JhbCBzZWxmICovXG5cbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKTtcblxudmFyIGdldEN1cnJlbnRTY3JpcHRTb3VyY2UgPSByZXF1aXJlKCcuL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UnKTtcblxuZnVuY3Rpb24gY3JlYXRlU29ja2V0VXJsKHJlc291cmNlUXVlcnksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgdXJsUGFydHM7XG5cbiAgaWYgKHR5cGVvZiByZXNvdXJjZVF1ZXJ5ID09PSAnc3RyaW5nJyAmJiByZXNvdXJjZVF1ZXJ5ICE9PSAnJykge1xuICAgIC8vIElmIHRoaXMgYnVuZGxlIGlzIGlubGluZWQsIHVzZSB0aGUgcmVzb3VyY2UgcXVlcnkgdG8gZ2V0IHRoZSBjb3JyZWN0IHVybC5cbiAgICAvLyBmb3JtYXQgaXMgbGlrZSBgP2h0dHA6Ly8wLjAuMC4wOjgwOTYmc29ja1BvcnQ9ODA5NyZzb2NrSG9zdD1sb2NhbGhvc3RgXG4gICAgdXJsUGFydHMgPSB1cmwucGFyc2UocmVzb3VyY2VRdWVyeSAvLyBzdHJpcCBsZWFkaW5nIGA/YCBmcm9tIHF1ZXJ5IHN0cmluZyB0byBnZXQgYSB2YWxpZCBVUkxcbiAgICAuc3Vic3RyKDEpIC8vIHJlcGxhY2UgZmlyc3QgYCZgIHdpdGggYD9gIHRvIGhhdmUgYSB2YWxpZCBxdWVyeSBzdHJpbmdcbiAgICAucmVwbGFjZSgnJicsICc/JyksIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIC8vIEVsc2UsIGdldCB0aGUgdXJsIGZyb20gdGhlIDxzY3JpcHQ+IHRoaXMgZmlsZSB3YXMgY2FsbGVkIHdpdGguXG4gICAgdmFyIHNjcmlwdEhvc3QgPSBnZXRDdXJyZW50U2NyaXB0U291cmNlKCk7XG4gICAgdXJsUGFydHMgPSB1cmwucGFyc2Uoc2NyaXB0SG9zdCB8fCAnLycsIHRydWUsIHRydWUpO1xuICB9IC8vIFVzZSBwYXJhbWV0ZXIgdG8gYWxsb3cgcGFzc2luZyBsb2NhdGlvbiBpbiB1bml0IHRlc3RzXG5cblxuICBpZiAodHlwZW9mIGN1cnJlbnRMb2NhdGlvbiA9PT0gJ3N0cmluZycgJiYgY3VycmVudExvY2F0aW9uICE9PSAnJykge1xuICAgIGN1cnJlbnRMb2NhdGlvbiA9IHVybC5wYXJzZShjdXJyZW50TG9jYXRpb24pO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRMb2NhdGlvbiA9IHNlbGYubG9jYXRpb247XG4gIH1cblxuICByZXR1cm4gZ2V0U29ja2V0VXJsKHVybFBhcnRzLCBjdXJyZW50TG9jYXRpb24pO1xufVxuLypcbiAqIEdldHMgc29ja2V0IFVSTCBiYXNlZCBvbiBTY3JpcHQgU291cmNlL0xvY2F0aW9uXG4gKiAoc2NyaXB0U3JjOiBVUkwsIGxvY2F0aW9uOiBVUkwpIC0+IFVSTFxuICovXG5cblxuZnVuY3Rpb24gZ2V0U29ja2V0VXJsKHVybFBhcnRzLCBsb2MpIHtcbiAgdmFyIGF1dGggPSB1cmxQYXJ0cy5hdXRoLFxuICAgICAgcXVlcnkgPSB1cmxQYXJ0cy5xdWVyeTtcbiAgdmFyIGhvc3RuYW1lID0gdXJsUGFydHMuaG9zdG5hbWUsXG4gICAgICBwcm90b2NvbCA9IHVybFBhcnRzLnByb3RvY29sLFxuICAgICAgcG9ydCA9IHVybFBhcnRzLnBvcnQ7XG5cbiAgaWYgKCFwb3J0IHx8IHBvcnQgPT09ICcwJykge1xuICAgIHBvcnQgPSBsb2MucG9ydDtcbiAgfSAvLyBjaGVjayBpcHY0IGFuZCBpcHY2IGBhbGwgaG9zdG5hbWVgXG4gIC8vIHdoeSBkbyB3ZSBuZWVkIHRoaXMgY2hlY2s/XG4gIC8vIGhvc3RuYW1lIG4vYSBmb3IgZmlsZSBwcm90b2NvbCAoZXhhbXBsZSwgd2hlbiB1c2luZyBlbGVjdHJvbiwgaW9uaWMpXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay1kZXYtc2VydmVyL3B1bGwvMzg0XG5cblxuICBpZiAoKGhvc3RuYW1lID09PSAnMC4wLjAuMCcgfHwgaG9zdG5hbWUgPT09ICc6OicpICYmIGxvYy5ob3N0bmFtZSAmJiBsb2MucHJvdG9jb2wuaW5kZXhPZignaHR0cCcpID09PSAwKSB7XG4gICAgaG9zdG5hbWUgPSBsb2MuaG9zdG5hbWU7XG4gIH0gLy8gYGhvc3RuYW1lYCBjYW4gYmUgZW1wdHkgd2hlbiB0aGUgc2NyaXB0IHBhdGggaXMgcmVsYXRpdmUuIEluIHRoYXQgY2FzZSwgc3BlY2lmeWluZ1xuICAvLyBhIHByb3RvY29sIHdvdWxkIHJlc3VsdCBpbiBhbiBpbnZhbGlkIFVSTC5cbiAgLy8gV2hlbiBodHRwcyBpcyB1c2VkIGluIHRoZSBhcHAsIHNlY3VyZSB3ZWJzb2NrZXRzIGFyZSBhbHdheXMgbmVjZXNzYXJ5XG4gIC8vIGJlY2F1c2UgdGhlIGJyb3dzZXIgZG9lc24ndCBhY2NlcHQgbm9uLXNlY3VyZSB3ZWJzb2NrZXRzLlxuXG5cbiAgaWYgKGhvc3RuYW1lICYmIGhvc3RuYW1lICE9PSAnMTI3LjAuMC4xJyAmJiAobG9jLnByb3RvY29sID09PSAnaHR0cHM6JyB8fCB1cmxQYXJ0cy5ob3N0bmFtZSA9PT0gJzAuMC4wLjAnKSkge1xuICAgIHByb3RvY29sID0gbG9jLnByb3RvY29sO1xuICB9IC8vIGFsbCBvZiB0aGVzZSBzb2NrIHVybCBwYXJhbXMgYXJlIG9wdGlvbmFsbHkgcGFzc2VkIGluIHRocm91Z2hcbiAgLy8gcmVzb3VyY2VRdWVyeSwgc28gd2UgbmVlZCB0byBmYWxsIGJhY2sgdG8gdGhlIGRlZmF1bHQgaWZcbiAgLy8gdGhleSBhcmUgbm90IHByb3ZpZGVkXG5cblxuICB2YXIgc29ja0hvc3QgPSBxdWVyeS5zb2NrSG9zdCB8fCBob3N0bmFtZTtcbiAgdmFyIHNvY2tQYXRoID0gcXVlcnkuc29ja1BhdGggfHwgJy9zb2NranMtbm9kZSc7XG4gIHZhciBzb2NrUG9ydCA9IHF1ZXJ5LnNvY2tQb3J0IHx8IHBvcnQ7XG5cbiAgaWYgKHNvY2tQb3J0ID09PSAnbG9jYXRpb24nKSB7XG4gICAgc29ja1BvcnQgPSBsb2MucG9ydDtcbiAgfVxuXG4gIHJldHVybiB1cmwuZm9ybWF0KHtcbiAgICBwcm90b2NvbDogcHJvdG9jb2wsXG4gICAgYXV0aDogYXV0aCxcbiAgICBob3N0bmFtZTogc29ja0hvc3QsXG4gICAgcG9ydDogc29ja1BvcnQsXG4gICAgLy8gSWYgc29ja1BhdGggaXMgcHJvdmlkZWQgaXQnbGwgYmUgcGFzc2VkIGluIHZpYSB0aGUgcmVzb3VyY2VRdWVyeSBhcyBhXG4gICAgLy8gcXVlcnkgcGFyYW0gc28gaXQgaGFzIHRvIGJlIHBhcnNlZCBvdXQgb2YgdGhlIHF1ZXJ5c3RyaW5nIGluIG9yZGVyIGZvciB0aGVcbiAgICAvLyBjbGllbnQgdG8gb3BlbiB0aGUgc29ja2V0IHRvIHRoZSBjb3JyZWN0IGxvY2F0aW9uLlxuICAgIHBhdGhuYW1lOiBzb2NrUGF0aFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTb2NrZXRVcmw7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0U291cmNlKCkge1xuICAvLyBgZG9jdW1lbnQuY3VycmVudFNjcmlwdGAgaXMgdGhlIG1vc3QgYWNjdXJhdGUgd2F5IHRvIGZpbmQgdGhlIGN1cnJlbnQgc2NyaXB0LFxuICAvLyBidXQgaXMgbm90IHN1cHBvcnRlZCBpbiBhbGwgYnJvd3NlcnMuXG4gIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgfSAvLyBGYWxsIGJhY2sgdG8gZ2V0dGluZyBhbGwgc2NyaXB0cyBpbiB0aGUgZG9jdW1lbnQuXG5cblxuICB2YXIgc2NyaXB0RWxlbWVudHMgPSBkb2N1bWVudC5zY3JpcHRzIHx8IFtdO1xuICB2YXIgY3VycmVudFNjcmlwdCA9IHNjcmlwdEVsZW1lbnRzW3NjcmlwdEVsZW1lbnRzLmxlbmd0aCAtIDFdO1xuXG4gIGlmIChjdXJyZW50U2NyaXB0KSB7XG4gICAgcmV0dXJuIGN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgfSAvLyBGYWlsIGFzIHRoZXJlIHdhcyBubyBzY3JpcHQgdG8gdXNlLlxuXG5cbiAgdGhyb3cgbmV3IEVycm9yKCdbV0RTXSBGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgc2NyaXB0IHNvdXJjZS4nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRDdXJyZW50U2NyaXB0U291cmNlOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGxvZyA9IHJlcXVpcmUoJ2xvZ2xldmVsJykuZ2V0TG9nZ2VyKCd3ZWJwYWNrLWRldi1zZXJ2ZXInKTtcblxudmFyIElORk8gPSAnaW5mbyc7XG52YXIgV0FSTiA9ICd3YXJuJztcbnZhciBFUlJPUiA9ICdlcnJvcic7XG52YXIgREVCVUcgPSAnZGVidWcnO1xudmFyIFRSQUNFID0gJ3RyYWNlJztcbnZhciBTSUxFTlQgPSAnc2lsZW50JzsgLy8gZGVwcmVjYXRlZFxuLy8gVE9ETzogcmVtb3ZlIHRoZXNlIGF0IG1ham9yIHJlbGVhc2VkXG4vLyBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrLWRldi1zZXJ2ZXIvcHVsbC8xODI1XG5cbnZhciBXQVJOSU5HID0gJ3dhcm5pbmcnO1xudmFyIE5PTkUgPSAnbm9uZSc7IC8vIFNldCB0aGUgZGVmYXVsdCBsb2cgbGV2ZWxcblxubG9nLnNldERlZmF1bHRMZXZlbChJTkZPKTtcblxuZnVuY3Rpb24gc2V0TG9nTGV2ZWwobGV2ZWwpIHtcbiAgc3dpdGNoIChsZXZlbCkge1xuICAgIGNhc2UgSU5GTzpcbiAgICBjYXNlIFdBUk46XG4gICAgY2FzZSBFUlJPUjpcbiAgICBjYXNlIERFQlVHOlxuICAgIGNhc2UgVFJBQ0U6XG4gICAgICBsb2cuc2V0TGV2ZWwobGV2ZWwpO1xuICAgICAgYnJlYWs7XG4gICAgLy8gZGVwcmVjYXRlZFxuXG4gICAgY2FzZSBXQVJOSU5HOlxuICAgICAgLy8gbG9nbGV2ZWwncyB3YXJuaW5nIG5hbWUgaXMgZGlmZmVyZW50IGZyb20gd2VicGFjaydzXG4gICAgICBsb2cuc2V0TGV2ZWwoJ3dhcm4nKTtcbiAgICAgIGJyZWFrO1xuICAgIC8vIGRlcHJlY2F0ZWRcblxuICAgIGNhc2UgTk9ORTpcbiAgICBjYXNlIFNJTEVOVDpcbiAgICAgIGxvZy5kaXNhYmxlQWxsKCk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBsb2cuZXJyb3IoXCJbV0RTXSBVbmtub3duIGNsaWVudExvZ0xldmVsICdcIi5jb25jYXQobGV2ZWwsIFwiJ1wiKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvZzogbG9nLFxuICBzZXRMb2dMZXZlbDogc2V0TG9nTGV2ZWxcbn07IiwiJ3VzZSBzdHJpY3QnO1xuLyogZ2xvYmFsIFdvcmtlckdsb2JhbFNjb3BlIHNlbGYgKi9cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9sb2cnKSxcbiAgICBsb2cgPSBfcmVxdWlyZS5sb2c7XG5cbmZ1bmN0aW9uIHJlbG9hZEFwcChfcmVmLCBfcmVmMikge1xuICB2YXIgaG90UmVsb2FkID0gX3JlZi5ob3RSZWxvYWQsXG4gICAgICBob3QgPSBfcmVmLmhvdCxcbiAgICAgIGxpdmVSZWxvYWQgPSBfcmVmLmxpdmVSZWxvYWQ7XG4gIHZhciBpc1VubG9hZGluZyA9IF9yZWYyLmlzVW5sb2FkaW5nLFxuICAgICAgY3VycmVudEhhc2ggPSBfcmVmMi5jdXJyZW50SGFzaDtcblxuICBpZiAoaXNVbmxvYWRpbmcgfHwgIWhvdFJlbG9hZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChob3QpIHtcbiAgICBsb2cuaW5mbygnW1dEU10gQXBwIGhvdCB1cGRhdGUuLi4nKTtcblxuICAgIHZhciBob3RFbWl0dGVyID0gcmVxdWlyZSgnd2VicGFjay9ob3QvZW1pdHRlcicpO1xuXG4gICAgaG90RW1pdHRlci5lbWl0KCd3ZWJwYWNrSG90VXBkYXRlJywgY3VycmVudEhhc2gpO1xuXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLndpbmRvdykge1xuICAgICAgLy8gYnJvYWRjYXN0IHVwZGF0ZSB0byB3aW5kb3dcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2UoXCJ3ZWJwYWNrSG90VXBkYXRlXCIuY29uY2F0KGN1cnJlbnRIYXNoKSwgJyonKTtcbiAgICB9XG4gIH0gLy8gYWxsb3cgcmVmcmVzaGluZyB0aGUgcGFnZSBvbmx5IGlmIGxpdmVSZWxvYWQgaXNuJ3QgZGlzYWJsZWRcbiAgZWxzZSBpZiAobGl2ZVJlbG9hZCkge1xuICAgICAgdmFyIHJvb3RXaW5kb3cgPSBzZWxmOyAvLyB1c2UgcGFyZW50IHdpbmRvdyBmb3IgcmVsb2FkIChpbiBjYXNlIHdlJ3JlIGluIGFuIGlmcmFtZSB3aXRoIG5vIHZhbGlkIHNyYylcblxuICAgICAgdmFyIGludGVydmFsSWQgPSBzZWxmLnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHJvb3RXaW5kb3cubG9jYXRpb24ucHJvdG9jb2wgIT09ICdhYm91dDonKSB7XG4gICAgICAgICAgLy8gcmVsb2FkIGltbWVkaWF0ZWx5IGlmIHByb3RvY29sIGlzIHZhbGlkXG4gICAgICAgICAgYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm9vdFdpbmRvdyA9IHJvb3RXaW5kb3cucGFyZW50O1xuXG4gICAgICAgICAgaWYgKHJvb3RXaW5kb3cucGFyZW50ID09PSByb290V2luZG93KSB7XG4gICAgICAgICAgICAvLyBpZiBwYXJlbnQgZXF1YWxzIGN1cnJlbnQgd2luZG93IHdlJ3ZlIHJlYWNoZWQgdGhlIHJvb3Qgd2hpY2ggd291bGQgY29udGludWUgZm9yZXZlciwgc28gdHJpZ2dlciBhIHJlbG9hZCBhbnl3YXlzXG4gICAgICAgICAgICBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICBmdW5jdGlvbiBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKSB7XG4gICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICBsb2cuaW5mbygnW1dEU10gQXBwIHVwZGF0ZWQuIFJlbG9hZGluZy4uLicpO1xuICAgIHJvb3RXaW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZWxvYWRBcHA7IiwiJ3VzZSBzdHJpY3QnO1xuLyogZ2xvYmFsIF9fcmVzb3VyY2VRdWVyeSBXb3JrZXJHbG9iYWxTY29wZSBzZWxmICovXG4vLyBTZW5kIG1lc3NhZ2VzIHRvIHRoZSBvdXRzaWRlLCBzbyBwbHVnaW5zIGNhbiBjb25zdW1lIGl0LlxuXG5mdW5jdGlvbiBzZW5kTXNnKHR5cGUsIGRhdGEpIHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiAodHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlID09PSAndW5kZWZpbmVkJyB8fCAhKHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSkpKSB7XG4gICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICB0eXBlOiBcIndlYnBhY2tcIi5jb25jYXQodHlwZSksXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSwgJyonKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNlbmRNc2c7IiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiAvW1xcdTAwMWJcXHUwMDliXVtbKCkjOz9dKig/OlswLTldezEsNH0oPzo7WzAtOV17MCw0fSkqKT9bMC05QS1QUlpjZi1ucXJ5PT48XS9nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbnNpUmVnZXggPSByZXF1aXJlKCdhbnNpLXJlZ2V4JykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdHJldHVybiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHN0ci5yZXBsYWNlKGFuc2lSZWdleCwgJycpIDogc3RyO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9sb2dcIjogXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2cuanNcIlxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3Qgc3luYyBeXFxcXC5cXFxcL2xvZyRcIjsiLCJ2YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbm1vZHVsZS5leHBvcnRzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuIiwidmFyIGxvZ0xldmVsID0gXCJpbmZvXCI7XG5cbmZ1bmN0aW9uIGR1bW15KCkge31cblxuZnVuY3Rpb24gc2hvdWxkTG9nKGxldmVsKSB7XG5cdHZhciBzaG91bGRMb2cgPVxuXHRcdChsb2dMZXZlbCA9PT0gXCJpbmZvXCIgJiYgbGV2ZWwgPT09IFwiaW5mb1wiKSB8fFxuXHRcdChbXCJpbmZvXCIsIFwid2FybmluZ1wiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcIndhcm5pbmdcIikgfHxcblx0XHQoW1wiaW5mb1wiLCBcIndhcm5pbmdcIiwgXCJlcnJvclwiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcImVycm9yXCIpO1xuXHRyZXR1cm4gc2hvdWxkTG9nO1xufVxuXG5mdW5jdGlvbiBsb2dHcm91cChsb2dGbikge1xuXHRyZXR1cm4gZnVuY3Rpb24obGV2ZWwsIG1zZykge1xuXHRcdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0XHRsb2dGbihtc2cpO1xuXHRcdH1cblx0fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsZXZlbCwgbXNnKSB7XG5cdGlmIChzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0aWYgKGxldmVsID09PSBcImluZm9cIikge1xuXHRcdFx0Y29uc29sZS5sb2cobXNnKTtcblx0XHR9IGVsc2UgaWYgKGxldmVsID09PSBcIndhcm5pbmdcIikge1xuXHRcdFx0Y29uc29sZS53YXJuKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJlcnJvclwiKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKG1zZyk7XG5cdFx0fVxuXHR9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMgKi9cbnZhciBncm91cCA9IGNvbnNvbGUuZ3JvdXAgfHwgZHVtbXk7XG52YXIgZ3JvdXBDb2xsYXBzZWQgPSBjb25zb2xlLmdyb3VwQ29sbGFwc2VkIHx8IGR1bW15O1xudmFyIGdyb3VwRW5kID0gY29uc29sZS5ncm91cEVuZCB8fCBkdW1teTtcbi8qIGVzbGludC1lbmFibGUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zICovXG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwID0gbG9nR3JvdXAoZ3JvdXApO1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cENvbGxhcHNlZCA9IGxvZ0dyb3VwKGdyb3VwQ29sbGFwc2VkKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBFbmQgPSBsb2dHcm91cChncm91cEVuZCk7XG5cbm1vZHVsZS5leHBvcnRzLnNldExvZ0xldmVsID0gZnVuY3Rpb24obGV2ZWwpIHtcblx0bG9nTGV2ZWwgPSBsZXZlbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmZvcm1hdEVycm9yID0gZnVuY3Rpb24oZXJyKSB7XG5cdHZhciBtZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG5cdHZhciBzdGFjayA9IGVyci5zdGFjaztcblx0aWYgKCFzdGFjaykge1xuXHRcdHJldHVybiBtZXNzYWdlO1xuXHR9IGVsc2UgaWYgKHN0YWNrLmluZGV4T2YobWVzc2FnZSkgPCAwKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2UgKyBcIlxcblwiICsgc3RhY2s7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHN0YWNrO1xuXHR9XG59O1xuIiwiLypcclxuIENPTVBFVElUSU9OIExBQlMgTFREIHYxLjAuNVxyXG4gKGMpIDIwMTUtMjAyMCBBbGVrc2FuZHIgQmVybm90YXNcclxuIExpY2Vuc2U6IHd3dy5jb21wZXRpdGlvbmxhYnMuY29tL3Rlcm1zLW9mLXNlcnZpY2VcclxuKi9cclxuXHJcbmltcG9ydCAnLi9wb2x5ZmlsbHMnO1xyXG5pbXBvcnQgJy4vbW9kdWxlcy9zZXRUaW1lb3V0R2xvYmFsJztcclxuXHJcbmltcG9ydCB7IExiV2lkZ2V0IH0gZnJvbSAnLi9tb2R1bGVzL0xiV2lkZ2V0JztcclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHR5cGVvZiB3aW5kb3cuX0NMTEJWM09wdCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHdpbmRvdy5fQ0xMQlYzT3B0ID0ge1xyXG4gICAgICBhdXRvU3RhcnQ6IGZhbHNlXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiB3aW5kb3cuX2NsTGVhZGVyQm9hcmRWMyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHdpbmRvdy5fY2xMZWFkZXJCb2FyZFYzID0gbmV3IExiV2lkZ2V0KHdpbmRvdy5fQ0xMQlYzT3B0KTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS53YXJuKCd3aW5kb3cuX2NsTGVhZGVyQm9hcmRWMyBpcyBhbHJlYWR5IGRlZmluZWQsIHdpZGdldCBpcyBjb25maWd1cmVkIHRvIHJ1biBhcyBhIHNpbmdsZSBpbnN0YW5jZScpO1xyXG4gIH1cclxufSkoKTtcclxuIiwiaW1wb3J0IGNMYWJzIGZyb20gJy4vY0xhYnMnO1xyXG5pbXBvcnQgc2l6ZW9mIGZyb20gJy4uL3V0aWxzL3NpemVvZic7XHJcblxyXG4vKipcclxuICogQWpheCBtZXRob2RcclxuICpcclxuICogQGNsYXNzIEFqYXhcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5jTGFicy5BamF4ID0gZnVuY3Rpb24gKCkge1xyXG4gIHRoaXMueGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbn07XHJcblxyXG5jTGFicy5BamF4LnByb3RvdHlwZS5jcmVhdGVDT1JTUmVxdWVzdCA9IGZ1bmN0aW9uIChtZXRob2QsIHVybCkge1xyXG4gIHZhciBvYmogPSB0aGlzO1xyXG5cclxuICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4gb2JqLnhocikge1xyXG4gICAgLy8gTW9zdCBicm93c2Vycy5cclxuICAgIG9iai54aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAvLyBJRTggJiBJRTlcclxuICAgIC8qIGVzbGludCBuby11bmRlZjogXCJvZmZcIiAqL1xyXG4gICAgb2JqLnhociA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xyXG5cclxuICAgIHVybCA9ICh1cmwuaW5kZXhPZignaHR0cHMnKSA+IC0xICYmIGxvY2F0aW9uLnByb3RvY29sICE9PSAnaHR0cHM6JykgPyB1cmwucmVwbGFjZSgnaHR0cHMnLCAnaHR0cCcpIDogdXJsO1xyXG5cclxuICAgIG9iai54aHIub3BlbihtZXRob2QsIHVybCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIENPUlMgbm90IHN1cHBvcnRlZC5cclxuICAgIG9iai54aHIgPSBudWxsO1xyXG4gIH1cclxuICByZXR1cm4gb2JqLnhocjtcclxufTtcclxuXHJcbmNMYWJzLkFqYXgucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gIGlmIChfdGhpcy54aHIgJiYgdHlwZW9mIF90aGlzLnhoci5yZWFkeVN0YXRlICE9PSAndW5kZWZpbmVkJyAmJiBfdGhpcy54aHIucmVhZHlTdGF0ZSAhPT0gNCAmJiBfdGhpcy54aHIucmVhZHlTdGF0ZSA+IDApIHtcclxuICAgIC8vIGNvbnNvbGUuZXJyb3IoXCJhYm9ydGluZyBBamF4XCIsIF90aGlzLnhoci5yZWFkeVN0YXRlLCBfdGhpcy54aHIpO1xyXG4gICAgX3RoaXMueGhyLmFib3J0KCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gX3RoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0cmlldmVzIGRhdGEgZnJvbSBhIFVSTCB3aXRob3V0IHBhZ2UgcmVmcmVzaFxyXG4gKlxyXG4gKiBAbWV0aG9kIGdldERhdGFcclxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ3VyYXRpb24gb2JqZWN0XHJcbiAqICAtIG9iamVjdCBjb250YWluczogSFRUUCBtZXRob2QgXCJ0eXBlOiBQT1NULCBHRVRcIiwgdXJsOiB0byBzZW5kIHRoZSByZXF1ZXN0IHRvLCBkYXRhOiB7b2JqZWN0fVxyXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGluIHN1Y2Nlc3Mgb2JqZWN0XHJcbiAqL1xyXG5jTGFicy5BamF4LnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICB2YXIgb2JqID0gdGhpcztcclxuXHJcbiAgdHJ5IHtcclxuICAgIGRhdGEudHlwZSA9IChkYXRhLnR5cGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZGF0YS50eXBlID09PSAnc3RyaW5nJyAmJiBkYXRhLnR5cGUubGVuZ3RoID4gMCkgPyBkYXRhLnR5cGUgOiAnUE9TVCc7XHJcbiAgICBkYXRhLmRhdGEgPSAoZGF0YS5kYXRhICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGRhdGEuZGF0YSA9PT0gJ29iamVjdCcpID8gZGF0YS5kYXRhIDoge307XHJcbiAgICBkYXRhLnVybCA9IChkYXRhLnVybCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBkYXRhLnVybCA9PT0gJ3N0cmluZycgJiYgZGF0YS51cmwubGVuZ3RoID4gMCkgPyBkYXRhLnVybCA6ICcnO1xyXG4gICAgZGF0YS5zdWNjZXNzID0gKGRhdGEuc3VjY2VzcyAhPT0gdW5kZWZpbmVkKSA/IGRhdGEuc3VjY2VzcyA6IGZ1bmN0aW9uICgpIHtcclxuICAgIH07XHJcbiAgICBkYXRhLmVycm9yID0gKGRhdGEuZXJyb3IgIT09IHVuZGVmaW5lZCkgPyBkYXRhLmVycm9yIDogZnVuY3Rpb24gKCkge1xyXG4gICAgfTtcclxuICAgIGRhdGEuaGVhZGVycyA9IChkYXRhLmhlYWRlcnMgIT09IHVuZGVmaW5lZCkgPyBkYXRhLmhlYWRlcnMgOiB7fTtcclxuICAgIGRhdGEuZXh0cmFDYWxsYmFjayA9IChkYXRhLmV4dHJhQ2FsbGJhY2sgIT09IHVuZGVmaW5lZCkgPyBkYXRhLmV4dHJhQ2FsbGJhY2sgOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGNyb3NzIGJyb3dzZXIgQ09SUyBzdXBwb3J0XHJcbiAgICBvYmoueGhyID0gdGhpcy5jcmVhdGVDT1JTUmVxdWVzdChkYXRhLnR5cGUsIGRhdGEudXJsKTtcclxuXHJcbiAgICBvYmoueGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgZGF0YS5leHRyYUNhbGxiYWNrKGRhdGEsIG9iai54aHIpO1xyXG4gICAgICBkYXRhLnN1Y2Nlc3Mob2JqLnhoci5yZXNwb25zZVRleHQsIGRhdGEsIG9iai54aHIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBvYmoueGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGRhdGEuZXJyb3Iob2JqLnhoci5zdGF0dXMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBpZiAoc2l6ZW9mKGRhdGEuaGVhZGVycykgPiAwKSB7XHJcbiAgICAgICAgdmFyIGl0ZW07XHJcbiAgICAgICAgZm9yIChpdGVtIGluIGRhdGEuaGVhZGVycykge1xyXG4gICAgICAgICAgb2JqLnhoci5zZXRSZXF1ZXN0SGVhZGVyKGl0ZW0sIGRhdGEuaGVhZGVyc1tpdGVtXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKChkYXRhLnR5cGUgPT09ICdQT1NUJyB8fCBkYXRhLnR5cGUgPT09ICdQVVQnKSAmJiBzaXplb2YoZGF0YS5oZWFkZXJzKSA9PT0gMCkge1xyXG4gICAgICAgIG9iai54aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvYmoueGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L3BsYWluJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvYmoueGhyLnNlbmQoSlNPTi5zdHJpbmdpZnkoZGF0YS5kYXRhKSk7XHJcblxyXG4gICAgcmV0dXJuIG9iai54aHI7XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gIH1cclxufTtcclxuIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgSWRlbnRpY29uIGZyb20gJ2lkZW50aWNvbi5qcyc7XHJcbmltcG9ydCBqc1NIQSBmcm9tICdqc3NoYSc7XHJcblxyXG5pbXBvcnQgbWVyZ2VPYmplY3RzIGZyb20gJy4uL3V0aWxzL21lcmdlT2JqZWN0cyc7XHJcbmltcG9ydCBmb3JtYXROdW1iZXJMZWFkaW5nWmVyb3MgZnJvbSAnLi4vdXRpbHMvZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zJztcclxuaW1wb3J0IHN0cmluZ0NvbnRhaW5zIGZyb20gJy4uL3V0aWxzL3N0cmluZ0NvbnRhaW5zJztcclxuaW1wb3J0IG9iamVjdEl0ZXJhdG9yIGZyb20gJy4uL3V0aWxzL29iamVjdEl0ZXJhdG9yJztcclxuaW1wb3J0IHF1ZXJ5IGZyb20gJy4uL3V0aWxzL3F1ZXJ5JztcclxuaW1wb3J0IGhhc0NsYXNzIGZyb20gJy4uL3V0aWxzL2hhc0NsYXNzJztcclxuaW1wb3J0IGFkZENsYXNzIGZyb20gJy4uL3V0aWxzL2FkZENsYXNzJztcclxuaW1wb3J0IHJlbW92ZUNsYXNzIGZyb20gJy4uL3V0aWxzL3JlbW92ZUNsYXNzJztcclxuaW1wb3J0IGNsb3Nlc3QgZnJvbSAnLi4vdXRpbHMvY2xvc2VzdCc7XHJcbmltcG9ydCBpc01vYmlsZVRhYmxldCBmcm9tICcuLi91dGlscy9pc01vYmlsZVRhYmxldCc7XHJcblxyXG5pbXBvcnQgY0xhYnMgZnJvbSAnLi9jTGFicyc7XHJcbmltcG9ydCAnLi9BamF4JztcclxuXHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvbnMgfSBmcm9tICcuL05vdGlmaWNhdGlvbnMnO1xyXG5pbXBvcnQgeyBNaW5pU2NvcmVCb2FyZCB9IGZyb20gJy4vTWluaVNjb3JlQm9hcmQnO1xyXG5pbXBvcnQgeyBNYWluV2lkZ2V0IH0gZnJvbSAnLi9NYWluV2lkZ2V0JztcclxuXHJcbmNvbnN0IHRyYW5zbGF0aW9uID0gcmVxdWlyZShgLi4vLi4vaTE4bi90cmFuc2xhdGlvbl8ke3Byb2Nlc3MuZW52LkxBTkd9Lmpzb25gKTtcclxuXHJcbi8qKlxyXG4gKiBNYWluIGxlYWRlcmJvYXJkIHdpZGdldCwgY29udHJvbHMgYWxsIGFjdGlvbnMgYW5kIGluaXRpYXRpb24gbG9naWMuXHJcbiAqIE1haW4gcmVzcG9uc2liaWxpdHkgaXMgdG8gY29udHJvbCB0aGUgaW50ZXJhY3Rpb25zIGJldHdlZW4gZGlmZmVyZW50IHdpZGdldHMvcGx1Z2lucyBhbmQgdXNlciBldmVuIGFjdGlvbnNcclxuICogQHBhcmFtIG9wdGlvbnMge09iamVjdH0gc2V0dGluZyBwYXJhbWV0ZXJzIHVzZWQgdG8gb3ZlcndyaXRlIHRoZSBkZWZhdWx0IHNldHRpbmdzXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IExiV2lkZ2V0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICB0aGlzLnNldHRpbmdzID0ge1xyXG4gICAgZGVidWc6IHRydWUsXHJcbiAgICBiaW5kQ29udGFpbmVyOiBkb2N1bWVudC5ib2R5LFxyXG4gICAgYXV0b1N0YXJ0OiB0cnVlLFxyXG4gICAgc3NlTWVzc2FnaW5nOiBudWxsLFxyXG4gICAgbm90aWZpY2F0aW9uczogbnVsbCxcclxuICAgIG1pbmlTY29yZUJvYXJkOiBudWxsLFxyXG4gICAgZW5hYmxlTm90aWZpY2F0aW9uczogdHJ1ZSxcclxuICAgIG1haW5XaWRnZXQ6IG51bGwsXHJcbiAgICBnbG9iYWxBamF4OiBuZXcgY0xhYnMuQWpheCgpLFxyXG4gICAgY2hlY2tBamF4OiBuZXcgY0xhYnMuQWpheCgpLFxyXG4gICAgbGFuZ3VhZ2U6IHByb2Nlc3MuZW52LkxBTkcsXHJcbiAgICBjdXJyZW5jeTogJycsXHJcbiAgICBzcGFjZU5hbWU6ICcnLFxyXG4gICAgbWVtYmVySWQ6ICcnLFxyXG4gICAgZ3JvdXBzOiAnJyxcclxuICAgIGdhbWVJZDogJycsXHJcbiAgICBlbmZvcmNlR2FtZUxvb2t1cDogdHJ1ZSwgLy8gdG91cm5hbWVudCBsb29rdXAgd2lsbCBpbmNsdWRlL2V4Y2x1ZGUgZ2FtZSBvbmx5IHJlcXVlc3RzXHJcbiAgICBhcGlLZXk6ICcnLFxyXG4gICAgbWVtYmVyOiBudWxsLFxyXG4gICAgY29tcGV0aXRpb246IHtcclxuICAgICAgYWN0aXZlQ29tcGV0aXRpb25JZDogbnVsbCxcclxuICAgICAgYWN0aXZlQ29udGVzdElkOiBudWxsLFxyXG4gICAgICBhY3RpdmVDb21wZXRpdGlvbjogbnVsbCxcclxuICAgICAgYWN0aXZlQ29udGVzdDogbnVsbCxcclxuICAgICAgcmVmcmVzaEludGVydmFsOiBudWxsLFxyXG4gICAgICByZWZyZXNoSW50ZXJ2YWxNaWxsaXM6IDEwMDAwLFxyXG4gICAgICBleHRyYWN0SW1hZ2VIZWFkZXI6IHRydWUgLy8gd2lsbCBleHRyYWN0IHRoZSBmaXJzdCBmb3VuZCBpbWFnZSBpbnNpZGUgdGhlIGJvZHkgdGFnIGFuZCBtb3ZlIGl0IG9uIHRvcFxyXG4gICAgfSxcclxuICAgIGFjaGlldmVtZW50czoge1xyXG4gICAgICBsaXN0OiBbXSxcclxuICAgICAgYXZhaWxhYmxlUmV3YXJkczogW10sXHJcbiAgICAgIHJld2FyZHM6IFtdLFxyXG4gICAgICBleHBpcmVkUmV3YXJkczogW10sXHJcbiAgICAgIGV4dHJhY3RJbWFnZUhlYWRlcjogdHJ1ZSAvLyB3aWxsIGV4dHJhY3QgdGhlIGZpcnN0IGZvdW5kIGltYWdlIGluc2lkZSB0aGUgYm9keSB0YWcgYW5kIG1vdmUgaXQgb24gdG9wXHJcbiAgICB9LFxyXG4gICAgcmV3YXJkczoge1xyXG4gICAgICBhdmFpbGFibGVSZXdhcmRzOiBbXSxcclxuICAgICAgcmV3YXJkczogW10sXHJcbiAgICAgIGV4cGlyZWRSZXdhcmRzOiBbXSxcclxuICAgICAgcmV3YXJkRm9ybWF0dGVyOiBmdW5jdGlvbiAocmV3YXJkKSB7XHJcbiAgICAgICAgdmFyIGRlZmF1bHRSZXdhcmRWYWx1ZSA9IHJld2FyZC52YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXdhcmQudW5pdE9mTWVhc3VyZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHJld2FyZC51bml0T2ZNZWFzdXJlLnN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgcmV3YXJkLnVuaXRPZk1lYXN1cmUuc3ltYm9sICE9PSBudWxsKSB7XHJcbiAgICAgICAgICBkZWZhdWx0UmV3YXJkVmFsdWUgPSByZXdhcmQudW5pdE9mTWVhc3VyZS5zeW1ib2wgKyByZXdhcmQudmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGVmYXVsdFJld2FyZFZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgbWVzc2FnZXM6IHtcclxuICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICBtZXNzYWdlczogW11cclxuICAgIH0sXHJcbiAgICB0b3VybmFtZW50czoge1xyXG4gICAgICBhY3RpdmVDb21wZXRpdGlvbklkOiBudWxsLFxyXG4gICAgICByZWFkeUNvbXBldGl0aW9uczogW10sIC8vIHN0YXR1c0NvZGUgM1xyXG4gICAgICBhY3RpdmVDb21wZXRpdGlvbnM6IFtdLCAvLyBzdGF0dXNDb2RlIDVcclxuICAgICAgZmluaXNoZWRDb21wZXRpdGlvbnM6IFtdIC8vIHN0YXR1c0NvZGUgN1xyXG4gICAgfSxcclxuICAgIGxlYWRlcmJvYXJkOiB7XHJcbiAgICAgIGZ1bGxMZWFkZXJib2FyZFNpemU6IDEwMCxcclxuICAgICAgcmVmcmVzaEludGVydmFsTWlsbGlzOiA1MDAwLFxyXG4gICAgICByZWZyZXNoSW50ZXJ2YWw6IG51bGwsXHJcbiAgICAgIHJlZnJlc2hMYkRhdGFJbnRlcnZhbDogbnVsbCxcclxuICAgICAgbGVhZGVyYm9hcmREYXRhOiBbXSxcclxuICAgICAgbG9hZExlYWRlcmJvYXJkSGlzdG9yeToge31cclxuXHJcbiAgICB9LFxyXG4gICAgdXJpOiB7XHJcbiAgICAgIGdhdGV3YXlEb21haW46IGNMYWJzLmFwaS51cmwsXHJcblxyXG4gICAgICBtZW1iZXJzOiAnL2FwaS92MS86c3BhY2UvbWVtYmVycy9yZWZlcmVuY2UvOmlkJyxcclxuICAgICAgYXNzZXRzOiAnL2Fzc2V0cy9hdHRhY2htZW50cy86YXR0YWNobWVudElkJyxcclxuXHJcbiAgICAgIG1lbWJlclNTRTogJy9hcGkvdjEvOnNwYWNlL3NzZS9yZWZlcmVuY2UvOmlkJyxcclxuICAgICAgbWVtYmVyU1NFSGVhcnRiZWF0OiAnL2FwaS92MS86c3BhY2Uvc3NlL3JlZmVyZW5jZS86aWQvaGVhcnRiZWF0JyxcclxuXHJcbiAgICAgIGNvbXBldGl0aW9uczogJy9hcGkvdjEvOnNwYWNlL2NvbXBldGl0aW9ucycsXHJcbiAgICAgIGNvbXBldGl0aW9uQnlJZDogJy9hcGkvdjEvOnNwYWNlL2NvbXBldGl0aW9ucy86aWQnLFxyXG4gICAgICBjb250ZXN0TGVhZGVyYm9hcmQ6ICcvYXBpL3YxLzpzcGFjZS9jb250ZXN0cy86aWQvbGVhZGVyYm9hcmQnLFxyXG5cclxuICAgICAgYWNoaWV2ZW1lbnQ6ICcvYXBpL3YxLzpzcGFjZS9hY2hpZXZlbWVudHMvOmlkJyxcclxuICAgICAgYWNoaWV2ZW1lbnRzOiAnL2FwaS92MS86c3BhY2UvYWNoaWV2ZW1lbnRzL21lbWJlcnMvcmVmZXJlbmNlLzppZCcsXHJcbiAgICAgIC8vIGFjaGlldmVtZW50czogXCIvYXBpL3YxLzpzcGFjZS9hY2hpZXZlbWVudHNcIixcclxuICAgICAgYWNoaWV2ZW1lbnRzUHJvZ3Jlc3Npb246ICcvYXBpL3YxLzpzcGFjZS9tZW1iZXJzL3JlZmVyZW5jZS86aWQvYWNoaWV2ZW1lbnRzJyxcclxuICAgICAgYWNoaWV2ZW1lbnRzSXNzdWVkOiAnL2FwaS92MS86c3BhY2UvbWVtYmVycy9yZWZlcmVuY2UvOmlkL2FjaGlldmVtZW50cy9pc3N1ZWQnLFxyXG5cclxuICAgICAgbWVzc2FnZXM6ICcvYXBpL3YxLzpzcGFjZS9tZW1iZXJzL3JlZmVyZW5jZS86aWQvbWVzc2FnZXMnLFxyXG4gICAgICBtZXNzYWdlQnlJZDogJy9hcGkvdjEvOnNwYWNlL21lbWJlcnMvcmVmZXJlbmNlLzppZC9tZXNzYWdlcy86bWVzc2FnZUlkJyxcclxuXHJcbiAgICAgIG1lbWJlclJld2FyZDogJy9hcGkvdjEvOnNwYWNlL21lbWJlcnMvcmVmZXJlbmNlLzppZC9hd2FyZC86YXdhcmRJZCcsXHJcbiAgICAgIG1lbWJlclJld2FyZENsYWltOiAnL2FwaS92MS86c3BhY2UvbWVtYmVycy9yZWZlcmVuY2UvOmlkL2F3YXJkLzphd2FyZElkL2F3YXJkJyxcclxuXHJcbiAgICAgIG1lbWJlckNvbXBldGl0aW9uczogJy9hcGkvdjEvOnNwYWNlL21lbWJlcnMvcmVmZXJlbmNlLzppZC9jb21wZXRpdGlvbnMnLFxyXG4gICAgICBtZW1iZXJDb21wZXRpdGlvbkJ5SWQ6ICcvYXBpL3YxLzpzcGFjZS9tZW1iZXJzL3JlZmVyZW5jZS86aWQvY29tcGV0aXRpb24vOmNvbXBldGl0aW9uSWQnLFxyXG4gICAgICBtZW1iZXJDb21wZXRpdGlvbk9wdEluOiAnL2FwaS92MS86c3BhY2UvbWVtYmVycy9yZWZlcmVuY2UvOmlkL2NvbXBldGl0aW9uLzpjb21wZXRpdGlvbklkL29wdGluJyxcclxuICAgICAgbWVtYmVyQ29tcGV0aXRpb25PcHRJbkNoZWNrOiAnL2FwaS92MS86c3BhY2UvbWVtYmVycy9yZWZlcmVuY2UvOmlkL2NvbXBldGl0aW9uLzpjb21wZXRpdGlvbklkL29wdGluLWNoZWNrJyxcclxuXHJcbiAgICAgIHRyYW5zbGF0aW9uUGF0aDogJycgLy8gLi4vaTE4bi90cmFuc2xhdGlvbl86bGFuZ3VhZ2UuanNvblxyXG4gICAgfSxcclxuICAgIGxvYWRUcmFuc2xhdGlvbnM6IHRydWUsXHJcbiAgICB0cmFuc2xhdGlvbjogdHJhbnNsYXRpb24sXHJcbiAgICByZXNvdXJjZXM6IFtcclxuICAgICAgKGNMYWJzLmFwaS51cmwgKyAnL2Fzc2V0cy93aWRnZXRzL2xlYWRlcmJvYXJkX3YzL2Nzcy9zdHlsZS5jc3M/dD0nICsgKG5ldyBEYXRlKCkuZ2V0VGltZSgpKSksXHJcbiAgICAgIChjTGFicy5hcGkudXJsICsgJy9hc3NldHMvd2lkZ2V0cy9sZWFkZXJib2FyZF92My9jc3MvZm9udHMuY3NzP3Q9JyArIChuZXcgRGF0ZSgpLmdldFRpbWUoKSkpXHJcbiAgICBdLFxyXG4gICAgbGF5b3V0QnVpbGRDYWxsYmFjazogZnVuY3Rpb24gKGxheW91dCwgaW5zdGFuY2UpIHtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICB0aGlzLnNldHRpbmdzID0gbWVyZ2VPYmplY3RzKHRoaXMuc2V0dGluZ3MsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5sb2cgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuZGVidWcpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBGb3JtYXQgZHVyYXRpb24gb2YgRGF0ZSBUaW1lIGZyb20gbW9tZW50KCkgb2JqZWN0XHJcbiAgICogQHBhcmFtIGR1cmF0aW9uIHttb21lbnR9XHJcbiAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgKi9cclxuICB0aGlzLmZvcm1hdERhdGVUaW1lID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIGxhcmdlUmVzdWx0ID0gW107XHJcbiAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICBpZiAoZHVyYXRpb24uZGF5cygpKSBsYXJnZVJlc3VsdC5wdXNoKGR1cmF0aW9uLmRheXMoKSArICc8c3BhbiBjbGFzcz1cInRpbWUtaW5kXCI+JyArIF90aGlzLnNldHRpbmdzLnRyYW5zbGF0aW9uLnRpbWUuZGF5cyArICc8L3NwYW4+Jyk7XHJcbiAgICBpZiAoZHVyYXRpb24uaG91cnMoKSB8fCBkdXJhdGlvbi5kYXlzKCkgPiAwKSB7XHJcbiAgICAgIHJlc3VsdC5wdXNoKGZvcm1hdE51bWJlckxlYWRpbmdaZXJvcyhkdXJhdGlvbi5ob3VycygpLCAyKSArICc8c3BhbiBjbGFzcz1cInRpbWUtaW5kXCI+JyArIF90aGlzLnNldHRpbmdzLnRyYW5zbGF0aW9uLnRpbWUuaG91cnMgKyAnPC9zcGFuPicpO1xyXG4gICAgfSBlbHNlIHJlc3VsdC5wdXNoKCcwMDxzcGFuIGNsYXNzPVwidGltZS1pbmRcIj4nICsgX3RoaXMuc2V0dGluZ3MudHJhbnNsYXRpb24udGltZS5ob3VycyArICc8L3NwYW4+Jyk7XHJcbiAgICBpZiAoZHVyYXRpb24ubWludXRlcygpIHx8IGR1cmF0aW9uLmhvdXJzKCkgPiAwIHx8IGR1cmF0aW9uLmRheXMoKSA+IDApIHtcclxuICAgICAgcmVzdWx0LnB1c2goZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zKGR1cmF0aW9uLm1pbnV0ZXMoKSwgMikgKyAoKGR1cmF0aW9uLmRheXMoKSA+IDApID8gJzxzcGFuIGNsYXNzPVwidGltZS1pbmRcIj4nICsgX3RoaXMuc2V0dGluZ3MudHJhbnNsYXRpb24udGltZS5taW51dGVzICsgJzwvc3Bhbj4nIDogJzxzcGFuIGNsYXNzPVwidGltZS1pbmRcIj4nICsgX3RoaXMuc2V0dGluZ3MudHJhbnNsYXRpb24udGltZS5taW51dGVzU2hvcnRIYW5kICsgJzwvc3Bhbj4nKSk7XHJcbiAgICB9IGVsc2UgKHJlc3VsdC5wdXNoKCcwMCcgKyAoKGR1cmF0aW9uLmRheXMoKSA+IDApID8gJzxzcGFuIGNsYXNzPVwidGltZS1pbmRcIj4nICsgX3RoaXMuc2V0dGluZ3MudHJhbnNsYXRpb24udGltZS5taW51dGVzICsgJzwvc3Bhbj4nIDogJzxzcGFuIGNsYXNzPVwidGltZS1pbmRcIj4nICsgX3RoaXMuc2V0dGluZ3MudHJhbnNsYXRpb24udGltZS5taW51dGVzU2hvcnRIYW5kICsgJzwvc3Bhbj4nKSkpO1xyXG4gICAgLy8gaWYgKGR1cmF0aW9uLnNlY29uZHMoKSAmJiBkdXJhdGlvbi5kYXlzKCkgPT09IDApeyByZXN1bHQucHVzaCggZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zKGR1cmF0aW9uLnNlY29uZHMoKSwgMikgKyAnPHNwYW4gY2xhc3M9XCJ0aW1lLWluZFwiPnM8L3NwYW4+JyApIH1lbHNlIGlmKGR1cmF0aW9uLmRheXMoKSA9PT0gMCl7cmVzdWx0LnB1c2goICcwMDxzcGFuIGNsYXNzPVwidGltZS1pbmRcIj5zPC9zcGFuPicgKX07XHJcbiAgICByZXN1bHQucHVzaChmb3JtYXROdW1iZXJMZWFkaW5nWmVyb3MoZHVyYXRpb24uc2Vjb25kcygpLCAyKSArICc8c3BhbiBjbGFzcz1cInRpbWUtaW5kXCI+JyArIF90aGlzLnNldHRpbmdzLnRyYW5zbGF0aW9uLnRpbWUuc2Vjb25kcyArICc8L3NwYW4+Jyk7XHJcbiAgICByZXR1cm4gKGxhcmdlUmVzdWx0Lmxlbmd0aCA+IDApID8gKGxhcmdlUmVzdWx0LmpvaW4oJyAnKSArICcgJyArIHJlc3VsdC5qb2luKCc6JykpIDogcmVzdWx0LmpvaW4oJzonKTtcclxuICB9O1xyXG5cclxuICB0aGlzLnBvcHVsYXRlSWRlbnRpY29uQmFzZTY0SW1hZ2UgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICBpZiAoc3RyLmxlbmd0aCA+IDApIHtcclxuICAgICAgLyogZXNsaW50IG5ldy1jYXA6IFwib2ZmXCIgKi9cclxuICAgICAgdmFyIHNoYU9iaiA9IG5ldyBqc1NIQSgnU0hBLTUxMicsICdURVhUJyk7XHJcbiAgICAgIHNoYU9iai51cGRhdGUoc3RyKTtcclxuICAgICAgdmFyIGhhc2ggPSBzaGFPYmouZ2V0SGFzaCgnSEVYJywgMSk7XHJcbiAgICAgIHZhciBkYXRhID0gbmV3IElkZW50aWNvbihoYXNoLCB7XHJcbiAgICAgICAgYmFja2dyb3VuZDogWzI1NSwgMjU1LCAyNTUsIDI1NV0sIC8vIHJnYmEgd2hpdGVcclxuICAgICAgICBtYXJnaW46IDAuMSwgLy8gMjAlIG1hcmdpblxyXG4gICAgICAgIHNpemU6IDIyLCAvLyA0MjBweCBzcXVhcmVcclxuICAgICAgICBmb3JtYXQ6ICdzdmcnIC8vIHVzZSBTVkcgaW5zdGVhZCBvZiBQTkdcclxuICAgICAgfSkudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgIHZhciBpY29uID0gJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJyArIGRhdGE7XHJcblxyXG4gICAgICByZXR1cm4gaWNvbjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBnZXQgYSBsaXN0IG9mIGF2YWlsYWJsZSBjb21wZXRpdGlvbiBmaWx0ZXJlZCBieSBwcm92aWRlZCBnbG9iYWwgY3JpdGVyaWFcclxuICAgKiBAcGFyYW0gY2FsbGJhY2sge0Z1bmN0aW9ufVxyXG4gICAqL1xyXG4gIHZhciBjb21wZXRpdGlvbkNoZWNrQWpheCA9IG5ldyBjTGFicy5BamF4KCk7XHJcbiAgdGhpcy5jaGVja0ZvckF2YWlsYWJsZUNvbXBldGl0aW9ucyA9IGZ1bmN0aW9uIChjYWxsYmFjaywgYWpheEluc3RhbmNlKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIHVybCA9IChfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZC5sZW5ndGggPT09IDApID8gKFxyXG4gICAgICBfdGhpcy5zZXR0aW5ncy51cmkuY29tcGV0aXRpb25zLnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLnNwYWNlTmFtZSlcclxuICAgICkgOiAoXHJcbiAgICAgIF90aGlzLnNldHRpbmdzLnVyaS5tZW1iZXJDb21wZXRpdGlvbnMucmVwbGFjZSgnOnNwYWNlJywgX3RoaXMuc2V0dGluZ3Muc3BhY2VOYW1lKS5yZXBsYWNlKCc6aWQnLCBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZClcclxuICAgICk7XHJcbiAgICB2YXIgZmlsdGVycyA9IFtcclxuICAgICAgJ3N0YXR1c0NvZGU+PT0zJyxcclxuICAgICAgJ3N0YXR1c0NvZGU8PT01JyxcclxuICAgICAgJ19zb3J0QnlGaWVsZHM9b3B0aW9ucy5zY2hlZHVsZWREYXRlcy5lbmQ6ZGVzYycsXHJcbiAgICAgICgnX2xhbmc9JyArIF90aGlzLnNldHRpbmdzLmxhbmd1YWdlKVxyXG4gICAgXTtcclxuICAgIHZhciBhamF4SW5zdGFuY2VUb1VzZSA9ICh0eXBlb2YgYWpheEluc3RhbmNlICE9PSAndW5kZWZpbmVkJyAmJiBhamF4SW5zdGFuY2UgIT09IG51bGwpID8gYWpheEluc3RhbmNlIDogY29tcGV0aXRpb25DaGVja0FqYXg7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5jdXJyZW5jeSA9PT0gJ3N0cmluZycgJiYgX3RoaXMuc2V0dGluZ3MuY3VycmVuY3kubGVuZ3RoID4gMCkge1xyXG4gICAgICBmaWx0ZXJzLnB1c2goJ191b21LZXk9JyArIF90aGlzLnNldHRpbmdzLmN1cnJlbmN5KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuZ2FtZUlkLmxlbmd0aCA+IDAgJiYgX3RoaXMuc2V0dGluZ3MuZW5mb3JjZUdhbWVMb29rdXApIHtcclxuICAgICAgZmlsdGVycy5wdXNoKCdvcHRpb25zLnByb2R1Y3RzLnByb2R1Y3RSZWZJZD0nICsgX3RoaXMuc2V0dGluZ3MuZ2FtZUlkKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuZ3JvdXBzLmxlbmd0aCA+IDAgJiYgX3RoaXMuc2V0dGluZ3MubWVtYmVySWQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGZpbHRlcnMucHVzaCgnb3B0aW9ucy5saW1pdEVudHJhbnRzVG89JyArIF90aGlzLnNldHRpbmdzLmdyb3Vwcyk7XHJcbiAgICB9XHJcblxyXG4gICAgYWpheEluc3RhbmNlVG9Vc2UuYWJvcnQoKS5nZXREYXRhKHtcclxuICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgIHVybDogX3RoaXMuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyB1cmwgKyAnPycgKyBmaWx0ZXJzLmpvaW4oJyYnKSxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcclxuICAgICAgfSxcclxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcclxuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLnJlYWR5Q29tcGV0aXRpb25zID0gW107XHJcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50cy5hY3RpdmVDb21wZXRpdGlvbnMgPSBbXTtcclxuXHJcbiAgICAgICAgICB3aW5kb3cubWFwT2JqZWN0KGpzb24uZGF0YSwgZnVuY3Rpb24gKGNvbXApIHtcclxuICAgICAgICAgICAgaWYgKGNvbXAuc3RhdHVzQ29kZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLnJlYWR5Q29tcGV0aXRpb25zLnB1c2goY29tcCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tcC5zdGF0dXNDb2RlID09PSA1KSB7XHJcbiAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMuYWN0aXZlQ29tcGV0aXRpb25zLnB1c2goY29tcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIF90aGlzLmNoZWNrRm9yRmluaXNoZWRDb21wZXRpdGlvbnMoY2FsbGJhY2ssIGFqYXhJbnN0YW5jZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIF90aGlzLmxvZygnZmFpbGVkIHRvIGNoZWNrRm9yQWN0aXZlQ29tcGV0aXRpb25zICcgKyByZXNwb25zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBnZXQgYSBsaXN0IG9mIGZpbmlzaGVkIGNvbXBldGl0aW9uIGZpbHRlcmVkIGJ5IHByb3ZpZGVkIGdsb2JhbCBjcml0ZXJpYVxyXG4gICAqIEBwYXJhbSBjYWxsYmFjayB7RnVuY3Rpb259XHJcbiAgICovXHJcbiAgdmFyIGNvbXBldGl0aW9uRmluaXNoZWRDaGVja0FqYXggPSBuZXcgY0xhYnMuQWpheCgpO1xyXG4gIHRoaXMuY2hlY2tGb3JGaW5pc2hlZENvbXBldGl0aW9ucyA9IGZ1bmN0aW9uIChjYWxsYmFjaywgYWpheEluc3RhbmNlKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIHVybCA9IChfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZC5sZW5ndGggPT09IDApID8gKFxyXG4gICAgICBfdGhpcy5zZXR0aW5ncy51cmkuY29tcGV0aXRpb25zLnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLnNwYWNlTmFtZSlcclxuICAgICkgOiAoXHJcbiAgICAgIF90aGlzLnNldHRpbmdzLnVyaS5tZW1iZXJDb21wZXRpdGlvbnMucmVwbGFjZSgnOnNwYWNlJywgX3RoaXMuc2V0dGluZ3Muc3BhY2VOYW1lKS5yZXBsYWNlKCc6aWQnLCBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZClcclxuICAgICk7XHJcbiAgICB2YXIgZmlsdGVycyA9IFtcclxuICAgICAgJ3N0YXR1c0NvZGU9NycsXHJcbiAgICAgICdfbGltaXQ9MTAnLFxyXG4gICAgICAnX3NvcnRCeUZpZWxkcz1vcHRpb25zLnNjaGVkdWxlZERhdGVzLmVuZDpkZXNjJyxcclxuICAgICAgKCdfbGFuZz0nICsgX3RoaXMuc2V0dGluZ3MubGFuZ3VhZ2UpXHJcbiAgICBdO1xyXG4gICAgdmFyIGFqYXhJbnN0YW5jZVRvVXNlID0gKHR5cGVvZiBhamF4SW5zdGFuY2UgIT09ICd1bmRlZmluZWQnICYmIGFqYXhJbnN0YW5jZSAhPT0gbnVsbCkgPyBhamF4SW5zdGFuY2UgOiBjb21wZXRpdGlvbkZpbmlzaGVkQ2hlY2tBamF4O1xyXG5cclxuICAgIGlmICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MuY3VycmVuY3kgPT09ICdzdHJpbmcnICYmIF90aGlzLnNldHRpbmdzLmN1cnJlbmN5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgZmlsdGVycy5wdXNoKCdfdW9tS2V5PScgKyBfdGhpcy5zZXR0aW5ncy5jdXJyZW5jeSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmdhbWVJZC5sZW5ndGggPiAwICYmIF90aGlzLnNldHRpbmdzLmVuZm9yY2VHYW1lTG9va3VwKSB7XHJcbiAgICAgIGZpbHRlcnMucHVzaCgnb3B0aW9ucy5wcm9kdWN0cy5wcm9kdWN0UmVmSWQ9JyArIF90aGlzLnNldHRpbmdzLmdhbWVJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmdyb3Vwcy5sZW5ndGggPiAwICYmIF90aGlzLnNldHRpbmdzLm1lbWJlcklkLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBmaWx0ZXJzLnB1c2goJ29wdGlvbnMubGltaXRFbnRyYW50c1RvPScgKyBfdGhpcy5zZXR0aW5ncy5ncm91cHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFqYXhJbnN0YW5jZVRvVXNlLmFib3J0KCkuZ2V0RGF0YSh7XHJcbiAgICAgIHR5cGU6ICdHRVQnLFxyXG4gICAgICB1cmw6IF90aGlzLnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgdXJsICsgJz8nICsgZmlsdGVycy5qb2luKCcmJyksXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnWC1BUEktS0VZJzogX3RoaXMuc2V0dGluZ3MuYXBpS2V5XHJcbiAgICAgIH0sXHJcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XHJcbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50cy5maW5pc2hlZENvbXBldGl0aW9ucyA9IFtdO1xyXG5cclxuICAgICAgICAgIHdpbmRvdy5tYXBPYmplY3QoanNvbi5kYXRhLCBmdW5jdGlvbiAoY29tcCkge1xyXG4gICAgICAgICAgICBpZiAoY29tcC5zdGF0dXNDb2RlID09PSA3KSB7XHJcbiAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMuZmluaXNoZWRDb21wZXRpdGlvbnMucHVzaChjb21wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBfdGhpcy5sb2coJ2ZhaWxlZCB0byBjaGVja0ZvckZpbmlzaGVkQ29tcGV0aXRpb25zICcgKyByZXNwb25zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB0aGlzLnByZXBhcmVBY3RpdmVDb21wZXRpdGlvbiA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBhY3RpdmVDb21wZXRpdGlvbiA9IG51bGw7XHJcbiAgICB2YXIgYWN0aXZlQ29tcGV0aXRpb25JZCA9IG51bGw7XHJcblxyXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLmFjdGl2ZUNvbXBldGl0aW9uSWQgIT09IG51bGwpIHtcclxuICAgICAgd2luZG93Lm1hcE9iamVjdChfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50cy5hY3RpdmVDb21wZXRpdGlvbnMsIGZ1bmN0aW9uIChjb21wKSB7XHJcbiAgICAgICAgaWYgKGNvbXAuaWQgPT09IF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLmFjdGl2ZUNvbXBldGl0aW9uSWQpIHtcclxuICAgICAgICAgIGFjdGl2ZUNvbXBldGl0aW9uID0gY29tcDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICB3aW5kb3cubWFwT2JqZWN0KF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLnJlYWR5Q29tcGV0aXRpb25zLCBmdW5jdGlvbiAoY29tcCkge1xyXG4gICAgICAgIGlmIChjb21wLmlkID09PSBfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50cy5hY3RpdmVDb21wZXRpdGlvbklkKSB7XHJcbiAgICAgICAgICBhY3RpdmVDb21wZXRpdGlvbiA9IGNvbXA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgd2luZG93Lm1hcE9iamVjdChfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50cy5maW5pc2hlZENvbXBldGl0aW9ucywgZnVuY3Rpb24gKGNvbXApIHtcclxuICAgICAgICBpZiAoY29tcC5pZCA9PT0gX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMuYWN0aXZlQ29tcGV0aXRpb25JZCkge1xyXG4gICAgICAgICAgYWN0aXZlQ29tcGV0aXRpb24gPSBjb21wO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoYWN0aXZlQ29tcGV0aXRpb24gIT09IG51bGwpIHtcclxuICAgICAgICBhY3RpdmVDb21wZXRpdGlvbklkID0gX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMuYWN0aXZlQ29tcGV0aXRpb25JZDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50cy5hY3RpdmVDb21wZXRpdGlvbklkID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChhY3RpdmVDb21wZXRpdGlvbiA9PT0gbnVsbCAmJiBfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50cy5hY3RpdmVDb21wZXRpdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICBhY3RpdmVDb21wZXRpdGlvbiA9IF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLmFjdGl2ZUNvbXBldGl0aW9uc1swXTtcclxuICAgICAgYWN0aXZlQ29tcGV0aXRpb25JZCA9IGFjdGl2ZUNvbXBldGl0aW9uLmlkO1xyXG4gICAgfSBlbHNlIGlmIChhY3RpdmVDb21wZXRpdGlvbiA9PT0gbnVsbCAmJiBfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50cy5yZWFkeUNvbXBldGl0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGFjdGl2ZUNvbXBldGl0aW9uID0gX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMucmVhZHlDb21wZXRpdGlvbnNbMF07XHJcbiAgICAgIGFjdGl2ZUNvbXBldGl0aW9uSWQgPSBhY3RpdmVDb21wZXRpdGlvbi5pZDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBubyBjb21wZXRpdGlvbnMgZm91bmRcclxuICAgIGlmIChhY3RpdmVDb21wZXRpdGlvbklkID09PSBudWxsICYmIF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzLmZpbmlzaGVkQ29tcGV0aXRpb25zLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgIC8vIGRlYWN0aXZhdGlvbiByZXF1aXJlcyBjbG9zaW5nICYgb3BlbmluZyBvZiB0aGUgbWFpbldpZGdldC5cclxuICAgICAgX3RoaXMuZGVhY3RpdmF0ZUNvbXBldGl0aW9uc0FuZExlYWRlcmJvYXJkcygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uSWQgIT09IGFjdGl2ZUNvbXBldGl0aW9uSWQgJiYgYWN0aXZlQ29tcGV0aXRpb25JZCAhPT0gbnVsbCkge1xyXG4gICAgICAgIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uID0gYWN0aXZlQ29tcGV0aXRpb247XHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb25JZCA9IGFjdGl2ZUNvbXBldGl0aW9uSWQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGxvYWQgYWN0aXZlIGNvbXBldGl0aW9uXHJcbiAgICAgIGlmIChhY3RpdmVDb21wZXRpdGlvbklkICE9PSBudWxsKSB7XHJcbiAgICAgICAgX3RoaXMubG9hZEFjdGl2ZUNvbXBldGl0aW9uKGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgICBfdGhpcy5zZXRBY3RpdmVDb21wZXRpdGlvbihqc29uLCBjYWxsYmFjayk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMubG9hZEFjdGl2ZUNvbXBldGl0aW9uID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIHVybCA9IChfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZC5sZW5ndGggPT09IDApID8gKFxyXG4gICAgICBfdGhpcy5zZXR0aW5ncy51cmkuY29tcGV0aXRpb25CeUlkLnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLnNwYWNlTmFtZSkucmVwbGFjZSgnOmlkJywgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb25JZClcclxuICAgICkgOiAoXHJcbiAgICAgIF90aGlzLnNldHRpbmdzLnVyaS5tZW1iZXJDb21wZXRpdGlvbkJ5SWQucmVwbGFjZSgnOnNwYWNlJywgX3RoaXMuc2V0dGluZ3Muc3BhY2VOYW1lKS5yZXBsYWNlKCc6aWQnLCBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZCkucmVwbGFjZSgnOmNvbXBldGl0aW9uSWQnLCBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbklkKVxyXG4gICAgKTtcclxuICAgIHZhciBmaWx0ZXJzID0gW1xyXG4gICAgICAoJ19pbmNsdWRlPXN0cmF0ZWd5JyksXHJcbiAgICAgICgnX2xhbmc9JyArIF90aGlzLnNldHRpbmdzLmxhbmd1YWdlKVxyXG4gICAgXTtcclxuXHJcbiAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmN1cnJlbmN5ID09PSAnc3RyaW5nJyAmJiBfdGhpcy5zZXR0aW5ncy5jdXJyZW5jeS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZpbHRlcnMucHVzaCgnX3VvbUtleT0nICsgX3RoaXMuc2V0dGluZ3MuY3VycmVuY3kpO1xyXG4gICAgfVxyXG5cclxuICAgIF90aGlzLnNldHRpbmdzLmdsb2JhbEFqYXguYWJvcnQoKS5nZXREYXRhKHtcclxuICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgIHVybDogX3RoaXMuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyB1cmwgKyAnPycgKyBmaWx0ZXJzLmpvaW4oJyYnKSxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcclxuICAgICAgfSxcclxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcclxuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soanNvbik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIF90aGlzLmxvZygnZmFpbGVkIHRvIGxvYWRBY3RpdmVDb21wZXRpdGlvbiAnICsgcmVzcG9uc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5zZXRBY3RpdmVDb21wZXRpdGlvbiA9IGZ1bmN0aW9uIChqc29uLCBjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbiA9IGpzb24uZGF0YTtcclxuICAgIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgPSBudWxsO1xyXG4gICAgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdElkID0gbnVsbDtcclxuXHJcbiAgICBpZiAodHlwZW9mIGpzb24uZGF0YS5jb250ZXN0cyAhPT0gJ3VuZGVmaW5lZCcgJiYganNvbi5kYXRhLmNvbnRlc3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgd2luZG93Lm1hcE9iamVjdChqc29uLmRhdGEuY29udGVzdHMsIGZ1bmN0aW9uIChjb250ZXN0KSB7XHJcbiAgICAgICAgaWYgKGNvbnRlc3Quc3RhdHVzQ29kZSA8IDcgJiYgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdCA9IGNvbnRlc3Q7XHJcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0SWQgPSBjb250ZXN0LmlkO1xyXG5cclxuICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5yZXdhcmRzID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnJld2FyZHMgPSBbXTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB2YXIgcmV3YXJkcyA9IFtdO1xyXG4gICAgICAgICAgd2luZG93Lm1hcE9iamVjdChfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnJld2FyZHMsIGZ1bmN0aW9uIChyZXdhcmQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXdhcmQucmV3YXJkUmFuayA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICB2YXIgcmFua1BhcnRzID0gcmV3YXJkLnJld2FyZFJhbmsuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICB2YXIgcmV3YXJkUmFuayA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICB3aW5kb3cubWFwT2JqZWN0KHJhbmtQYXJ0cywgZnVuY3Rpb24gKHBhcnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdHJpbmdDb250YWlucyhwYXJ0LCAnLScpKSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhciByYW5rUmFuZ2UgPSBwYXJ0LnNwbGl0KCctJyk7XHJcbiAgICAgICAgICAgICAgICAgIHZhciByYWdlU3RhcnQgPSBwYXJzZUludChyYW5rUmFuZ2VbMF0pO1xyXG4gICAgICAgICAgICAgICAgICB2YXIgcmFuZ2VFbmQgPSBwYXJzZUludChyYW5rUmFuZ2VbMV0pO1xyXG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gcmFnZVN0YXJ0OyBpIDw9IHJhbmdlRW5kOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICByZXdhcmRSYW5rLnB1c2goaSk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIHJld2FyZFJhbmsucHVzaChwYXJzZUludChwYXJ0KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgIHJld2FyZC5yZXdhcmRSYW5rID0gcmV3YXJkUmFuaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV3YXJkcy5wdXNoKHJld2FyZCk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnJld2FyZHMgPSByZXdhcmRzO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBjYWxsYmFjaygpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMuZ2V0TGVhZGVyYm9hcmREYXRhID0gZnVuY3Rpb24gKGNvdW50LCBjYWxsYmFjaykge1xyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdElkICE9PSBudWxsKSB7XHJcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgIHZhciB1cmwgPSBfdGhpcy5zZXR0aW5ncy51cmkuY29udGVzdExlYWRlcmJvYXJkLnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLnNwYWNlTmFtZSkucmVwbGFjZSgnOmlkJywgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdElkKTtcclxuICAgICAgdmFyIGZpbHRlcnMgPSBbXHJcbiAgICAgICAgJ19saW1pdD0nICsgY291bnQsXHJcbiAgICAgICAgJ3JhbmtpbmdzPTInXHJcbiAgICAgIF07XHJcblxyXG4gICAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLm1lbWJlcklkID09PSAnc3RyaW5nJyAmJiBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZmlsdGVycy5wdXNoKCdtZW1iZXJJZD0nICsgX3RoaXMuc2V0dGluZ3MubWVtYmVySWQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5nbG9iYWxBamF4LmFib3J0KCkuZ2V0RGF0YSh7XHJcbiAgICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIHVybCArICc/JyArIGZpbHRlcnMuam9pbignJicpLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XHJcbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBpZihcclxuICAgICAgICAgICAgLy8gICB0eXBlb2YgX3RoaXMuc2V0dGluZ3MubG9hZExlYWRlcmJvYXJkSGlzdG9yeVtfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0SWRdID09PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgIC8vICAgfHxcclxuICAgICAgICAgICAgLy8gICAoXHJcbiAgICAgICAgICAgIC8vICAgICB0eXBlb2YgX3RoaXMuc2V0dGluZ3MubG9hZExlYWRlcmJvYXJkSGlzdG9yeVtfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0SWRdICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgIC8vICAgICAmJlxyXG4gICAgICAgICAgICAvLyAgICAgX3RoaXMuc2V0dGluZ3MubG9hZExlYWRlcmJvYXJkSGlzdG9yeVtfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0SWRdICE9PSBkYXRhXHJcbiAgICAgICAgICAgIC8vICAgKVxyXG4gICAgICAgICAgICAvLyApIHtcclxuICAgICAgICAgICAgLy8gICBfdGhpcy5zZXR0aW5ncy5sb2FkTGVhZGVyYm9hcmRIaXN0b3J5W190aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3RJZF0gPSB7XHJcbiAgICAgICAgICAgIC8vICAgICBjaGFuZ2VkOiB0cnVlLFxyXG4gICAgICAgICAgICAvLyAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoanNvbi5kYXRhKVxyXG4gICAgICAgICAgICAvLyAgIH07XHJcbiAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gbWFzayBjb21wZXRpdG9yJ3MgbmFtZXMuIFdlIHdpbGwgcmVwbGFjZSBsYXN0IDQgY2hhcmFjdGVycyB3aXRoIFwiKlwiXHJcbiAgICAgICAgICAgIC8vIGFsc28gZmlyc3QgNCBjaGFycyBhcmUgcmVwbGFjZWQgd2l0aCBcIipcIlxyXG4gICAgICAgICAgICBfdGhpcy5tYXNrTmFtZXMoanNvbi5kYXRhLCBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZCk7XHJcbiAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmxlYWRlcmJvYXJkRGF0YSA9IGpzb24uZGF0YTtcclxuXHJcbiAgICAgICAgICAgIGNhbGxiYWNrKGpzb24uZGF0YSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfdGhpcy5sb2coJ2ZhaWxlZCB0byBnZXRMZWFkZXJib2FyZERhdGEgJyArIHJlc3BvbnNlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2FsbGJhY2soKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBmdW5jdGlvbiBtYXNrcyBuYW1lcyBvZiB1c2Vyc1xyXG4gIHRoaXMubWFza05hbWVzID0gZnVuY3Rpb24gKGRhdGEsIG15bmFtZSkge1xyXG4gICAgLy8gbXluYW1lIC0tPiBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZFxyXG4gICAgZm9yICh2YXIgbGVhZGJvYXJkIG9mIGRhdGEpIHtcclxuICAgICAgaWYgKGxlYWRib2FyZC5uYW1lICE9PSBteW5hbWUpIHtcclxuICAgICAgICAvLyBzcGxpdCBjYXNpbm8gYW5kIHBsYXllciBuYW1lXHJcbiAgICAgICAgdmFyIHNlcGFyYXRlZCA9IGxlYWRib2FyZC5uYW1lLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgY29uc3QgY2FzTmFtZSA9IHRoaXMubWFza1dvcmQoc2VwYXJhdGVkWzBdKTtcclxuICAgICAgICBjb25zdCBwbGF5ZXJOYW1lID0gdGhpcy5tYXNrV29yZChzZXBhcmF0ZWRbMV0pO1xyXG4gICAgICAgIGxlYWRib2FyZC5uYW1lID0gY2FzTmFtZSArICc6JyArIHBsYXllck5hbWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyB0YWtlIHN0cmluZyBhcyBpbnB1dCBhbmQgcHV0IGZpcnN0IDQgY2hhcnMgYXMgXCIqXCJcclxuICB0aGlzLm1hc2tXb3JkID0gZnVuY3Rpb24gKHdvcmQpIHtcclxuICAgIHZhciByZXQgPSAnJztcclxuICAgIC8vIHJlcGxhY2UgbGFzdCA0XHJcbiAgICBpZiAod29yZC5sZW5ndGggPj0gNCkge1xyXG4gICAgICByZXQgPSB3b3JkLnN1YnN0cmluZygwLCB3b3JkLmxlbmd0aCAtIDQpO1xyXG4gICAgICByZXQgKz0gJyoqKionO1xyXG4gICAgICAvLyByZXBsYWNlIGFsbFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0ID0gd29yZC5yZXBsYWNlKC8uL2csICcqJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH07XHJcblxyXG4gIHZhciBjaGVja0FjaGlldmVtZW50c0FqYXggPSBuZXcgY0xhYnMuQWpheCgpO1xyXG4gIHRoaXMuY2hlY2tGb3JBdmFpbGFibGVBY2hpZXZlbWVudHMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgdXJsID0gX3RoaXMuc2V0dGluZ3MudXJpLmFjaGlldmVtZW50cy5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLm1lbWJlcklkKTtcclxuICAgIHZhciBmaWx0ZXJzID0gW1xyXG4gICAgICAnX2xpbWl0PTEwMCcsXHJcbiAgICAgICdfaW5jbHVkZT1yZXdhcmRzLHByb2R1Y3RzJyxcclxuICAgICAgKCdfbGFuZz0nICsgX3RoaXMuc2V0dGluZ3MubGFuZ3VhZ2UpXHJcbiAgICBdO1xyXG4gICAgdmFyIHdpdGhHcm91cHMgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmN1cnJlbmN5ID09PSAnc3RyaW5nJyAmJiBfdGhpcy5zZXR0aW5ncy5jdXJyZW5jeS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZpbHRlcnMucHVzaCgnX3VvbUtleT0nICsgX3RoaXMuc2V0dGluZ3MuY3VycmVuY3kpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MubWVtYmVyLmdyb3VwcyAhPT0gJ3VuZGVmaW5lZCcgJiYgX3RoaXMuc2V0dGluZ3MubWVtYmVyLmdyb3Vwcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHdpdGhHcm91cHMgPSB0cnVlO1xyXG4gICAgICBmaWx0ZXJzLnB1c2goJ21lbWJlckdyb3Vwcz0nICsgX3RoaXMuc2V0dGluZ3MubWVtYmVyLmdyb3Vwcy5qb2luKCcsJykpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrQWNoaWV2ZW1lbnRzQWpheC5hYm9ydCgpLmdldERhdGEoe1xyXG4gICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIHVybCArICc/X2xhbmc9JyArIF90aGlzLnNldHRpbmdzLmxhbmd1YWdlICsgJyZfdW9tS2V5PScgKyBfdGhpcy5zZXR0aW5ncy5jdXJyZW5jeSxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcclxuICAgICAgfSxcclxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcclxuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICB2YXIganNvbkZvckFsbCA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG4gICAgICAgICAgLy8gY2xlYXIgYWNoaWV2ZW1lbnRzIGxpc3RcclxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLmFjaGlldmVtZW50cy5saXN0ID0gW107XHJcbiAgICAgICAgICAvKlxyXG4gICAgICAgICAgd2luZG93Lm1hcE9iamVjdChqc29uRm9yQWxsLmRhdGEsIGZ1bmN0aW9uIChhY2gpIHtcclxuICAgICAgICAgICAgLy8gaGVyZSB3ZSBhZGQgZmlyc3QgYWNoaWV2ZW1lbnRzXHJcbiAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLmFjaGlldmVtZW50cy5saXN0LnB1c2goYWNoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICBpZiAod2l0aEdyb3Vwcykge1xyXG4gICAgICAgICAgICBjaGVja0FjaGlldmVtZW50c0FqYXguYWJvcnQoKS5nZXREYXRhKHtcclxuICAgICAgICAgICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgICAgICAgICB1cmw6IF90aGlzLnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgdXJsICsgJz8nICsgZmlsdGVycy5qb2luKCcmJyksXHJcbiAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgJ1gtQVBJLUtFWSc6IF90aGlzLnNldHRpbmdzLmFwaUtleVxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5tYXBPYmplY3QoanNvbi5kYXRhLCBmdW5jdGlvbiAoYWNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2Ugc2hvdyB0aGUgYWNoaWV2ZW1lbnQgb25seSBpZiBpdCdzIGFjdGl2ZSBmb3IgdGhlIGN1cnJlbnQgZ2FtZSAocHJvZHVjdClcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5maWx0ZXJBY2hpZXZlbWVudEJ5UHJvZHVjdChhY2gsIF90aGlzLnNldHRpbmdzLmdhbWVJZCwgX3RoaXMpO1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKF90aGlzLnNldHRpbmdzLmFjaGlldmVtZW50cy5saXN0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIF90aGlzLmxvZygnZmFpbGVkIHRvIGNoZWNrRm9yQXZhaWxhYmxlQWNoaWV2ZW1lbnRzICcgKyByZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKGpzb25Gb3JBbGwuZGF0YSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIF90aGlzLmxvZygnZmFpbGVkIHRvIGNoZWNrRm9yQXZhaWxhYmxlQWNoaWV2ZW1lbnRzICcgKyByZXNwb25zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLyBmaWx0ZXIgYWNoaWV2ZW1lbnQgaWYgZW5hYmxlZCBmb3IgY3VycmVudCBnYW1lXHJcbiAgLy8gd2Ugc2hvdyB0aGUgYWNoaWV2ZW1lbnQgb25seSBpZiBpdCdzIGFjdGl2ZSBmb3IgdGhlIGN1cnJlbnQgZ2FtZSAocHJvZHVjdClcclxuICAvLyBfdGhpcy5zZXR0aW5ncy5nYW1lSWQ9XCI1NVwiXHJcbiAgLy8gYWNoLnByb2R1Y3RzID0gW3tuYW1lOiBcIkVkZGllIER1bmRlZVwiLCBwcm9kdWN0R3JvdXBzOiBbXCJnYW1lYXJ0XCJdLCBwcm9kdWN0UmVmSWQ6IFwiNTVcIiwgcHJvZHVjdFR5cGU6IFwic2xvdFwifV1cclxuICB0aGlzLmZpbHRlckFjaGlldmVtZW50QnlQcm9kdWN0ID0gZnVuY3Rpb24gKGFjaCwgZ2FtZWlkLCBzZWxmKSB7XHJcbiAgICAvLyBubyBwcm9kdWN0IGZpbHRlcmluZyBlbmFibGVkIGluIGJhY2tvZmZpY2VcclxuICAgIGlmIChhY2gucHJvZHVjdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHNlbGYuc2V0dGluZ3MuYWNoaWV2ZW1lbnRzLmxpc3QucHVzaChhY2gpO1xyXG4gICAgICAvLyBjaGVjayBpZiBhY2hpZXZlbWVudCBlbmFibGVkIGZvciB0aGlzIGN1cnJlbnQgZ2FtZSAocHJvZHVjdClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZvciAodmFyIHByb2Qgb2YgYWNoLnByb2R1Y3RzKSB7XHJcbiAgICAgICAgaWYgKHByb2QucHJvZHVjdFJlZklkID09PSBzZWxmLnNldHRpbmdzLmdhbWVJZCkge1xyXG4gICAgICAgICAgLy8gYWRkIHRvIGFjaGlldmVtZW50cyBsaXN0XHJcbiAgICAgICAgICBzZWxmLnNldHRpbmdzLmFjaGlldmVtZW50cy5saXN0LnB1c2goYWNoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgZ2V0QWNoaWV2ZW1lbnRzQWpheCA9IG5ldyBjTGFicy5BamF4KCk7XHJcbiAgdGhpcy5nZXRBY2hpZXZlbWVudCA9IGZ1bmN0aW9uIChhY2hpZXZlbWVudElkLCBjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBnZXRBY2hpZXZlbWVudHNBamF4LmFib3J0KCkuZ2V0RGF0YSh7XHJcbiAgICAgIHVybDogX3RoaXMuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyBfdGhpcy5zZXR0aW5ncy51cmkuYWNoaWV2ZW1lbnQucmVwbGFjZSgnOnNwYWNlJywgX3RoaXMuc2V0dGluZ3Muc3BhY2VOYW1lKS5yZXBsYWNlKCc6aWQnLCBhY2hpZXZlbWVudElkKSArICc/X2xhbmc9JyArIF90aGlzLnNldHRpbmdzLmxhbmd1YWdlICsgJyZfdW9tS2V5PScgKyBfdGhpcy5zZXR0aW5ncy5jdXJyZW5jeSxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XHJcbiAgICAgICAgdmFyIGpzb24gPSBudWxsO1xyXG4gICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgIGNhbGxiYWNrKGpzb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICBjYWxsYmFjayhudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciBnZXRSZXdhcmRBamF4ID0gbmV3IGNMYWJzLkFqYXgoKTtcclxuICB0aGlzLmdldFJld2FyZCA9IGZ1bmN0aW9uIChyZXdhcmRJZCwgY2FsbGJhY2spIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgZ2V0UmV3YXJkQWpheC5hYm9ydCgpLmdldERhdGEoe1xyXG4gICAgICB1cmw6IF90aGlzLnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgX3RoaXMuc2V0dGluZ3MudXJpLm1lbWJlclJld2FyZC5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLm1lbWJlcklkKS5yZXBsYWNlKCc6YXdhcmRJZCcsIHJld2FyZElkKSxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XHJcbiAgICAgICAgdmFyIGpzb24gPSBudWxsO1xyXG4gICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgIGNhbGxiYWNrKGpzb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICBjYWxsYmFjayhudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciBnZXRNZXNzYWdlQWpheCA9IG5ldyBjTGFicy5BamF4KCk7XHJcbiAgdGhpcy5nZXRNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2VJZCwgY2FsbGJhY2spIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgZ2V0TWVzc2FnZUFqYXguYWJvcnQoKS5nZXREYXRhKHtcclxuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIF90aGlzLnNldHRpbmdzLnVyaS5tZXNzYWdlQnlJZC5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLm1lbWJlcklkKS5yZXBsYWNlKCc6bWVzc2FnZUlkJywgbWVzc2FnZUlkKSxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XHJcbiAgICAgICAgdmFyIGpzb24gPSBudWxsO1xyXG4gICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgIGNhbGxiYWNrKGpzb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICBjYWxsYmFjayhudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciBjbGFpbVJld2FyZEFqYXggPSBuZXcgY0xhYnMuQWpheCgpO1xyXG4gIHRoaXMuY2xhaW1SZXdhcmQgPSBmdW5jdGlvbiAocmV3YXJkSWQsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGNsYWltUmV3YXJkQWpheC5hYm9ydCgpLmdldERhdGEoe1xyXG4gICAgICB1cmw6IF90aGlzLnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgX3RoaXMuc2V0dGluZ3MudXJpLm1lbWJlclJld2FyZENsYWltLnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLnNwYWNlTmFtZSkucmVwbGFjZSgnOmlkJywgX3RoaXMuc2V0dGluZ3MubWVtYmVySWQpLnJlcGxhY2UoJzphd2FyZElkJywgcmV3YXJkSWQpLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ1gtQVBJLUtFWSc6IF90aGlzLnNldHRpbmdzLmFwaUtleVxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XHJcbiAgICAgICAgdmFyIGpzb24gPSBudWxsO1xyXG4gICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgIGNhbGxiYWNrKGpzb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICBjYWxsYmFjayhudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciBjaGVja0Zvck1lbWJlckFjaGlldmVtZW50c0FqYXggPSBuZXcgY0xhYnMuQWpheCgpO1xyXG4gIHRoaXMuY2hlY2tGb3JNZW1iZXJBY2hpZXZlbWVudHNJc3N1ZWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgdXJsID0gX3RoaXMuc2V0dGluZ3MudXJpLmFjaGlldmVtZW50c0lzc3VlZC5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLm1lbWJlcklkKTtcclxuXHJcbiAgICBjaGVja0Zvck1lbWJlckFjaGlldmVtZW50c0FqYXguYWJvcnQoKS5nZXREYXRhKHtcclxuICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgIHVybDogX3RoaXMuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyB1cmwsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnWC1BUEktS0VZJzogX3RoaXMuc2V0dGluZ3MuYXBpS2V5XHJcbiAgICAgIH0sXHJcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XHJcbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuICAgICAgICAgIHZhciBpZExpc3QgPSBbXTtcclxuXHJcbiAgICAgICAgICBpZiAodHlwZW9mIGpzb24uYWdncmVnYXRpb25zICE9PSAndW5kZWZpbmVkJyAmJiBqc29uLmFnZ3JlZ2F0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5tYXBPYmplY3QoanNvbi5hZ2dyZWdhdGlvbnNbMF0uaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgaWRMaXN0LnB1c2goaXRlbS52YWx1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKGlkTGlzdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIF90aGlzLmxvZygnZmFpbGVkIHRvIGNoZWNrRm9yTWVtYmVyQWNoaWV2ZW1lbnRzSXNzdWVkICcgKyByZXNwb25zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgY2hlY2tGb3JNZW1iZXJBY2hpZXZlbWVudHNQcm9ncmVzc2lvbkFqYXggPSBuZXcgY0xhYnMuQWpheCgpO1xyXG4gIHRoaXMuY2hlY2tGb3JNZW1iZXJBY2hpZXZlbWVudHNQcm9ncmVzc2lvbiA9IGZ1bmN0aW9uIChpZExpc3QsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIHVybCA9IF90aGlzLnNldHRpbmdzLnVyaS5hY2hpZXZlbWVudHNQcm9ncmVzc2lvbi5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLm1lbWJlcklkKTtcclxuXHJcbiAgICBjaGVja0Zvck1lbWJlckFjaGlldmVtZW50c1Byb2dyZXNzaW9uQWpheC5hYm9ydCgpLmdldERhdGEoe1xyXG4gICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIHVybCArIChpZExpc3QubGVuZ3RoID4gMCA/ICgnP2lkPScgKyBpZExpc3Quam9pbignLCcpKSA6ICcnKSxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcclxuICAgICAgfSxcclxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcclxuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKGpzb24uZGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIF90aGlzLmxvZygnZmFpbGVkIHRvIGNoZWNrRm9yTWVtYmVyQWNoaWV2ZW1lbnRzUHJvZ3Jlc3Npb24gJyArIHJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciBjaGVja0ZvckF2YWlsYWJsZVJld2FyZHNBamF4ID0gbmV3IGNMYWJzLkFqYXgoKTtcclxuICB0aGlzLmNoZWNrRm9yQXZhaWxhYmxlUmV3YXJkcyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciB1cmwgPSBfdGhpcy5zZXR0aW5ncy51cmkubWVzc2FnZXMucmVwbGFjZSgnOnNwYWNlJywgX3RoaXMuc2V0dGluZ3Muc3BhY2VOYW1lKS5yZXBsYWNlKCc6aWQnLCBfdGhpcy5zZXR0aW5ncy5tZW1iZXJJZCk7XHJcblxyXG4gICAgLy8gY2xhaW1lZCByZXdhcmRzXHJcbiAgICBjaGVja0ZvckF2YWlsYWJsZVJld2FyZHNBamF4LmFib3J0KCkuZ2V0RGF0YSh7XHJcbiAgICAgIHR5cGU6ICdHRVQnLFxyXG4gICAgICB1cmw6IF90aGlzLnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgdXJsICsgJz9fc29ydEJ5RmllbGRzPWNyZWF0ZWQ6ZGVzYyZtZXNzYWdlVHlwZT1SZXdhcmQmcHJpemUuY2xhaW1lZD10cnVlJl9oYXNWYWx1ZXNGb3I9cHJpemUmX2xpbWl0PTEwMCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnWC1BUEktS0VZJzogX3RoaXMuc2V0dGluZ3MuYXBpS2V5XHJcbiAgICAgIH0sXHJcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XHJcbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgdmFyIGpzb25Gb3JBbGwgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5yZXdhcmRzLnJld2FyZHMgPSBbXTtcclxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLnJld2FyZHMuYXZhaWxhYmxlUmV3YXJkcyA9IFtdO1xyXG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MucmV3YXJkcy5leHBpcmVkUmV3YXJkcyA9IFtdO1xyXG5cclxuICAgICAgICAgIHdpbmRvdy5tYXBPYmplY3QoanNvbkZvckFsbC5kYXRhLCBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgICAgICB2YXIgZXhwaXJlZCA9ICh0eXBlb2YgbWVzc2FnZS5leHBpcnkgPT09ICd1bmRlZmluZWQnKSA/IGZhbHNlIDogKG1vbWVudChtZXNzYWdlLmV4cGlyeSkuZGlmZihtb21lbnQoKSkgPCAwKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghZXhwaXJlZCkge1xyXG4gICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLnJld2FyZHMucmV3YXJkcy5wdXNoKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvLyBub3QtY2xhaW1lZCByZXdhcmRzXHJcbiAgICAgICAgICBjaGVja0ZvckF2YWlsYWJsZVJld2FyZHNBamF4LmFib3J0KCkuZ2V0RGF0YSh7XHJcbiAgICAgICAgICAgIHR5cGU6ICdHRVQnLFxyXG4gICAgICAgICAgICB1cmw6IF90aGlzLnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgdXJsICsgJz9fc29ydEJ5RmllbGRzPWNyZWF0ZWQ6ZGVzYyZtZXNzYWdlVHlwZT1SZXdhcmQmcHJpemUuY2xhaW1lZD1mYWxzZSZfaGFzVmFsdWVzRm9yPXByaXplJl9saW1pdD0xMDAnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgJ1gtQVBJLUtFWSc6IF90aGlzLnNldHRpbmdzLmFwaUtleVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UsIGRhdGFPYmosIHhocikge1xyXG4gICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBqc29uRm9yQWxsID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgd2luZG93Lm1hcE9iamVjdChqc29uRm9yQWxsLmRhdGEsIGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhciBleHBpcmVkID0gKHR5cGVvZiBtZXNzYWdlLmV4cGlyeSA9PT0gJ3VuZGVmaW5lZCcpID8gZmFsc2UgOiAobW9tZW50KG1lc3NhZ2UuZXhwaXJ5KS5kaWZmKG1vbWVudCgpKSA8IDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgaWYgKCFleHBpcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MucmV3YXJkcy5hdmFpbGFibGVSZXdhcmRzLnB1c2gobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGV4cGlyZWQgcmV3YXJkc1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHV0Y0RhdGUgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyAnLScgKyBmb3JtYXROdW1iZXJMZWFkaW5nWmVyb3MoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpLCAyKSArICctJyArIGZvcm1hdE51bWJlckxlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0RhdGUoKSwgMikgKyAnVCcgKyBmb3JtYXROdW1iZXJMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCAyKSArICc6JyArIGZvcm1hdE51bWJlckxlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgMikgKyAnOjAwJztcclxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLmdsb2JhbEFqYXguYWJvcnQoKS5nZXREYXRhKHtcclxuICAgICAgICAgICAgICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICAgIHVybDogX3RoaXMuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyB1cmwgKyAnP19zb3J0QnlGaWVsZHM9Y3JlYXRlZDpkZXNjJl9saW1pdD0xMDAmbWVzc2FnZVR5cGU9UmV3YXJkJl9oYXNWYWx1ZXNGb3I9ZXhwaXJ5JmV4cGlyeTw9PScgKyB1dGNEYXRlLFxyXG4gICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ1gtQVBJLUtFWSc6IF90aGlzLnNldHRpbmdzLmFwaUtleVxyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UsIGRhdGFPYmosIHhocikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciBqc29uRm9yQWxsID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1hcE9iamVjdChqc29uRm9yQWxsLmRhdGEsIGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLnJld2FyZHMuZXhwaXJlZFJld2FyZHMucHVzaChtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKF90aGlzLnNldHRpbmdzLnJld2FyZHMucmV3YXJkcywgX3RoaXMuc2V0dGluZ3MucmV3YXJkcy5hdmFpbGFibGVSZXdhcmRzLCBfdGhpcy5zZXR0aW5ncy5yZXdhcmRzLmV4cGlyZWRSZXdhcmRzKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nKCdmYWlsZWQgdG8gY2hlY2tGb3JBdmFpbGFibGVSZXdhcmRzIGV4cGlyZWQgJyArIHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2coJ2ZhaWxlZCB0byBjaGVja0ZvckF2YWlsYWJsZVJld2FyZHMgbm90LWNsYWltZWQgJyArIHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBfdGhpcy5sb2coJ2ZhaWxlZCB0byBjaGVja0ZvckF2YWlsYWJsZVJld2FyZHMgY2xhaW1lZCAnICsgcmVzcG9uc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGNoZWNrRm9yQXZhaWxhYmxlTWVzc2FnZXNBamF4ID0gbmV3IGNMYWJzLkFqYXgoKTtcclxuICB0aGlzLmNoZWNrRm9yQXZhaWxhYmxlTWVzc2FnZXMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgdXJsID0gX3RoaXMuc2V0dGluZ3MudXJpLm1lc3NhZ2VzLnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLnNwYWNlTmFtZSkucmVwbGFjZSgnOmlkJywgX3RoaXMuc2V0dGluZ3MubWVtYmVySWQpO1xyXG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldE1vbnRoKCkgLSAxKTtcclxuXHJcbiAgICB2YXIgY3JlYXRlZERhdGVGaWx0ZXIgPSBkYXRlLmdldEZ1bGxZZWFyKCkgKyAnLScgKyBmb3JtYXROdW1iZXJMZWFkaW5nWmVyb3MoKGRhdGUuZ2V0TW9udGgoKSArIDEpLCAyKSArICctJyArIGZvcm1hdE51bWJlckxlYWRpbmdaZXJvcyhkYXRlLmdldERhdGUoKSwgMik7XHJcblxyXG4gICAgY2hlY2tGb3JBdmFpbGFibGVNZXNzYWdlc0FqYXguYWJvcnQoKS5nZXREYXRhKHtcclxuICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgIHVybDogX3RoaXMuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyB1cmwgKyAnP19zb3J0QnlGaWVsZHM9Y3JlYXRlZDpkZXNjJl9oYXNOb1ZhbHVlc0Zvcj1wcml6ZSZfbGltaXQ9MTAwJmNyZWF0ZWQ+PT0nICsgY3JlYXRlZERhdGVGaWx0ZXIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnWC1BUEktS0VZJzogX3RoaXMuc2V0dGluZ3MuYXBpS2V5XHJcbiAgICAgIH0sXHJcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XHJcbiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgdmFyIGpzb25Gb3JBbGwgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5tZXNzYWdlcy5tZXNzYWdlcyA9IFtdO1xyXG5cclxuICAgICAgICAgIHdpbmRvdy5tYXBPYmplY3QoanNvbkZvckFsbC5kYXRhLCBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5tZXNzYWdlcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soX3RoaXMuc2V0dGluZ3MubWVzc2FnZXMubWVzc2FnZXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBfdGhpcy5sb2coJ2ZhaWxlZCB0byBjaGVja0ZvckF2YWlsYWJsZU1lc3NhZ2VzICcgKyByZXNwb25zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgb3B0SW5NZW1iZXJBamF4ID0gbmV3IGNMYWJzLkFqYXgoKTtcclxuICB0aGlzLm9wdEluTWVtYmVyVG9BY3RpdmVDb21wZXRpdGlvbiA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciB1cmwgPSBfdGhpcy5zZXR0aW5ncy51cmkubWVtYmVyQ29tcGV0aXRpb25PcHRJbi5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLm1lbWJlcklkKS5yZXBsYWNlKCc6Y29tcGV0aXRpb25JZCcsIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uSWQpO1xyXG5cclxuICAgIG9wdEluTWVtYmVyQWpheC5hYm9ydCgpLmdldERhdGEoe1xyXG4gICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIHVybCxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcclxuICAgICAgfSxcclxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcclxuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBfdGhpcy5sb2coJ2ZhaWxlZCB0byBvcHRJbk1lbWJlclRvQWN0aXZlQ29tcGV0aXRpb24gJyArIHJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciByZXZhbGlkYXRpb25Db3VudCA9IDA7XHJcbiAgdGhpcy5yZXZhbGlkYXRlSWZTdWNjZXNzZnVsbE9wdEluID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLmxvYWRBY3RpdmVDb21wZXRpdGlvbihmdW5jdGlvbiAoY29tcGV0aXRpb25Kc29uKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgY29tcGV0aXRpb25Kc29uLmRhdGEub3B0aW4gPT09ICdib29sZWFuJyAmJiAhY29tcGV0aXRpb25Kc29uLmRhdGEub3B0aW4pIHtcclxuICAgICAgICByZXZhbGlkYXRpb25Db3VudCsrO1xyXG5cclxuICAgICAgICBpZiAocmV2YWxpZGF0aW9uQ291bnQgPCA1KSB7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMucmV2YWxpZGF0ZUlmU3VjY2Vzc2Z1bGxPcHRJbihjYWxsYmFjayk7XHJcbiAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXZhbGlkYXRpb25Db3VudCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb21wZXRpdGlvbkpzb24uZGF0YS5vcHRpbiA9PT0gJ2Jvb2xlYW4nICYmIGNvbXBldGl0aW9uSnNvbi5kYXRhLm9wdGluKSB7XHJcbiAgICAgICAgY2FsbGJhY2soY29tcGV0aXRpb25Kc29uKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5sZWFkZXJib2FyZERhdGFSZWZyZXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQucmVmcmVzaExiRGF0YUludGVydmFsKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZWZyZXNoTGJEYXRhSW50ZXJ2YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChcclxuICAgICAgKF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uICE9PSBudWxsICYmIHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbi5vcHRpblJlcXVpcmVkID09PSAnYm9vbGVhbicgJiYgIV90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uLm9wdGluUmVxdWlyZWQpIHx8XHJcbiAgICAgICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW4gPT09ICdib29sZWFuJyAmJiBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbi5vcHRpbilcclxuICAgICkge1xyXG4gICAgICB2YXIgY291bnQgPSAoX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuYWN0aXZlKSA/IDAgOiBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5mdWxsTGVhZGVyYm9hcmRTaXplO1xyXG4gICAgICBfdGhpcy5nZXRMZWFkZXJib2FyZERhdGEoY291bnQsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnNldHRpbmdzLmFjdGl2ZSkgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQubG9hZFNjb3JlQm9hcmQoKTtcclxuICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5zZXR0aW5ncy5hY3RpdmUpIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQubG9hZExlYWRlcmJvYXJkKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hMYkRhdGFJbnRlcnZhbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBfdGhpcy5sZWFkZXJib2FyZERhdGFSZWZyZXNoKCk7XHJcbiAgICB9LCBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZWZyZXNoSW50ZXJ2YWxNaWxsaXMpO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuYWN0aXZlQ29tcGV0aXRpb25EYXRhUmVmcmVzaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24ucmVmcmVzaEludGVydmFsKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5yZWZyZXNoSW50ZXJ2YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIF90aGlzLmNoZWNrRm9yQXZhaWxhYmxlQ29tcGV0aXRpb25zKGZ1bmN0aW9uICgpIHtcclxuICAgICAgX3RoaXMucHJlcGFyZUFjdGl2ZUNvbXBldGl0aW9uKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY291bnQgPSAoX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuYWN0aXZlKSA/IDAgOiBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5mdWxsTGVhZGVyYm9hcmRTaXplO1xyXG5cclxuICAgICAgICAvLyBjbGVhciB0byBub3QgY2xhc2ggd2l0aCBMQiByZWZyZXNoIHRoYXQgY291bGQgaGFwcGVuIGF0IHNhbWUgdGltZVxyXG4gICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZWZyZXNoSW50ZXJ2YWwpIHtcclxuICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZWZyZXNoSW50ZXJ2YWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnNldHRpbmdzLmFjdGl2ZSB8fCBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLmFjdGl2ZSkge1xyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAoX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24gIT09IG51bGwgJiYgdHlwZW9mIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uLm9wdGluUmVxdWlyZWQgPT09ICdib29sZWFuJyAmJiAhX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW5SZXF1aXJlZCkgfHxcclxuICAgICAgICAgICAgKF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uICE9PSBudWxsICYmIHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbi5vcHRpbiA9PT0gJ2Jvb2xlYW4nICYmIF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uLm9wdGluKVxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmdldExlYWRlcmJvYXJkRGF0YShjb3VudCwgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuYWN0aXZlKSBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5sb2FkU2NvcmVCb2FyZCgpO1xyXG4gICAgICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLmFjdGl2ZSkgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5sb2FkTGVhZGVyYm9hcmQoKTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gcmUtc3RhcnQgbGVhZGVyYm9hcmQgcmVmcmVzaFxyXG4gICAgICAgICAgICAgIF90aGlzLmxlYWRlcmJvYXJkRGF0YVJlZnJlc2goKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnNldHRpbmdzLmFjdGl2ZSkgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQubG9hZFNjb3JlQm9hcmQoKTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuc2V0dGluZ3MuYWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgX3RoaXMuZ2V0TGVhZGVyYm9hcmREYXRhKGNvdW50LCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5sb2FkTGVhZGVyYm9hcmQoKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gcmVzdGFydCBsZWFkZXJib2FyZCByZWZyZXNoXHJcbiAgICAgICAgICAgIF90aGlzLmxlYWRlcmJvYXJkRGF0YVJlZnJlc2goKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5hY3RpdmUpIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLmxvYWRTY29yZUJvYXJkKCk7XHJcblxyXG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5yZWZyZXNoSW50ZXJ2YWwgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgX3RoaXMuYWN0aXZlQ29tcGV0aXRpb25EYXRhUmVmcmVzaCgpO1xyXG4gICAgfSwgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24ucmVmcmVzaEludGVydmFsTWlsbGlzKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmRlYWN0aXZhdGVDb21wZXRpdGlvbnNBbmRMZWFkZXJib2FyZHMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hJbnRlcnZhbCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQucmVmcmVzaEludGVydmFsKTtcclxuICAgIH1cclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5jbGVhckFsbCgpO1xyXG4gICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5jbGVhckFsbCgpO1xyXG5cclxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgY2FsbGJhY2soKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLnN0b3BBY3Rpdml0eSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQucmVmcmVzaEludGVydmFsKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZWZyZXNoSW50ZXJ2YWwpO1xyXG4gICAgICBjbGVhckludGVydmFsKF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hJbnRlcnZhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hMYkRhdGFJbnRlcnZhbCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQucmVmcmVzaExiRGF0YUludGVydmFsKTtcclxuICAgICAgY2xlYXJJbnRlcnZhbChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZWZyZXNoTGJEYXRhSW50ZXJ2YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy51cGRhdGVJbnRlcnZhbCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MudXBkYXRlSW50ZXJ2YWwpO1xyXG4gICAgICBjbGVhckludGVydmFsKF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hJbnRlcnZhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBjYWxsYmFjaygpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMucmVzdGFydEFjdGl2aXR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLmFjdGl2ZUNvbXBldGl0aW9uRGF0YVJlZnJlc2goKTtcclxuICAgIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnVwZGF0ZVNjb3JlQm9hcmQoKTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5sb2FkTWVtYmVyID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLnNldHRpbmdzLmdsb2JhbEFqYXguYWJvcnQoKS5nZXREYXRhKHtcclxuICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgIHVybDogX3RoaXMuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyBfdGhpcy5zZXR0aW5ncy51cmkubWVtYmVycy5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLm1lbWJlcklkKSxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcclxuICAgICAgfSxcclxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqLCB4aHIpIHtcclxuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1lbWJlciA9IGpzb24uZGF0YTtcclxuXHJcbiAgICAgICAgICBjYWxsYmFjayhqc29uLmRhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBfdGhpcy5sb2coJ2ZhaWxlZCB0byBsb2FkTWVtYmVyICcgKyByZXNwb25zZSk7XHJcbiAgICAgICAgICAvLyBpZiB1c2VyIG5vdCBmb3VuZCwgd2UgY2FuIHJldHJ5IGxhdGVyIHRvIHNlZSBpZiBpdCB3YXMgaW5zZXJ0ZWQuXHJcbiAgICAgICAgICAvLyBub3JtYWxseSB0aGUgc3BpbiBldmVudHMgd2lsbCBhdXRvbWF0aWNhbGx5IGluc2VydCB0aGUgdXNlclxyXG4gICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDQwNCkge1xyXG4gICAgICAgICAgICAvLyByZXRyeSBpbiA1IHNlY3NcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgX3RoaXMuaW5pdCgpO1xyXG4gICAgICAgICAgICB9LCA1MDAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHRoaXMubG9hZFdpZGdldFRyYW5zbGF0aW9ucyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLnVyaS50cmFuc2xhdGlvblBhdGggPT09ICdzdHJpbmcnICYmIF90aGlzLnNldHRpbmdzLnVyaS50cmFuc2xhdGlvblBhdGgubGVuZ3RoID4gMCAmJiBfdGhpcy5zZXR0aW5ncy5sb2FkVHJhbnNsYXRpb25zKSB7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLmdsb2JhbEFqYXguYWJvcnQoKS5nZXREYXRhKHtcclxuICAgICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgICAvLyB0cmFuc2xhdGlvbiBwYXRoIG11c3QgYmUgYWJzb2x1dGUgVVJMXHJcbiAgICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy51cmkudHJhbnNsYXRpb25QYXRoLnJlcGxhY2UoJzpsYW5ndWFnZScsIF90aGlzLnNldHRpbmdzLmxhbmd1YWdlKS50b1N0cmluZygpLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5hcGlLZXlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iaiwgeGhyKSB7XHJcbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XHJcblxyXG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy50cmFuc2xhdGlvbiA9IG1lcmdlT2JqZWN0cyhfdGhpcy5zZXR0aW5ncy50cmFuc2xhdGlvbiwganNvbik7XHJcblxyXG4gICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgX3RoaXMubG9nKCdubyB0cmFuc2xhdGlvbiBmb3VuZCAnICsgcmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBhamF4T3B0aW9ucywgdGhyb3duRXJyb3IpIHtcclxuICAgICAgICAgIF90aGlzLmxvZygnVHJhbnNsYXRpb24gRmlsZSBSZXF1ZXN0IEVycm9yJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5zdGFydHVwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5pbml0TGF5b3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgX3RoaXMuYWN0aXZlQ29tcGV0aXRpb25EYXRhUmVmcmVzaCgpO1xyXG5cclxuICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmVuYWJsZU5vdGlmaWNhdGlvbnMpIHtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5ub3RpZmljYXRpb25zLmluaXQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgX3RoaXMuY2xlYW51cCgpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIF9jbGVhbnVwSW5zdGFuY2U7XHJcbiAgdGhpcy5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoX2NsZWFudXBJbnN0YW5jZSkge1xyXG4gICAgICBjbGVhclRpbWVvdXQoX2NsZWFudXBJbnN0YW5jZSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2NsZWFudXBJbnN0YW5jZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnByZUxvYWRlclJlcnVuKCk7XHJcblxyXG4gICAgICBfdGhpcy5jbGVhbnVwKCk7XHJcbiAgICB9LCAzMDAwKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmxvYWRTdHlsZXNoZWV0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIGNyZWF0ZWRSZXNvdXJjZXMgPSBmYWxzZTtcclxuICAgIHZhciBhdmFpbGFibGVMaW5rcyA9IFtdO1xyXG5cclxuICAgIG9iamVjdEl0ZXJhdG9yKHF1ZXJ5KCdsaW5rJyksIGZ1bmN0aW9uIChsaW5rKSB7XHJcbiAgICAgIGlmIChsaW5rICE9PSBudWxsKSB7XHJcbiAgICAgICAgYXZhaWxhYmxlTGlua3MucHVzaChsaW5rLmhyZWYpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB3aW5kb3cubWFwT2JqZWN0KF90aGlzLnNldHRpbmdzLnJlc291cmNlcywgZnVuY3Rpb24gKHJlc291cmNlLCBrZXksIGNvdW50KSB7XHJcbiAgICAgIHZhciBleGlzdHMgPSBmYWxzZTtcclxuXHJcbiAgICAgIHdpbmRvdy5tYXBPYmplY3QoYXZhaWxhYmxlTGlua3MsIGZ1bmN0aW9uIChsaW5rKSB7XHJcbiAgICAgICAgaWYgKGxpbmsgPT09IHJlc291cmNlKSB7XHJcbiAgICAgICAgICBleGlzdHMgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoIWV4aXN0cykge1xyXG4gICAgICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xyXG4gICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKCdyZWwnLCAnc3R5bGVzaGVldCcpO1xyXG4gICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7XHJcbiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCByZXNvdXJjZSk7XHJcblxyXG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgbGluay5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIGxpbmsub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcclxuXHJcbiAgICAgICAgY3JlYXRlZFJlc291cmNlcyA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmICghY3JlYXRlZFJlc291cmNlcyAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgY2FsbGJhY2soKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLmNsaWNrZWRNaW5pU2NvcmVCb2FyZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgaWYgKCFfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5kcmFnZ2luZykge1xyXG4gICAgICBfdGhpcy5kZWFjdGl2YXRlQ29tcGV0aXRpb25zQW5kTGVhZGVyYm9hcmRzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5sZWFkZXJib2FyZERhdGEgPSBbXTtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmluaXRMYXlvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgX3RoaXMuYWN0aXZlQ29tcGV0aXRpb25EYXRhUmVmcmVzaCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfSwgMjAwKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogT3BlbiBtYWluIHdpZGdldCBhbmQgb3BlbiBzcGVjaWZpYyB0YWIgYW5kIGxvYWRzIHJlbGV2YW50IGFjdGlvblxyXG4gICAqIEBwYXJhbSB0YWIgU3RyaW5nXHJcbiAgICogQHBhcmFtIGFjdGlvbkNhbGxiYWNrIEZ1bmN0aW9uXHJcbiAgICovXHJcbiAgdGhpcy5vcGVuV2l0aFRhYkFuZEFjdGlvbiA9IGZ1bmN0aW9uICh0YWIsIGFjdGlvbkNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLmFjdGl2ZSkge1xyXG4gICAgICB2YXIgbG9hZFRhYiA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuc2V0dGluZ3MuY29udGFpbmVyLCB0YWIpO1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0Lm5hdmlnYXRpb25Td2l0Y2gobG9hZFRhYiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF90aGlzLmFjdGl2ZUNvbXBldGl0aW9uRGF0YVJlZnJlc2goKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb25DYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgYWN0aW9uQ2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIH0sIDIwMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBfdGhpcy5kZWFjdGl2YXRlQ29tcGV0aXRpb25zQW5kTGVhZGVyYm9hcmRzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmluaXRMYXlvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5uYXZpZ2F0aW9uU3dpdGNoKHF1ZXJ5KF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuc2V0dGluZ3MuY29udGFpbmVyLCB0YWIpLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmFjdGl2ZUNvbXBldGl0aW9uRGF0YVJlZnJlc2goKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICBhY3Rpb25DYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnNldHRpbmdzLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0sIDIwMCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciBsb2FkQ29tcGV0aXRpb25MaXN0QWpheCA9IG5ldyBjTGFicy5BamF4KCk7XHJcbiAgdGhpcy5ldmVudEhhbmRsZXJzID0gZnVuY3Rpb24gKGVsKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIC8vIG1pbmkgc2NvcmVib2FyZCBvcHQtaW4gYWN0aW9uXHJcbiAgICBpZiAoaGFzQ2xhc3MoZWwsICdjbC13aWRnZXQtbXMtb3B0aW4tYWN0aW9uJykgJiYgIWhhc0NsYXNzKGVsLCAnY2hlY2tpbmcnKSkge1xyXG4gICAgICBhZGRDbGFzcyhlbCwgJ2NoZWNraW5nJyk7XHJcblxyXG4gICAgICBfdGhpcy5vcHRJbk1lbWJlclRvQWN0aXZlQ29tcGV0aXRpb24oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF90aGlzLnJldmFsaWRhdGVJZlN1Y2Nlc3NmdWxsT3B0SW4oZnVuY3Rpb24gKGNvbXBldGl0aW9uSnNvbikge1xyXG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24gPSBjb21wZXRpdGlvbkpzb24uZGF0YTtcclxuXHJcbiAgICAgICAgICAvLyBfdGhpcy5nZXRMZWFkZXJib2FyZERhdGEoMSwgZnVuY3Rpb24oIGRhdGEgKXtcclxuICAgICAgICAgIC8vICBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5sb2FkU2NvcmVCb2FyZCggZGF0YSApO1xyXG4gICAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICAgICAgLy8gZXh0cmEgYWN0aW9uIHRvIGxvYWQgY29tcGV0aXRpb24gZGV0YWlscyBvbiBtaW5pIHNjb3JlYm9hcmQgb3B0LWluIC0gUHJvZHVjdCByZXF1ZXN0XHJcbiAgICAgICAgICBfdGhpcy5kZWFjdGl2YXRlQ29tcGV0aXRpb25zQW5kTGVhZGVyYm9hcmRzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQubGVhZGVyYm9hcmREYXRhID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuaW5pdExheW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgX3RoaXMuYWN0aXZlQ29tcGV0aXRpb25EYXRhUmVmcmVzaCgpO1xyXG5cclxuICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmxvYWRDb21wZXRpdGlvbkRldGFpbHMoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnNldHRpbmdzLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgcmVtb3ZlQ2xhc3MoZWwsICdjaGVja2luZycpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIExlYWRlcmJvYXJkIGRldGFpbHMgb3B0LWluIGFjdGlvblxyXG4gICAgfSBlbHNlIGlmIChoYXNDbGFzcyhlbCwgJ2NsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtb3B0aW4tYWN0aW9uJykgJiYgIWhhc0NsYXNzKGVsLCAnY2hlY2tpbmcnKSkge1xyXG4gICAgICBhZGRDbGFzcyhlbCwgJ2NoZWNraW5nJyk7XHJcblxyXG4gICAgICBfdGhpcy5vcHRJbk1lbWJlclRvQWN0aXZlQ29tcGV0aXRpb24oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF90aGlzLnJldmFsaWRhdGVJZlN1Y2Nlc3NmdWxsT3B0SW4oZnVuY3Rpb24gKGNvbXBldGl0aW9uSnNvbikge1xyXG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24gPSBjb21wZXRpdGlvbkpzb24uZGF0YTtcclxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuY29tcGV0aXRpb25EZXRhaWxzT3B0SW5CdXR0b25TdGF0ZSgpO1xyXG5cclxuICAgICAgICAgIHJlbW92ZUNsYXNzKGVsLCAnY2hlY2tpbmcnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBMZWFkZXJib2FyZCBkZXRhaWxzIG9wdC1pbiBhY3Rpb25cclxuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1sYi1vcHRpbi1hY3Rpb24nKSAmJiAhaGFzQ2xhc3MoZWwsICdjaGVja2luZycpKSB7XHJcbiAgICAgIGFkZENsYXNzKGVsLCAnY2hlY2tpbmcnKTtcclxuXHJcbiAgICAgIF90aGlzLm9wdEluTWVtYmVyVG9BY3RpdmVDb21wZXRpdGlvbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgX3RoaXMucmV2YWxpZGF0ZUlmU3VjY2Vzc2Z1bGxPcHRJbihmdW5jdGlvbiAoY29tcGV0aXRpb25Kc29uKSB7XHJcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbiA9IGNvbXBldGl0aW9uSnNvbi5kYXRhO1xyXG5cclxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQubG9hZENvbXBldGl0aW9uRGV0YWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICByZW1vdmVDbGFzcyhlbCwgJ2NoZWNraW5nJyk7XHJcbiAgICAgICAgICBlbC5wYXJlbnROb2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gY2xvc2UgbWluaSBzY29yZWJvYXJkIGluZm8gYXJlYVxyXG4gICAgfSBlbHNlIGlmIChoYXNDbGFzcyhlbCwgJ2NsLXdpZGdldC1tcy1pbmZvcm1hdGlvbi1jbG9zZScpICYmICFoYXNDbGFzcyhlbCwgJ2NoZWNraW5nJykpIHtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuY2xlYXJBbGwoKTtcclxuXHJcbiAgICAgIC8vIGNsb3NlIG5vdGlmaWNhdGlvbiB3aW5kb3dcclxuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC13aWRnZXQtbm90aWYtaW5mb3JtYXRpb24tY2xvc2UnKSAmJiAhaGFzQ2xhc3MoZWwsICdjaGVja2luZycpKSB7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLm5vdGlmaWNhdGlvbnMuaGlkZU5vdGlmaWNhdGlvbigpO1xyXG5cclxuICAgICAgLy8gY2xvc2UgbGVhZGVyYm9hcmQgd2luZG93XHJcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKGVsLCAnY2wtbWFpbi13aWRnZXQtbGItaGVhZGVyLWNsb3NlJykgfHwgaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1hY2gtaGVhZGVyLWNsb3NlJykgfHwgaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtaGVhZGVyLWNsb3NlJykgfHwgaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1pbmJveC1oZWFkZXItY2xvc2UnKSkge1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmhpZGUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnNldHRpbmdzLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgICBfdGhpcy5hY3RpdmVDb21wZXRpdGlvbkRhdGFSZWZyZXNoKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gbG9hZCBjb21wZXRpdGlvbiBkZXRhaWxzXHJcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKGVsLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1jb250ZW50LWxhYmVsJykpIHtcclxuICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09IG51bGwpIHtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmxvYWRDb21wZXRpdGlvbkRldGFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBsb2FkIGFjaGlldmVtZW50IGRldGFpbHNcclxuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1hY2gtbGlzdC1tb3JlJykpIHtcclxuICAgICAgX3RoaXMuZ2V0QWNoaWV2ZW1lbnQoZWwuZGF0YXNldC5pZCwgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmxvYWRBY2hpZXZlbWVudERldGFpbHMoZGF0YSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIGxlYWRlcmJvYXJkIGRldGFpbHMgYmFjayBidXR0b25cclxuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWJhY2stYnRuJykpIHtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5oaWRlQ29tcGV0aXRpb25EZXRhaWxzKCk7XHJcblxyXG4gICAgICAvLyBhY2hpZXZlbWVudHMgZGV0YWlscyBiYWNrIGJ1dHRvblxyXG4gICAgfSBlbHNlIGlmIChoYXNDbGFzcyhlbCwgJ2NsLW1haW4td2lkZ2V0LWFjaC1kZXRhaWxzLWJhY2stYnRuJykpIHtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5oaWRlQWNoaWV2ZW1lbnREZXRhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyByZXdhcmRzIGRldGFpbHMgYmFjayBidXR0b25cclxuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtZGV0YWlscy1iYWNrLWJ0bicpKSB7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuaGlkZVJld2FyZERldGFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIG1lc3NhZ2VzIGRldGFpbHMgYmFjayBidXR0b25cclxuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWJhY2stYnRuJykpIHtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5oaWRlTWVzc2FnZURldGFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIGxvYWQgcmV3YXJkcyBkZXRhaWxzXHJcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKGVsLCAnY2wtcmV3LWxpc3QtaXRlbScpIHx8IGNsb3Nlc3QoZWwsICcuY2wtcmV3LWxpc3QtaXRlbScpICE9PSBudWxsKSB7XHJcbiAgICAgIHZhciByZXdhcmRJZCA9IChoYXNDbGFzcyhlbCwgJ2NsLXJldy1saXN0LWl0ZW0nKSkgPyBlbC5kYXRhc2V0LnJld2FyZElkIDogY2xvc2VzdChlbCwgJy5jbC1yZXctbGlzdC1pdGVtJykuZGF0YXNldC5yZXdhcmRJZDtcclxuICAgICAgX3RoaXMuZ2V0UmV3YXJkKHJld2FyZElkLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQubG9hZFJld2FyZERldGFpbHMoZGF0YSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIGxvYWQgaW5ib3ggZGV0YWlsc1xyXG4gICAgfSBlbHNlIGlmIChoYXNDbGFzcyhlbCwgJ2NsLWluYm94LWxpc3QtaXRlbScpIHx8IGNsb3Nlc3QoZWwsICcuY2wtaW5ib3gtbGlzdC1pdGVtJykgIT09IG51bGwpIHtcclxuICAgICAgdmFyIG1lc3NhZ2VJZCA9IChoYXNDbGFzcyhlbCwgJ2NsLWluYm94LWxpc3QtaXRlbScpKSA/IGVsLmRhdGFzZXQucmV3YXJkSWQgOiBjbG9zZXN0KGVsLCAnLmNsLWluYm94LWxpc3QtaXRlbScpLmRhdGFzZXQuaWQ7XHJcbiAgICAgIF90aGlzLmdldE1lc3NhZ2UobWVzc2FnZUlkLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQubG9hZE1lc3NhZ2VEZXRhaWxzKGRhdGEsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBjbGFpbSByZXdhcmRcclxuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtY2xhaW0tYnRuJykpIHtcclxuICAgICAgX3RoaXMuY2xhaW1SZXdhcmQoZWwuZGF0YXNldC5pZCwgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBpZiAoZGF0YS5kYXRhLmNsYWltZWQpIHtcclxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQubG9hZFJld2FyZHMoKTtcclxuXHJcbiAgICAgICAgICBhZGRDbGFzcyhlbCwgJ2NsLWNsYWltZWQnKTtcclxuICAgICAgICAgIGVsLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLnRyYW5zbGF0aW9uLnJld2FyZHMuY2xhaW1lZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVtb3ZlQ2xhc3MoZWwsICdjbC1jbGFpbWVkJyk7XHJcbiAgICAgICAgICBlbC5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy50cmFuc2xhdGlvbi5yZXdhcmRzLmNsYWltO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBsb2FkIGFjaGlldmVtZW50IGRldGFpbHMgd2luZG93IGZyb20gbm90aWZpY2F0aW9uIHdpbmRvd1xyXG4gICAgfSBlbHNlIGlmIChoYXNDbGFzcyhlbCwgJ2NsLXdpZGdldC1ub3RpZi1pbmZvcm1hdGlvbi1kZXRhaWxzLXdyYXBwZXInKSB8fCBjbG9zZXN0KGVsLCAnLmNsLXdpZGdldC1ub3RpZi1pbmZvcm1hdGlvbi1kZXRhaWxzLXdyYXBwZXInKSAhPT0gbnVsbCkge1xyXG4gICAgICBfdGhpcy5vcGVuV2l0aFRhYkFuZEFjdGlvbignLmNsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24tYWNoLWljb24nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGlkID0gKGhhc0NsYXNzKGVsLCAnY2wtd2lkZ2V0LW5vdGlmLWluZm9ybWF0aW9uLWRldGFpbHMtd3JhcHBlcicpKSA/IGVsLmRhdGFzZXQuaWQgOiBjbG9zZXN0KGVsLCAnLmNsLXdpZGdldC1ub3RpZi1pbmZvcm1hdGlvbi1kZXRhaWxzLXdyYXBwZXInKS5kYXRhc2V0LmlkO1xyXG4gICAgICAgIF90aGlzLnNldHRpbmdzLm5vdGlmaWNhdGlvbnMuaGlkZU5vdGlmaWNhdGlvbigpO1xyXG4gICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuaGlkZUFjaGlldmVtZW50RGV0YWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBfdGhpcy5nZXRBY2hpZXZlbWVudChpZCwgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5sb2FkQWNoaWV2ZW1lbnREZXRhaWxzKGRhdGEpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gcHJpbWFyeSB3aWRnZXQgbmF2aWdhdGlvblxyXG4gICAgfSBlbHNlIGlmIChoYXNDbGFzcyhlbCwgJ2NsLW1haW4tbmF2aWdhdGlvbi1pdGVtJykpIHtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5uYXZpZ2F0aW9uU3dpdGNoKGVsKTtcclxuXHJcbiAgICAgIC8vIGNvbXBldGl0aW9uIGxpc3RcclxuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3MoZWwsICdjbC1tYWluLXdpZGdldC1sYi1oZWFkZXItbGlzdC1pY29uJykpIHtcclxuICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnJlZnJlc2hJbnRlcnZhbCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5yZWZyZXNoSW50ZXJ2YWwpO1xyXG4gICAgICB9XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQubG9hZENvbXBldGl0aW9uTGlzdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgX3RoaXMuYWN0aXZlQ29tcGV0aXRpb25EYXRhUmVmcmVzaCgpO1xyXG4gICAgICB9LCBsb2FkQ29tcGV0aXRpb25MaXN0QWpheCk7XHJcblxyXG4gICAgICAvLyBsb2FkIGNvbXBldGl0aW9uXHJcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKGVsLCAnY2wtdG91ci1saXN0LWl0ZW0nKSB8fCBjbG9zZXN0KGVsLCAnLmNsLXRvdXItbGlzdC1pdGVtJykgIT09IG51bGwpIHtcclxuICAgICAgdmFyIHRvdXJuYW1lbnRJZCA9IChoYXNDbGFzcyhlbCwgJ2NsLXRvdXItbGlzdC1pdGVtJykpID8gZWwuZGF0YXNldC5pZCA6IGNsb3Nlc3QoZWwsICcuY2wtdG91ci1saXN0LWl0ZW0nKS5kYXRhc2V0LmlkO1xyXG4gICAgICB2YXIgcHJlTG9hZGVyID0gX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5wcmVsb2FkZXIoKTtcclxuXHJcbiAgICAgIHByZUxvYWRlci5zaG93KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudHMuYWN0aXZlQ29tcGV0aXRpb25JZCA9IHRvdXJuYW1lbnRJZDtcclxuICAgICAgICBfdGhpcy5hY3RpdmVDb21wZXRpdGlvbkRhdGFSZWZyZXNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuaGlkZUNvbXBldGl0aW9uTGlzdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHByZUxvYWRlci5oaWRlKCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBoaWRlIGNvbXBldGl0aW9uIGxpc3Qgdmlld1xyXG4gICAgfSBlbHNlIGlmIChoYXNDbGFzcyhlbCwgJ2NsLW1haW4td2lkZ2V0LXRvdXJuYW1lbnRzLWJhY2stYnRuJykpIHtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5oaWRlQ29tcGV0aXRpb25MaXN0KCk7XHJcblxyXG4gICAgICAvLyBtaW5pIHNjb3JlYm9hcmQgYWN0aW9uIHRvIG9wZW4gcHJpbWFyeSB3aWRnZXRcclxuICAgIH0gZWxzZSBpZiAoKGhhc0NsYXNzKGVsLCAnY2wtd2lkZ2V0LW1zLWljb24td3JhcHBlcicpIHx8IGNsb3Nlc3QoZWwsICcuY2wtd2lkZ2V0LW1zLWljb24td3JhcHBlcicpICE9PSBudWxsKSB8fCAoaGFzQ2xhc3MoZWwsICdjbC13aWRnZXQtbXMtaW5mb3JtYXRpb24td3JhcHBlcicpIHx8IGNsb3Nlc3QoZWwsICcuY2wtd2lkZ2V0LW1zLWluZm9ybWF0aW9uLXdyYXBwZXInKSAhPT0gbnVsbCkpIHtcclxuICAgICAgX3RoaXMuY2xpY2tlZE1pbmlTY29yZUJvYXJkKCk7XHJcblxyXG4gICAgICAvLyBhY2NvcmRpb24gbmF2aWdhdGlvblxyXG4gICAgfSBlbHNlIGlmIChoYXNDbGFzcyhlbCwgJ2NsLWFjY29yZGlvbi1sYWJlbCcpKSB7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuYWNjb3JkaW9uTmF2aWdhdGlvbihlbCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5ldmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcclxuICAgICAgICBjYXNlIDI3OiAvLyBvbiBlc2NhcGVcclxuICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LnNldHRpbmdzLmFjdGl2ZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5tYWluV2lkZ2V0LmhpZGUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnNldHRpbmdzLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgICAgICAgICBfdGhpcy5hY3RpdmVDb21wZXRpdGlvbkRhdGFSZWZyZXNoKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChfdGhpcy5pc01vYmlsZSgpKSB7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgZWwgPSBldmVudC50YXJnZXQ7XHJcblxyXG4gICAgICAgIGlmICghX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuZHJhZ2dpbmcpIHtcclxuICAgICAgICAgIF90aGlzLmV2ZW50SGFuZGxlcnMoZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGVsID0gZXZlbnQudGFyZ2V0O1xyXG5cclxuICAgICAgICBfdGhpcy5ldmVudEhhbmRsZXJzKGVsKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5jbG9zZUV2ZXJ5dGhpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLmRlYWN0aXZhdGVDb21wZXRpdGlvbnNBbmRMZWFkZXJib2FyZHMoZnVuY3Rpb24gKCkge1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5sZWFkZXJib2FyZERhdGEgPSBbXTtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5pbml0TGF5b3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfdGhpcy5hY3RpdmVDb21wZXRpdGlvbkRhdGFSZWZyZXNoKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgfSwgMjAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuaGlkZSgpO1xyXG4gICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldC5zZXR0aW5ncy5wcmVMb2FkZXIucHJlTG9hZGVyQWN0aXZlID0gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5pc01vYmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBpc01vYmlsZVRhYmxldCgpO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgX3RoaXMubG9hZFN0eWxlc2hlZXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBfdGhpcy5sb2FkTWVtYmVyKGZ1bmN0aW9uIChtZW1iZXIpIHtcclxuICAgICAgICBfdGhpcy5sb2FkV2lkZ2V0VHJhbnNsYXRpb25zKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5ub3RpZmljYXRpb25zID0gbmV3IE5vdGlmaWNhdGlvbnMoKTtcclxuICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQgPSBuZXcgTWluaVNjb3JlQm9hcmQoe1xyXG4gICAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWFpbldpZGdldCA9IG5ldyBNYWluV2lkZ2V0KCk7XHJcblxyXG4gICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5ub3RpZmljYXRpb25zLnNldHRpbmdzLmxiV2lkZ2V0ID0gX3RoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1pbmlTY29yZUJvYXJkLnNldHRpbmdzLmxiV2lkZ2V0ID0gX3RoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuc2V0dGluZ3MubGJXaWRnZXQgPSBfdGhpcztcclxuXHJcbiAgICAgICAgICAgIF90aGlzLnN0YXJ0dXAoKTtcclxuICAgICAgICAgICAgX3RoaXMuZXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm1haW5XaWRnZXQuaGlkZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgX3RoaXMuZGVhY3RpdmF0ZUNvbXBldGl0aW9uc0FuZExlYWRlcmJvYXJkcyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5taW5pU2NvcmVCb2FyZC5zZXR0aW5ncy5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0dGluZ3MubWluaVNjb3JlQm9hcmQuc2V0dGluZ3MuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc3RhcnR1cCgpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBpZiAodGhpcy5zZXR0aW5ncy5hdXRvU3RhcnQpIHtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxufTtcclxuIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgaGFzQ2xhc3MgZnJvbSAnLi4vdXRpbHMvaGFzQ2xhc3MnO1xyXG5pbXBvcnQgcmVtb3ZlQ2xhc3MgZnJvbSAnLi4vdXRpbHMvcmVtb3ZlQ2xhc3MnO1xyXG5pbXBvcnQgb2JqZWN0SXRlcmF0b3IgZnJvbSAnLi4vdXRpbHMvb2JqZWN0SXRlcmF0b3InO1xyXG5pbXBvcnQgcXVlcnkgZnJvbSAnLi4vdXRpbHMvcXVlcnknO1xyXG5pbXBvcnQgY2xvc2VzdCBmcm9tICcuLi91dGlscy9jbG9zZXN0JztcclxuaW1wb3J0IGFkZENsYXNzIGZyb20gJy4uL3V0aWxzL2FkZENsYXNzJztcclxuaW1wb3J0IHJlbW92ZSBmcm9tICcuLi91dGlscy9yZW1vdmUnO1xyXG5pbXBvcnQgYXBwZW5kTmV4dCBmcm9tICcuLi91dGlscy9hcHBlbmROZXh0JztcclxuaW1wb3J0IHN0cmlwSHRtbCBmcm9tICcuLi91dGlscy9zdHJpcEh0bWwnO1xyXG5cclxuZXhwb3J0IGNvbnN0IE1haW5XaWRnZXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gIHRoaXMuc2V0dGluZ3MgPSB7XHJcbiAgICBsYldpZGdldDogbnVsbCxcclxuICAgIGNvbnRhaW5lcjogbnVsbCxcclxuICAgIG5hdmlnYXRpb246IG51bGwsXHJcbiAgICBzZWN0aW9uOiBudWxsLFxyXG4gICAgZGV0YWlsc0NvbnRhaW5lcjogbnVsbCxcclxuICAgIHRvdXJuYW1lbnRMaXN0Q29udGFpbmVyOiBudWxsLFxyXG4gICAgaGVhZGVyRGF0ZTogbnVsbCxcclxuICAgIHByZUxvYWRlcjoge1xyXG4gICAgICBwcmVMb2FkZXJBY3RpdmU6IGZhbHNlLFxyXG4gICAgICBwcmVMb2FkZXJsYXN0QXR0ZW1wdDogbnVsbCxcclxuICAgICAgcHJlbG9hZGVyQ2FsbGJhY2tSZWNvdmVyeTogZnVuY3Rpb24gKCkge1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgYWNoaWV2ZW1lbnQ6IHtcclxuICAgICAgY29udGFpbmVyOiBudWxsLFxyXG4gICAgICBkZXRhaWxzQ29udGFpbmVyOiBudWxsXHJcbiAgICB9LFxyXG4gICAgcmV3YXJkOiB7XHJcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcclxuICAgICAgZGV0YWlsc0NvbnRhaW5lcjogbnVsbFxyXG4gICAgfSxcclxuICAgIG1lc3NhZ2VzOiB7XHJcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcclxuICAgICAgZGV0YWlsc0NvbnRhaW5lcjogbnVsbFxyXG4gICAgfSxcclxuICAgIGxlYWRlcmJvYXJkOiB7XHJcbiAgICAgIGRlZmF1bHRFbXB0eUxpc3Q6IDIwLFxyXG4gICAgICB0b3BSZXN1bHRTaXplOiAzLFxyXG4gICAgICBoZWFkZXI6IG51bGwsXHJcbiAgICAgIGNvbnRhaW5lcjogbnVsbCxcclxuICAgICAgbGlzdDogbnVsbCxcclxuICAgICAgdG9wUmVzdWx0czogbnVsbCxcclxuICAgICAgdGltZXJJbnRlcnZhbDogbnVsbFxyXG4gICAgfSxcclxuICAgIHRvdXJuYW1lbnRzU2VjdGlvbjoge1xyXG4gICAgICBhY2NvcmRpb25MYXlvdXQ6IFt7XHJcbiAgICAgICAgbGFiZWw6ICdVcGNvbWluZyBUb3VybmFtZW50cycsXHJcbiAgICAgICAgdHlwZTogJ3JlYWR5Q29tcGV0aXRpb25zJyxcclxuICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICBzaG93VG9wUmVzdWx0czogMVxyXG4gICAgICB9LCB7XHJcbiAgICAgICAgbGFiZWw6ICdBY3RpdmUgVG91cm5hbWVudHMnLFxyXG4gICAgICAgIHR5cGU6ICdhY3RpdmVDb21wZXRpdGlvbnMnLFxyXG4gICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgc2hvd1RvcFJlc3VsdHM6IDFcclxuICAgICAgfSwge1xyXG4gICAgICAgIGxhYmVsOiAnRmluaXNoZWQgVG91cm5hbWVudHMnLFxyXG4gICAgICAgIHR5cGU6ICdmaW5pc2hlZENvbXBldGl0aW9ucycsXHJcbiAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgc2hvd1RvcFJlc3VsdHM6IDFcclxuICAgICAgfV1cclxuICAgIH0sXHJcbiAgICByZXdhcmRzU2VjdGlvbjoge1xyXG4gICAgICBhY2NvcmRpb25MYXlvdXQ6IFt7XHJcbiAgICAgICAgbGFiZWw6ICdBdmFpbGFibGUgUmV3YXJkcycsXHJcbiAgICAgICAgdHlwZTogJ2F2YWlsYWJsZVJld2FyZHMnLFxyXG4gICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgc2hvd1RvcFJlc3VsdHM6IDFcclxuICAgICAgfSwge1xyXG4gICAgICAgIGxhYmVsOiAnQ2xhaW1lZCBSZXdhcmRzJyxcclxuICAgICAgICB0eXBlOiAncmV3YXJkcycsXHJcbiAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgc2hvd1RvcFJlc3VsdHM6IDFcclxuICAgICAgfSwge1xyXG4gICAgICAgIGxhYmVsOiAnRXhwaXJlZCBSZXdhcmRzJyxcclxuICAgICAgICB0eXBlOiAnZXhwaXJlZFJld2FyZHMnLFxyXG4gICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgIHNob3dUb3BSZXN1bHRzOiAxXHJcbiAgICAgIH1dXHJcbiAgICB9LFxyXG4gICAgYWN0aXZlOiBmYWxzZSxcclxuICAgIG5hdmlnYXRpb25Td2l0Y2hMYXN0QXRlbXB0OiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcclxuICAgIG5hdmlnYXRpb25Td2l0Y2hJblByb2dyZXNzOiBmYWxzZVxyXG4gIH07XHJcblxyXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIGZvciAodmFyIG9wdCBpbiBvcHRpb25zKSB7XHJcbiAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KG9wdCkpIHtcclxuICAgICAgICB0aGlzLnNldHRpbmdzW29wdF0gPSBvcHRpb25zW29wdF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFjY29yZGlvbiBzdHlsZSBsYXlvdXRcclxuICAgKiAtIHBhcmFtZXRlcnM6XHJcbiAgICogICAgICAtIGxhYmVsOiBTdHJpbmcgXCJBdmFpbGFibGUgcmV3YXJkc1wiXHJcbiAgICogICAgICAtIHR5cGU6IFN0cmluZyBcImF2YWlsYWJsZS1yZXdhcmRzXCJcclxuICAgKiAgICAgIC0gc2hvd246IEJvb2xlYW4gdHJ1ZS9mYWxzZVxyXG4gICAqIEBwYXJhbSBkYXRhIEFycmF5XHJcbiAgICogQHBhcmFtIG9uTGF5b3V0IEZ1bmN0aW9uXHJcbiAgICovXHJcbiAgdGhpcy5hY2NvcmRpb25TdHlsZSA9IGZ1bmN0aW9uIChkYXRhLCBvbkxheW91dCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBhY2NvcmRpb25XcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgYWNjb3JkaW9uV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4tYWNjb3JkaW9uLWNvbnRhaW5lcicpO1xyXG5cclxuICAgIHdpbmRvdy5tYXBPYmplY3QoZGF0YSwgZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICAgIHZhciBhY2NvcmRpb25TZWN0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHZhciBhY2NvcmRpb25MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgdG9wU2hvd25FbnRyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgYWNjb3JkaW9uTGlzdENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgYWNjb3JkaW9uTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgICAgYWNjb3JkaW9uU2VjdGlvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjY29yZGlvbiAnICsgZW50cnkudHlwZSArICgodHlwZW9mIGVudHJ5LnNob3cgPT09ICdib29sZWFuJyAmJiBlbnRyeS5zaG93KSA/ICcgY2wtc2hvd24nIDogJycpKTtcclxuICAgICAgYWNjb3JkaW9uTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1hY2NvcmRpb24tbGFiZWwnKTtcclxuICAgICAgdG9wU2hvd25FbnRyeS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjY29yZGlvbi1lbnRyeScpO1xyXG4gICAgICBhY2NvcmRpb25MaXN0Q29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtYWNjb3JkaW9uLWxpc3QtY29udGFpbmVyJyk7XHJcbiAgICAgIGFjY29yZGlvbkxpc3Quc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1hY2NvcmRpb24tbGlzdCcpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5yZXdhcmRzW2VudHJ5LnR5cGVdICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGFjY29yZGlvbkxhYmVsLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnJld2FyZHNbZW50cnkudHlwZV07XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnRvdXJuYW1lbnRzW2VudHJ5LnR5cGVdICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGFjY29yZGlvbkxhYmVsLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnRvdXJuYW1lbnRzW2VudHJ5LnR5cGVdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFjY29yZGlvbkxhYmVsLmlubmVySFRNTCA9IGVudHJ5LmxhYmVsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodHlwZW9mIG9uTGF5b3V0ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgb25MYXlvdXQoYWNjb3JkaW9uU2VjdGlvbiwgYWNjb3JkaW9uTGlzdCwgdG9wU2hvd25FbnRyeSwgZW50cnkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhY2NvcmRpb25MaXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKGFjY29yZGlvbkxpc3QpO1xyXG5cclxuICAgICAgYWNjb3JkaW9uU2VjdGlvbi5hcHBlbmRDaGlsZChhY2NvcmRpb25MYWJlbCk7XHJcbiAgICAgIGFjY29yZGlvblNlY3Rpb24uYXBwZW5kQ2hpbGQodG9wU2hvd25FbnRyeSk7XHJcbiAgICAgIGFjY29yZGlvblNlY3Rpb24uYXBwZW5kQ2hpbGQoYWNjb3JkaW9uTGlzdENvbnRhaW5lcik7XHJcblxyXG4gICAgICBhY2NvcmRpb25XcmFwcGVyLmFwcGVuZENoaWxkKGFjY29yZGlvblNlY3Rpb24pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGFjY29yZGlvbldyYXBwZXI7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5hY2NvcmRpb25OYXZpZ2F0aW9uID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgIC8vIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgcGFyZW50RWwgPSBlbGVtZW50LnBhcmVudE5vZGU7XHJcblxyXG4gICAgaWYgKGhhc0NsYXNzKHBhcmVudEVsLCAnY2wtc2hvd24nKSkge1xyXG4gICAgICByZW1vdmVDbGFzcyhwYXJlbnRFbCwgJ2NsLXNob3duJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvYmplY3RJdGVyYXRvcihxdWVyeShjbG9zZXN0KHBhcmVudEVsLCAnLmNsLW1haW4tYWNjb3JkaW9uLWNvbnRhaW5lcicpLCAnLmNsLXNob3duJyksIGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICByZW1vdmVDbGFzcyhvYmosICdjbC1zaG93bicpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGFkZENsYXNzKHBhcmVudEVsLCAnY2wtc2hvd24nKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLmxheW91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGlubmVyV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgIHZhciBuYXZpZ2F0aW9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgbmF2aWdhdGlvbkl0ZW1zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgbmF2aWdhdGlvbkl0ZW1MQiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIG5hdmlnYXRpb25JdGVtTEJJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgbmF2aWdhdGlvbkl0ZW1BQ0ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBuYXZpZ2F0aW9uSXRlbUFDSEljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBuYXZpZ2F0aW9uSXRlbVJld2FyZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBuYXZpZ2F0aW9uSXRlbVJld2FyZHNJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgbmF2aWdhdGlvbkl0ZW1JbmJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIG5hdmlnYXRpb25JdGVtSW5ib3hJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgdmFyIG1haW5TZWN0aW9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgdmFyIHByZUxvYWRlckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHByZUxvYWRlckNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBwcmVMb2FkZXJCYXIxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgcHJlTG9hZGVyQmFyMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHByZUxvYWRlckJhcjMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICB2YXIgc2VjdGlvbkxCID0gX3RoaXMubGVhZGVyYm9hcmRBcmVhTGF5b3V0KCk7XHJcbiAgICB2YXIgc2VjdGlvbkFDSCA9IF90aGlzLmFjaGlldmVtZW50c0FyZWFMYXlvdXQoKTtcclxuICAgIHZhciBzZWN0aW9uUmV3YXJkcyA9IF90aGlzLnJld2FyZHNBcmVhTGF5b3V0KCk7XHJcbiAgICB2YXIgc2VjdGlvbkluYm94ID0gX3RoaXMuaW5ib3hBcmVhTGF5b3V0KCk7XHJcblxyXG4gICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXdyYXBwZXInKTtcclxuICAgIGlubmVyV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWlubmVyLXdyYXBwZXInKTtcclxuXHJcbiAgICBuYXZpZ2F0aW9uQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbmF2aWdhdGlvbi1jb250YWluZXInKTtcclxuICAgIG5hdmlnYXRpb25JdGVtcy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24taXRlbXMnKTtcclxuICAgIG5hdmlnYXRpb25JdGVtTEIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWxiIGNsLWFjdGl2ZS1uYXYnKTtcclxuICAgIG5hdmlnYXRpb25JdGVtTEJJY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbmF2aWdhdGlvbi1sYi1pY29uIGNsLW1haW4tbmF2aWdhdGlvbi1pdGVtJyk7XHJcbiAgICBuYXZpZ2F0aW9uSXRlbUFDSC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24tYWNoJyk7XHJcbiAgICBuYXZpZ2F0aW9uSXRlbUFDSEljb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWFjaC1pY29uIGNsLW1haW4tbmF2aWdhdGlvbi1pdGVtJyk7XHJcbiAgICBuYXZpZ2F0aW9uSXRlbVJld2FyZHMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLXJld2FyZHMnKTtcclxuICAgIG5hdmlnYXRpb25JdGVtUmV3YXJkc0ljb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLXJld2FyZHMtaWNvbiBjbC1tYWluLW5hdmlnYXRpb24taXRlbScpO1xyXG5cclxuICAgIG1haW5TZWN0aW9uQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtc2VjdGlvbi1jb250YWluZXInKTtcclxuXHJcbiAgICBwcmVMb2FkZXJDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1wcmUtbG9hZGVyJyk7XHJcbiAgICBwcmVMb2FkZXJDb250ZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcHJlLWxvYWRlci1jb250ZW50Jyk7XHJcbiAgICBwcmVMb2FkZXJCYXIxLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtcHJlLWxvYWRlci1iYXInKTtcclxuICAgIHByZUxvYWRlckJhcjIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1wcmUtbG9hZGVyLWJhcicpO1xyXG4gICAgcHJlTG9hZGVyQmFyMy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXByZS1sb2FkZXItYmFyJyk7XHJcblxyXG4gICAgcHJlTG9hZGVyQ29udGVudC5hcHBlbmRDaGlsZChwcmVMb2FkZXJCYXIxKTtcclxuICAgIHByZUxvYWRlckNvbnRlbnQuYXBwZW5kQ2hpbGQocHJlTG9hZGVyQmFyMik7XHJcbiAgICBwcmVMb2FkZXJDb250ZW50LmFwcGVuZENoaWxkKHByZUxvYWRlckJhcjMpO1xyXG4gICAgcHJlTG9hZGVyQ29udGFpbmVyLmFwcGVuZENoaWxkKHByZUxvYWRlckNvbnRlbnQpO1xyXG5cclxuICAgIG5hdmlnYXRpb25JdGVtTEIuYXBwZW5kQ2hpbGQobmF2aWdhdGlvbkl0ZW1MQkljb24pO1xyXG4gICAgbmF2aWdhdGlvbkl0ZW1zLmFwcGVuZENoaWxkKG5hdmlnYXRpb25JdGVtTEIpO1xyXG4gICAgbmF2aWdhdGlvbkl0ZW1BQ0guYXBwZW5kQ2hpbGQobmF2aWdhdGlvbkl0ZW1BQ0hJY29uKTtcclxuICAgIG5hdmlnYXRpb25JdGVtcy5hcHBlbmRDaGlsZChuYXZpZ2F0aW9uSXRlbUFDSCk7XHJcbiAgICBuYXZpZ2F0aW9uSXRlbVJld2FyZHMuYXBwZW5kQ2hpbGQobmF2aWdhdGlvbkl0ZW1SZXdhcmRzSWNvbik7XHJcbiAgICBuYXZpZ2F0aW9uSXRlbXMuYXBwZW5kQ2hpbGQobmF2aWdhdGlvbkl0ZW1SZXdhcmRzKTtcclxuXHJcbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVzc2FnZXMuZW5hYmxlKSB7XHJcbiAgICAgIG5hdmlnYXRpb25JdGVtSW5ib3guc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWluYm94Jyk7XHJcbiAgICAgIG5hdmlnYXRpb25JdGVtSW5ib3hJY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbmF2aWdhdGlvbi1pbmJveC1pY29uIGNsLW1haW4tbmF2aWdhdGlvbi1pdGVtJyk7XHJcbiAgICAgIG5hdmlnYXRpb25JdGVtSW5ib3guYXBwZW5kQ2hpbGQobmF2aWdhdGlvbkl0ZW1JbmJveEljb24pO1xyXG4gICAgICBuYXZpZ2F0aW9uSXRlbXMuYXBwZW5kQ2hpbGQobmF2aWdhdGlvbkl0ZW1JbmJveCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmF2aWdhdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChuYXZpZ2F0aW9uSXRlbXMpO1xyXG5cclxuICAgIG1haW5TZWN0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25MQik7XHJcbiAgICBtYWluU2VjdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uQUNIKTtcclxuICAgIG1haW5TZWN0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzKTtcclxuICAgIG1haW5TZWN0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveCk7XHJcbiAgICBtYWluU2VjdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChwcmVMb2FkZXJDb250YWluZXIpO1xyXG5cclxuICAgIGlubmVyV3JhcHBlci5hcHBlbmRDaGlsZChuYXZpZ2F0aW9uQ29udGFpbmVyKTtcclxuICAgIGlubmVyV3JhcHBlci5hcHBlbmRDaGlsZChtYWluU2VjdGlvbkNvbnRhaW5lcik7XHJcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGlubmVyV3JhcHBlcik7XHJcblxyXG4gICAgcmV0dXJuIHdyYXBwZXI7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5sZWFkZXJib2FyZEFyZWFMYXlvdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIHNlY3Rpb25MQiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgIHZhciBzZWN0aW9uTEJIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uTEJIZWFkZXJMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvbkxCSGVhZGVyTGlzdEljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uTEJIZWFkZXJMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25MQkhlYWRlckRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uTEJIZWFkZXJDbG9zZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgIHZhciBzZWN0aW9uTEJEZXRhaWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvbkxCRGV0YWlsc0luZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uTEJEZXRhaWxzSW5mb0ljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uTEJEZXRhaWxzQ29udGVudENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25MQkRldGFpbHNDb250ZW50Q29udGFpbmVyTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uTEJEZXRhaWxzQ29udGVudENvbnRhaW5lckRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICB2YXIgc2VjdGlvbkxCTGVhZGVyYm9hcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uTEJMZWFkZXJib2FyZEhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyTGFiZWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvbkxCTGVhZGVyYm9hcmRIZWFkZXJUb3BSZXN1bHRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvbkxCTGVhZGVyYm9hcmRCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvbkxCTGVhZGVyYm9hcmRCb2R5UmVzdWx0cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgIHZhciBzZWN0aW9uTEJNaXNzaW5nTWVtYmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgdmFyIHNlY3Rpb25MQk9wdEluQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvbkxCT3B0SW5BY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcblxyXG4gICAgdmFyIHNlY3Rpb25MQkZvb3RlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25MQkZvb3RlckNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICB2YXIgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uVG91cm5hbWVudERldGFpbHNIZWFkZXJEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQmFja0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgIHZhciBzZWN0aW9uVG91cm5hbWVudERldGFpbHNCb2R5Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQm9keUltYWdlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc09wdEluQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzT3B0SW5BY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcblxyXG4gICAgdmFyIHNlY3Rpb25Ub3VybmFtZW50TGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25Ub3VybmFtZW50TGlzdEJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uVG91cm5hbWVudExpc3RCb2R5UmVzdWx0cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25Ub3VybmFtZW50QmFja0FjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuXHJcbiAgICBzZWN0aW9uTEIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYiBjbC1tYWluLXNlY3Rpb24taXRlbSBjbC1tYWluLWFjdGl2ZS1zZWN0aW9uJyk7XHJcbiAgICBzZWN0aW9uTEJIZWFkZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1oZWFkZXInKTtcclxuICAgIHNlY3Rpb25MQkhlYWRlckxpc3Quc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1oZWFkZXItbGlzdCcpO1xyXG4gICAgc2VjdGlvbkxCSGVhZGVyTGlzdEljb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1oZWFkZXItbGlzdC1pY29uJyk7XHJcbiAgICBzZWN0aW9uTEJIZWFkZXJMYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWhlYWRlci1sYWJlbCcpO1xyXG4gICAgc2VjdGlvbkxCSGVhZGVyRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWhlYWRlci1kYXRlJyk7XHJcbiAgICBzZWN0aW9uTEJIZWFkZXJDbG9zZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWhlYWRlci1jbG9zZScpO1xyXG5cclxuICAgIHNlY3Rpb25MQkRldGFpbHMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzJyk7XHJcbiAgICBzZWN0aW9uTEJEZXRhaWxzSW5mby5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtaW5mbycpO1xyXG4gICAgc2VjdGlvbkxCRGV0YWlsc0luZm9JY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1pbmZvLWljb24nKTtcclxuICAgIHNlY3Rpb25MQkRldGFpbHNDb250ZW50Q29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1jb250ZW50Jyk7XHJcbiAgICBzZWN0aW9uTEJEZXRhaWxzQ29udGVudENvbnRhaW5lckxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1jb250ZW50LWxhYmVsJyk7XHJcbiAgICBzZWN0aW9uTEJEZXRhaWxzQ29udGVudENvbnRhaW5lckRhdGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWNvbnRlbnQtZGF0ZScpO1xyXG5cclxuICAgIC8vIExlYWRlcmJvYXJkIHJlc3VsdCBjb250YWluZXJcclxuICAgIHNlY3Rpb25MQkxlYWRlcmJvYXJkLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItbGVhZGVyYm9hcmQnKTtcclxuICAgIHNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItbGVhZGVyYm9hcmQtaGVhZGVyJyk7XHJcbiAgICBzZWN0aW9uTEJMZWFkZXJib2FyZEhlYWRlckxhYmVscy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWxlYWRlcmJvYXJkLWhlYWRlci1sYWJlbHMnKTtcclxuICAgIHNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyVG9wUmVzdWx0cy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWxlYWRlcmJvYXJkLWhlYWRlci10b3AtcmVzJyk7XHJcbiAgICBzZWN0aW9uTEJMZWFkZXJib2FyZEJvZHkuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1sZWFkZXJib2FyZC1ib2R5Jyk7XHJcbiAgICBzZWN0aW9uTEJMZWFkZXJib2FyZEJvZHlSZXN1bHRzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItbGVhZGVyYm9hcmQtYm9keS1yZXMnKTtcclxuXHJcbiAgICBzZWN0aW9uTEJNaXNzaW5nTWVtYmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItbWlzc2luZy1tZW1iZXInKTtcclxuXHJcbiAgICAvLyBmb290ZXJcclxuICAgIHNlY3Rpb25MQkZvb3Rlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWZvb3RlcicpO1xyXG4gICAgc2VjdGlvbkxCRm9vdGVyQ29udGVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWZvb3Rlci1jb250ZW50Jyk7XHJcblxyXG4gICAgLy8gZGV0YWlscyBzZWN0aW9uXHJcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWNvbnRhaW5lcicpO1xyXG4gICAgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1oZWFkZXInKTtcclxuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0hlYWRlckxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1oZWFkZXItbGFiZWwnKTtcclxuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0hlYWRlckRhdGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWhlYWRlci1kYXRlJyk7XHJcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNCYWNrQnRuLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1iYWNrLWJ0bicpO1xyXG4gICAgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQm9keUNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtYm9keS1jb250YWluZXInKTtcclxuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0JvZHlJbWFnZUNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtYm9keS1pbWFnZS1jb250Jyk7XHJcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNCb2R5LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1ib2R5Jyk7XHJcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNPcHRJbkNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtb3B0aW4tY29udGFpbmVyJyk7XHJcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNPcHRJbkFjdGlvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtb3B0aW4tYWN0aW9uJyk7XHJcblxyXG4gICAgc2VjdGlvblRvdXJuYW1lbnRMaXN0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtdG91cm5hbWVudHMtbGlzdCcpO1xyXG4gICAgc2VjdGlvblRvdXJuYW1lbnRCYWNrQWN0aW9uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtdG91cm5hbWVudHMtYmFjay1idG4nKTtcclxuICAgIHNlY3Rpb25Ub3VybmFtZW50TGlzdEJvZHkuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC10b3VybmFtZW50cy1saXN0LWJvZHknKTtcclxuICAgIHNlY3Rpb25Ub3VybmFtZW50TGlzdEJvZHlSZXN1bHRzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtdG91cm5hbWVudHMtbGlzdC1ib2R5LXJlcycpO1xyXG5cclxuICAgIHNlY3Rpb25MQk9wdEluQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtbGItb3B0aW4tY29udGFpbmVyJyk7XHJcbiAgICBzZWN0aW9uTEJPcHRJbkFjdGlvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWxiLW9wdGluLWFjdGlvbicpO1xyXG5cclxuICAgIHNlY3Rpb25MQkhlYWRlckxhYmVsLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnRvdXJuYW1lbnRzLmxhYmVsO1xyXG4gICAgc2VjdGlvbkxCRm9vdGVyQ29udGVudC5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5nbG9iYWwuY29weTtcclxuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc09wdEluQWN0aW9uLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnRvdXJuYW1lbnRzLmVudGVyO1xyXG4gICAgc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzT3B0SW5BY3Rpb24uaHJlZiA9ICdqYXZhc2NyaXB0OnZvaWQoMCk7JztcclxuICAgIHNlY3Rpb25MQk9wdEluQWN0aW9uLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnRvdXJuYW1lbnRzLmVudGVyO1xyXG4gICAgc2VjdGlvbkxCT3B0SW5BY3Rpb24uaHJlZiA9ICdqYXZhc2NyaXB0OnZvaWQoMCk7JztcclxuXHJcbiAgICBzZWN0aW9uTEJIZWFkZXJMaXN0LmFwcGVuZENoaWxkKHNlY3Rpb25MQkhlYWRlckxpc3RJY29uKTtcclxuICAgIHNlY3Rpb25MQkhlYWRlci5hcHBlbmRDaGlsZChzZWN0aW9uTEJIZWFkZXJMaXN0KTtcclxuICAgIHNlY3Rpb25MQkhlYWRlci5hcHBlbmRDaGlsZChzZWN0aW9uTEJIZWFkZXJMYWJlbCk7XHJcbiAgICBzZWN0aW9uTEJIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCSGVhZGVyRGF0ZSk7XHJcbiAgICBzZWN0aW9uTEJIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCSGVhZGVyQ2xvc2UpO1xyXG5cclxuICAgIHNlY3Rpb25MQkRldGFpbHNJbmZvLmFwcGVuZENoaWxkKHNlY3Rpb25MQkRldGFpbHNJbmZvSWNvbik7XHJcbiAgICBzZWN0aW9uTEJEZXRhaWxzQ29udGVudENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uTEJEZXRhaWxzQ29udGVudENvbnRhaW5lckxhYmVsKTtcclxuICAgIHNlY3Rpb25MQkRldGFpbHNDb250ZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25MQkRldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZSk7XHJcbiAgICBzZWN0aW9uTEJEZXRhaWxzLmFwcGVuZENoaWxkKHNlY3Rpb25MQkRldGFpbHNJbmZvKTtcclxuICAgIHNlY3Rpb25MQkRldGFpbHMuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCRGV0YWlsc0NvbnRlbnRDb250YWluZXIpO1xyXG5cclxuICAgIHNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyTGFiZWxzKTtcclxuICAgIHNlY3Rpb25MQkxlYWRlcmJvYXJkLmFwcGVuZENoaWxkKHNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyKTtcclxuICAgIHNlY3Rpb25MQkxlYWRlcmJvYXJkLmFwcGVuZENoaWxkKHNlY3Rpb25MQkxlYWRlcmJvYXJkSGVhZGVyVG9wUmVzdWx0cyk7XHJcbiAgICBzZWN0aW9uTEJMZWFkZXJib2FyZEJvZHkuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCTGVhZGVyYm9hcmRCb2R5UmVzdWx0cyk7XHJcbiAgICBzZWN0aW9uTEJMZWFkZXJib2FyZC5hcHBlbmRDaGlsZChzZWN0aW9uTEJMZWFkZXJib2FyZEJvZHkpO1xyXG5cclxuICAgIHNlY3Rpb25MQkZvb3Rlci5hcHBlbmRDaGlsZChzZWN0aW9uTEJGb290ZXJDb250ZW50KTtcclxuXHJcbiAgICBzZWN0aW9uVG91cm5hbWVudExpc3RCb2R5LmFwcGVuZENoaWxkKHNlY3Rpb25Ub3VybmFtZW50TGlzdEJvZHlSZXN1bHRzKTtcclxuICAgIHNlY3Rpb25Ub3VybmFtZW50TGlzdC5hcHBlbmRDaGlsZChzZWN0aW9uVG91cm5hbWVudExpc3RCb2R5KTtcclxuICAgIHNlY3Rpb25Ub3VybmFtZW50TGlzdC5hcHBlbmRDaGlsZChzZWN0aW9uVG91cm5hbWVudEJhY2tBY3Rpb24pO1xyXG5cclxuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0hlYWRlci5hcHBlbmRDaGlsZChzZWN0aW9uVG91cm5hbWVudERldGFpbHNIZWFkZXJMYWJlbCk7XHJcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyRGF0ZSk7XHJcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzSGVhZGVyKTtcclxuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0NvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uVG91cm5hbWVudERldGFpbHNCYWNrQnRuKTtcclxuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0JvZHlDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQm9keUltYWdlQ29udGFpbmVyKTtcclxuICAgIHNlY3Rpb25Ub3VybmFtZW50RGV0YWlsc0JvZHlDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQm9keSk7XHJcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQm9keUNvbnRhaW5lcik7XHJcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNPcHRJbkNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uVG91cm5hbWVudERldGFpbHNPcHRJbkFjdGlvbik7XHJcbiAgICBzZWN0aW9uVG91cm5hbWVudERldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzT3B0SW5Db250YWluZXIpO1xyXG5cclxuICAgIHNlY3Rpb25MQk9wdEluQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25MQk9wdEluQWN0aW9uKTtcclxuXHJcbiAgICBzZWN0aW9uTEIuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCSGVhZGVyKTtcclxuICAgIHNlY3Rpb25MQi5hcHBlbmRDaGlsZChzZWN0aW9uTEJEZXRhaWxzKTtcclxuICAgIHNlY3Rpb25MQi5hcHBlbmRDaGlsZChzZWN0aW9uTEJMZWFkZXJib2FyZCk7XHJcbiAgICBzZWN0aW9uTEIuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCTWlzc2luZ01lbWJlcik7XHJcbiAgICBzZWN0aW9uTEIuYXBwZW5kQ2hpbGQoc2VjdGlvbkxCT3B0SW5Db250YWluZXIpO1xyXG4gICAgc2VjdGlvbkxCLmFwcGVuZENoaWxkKHNlY3Rpb25MQkZvb3Rlcik7XHJcbiAgICBzZWN0aW9uTEIuYXBwZW5kQ2hpbGQoc2VjdGlvblRvdXJuYW1lbnREZXRhaWxzQ29udGFpbmVyKTtcclxuICAgIHNlY3Rpb25MQi5hcHBlbmRDaGlsZChzZWN0aW9uVG91cm5hbWVudExpc3QpO1xyXG5cclxuICAgIHJldHVybiBzZWN0aW9uTEI7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5hY2hpZXZlbWVudHNBcmVhTGF5b3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBzZWN0aW9uQUNIID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgdmFyIHNlY3Rpb25BQ0hIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uQUNISGVhZGVyTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uQUNISGVhZGVyRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25BQ0hIZWFkZXJDbG9zZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgIHZhciBzZWN0aW9uQUNIRGV0YWlscyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25BQ0hEZXRhaWxzSW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25BQ0hEZXRhaWxzSW5mb0ljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uQUNIRGV0YWlsc0NvbnRlbnRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uQUNIRGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25BQ0hEZXRhaWxzQ29udGVudENvbnRhaW5lckRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICB2YXIgc2VjdGlvbkFDSExpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uQUNITGlzdEJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uQUNITGlzdEJvZHlSZXN1bHRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgdmFyIHNlY3Rpb25BQ0hGb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uQUNIRm9vdGVyQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgIHZhciBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0hlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNIZWFkZXJMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNIZWFkZXJEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0JhY2tCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICB2YXIgc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0JvZHlDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQm9keUltYWdlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0JvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICBzZWN0aW9uQUNILnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtc2VjdGlvbi1hY2ggY2wtbWFpbi1zZWN0aW9uLWl0ZW0nKTtcclxuICAgIHNlY3Rpb25BQ0hIZWFkZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1hY2gtaGVhZGVyJyk7XHJcbiAgICBzZWN0aW9uQUNISGVhZGVyTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1hY2gtaGVhZGVyLWxhYmVsJyk7XHJcbiAgICBzZWN0aW9uQUNISGVhZGVyRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1oZWFkZXItZGF0ZScpO1xyXG4gICAgc2VjdGlvbkFDSEhlYWRlckNsb3NlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWhlYWRlci1jbG9zZScpO1xyXG5cclxuICAgIHNlY3Rpb25BQ0hEZXRhaWxzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMnKTtcclxuICAgIHNlY3Rpb25BQ0hEZXRhaWxzSW5mby5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1kZXRhaWxzLWluZm8nKTtcclxuICAgIHNlY3Rpb25BQ0hEZXRhaWxzSW5mb0ljb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1hY2gtZGV0YWlscy1pbmZvLWljb24nKTtcclxuICAgIHNlY3Rpb25BQ0hEZXRhaWxzQ29udGVudENvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1kZXRhaWxzLWNvbnRlbnQnKTtcclxuICAgIHNlY3Rpb25BQ0hEZXRhaWxzQ29udGVudENvbnRhaW5lckxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtY29udGVudC1sYWJlbCcpO1xyXG4gICAgc2VjdGlvbkFDSERldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1kZXRhaWxzLWNvbnRlbnQtZGF0ZScpO1xyXG5cclxuICAgIC8vIExlYWRlcmJvYXJkIHJlc3VsdCBjb250YWluZXJcclxuICAgIHNlY3Rpb25BQ0hMaXN0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWxpc3QnKTtcclxuICAgIHNlY3Rpb25BQ0hMaXN0Qm9keS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1saXN0LWJvZHknKTtcclxuICAgIHNlY3Rpb25BQ0hMaXN0Qm9keVJlc3VsdHMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1hY2gtbGlzdC1ib2R5LXJlcycpO1xyXG5cclxuICAgIC8vIGZvb3RlclxyXG4gICAgc2VjdGlvbkFDSEZvb3Rlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWFjaC1mb290ZXInKTtcclxuICAgIHNlY3Rpb25BQ0hGb290ZXJDb250ZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWZvb3Rlci1jb250ZW50Jyk7XHJcblxyXG4gICAgLy8gZGV0YWlscyBzZWN0aW9uXHJcbiAgICBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtY29udGFpbmVyJyk7XHJcbiAgICBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzSGVhZGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtaGVhZGVyJyk7XHJcbiAgICBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzSGVhZGVyTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1hY2gtZGV0YWlscy1oZWFkZXItbGFiZWwnKTtcclxuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNIZWFkZXJEYXRlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtaGVhZGVyLWRhdGUnKTtcclxuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCYWNrQnRuLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtYmFjay1idG4nKTtcclxuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5Q29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtYm9keS1jb250YWluZXInKTtcclxuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5SW1hZ2VDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1hY2gtZGV0YWlscy1ib2R5LWltYWdlLWNvbnQnKTtcclxuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtYm9keScpO1xyXG5cclxuICAgIHNlY3Rpb25BQ0hIZWFkZXJMYWJlbC5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5hY2hpZXZlbWVudHMubGFiZWw7XHJcbiAgICBzZWN0aW9uQUNIRm9vdGVyQ29udGVudC5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5nbG9iYWwuY29weTtcclxuXHJcbiAgICBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzSGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNIZWFkZXJMYWJlbCk7XHJcbiAgICBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzSGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNIZWFkZXJEYXRlKTtcclxuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0hlYWRlcik7XHJcbiAgICBzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCYWNrQnRuKTtcclxuICAgIHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5Q29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25BY2hpZXZlbWVudERldGFpbHNCb2R5SW1hZ2VDb250YWluZXIpO1xyXG4gICAgc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0JvZHlDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0JvZHkpO1xyXG4gICAgc2VjdGlvbkFjaGlldmVtZW50RGV0YWlsc0NvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQm9keUNvbnRhaW5lcik7XHJcblxyXG4gICAgc2VjdGlvbkFDSEhlYWRlci5hcHBlbmRDaGlsZChzZWN0aW9uQUNISGVhZGVyTGFiZWwpO1xyXG4gICAgc2VjdGlvbkFDSEhlYWRlci5hcHBlbmRDaGlsZChzZWN0aW9uQUNISGVhZGVyRGF0ZSk7XHJcbiAgICBzZWN0aW9uQUNISGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25BQ0hIZWFkZXJDbG9zZSk7XHJcblxyXG4gICAgc2VjdGlvbkFDSERldGFpbHNJbmZvLmFwcGVuZENoaWxkKHNlY3Rpb25BQ0hEZXRhaWxzSW5mb0ljb24pO1xyXG4gICAgc2VjdGlvbkFDSERldGFpbHNDb250ZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25BQ0hEZXRhaWxzQ29udGVudENvbnRhaW5lckxhYmVsKTtcclxuICAgIHNlY3Rpb25BQ0hEZXRhaWxzQ29udGVudENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uQUNIRGV0YWlsc0NvbnRlbnRDb250YWluZXJEYXRlKTtcclxuICAgIHNlY3Rpb25BQ0hEZXRhaWxzLmFwcGVuZENoaWxkKHNlY3Rpb25BQ0hEZXRhaWxzSW5mbyk7XHJcbiAgICBzZWN0aW9uQUNIRGV0YWlscy5hcHBlbmRDaGlsZChzZWN0aW9uQUNIRGV0YWlsc0NvbnRlbnRDb250YWluZXIpO1xyXG5cclxuICAgIHNlY3Rpb25BQ0hMaXN0Qm9keS5hcHBlbmRDaGlsZChzZWN0aW9uQUNITGlzdEJvZHlSZXN1bHRzKTtcclxuICAgIHNlY3Rpb25BQ0hMaXN0LmFwcGVuZENoaWxkKHNlY3Rpb25BQ0hMaXN0Qm9keSk7XHJcblxyXG4gICAgc2VjdGlvbkFDSEZvb3Rlci5hcHBlbmRDaGlsZChzZWN0aW9uQUNIRm9vdGVyQ29udGVudCk7XHJcblxyXG4gICAgc2VjdGlvbkFDSC5hcHBlbmRDaGlsZChzZWN0aW9uQUNISGVhZGVyKTtcclxuICAgIHNlY3Rpb25BQ0guYXBwZW5kQ2hpbGQoc2VjdGlvbkFDSERldGFpbHMpO1xyXG4gICAgc2VjdGlvbkFDSC5hcHBlbmRDaGlsZChzZWN0aW9uQUNITGlzdCk7XHJcbiAgICBzZWN0aW9uQUNILmFwcGVuZENoaWxkKHNlY3Rpb25BQ0hGb290ZXIpO1xyXG4gICAgc2VjdGlvbkFDSC5hcHBlbmRDaGlsZChzZWN0aW9uQWNoaWV2ZW1lbnREZXRhaWxzQ29udGFpbmVyKTtcclxuXHJcbiAgICByZXR1cm4gc2VjdGlvbkFDSDtcclxuICB9O1xyXG5cclxuICB0aGlzLnJld2FyZHNBcmVhTGF5b3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBzZWN0aW9uUmV3YXJkcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgIHZhciBzZWN0aW9uUmV3YXJkc0hlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzSGVhZGVyTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uUmV3YXJkc0hlYWRlckRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uUmV3YXJkc0hlYWRlckNsb3NlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzRGV0YWlscyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0luZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uUmV3YXJkc0RldGFpbHNJbmZvSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0NvbnRlbnRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgIHZhciBzZWN0aW9uUmV3YXJkc0xpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uUmV3YXJkc0xpc3RCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvblJld2FyZHNMaXN0Qm9keVJlc3VsdHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICB2YXIgc2VjdGlvblJld2FyZHNGb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uUmV3YXJkc0Zvb3RlckNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICB2YXIgc2VjdGlvblJld2FyZHNEZXRhaWxzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvblJld2FyZHNEZXRhaWxzSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvblJld2FyZHNEZXRhaWxzSGVhZGVyTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uUmV3YXJkc0RldGFpbHNIZWFkZXJEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvblJld2FyZHNEZXRhaWxzQmFja0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgIHZhciBzZWN0aW9uUmV3YXJkc0RldGFpbHNCb2R5Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvblJld2FyZHNEZXRhaWxzQm9keUltYWdlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvblJld2FyZHNEZXRhaWxzQm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzV2lubmluZ3NDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uUmV3YXJkc1dpbm5pbmdzSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzV2lubmluZ3NWYWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25SZXdhcmRzQ2xhaW1Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uUmV3YXJkc0NsYWltQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG5cclxuICAgIHNlY3Rpb25SZXdhcmRzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtc2VjdGlvbi1yZXdhcmQgY2wtbWFpbi1zZWN0aW9uLWl0ZW0nKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzSGVhZGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWhlYWRlcicpO1xyXG4gICAgc2VjdGlvblJld2FyZHNIZWFkZXJMYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1oZWFkZXItbGFiZWwnKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzSGVhZGVyRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1oZWFkZXItZGF0ZScpO1xyXG4gICAgc2VjdGlvblJld2FyZHNIZWFkZXJDbG9zZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1oZWFkZXItY2xvc2UnKTtcclxuXHJcbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtZGV0YWlscycpO1xyXG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzSW5mby5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWluZm8nKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0luZm9JY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWRldGFpbHMtaW5mby1pY29uJyk7XHJcbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWRldGFpbHMtY29udGVudCcpO1xyXG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQ29udGVudENvbnRhaW5lckxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWRldGFpbHMtY29udGVudC1sYWJlbCcpO1xyXG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQ29udGVudENvbnRhaW5lckRhdGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtZGV0YWlscy1jb250ZW50LWRhdGUnKTtcclxuXHJcbiAgICAvLyBMZWFkZXJib2FyZCByZXN1bHQgY29udGFpbmVyXHJcbiAgICBzZWN0aW9uUmV3YXJkc0xpc3Quc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtbGlzdCcpO1xyXG4gICAgc2VjdGlvblJld2FyZHNMaXN0Qm9keS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1saXN0LWJvZHknKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzTGlzdEJvZHlSZXN1bHRzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWxpc3QtYm9keS1yZXMnKTtcclxuXHJcbiAgICAvLyBmb290ZXJcclxuICAgIHNlY3Rpb25SZXdhcmRzRm9vdGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWZvb3RlcicpO1xyXG4gICAgc2VjdGlvblJld2FyZHNGb290ZXJDb250ZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWZvb3Rlci1jb250ZW50Jyk7XHJcblxyXG4gICAgLy8gZGV0YWlscyBzZWN0aW9uXHJcbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtZGV0YWlscy1jb250YWluZXInKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0hlYWRlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWhlYWRlcicpO1xyXG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzSGVhZGVyTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtZGV0YWlscy1oZWFkZXItbGFiZWwnKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0hlYWRlckRhdGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtZGV0YWlscy1oZWFkZXItZGF0ZScpO1xyXG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQmFja0J0bi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWJhY2stYnRuJyk7XHJcbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHNCb2R5Q29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWRldGFpbHMtYm9keS1jb250YWluZXInKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0JvZHlJbWFnZUNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWJvZHktaW1hZ2UtY29udCcpO1xyXG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQm9keS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWJvZHknKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzV2lubmluZ3NDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtd2lubmluZ3MtY29udGFpbmVyJyk7XHJcbiAgICBzZWN0aW9uUmV3YXJkc1dpbm5pbmdzSWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LXJld2FyZC13aW5uaW5ncy1pY29uJyk7XHJcbiAgICBzZWN0aW9uUmV3YXJkc1dpbm5pbmdzVmFsdWUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtd2lubmluZ3MtdmFsdWUnKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzQ2xhaW1Db250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1yZXdhcmQtY2xhaW0tY29udGFpbmVyJyk7XHJcbiAgICBzZWN0aW9uUmV3YXJkc0NsYWltQnRuLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtcmV3YXJkLWNsYWltLWJ0bicpO1xyXG5cclxuICAgIHNlY3Rpb25SZXdhcmRzSGVhZGVyTGFiZWwuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ucmV3YXJkcy5sYWJlbDtcclxuICAgIHNlY3Rpb25SZXdhcmRzRm9vdGVyQ29udGVudC5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5nbG9iYWwuY29weTtcclxuICAgIHNlY3Rpb25SZXdhcmRzQ2xhaW1CdG4uaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ucmV3YXJkcy5jbGFpbTtcclxuXHJcbiAgICBzZWN0aW9uUmV3YXJkc1dpbm5pbmdzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzV2lubmluZ3NJY29uKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzV2lubmluZ3NDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNXaW5uaW5nc1ZhbHVlKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzQ2xhaW1Db250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNDbGFpbUJ0bik7XHJcblxyXG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzSGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRGV0YWlsc0hlYWRlckxhYmVsKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0hlYWRlci5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0RldGFpbHNIZWFkZXJEYXRlKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0NvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0RldGFpbHNIZWFkZXIpO1xyXG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRGV0YWlsc0JhY2tCdG4pO1xyXG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQm9keUNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0RldGFpbHNCb2R5SW1hZ2VDb250YWluZXIpO1xyXG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzQm9keUNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0RldGFpbHNCb2R5KTtcclxuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlsc0JvZHlDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNXaW5uaW5nc0NvbnRhaW5lcik7XHJcbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNEZXRhaWxzQm9keUNvbnRhaW5lcik7XHJcbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNDbGFpbUNvbnRhaW5lcik7XHJcblxyXG4gICAgc2VjdGlvblJld2FyZHNIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNIZWFkZXJMYWJlbCk7XHJcbiAgICBzZWN0aW9uUmV3YXJkc0hlYWRlci5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0hlYWRlckRhdGUpO1xyXG4gICAgc2VjdGlvblJld2FyZHNIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNIZWFkZXJDbG9zZSk7XHJcblxyXG4gICAgc2VjdGlvblJld2FyZHNEZXRhaWxzSW5mby5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0RldGFpbHNJbmZvSWNvbik7XHJcbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbCk7XHJcbiAgICBzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRGV0YWlsc0NvbnRlbnRDb250YWluZXJEYXRlKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlscy5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0RldGFpbHNJbmZvKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzRGV0YWlscy5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0RldGFpbHNDb250ZW50Q29udGFpbmVyKTtcclxuXHJcbiAgICBzZWN0aW9uUmV3YXJkc0xpc3RCb2R5LmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzTGlzdEJvZHlSZXN1bHRzKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzTGlzdC5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0xpc3RCb2R5KTtcclxuXHJcbiAgICBzZWN0aW9uUmV3YXJkc0Zvb3Rlci5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0Zvb3RlckNvbnRlbnQpO1xyXG5cclxuICAgIHNlY3Rpb25SZXdhcmRzLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzSGVhZGVyKTtcclxuICAgIHNlY3Rpb25SZXdhcmRzLmFwcGVuZENoaWxkKHNlY3Rpb25SZXdhcmRzRGV0YWlscyk7XHJcbiAgICBzZWN0aW9uUmV3YXJkcy5hcHBlbmRDaGlsZChzZWN0aW9uUmV3YXJkc0xpc3QpO1xyXG4gICAgc2VjdGlvblJld2FyZHMuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNGb290ZXIpO1xyXG4gICAgc2VjdGlvblJld2FyZHMuYXBwZW5kQ2hpbGQoc2VjdGlvblJld2FyZHNEZXRhaWxzQ29udGFpbmVyKTtcclxuXHJcbiAgICByZXR1cm4gc2VjdGlvblJld2FyZHM7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5pbmJveEFyZWFMYXlvdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIHNlY3Rpb25JbmJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgIHZhciBzZWN0aW9uSW5ib3hIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uSW5ib3hIZWFkZXJMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25JbmJveEhlYWRlckRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uSW5ib3hIZWFkZXJDbG9zZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgIHZhciBzZWN0aW9uSW5ib3hEZXRhaWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvbkluYm94RGV0YWlsc0luZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uSW5ib3hEZXRhaWxzSW5mb0ljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGVudENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25JbmJveERldGFpbHNDb250ZW50Q29udGFpbmVyTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGVudENvbnRhaW5lckRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICB2YXIgc2VjdGlvbkluYm94TGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25JbmJveExpc3RCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvbkluYm94TGlzdEJvZHlSZXN1bHRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgdmFyIHNlY3Rpb25JbmJveEZvb3RlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25JbmJveEZvb3RlckNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICB2YXIgc2VjdGlvbkluYm94RGV0YWlsc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25JbmJveERldGFpbHNIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uSW5ib3hEZXRhaWxzSGVhZGVyTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBzZWN0aW9uSW5ib3hEZXRhaWxzSGVhZGVyRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHNlY3Rpb25JbmJveERldGFpbHNCYWNrQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgdmFyIHNlY3Rpb25JbmJveERldGFpbHNCb2R5Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgc2VjdGlvbkluYm94RGV0YWlsc0JvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICBzZWN0aW9uSW5ib3guc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1zZWN0aW9uLWluYm94IGNsLW1haW4tc2VjdGlvbi1pdGVtJyk7XHJcbiAgICBzZWN0aW9uSW5ib3hIZWFkZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1oZWFkZXInKTtcclxuICAgIHNlY3Rpb25JbmJveEhlYWRlckxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtaW5ib3gtaGVhZGVyLWxhYmVsJyk7XHJcbiAgICBzZWN0aW9uSW5ib3hIZWFkZXJEYXRlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtaW5ib3gtaGVhZGVyLWRhdGUnKTtcclxuICAgIHNlY3Rpb25JbmJveEhlYWRlckNsb3NlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtaW5ib3gtaGVhZGVyLWNsb3NlJyk7XHJcblxyXG4gICAgc2VjdGlvbkluYm94RGV0YWlscy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWluYm94LWRldGFpbHMnKTtcclxuICAgIHNlY3Rpb25JbmJveERldGFpbHNJbmZvLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtaW5ib3gtZGV0YWlscy1pbmZvJyk7XHJcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzSW5mb0ljb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWluZm8taWNvbicpO1xyXG4gICAgc2VjdGlvbkluYm94RGV0YWlsc0NvbnRlbnRDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWNvbnRlbnQnKTtcclxuICAgIHNlY3Rpb25JbmJveERldGFpbHNDb250ZW50Q29udGFpbmVyTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWNvbnRlbnQtbGFiZWwnKTtcclxuICAgIHNlY3Rpb25JbmJveERldGFpbHNDb250ZW50Q29udGFpbmVyRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWluYm94LWRldGFpbHMtY29udGVudC1kYXRlJyk7XHJcblxyXG4gICAgLy8gTGVhZGVyYm9hcmQgcmVzdWx0IGNvbnRhaW5lclxyXG4gICAgc2VjdGlvbkluYm94TGlzdC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWluYm94LWxpc3QnKTtcclxuICAgIHNlY3Rpb25JbmJveExpc3RCb2R5LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtaW5ib3gtbGlzdC1ib2R5Jyk7XHJcbiAgICBzZWN0aW9uSW5ib3hMaXN0Qm9keVJlc3VsdHMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1saXN0LWJvZHktcmVzJyk7XHJcblxyXG4gICAgLy8gZm9vdGVyXHJcbiAgICBzZWN0aW9uSW5ib3hGb290ZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1mb290ZXInKTtcclxuICAgIHNlY3Rpb25JbmJveEZvb3RlckNvbnRlbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1mb290ZXItY29udGVudCcpO1xyXG5cclxuICAgIC8vIGRldGFpbHMgc2VjdGlvblxyXG4gICAgc2VjdGlvbkluYm94RGV0YWlsc0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWluYm94LWRldGFpbHMtY29udGFpbmVyJyk7XHJcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzSGVhZGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtaW5ib3gtZGV0YWlscy1oZWFkZXInKTtcclxuICAgIHNlY3Rpb25JbmJveERldGFpbHNIZWFkZXJMYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWluYm94LWRldGFpbHMtaGVhZGVyLWxhYmVsJyk7XHJcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzSGVhZGVyRGF0ZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWluYm94LWRldGFpbHMtaGVhZGVyLWRhdGUnKTtcclxuICAgIHNlY3Rpb25JbmJveERldGFpbHNCYWNrQnRuLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtbWFpbi13aWRnZXQtaW5ib3gtZGV0YWlscy1iYWNrLWJ0bicpO1xyXG4gICAgc2VjdGlvbkluYm94RGV0YWlsc0JvZHlDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWJvZHktY29udGFpbmVyJyk7XHJcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzQm9keS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW1haW4td2lkZ2V0LWluYm94LWRldGFpbHMtYm9keScpO1xyXG5cclxuICAgIHNlY3Rpb25JbmJveEhlYWRlckxhYmVsLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLm1lc3NhZ2VzLmxhYmVsO1xyXG4gICAgc2VjdGlvbkluYm94Rm9vdGVyQ29udGVudC5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5nbG9iYWwuY29weTtcclxuXHJcbiAgICBzZWN0aW9uSW5ib3hIZWFkZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94SGVhZGVyTGFiZWwpO1xyXG4gICAgc2VjdGlvbkluYm94SGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveEhlYWRlckRhdGUpO1xyXG4gICAgc2VjdGlvbkluYm94SGVhZGVyLmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveEhlYWRlckNsb3NlKTtcclxuXHJcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzSW5mby5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hEZXRhaWxzSW5mb0ljb24pO1xyXG4gICAgc2VjdGlvbkluYm94RGV0YWlsc0NvbnRlbnRDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94RGV0YWlsc0NvbnRlbnRDb250YWluZXJMYWJlbCk7XHJcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGVudENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGVudENvbnRhaW5lckRhdGUpO1xyXG4gICAgc2VjdGlvbkluYm94RGV0YWlscy5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hEZXRhaWxzSW5mbyk7XHJcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzLmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveERldGFpbHNDb250ZW50Q29udGFpbmVyKTtcclxuXHJcbiAgICBzZWN0aW9uSW5ib3hMaXN0Qm9keS5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hMaXN0Qm9keVJlc3VsdHMpO1xyXG4gICAgc2VjdGlvbkluYm94TGlzdC5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hMaXN0Qm9keSk7XHJcblxyXG4gICAgc2VjdGlvbkluYm94RGV0YWlsc0hlYWRlci5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hEZXRhaWxzSGVhZGVyTGFiZWwpO1xyXG4gICAgc2VjdGlvbkluYm94RGV0YWlsc0hlYWRlci5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hEZXRhaWxzSGVhZGVyRGF0ZSk7XHJcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveERldGFpbHNIZWFkZXIpO1xyXG4gICAgc2VjdGlvbkluYm94RGV0YWlsc0NvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hEZXRhaWxzQmFja0J0bik7XHJcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzQm9keUNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hEZXRhaWxzQm9keSk7XHJcbiAgICBzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveERldGFpbHNCb2R5Q29udGFpbmVyKTtcclxuXHJcbiAgICBzZWN0aW9uSW5ib3hGb290ZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94Rm9vdGVyQ29udGVudCk7XHJcblxyXG4gICAgc2VjdGlvbkluYm94LmFwcGVuZENoaWxkKHNlY3Rpb25JbmJveEhlYWRlcik7XHJcbiAgICBzZWN0aW9uSW5ib3guYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94RGV0YWlscyk7XHJcbiAgICBzZWN0aW9uSW5ib3guYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94TGlzdCk7XHJcbiAgICBzZWN0aW9uSW5ib3guYXBwZW5kQ2hpbGQoc2VjdGlvbkluYm94Rm9vdGVyKTtcclxuICAgIHNlY3Rpb25JbmJveC5hcHBlbmRDaGlsZChzZWN0aW9uSW5ib3hEZXRhaWxzQ29udGFpbmVyKTtcclxuXHJcbiAgICByZXR1cm4gc2VjdGlvbkluYm94O1xyXG4gIH07XHJcblxyXG4gIHRoaXMubGVhZGVyYm9hcmRIZWFkZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIHJhbmtDb2wgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBpY29uQ29sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgbmFtZUNvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGdyb3d0aENvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHBvaW50c0NvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgIHJhbmtDb2wuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1yYW5rLWNvbCBjbC1jb2wnKTtcclxuICAgIGljb25Db2wuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1pY29uLWNvbCBjbC1jb2wnKTtcclxuICAgIG5hbWVDb2wuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1uYW1lLWNvbCBjbC1jb2wnKTtcclxuICAgIGdyb3d0aENvbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWdyb3d0aC1jb2wgY2wtY29sJyk7XHJcbiAgICBwb2ludHNDb2wuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1wb2ludHMtY29sIGNsLWNvbCcpO1xyXG5cclxuICAgIHJhbmtDb2wuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQucmFuaztcclxuICAgIGljb25Db2wuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBuYW1lQ29sLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmxlYWRlcmJvYXJkLm5hbWU7XHJcbiAgICBncm93dGhDb2wuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBwb2ludHNDb2wuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQucG9pbnRzO1xyXG5cclxuICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmhlYWRlci5hcHBlbmRDaGlsZChyYW5rQ29sKTtcclxuICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmhlYWRlci5hcHBlbmRDaGlsZChpY29uQ29sKTtcclxuICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmhlYWRlci5hcHBlbmRDaGlsZChuYW1lQ29sKTtcclxuICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmhlYWRlci5hcHBlbmRDaGlsZChncm93dGhDb2wpO1xyXG4gICAgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQuaGVhZGVyLmFwcGVuZENoaWxkKHBvaW50c0NvbCk7XHJcblxyXG4gICAgdmFyIHJld2FyZENvbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHJld2FyZEVuYWJsZWQgPSAodHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09ICd1bmRlZmluZWQnICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09IG51bGwgJiYgdHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QucmV3YXJkcyAhPT0gJ3VuZGVmaW5lZCcgJiYgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5yZXdhcmRzLmxlbmd0aCA+IDApO1xyXG4gICAgcmV3YXJkQ29sLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtcmV3YXJkLWNvbCBjbC1jb2wnICsgKHJld2FyZEVuYWJsZWQgPyAnIGNsLWNvbC1yZXdhcmQtZW5hYmxlZCcgOiAnJykpO1xyXG4gICAgcmV3YXJkQ29sLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmxlYWRlcmJvYXJkLnByaXplO1xyXG5cclxuICAgIGFkZENsYXNzKF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmhlYWRlciwgJ2NsLXJld2FyZC1lbmFibGVkJyk7XHJcblxyXG4gICAgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQuaGVhZGVyLmFwcGVuZENoaWxkKHJld2FyZENvbCk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5sZWFkZXJib2FyZFJvdyA9IGZ1bmN0aW9uIChyYW5rLCBpY29uLCBuYW1lLCBjaGFuZ2UsIGdyb3d0aCwgcG9pbnRzLCByZXdhcmQsIGNvdW50LCBtZW1iZXJGb3VuZCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBjZWxsV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHJhbmtDZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciByYW5rQ2VsVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBpY29uQ2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgaWNvbkNlbEltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgdmFyIG5hbWVDZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBncm93dGhDZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBwb2ludHNDZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBtZW1iZXJGb3VuZENsYXNzID0gKG1lbWJlckZvdW5kKSA/ICcgY2wtbGItbWVtYmVyLXJvdycgOiAnJztcclxuXHJcbiAgICBjZWxsV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWxiLXJvdyBjbC1sYi1yYW5rLScgKyByYW5rICsgJyBjbC1sYi1jb3VudC0nICsgY291bnQgKyBtZW1iZXJGb3VuZENsYXNzKTtcclxuICAgIHJhbmtDZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1yYW5rLWNvbCBjbC1jb2wgY2wtcmFuay0nICsgcmFuayk7XHJcbiAgICByYW5rQ2VsVmFsdWUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1yYW5rLWNvbC12YWx1ZScpO1xyXG4gICAgaWNvbkNlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWljb24tY29sIGNsLWNvbCcpO1xyXG4gICAgaWNvbkNlbEltZy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWljb24tY29sLWltZycpO1xyXG4gICAgbmFtZUNlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLW5hbWUtY29sIGNsLWNvbCcpO1xyXG4gICAgZ3Jvd3RoQ2VsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtZ3Jvd3RoLWNvbCBjbC1jb2wnKTtcclxuICAgIHBvaW50c0NlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXBvaW50cy1jb2wgY2wtY29sJyk7XHJcblxyXG4gICAgY2VsbFdyYXBwZXIuZGF0YXNldC5yYW5rID0gcmFuaztcclxuXHJcbiAgICByYW5rQ2VsVmFsdWUuaW5uZXJIVE1MID0gcmFuaztcclxuICAgIG5hbWVDZWwuaW5uZXJIVE1MID0gbmFtZTtcclxuICAgIGdyb3d0aENlbC5kYXRhc2V0Lmdyb3d0aCA9IChjaGFuZ2UgPCAwKSA/ICdkb3duJyA6IChjaGFuZ2UgPiAwID8gJ3VwJyA6ICdzYW1lJyk7XHJcbiAgICBncm93dGhDZWwuZGF0YXNldC5jaGFuZ2UgPSBjaGFuZ2U7XHJcbiAgICBncm93dGhDZWwuaW5uZXJIVE1MID0gZ3Jvd3RoO1xyXG4gICAgcG9pbnRzQ2VsLmlubmVySFRNTCA9IHBvaW50cztcclxuXHJcbiAgICBpZiAoaWNvbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGljb25DZWxJbWcuc3JjID0gaWNvbjtcclxuICAgICAgaWNvbkNlbEltZy5hbHQgPSBuYW1lO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWNvbkNlbEltZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfVxyXG5cclxuICAgIHJhbmtDZWwuYXBwZW5kQ2hpbGQocmFua0NlbFZhbHVlKTtcclxuICAgIGNlbGxXcmFwcGVyLmFwcGVuZENoaWxkKHJhbmtDZWwpO1xyXG4gICAgaWNvbkNlbC5hcHBlbmRDaGlsZChpY29uQ2VsSW1nKTtcclxuICAgIGNlbGxXcmFwcGVyLmFwcGVuZENoaWxkKGljb25DZWwpO1xyXG4gICAgY2VsbFdyYXBwZXIuYXBwZW5kQ2hpbGQobmFtZUNlbCk7XHJcbiAgICBjZWxsV3JhcHBlci5hcHBlbmRDaGlsZChncm93dGhDZWwpO1xyXG4gICAgY2VsbFdyYXBwZXIuYXBwZW5kQ2hpbGQocG9pbnRzQ2VsKTtcclxuXHJcbiAgICB2YXIgcmV3YXJkQ2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgcmV3YXJkRW5hYmxlZCA9ICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdCAhPT0gJ3VuZGVmaW5lZCcgJiYgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdCAhPT0gbnVsbCAmJiB0eXBlb2YgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5yZXdhcmRzICE9PSAndW5kZWZpbmVkJyAmJiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnJld2FyZHMubGVuZ3RoID4gMCk7XHJcbiAgICByZXdhcmRDZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1yZXdhcmQtY29sIGNsLWNvbCcgKyAocmV3YXJkRW5hYmxlZCA/ICcgY2wtY29sLXJld2FyZC1lbmFibGVkJyA6ICcnKSk7XHJcbiAgICByZXdhcmRDZWwuaW5uZXJIVE1MID0gKHR5cGVvZiByZXdhcmQgIT09ICd1bmRlZmluZWQnICYmIHJld2FyZCAhPT0gbnVsbCkgPyByZXdhcmQgOiAnJztcclxuXHJcbiAgICBhZGRDbGFzcyhjZWxsV3JhcHBlciwgJ2NsLXJld2FyZC1lbmFibGVkJyk7XHJcblxyXG4gICAgY2VsbFdyYXBwZXIuYXBwZW5kQ2hpbGQocmV3YXJkQ2VsKTtcclxuXHJcbiAgICByZXR1cm4gY2VsbFdyYXBwZXI7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5sZWFkZXJib2FyZFJvd1VwZGF0ZSA9IGZ1bmN0aW9uIChyYW5rLCBpY29uLCBuYW1lLCBjaGFuZ2UsIGdyb3d0aCwgcG9pbnRzLCByZXdhcmQsIGNvdW50LCBtZW1iZXJGb3VuZCwgb25NaXNzaW5nKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIGNlbGxSb3cgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5jb250YWluZXIsICcuY2wtbGItcmFuay0nICsgcmFuayArICcuY2wtbGItY291bnQtJyArIGNvdW50KTtcclxuXHJcbiAgICBpZiAoY2VsbFJvdyA9PT0gbnVsbCkge1xyXG4gICAgICBvbk1pc3NpbmcocmFuaywgaWNvbiwgbmFtZSwgY2hhbmdlLCBncm93dGgsIHBvaW50cywgcmV3YXJkLCBjb3VudCwgbWVtYmVyRm91bmQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIHJhbmtDZWwgPSBxdWVyeShjZWxsUm93LCAnLmNsLXJhbmstY29sLXZhbHVlJyk7XHJcbiAgICAgIHZhciBpY29uQ2VsID0gcXVlcnkoY2VsbFJvdywgJy5jbC1pY29uLWNvbC1pbWcnKTtcclxuICAgICAgdmFyIG5hbWVDZWwgPSBxdWVyeShjZWxsUm93LCAnLmNsLW5hbWUtY29sJyk7XHJcbiAgICAgIHZhciBncm93dGhDZWwgPSBxdWVyeShjZWxsUm93LCAnLmNsLWdyb3d0aC1jb2wnKTtcclxuICAgICAgdmFyIHBvaW50c0NlbCA9IHF1ZXJ5KGNlbGxSb3csICcuY2wtcG9pbnRzLWNvbCcpO1xyXG4gICAgICB2YXIgbWVtYmVyRm91bmRDbGFzcyA9ICdjbC1sYi1tZW1iZXItcm93JztcclxuICAgICAgdmFyIHJvd0hhc0NsYXNzID0gaGFzQ2xhc3MoY2VsbFJvdywgbWVtYmVyRm91bmRDbGFzcyk7XHJcblxyXG4gICAgICBpZiAoY291bnQgPiAwICYmICFoYXNDbGFzcyhjZWxsUm93LCAnY2wtc2hhcmVkLXJhbmsnKSkge1xyXG4gICAgICAgIGFkZENsYXNzKGNlbGxSb3csICdjbC1zaGFyZWQtcmFuaycpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobWVtYmVyRm91bmQgJiYgIXJvd0hhc0NsYXNzKSB7XHJcbiAgICAgICAgYWRkQ2xhc3MoY2VsbFJvdywgbWVtYmVyRm91bmRDbGFzcyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoIW1lbWJlckZvdW5kICYmIHJvd0hhc0NsYXNzKSB7XHJcbiAgICAgICAgcmVtb3ZlQ2xhc3MoY2VsbFJvdywgbWVtYmVyRm91bmRDbGFzcyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNlbGxSb3cuZGF0YXNldC5yYW5rID0gcmFuaztcclxuXHJcbiAgICAgIHJhbmtDZWwuaW5uZXJIVE1MID0gcmFuaztcclxuICAgICAgbmFtZUNlbC5pbm5lckhUTUwgPSBuYW1lO1xyXG5cclxuICAgICAgZ3Jvd3RoQ2VsLmRhdGFzZXQuZ3Jvd3RoID0gKGNoYW5nZSA8IDApID8gJ2Rvd24nIDogKGNoYW5nZSA+IDAgPyAndXAnIDogJ3NhbWUnKTtcclxuICAgICAgZ3Jvd3RoQ2VsLmRhdGFzZXQuY2hhbmdlID0gY2hhbmdlO1xyXG4gICAgICBncm93dGhDZWwuaW5uZXJIVE1MID0gZ3Jvd3RoO1xyXG5cclxuICAgICAgcG9pbnRzQ2VsLmlubmVySFRNTCA9IHBvaW50cztcclxuXHJcbiAgICAgIGlmIChpY29uLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBpY29uQ2VsLnNyYyA9IGljb247XHJcbiAgICAgICAgaWNvbkNlbC5hbHQgPSBuYW1lO1xyXG4gICAgICAgIGljb25DZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWNvbkNlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09ICd1bmRlZmluZWQnICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09IG51bGwgJiYgdHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QucmV3YXJkcyAhPT0gJ3VuZGVmaW5lZCcgJiYgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5yZXdhcmRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICB2YXIgcmV3YXJkQ2VsID0gcXVlcnkoY2VsbFJvdywgJy5jbC1yZXdhcmQtY29sJyk7XHJcbiAgICAgICAgaWYgKHJld2FyZENlbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgcmV3YXJkQ2VsLmlubmVySFRNTCA9ICh0eXBlb2YgcmV3YXJkICE9PSAndW5kZWZpbmVkJyAmJiByZXdhcmQgIT09IG51bGwpID8gcmV3YXJkIDogJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5wb3B1bGF0ZUxlYWRlcmJvYXJkUmVzdWx0c1dpdGhEZWZhdWx0RW50cmllcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgdG9wUmVzdWx0cyA9IFtdO1xyXG4gICAgdmFyIHJlbWFpbmluZ1Jlc3VsdHMgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnRvcFJlc3VsdFNpemU7IGkrKykge1xyXG4gICAgICBjb25zdCByYW5rID0gaSArIDE7XHJcblxyXG4gICAgICB0b3BSZXN1bHRzLnB1c2goe1xyXG4gICAgICAgIG5hbWU6ICctLScsXHJcbiAgICAgICAgcmFuazogcmFuayxcclxuICAgICAgICBwb2ludHM6ICctLScsXHJcbiAgICAgICAgbWVtYmVySWQ6ICcnLFxyXG4gICAgICAgIG1lbWJlclJlZklkOiAnJ1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBzID0gX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQudG9wUmVzdWx0U2l6ZTsgcyA8IF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmRlZmF1bHRFbXB0eUxpc3Q7IHMrKykge1xyXG4gICAgICBjb25zdCByYW5rID0gcyArIDE7XHJcblxyXG4gICAgICByZW1haW5pbmdSZXN1bHRzLnB1c2goe1xyXG4gICAgICAgIG5hbWU6ICctLScsXHJcbiAgICAgICAgcmFuazogcmFuayxcclxuICAgICAgICBwb2ludHM6ICctLScsXHJcbiAgICAgICAgbWVtYmVySWQ6ICcnLFxyXG4gICAgICAgIG1lbWJlclJlZklkOiAnJ1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBfdGhpcy51cGRhdGVMZWFkZXJib2FyZFRvcFJlc3VsdHModG9wUmVzdWx0cyk7XHJcbiAgICBfdGhpcy51cGRhdGVMZWFkZXJib2FyZFJlc3VsdHMocmVtYWluaW5nUmVzdWx0cyk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy51cGRhdGVMZWFkZXJib2FyZFRvcFJlc3VsdHMgPSBmdW5jdGlvbiAodG9wUmVzdWx0cykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciByYW5rQ2hlY2sgPSBbXTtcclxuICAgIHZhciBjbGVhbnVwUmFua0NoZWNrID0gW107XHJcblxyXG4gICAgLy8gY2xlYW51cFxyXG4gICAgd2luZG93Lm1hcE9iamVjdCh0b3BSZXN1bHRzLCBmdW5jdGlvbiAobGIpIHtcclxuICAgICAgY2xlYW51cFJhbmtDaGVjay5wdXNoKGxiLnJhbmspO1xyXG4gICAgICBvYmplY3RJdGVyYXRvcihxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC50b3BSZXN1bHRzLCAnLmNsLWxiLXJhbmstJyArIGxiLnJhbmsgKyAnLmNsLXNoYXJlZC1yYW5rJyksIGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICByZW1vdmUob2JqKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBvYmplY3RJdGVyYXRvcihxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC50b3BSZXN1bHRzLCAnLmNsLWxiLXJvdycpLCBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgIHZhciByYW5rID0gcGFyc2VJbnQob2JqLmRhdGFzZXQucmFuayk7XHJcbiAgICAgIGlmIChjbGVhbnVwUmFua0NoZWNrLmluZGV4T2YocmFuaykgPT09IC0xICYmIHJhbmsgPiBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5kZWZhdWx0RW1wdHlMaXN0KSB7XHJcbiAgICAgICAgcmVtb3ZlKG9iaik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHdpbmRvdy5tYXBPYmplY3QodG9wUmVzdWx0cywgZnVuY3Rpb24gKGxiKSB7XHJcbiAgICAgIHZhciBjb3VudCA9IDA7XHJcbiAgICAgIHZhciBpY29uID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQucG9wdWxhdGVJZGVudGljb25CYXNlNjRJbWFnZShsYi5tZW1iZXJJZCk7XHJcbiAgICAgIHZhciBtZW1iZXJGb3VuZCA9IChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5tZW1iZXJJZCA9PT0gbGIubWVtYmVySWQgfHwgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQgPT09IGxiLm1lbWJlclJlZklkKTtcclxuICAgICAgdmFyIG1lbWJlck5hbWUgPSAobWVtYmVyRm91bmQpID8gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQueW91IDogbGIubmFtZTtcclxuICAgICAgdmFyIHJld2FyZCA9IF90aGlzLmdldFJld2FyZChsYi5yYW5rKTtcclxuICAgICAgdmFyIGNoYW5nZSA9ICh0eXBlb2YgbGIuY2hhbmdlID09PSAndW5kZWZpbmVkJykgPyAwIDogbGIuY2hhbmdlO1xyXG4gICAgICB2YXIgZ3Jvd3RoVHlwZSA9IChjaGFuZ2UgPCAwKSA/ICdkb3duJyA6IChjaGFuZ2UgPiAwID8gJ3VwJyA6ICdzYW1lJyk7XHJcbiAgICAgIHZhciBncm93dGhJY29uID0gXCI8c3BhbiBjbGFzcz0nY2wtZ3Jvd3RoLWljb24gY2wtZ3Jvd3RoLVwiICsgZ3Jvd3RoVHlwZSArIFwiJz48L3NwYW4+XCI7XHJcblxyXG4gICAgICBpZiAocmFua0NoZWNrLmluZGV4T2YobGIucmFuaykgIT09IC0xKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcmMgPSAwOyByYyA8IHJhbmtDaGVjay5sZW5ndGg7IHJjKyspIHtcclxuICAgICAgICAgIGlmIChsYi5yYW5rID09PSByYW5rQ2hlY2tbcmNdKSB7XHJcbiAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBfdGhpcy5sZWFkZXJib2FyZFJvd1VwZGF0ZShcclxuICAgICAgICBsYi5yYW5rLFxyXG4gICAgICAgIGljb24sIC8vIGljb25cclxuICAgICAgICBtZW1iZXJOYW1lLFxyXG4gICAgICAgIGNoYW5nZSxcclxuICAgICAgICBncm93dGhJY29uLCAvLyBncm93dGhcclxuICAgICAgICBsYi5wb2ludHMsXHJcbiAgICAgICAgcmV3YXJkLCAvLyByZXdhcmRcclxuICAgICAgICBjb3VudCxcclxuICAgICAgICBtZW1iZXJGb3VuZCxcclxuICAgICAgICBmdW5jdGlvbiAocmFuaywgaWNvbiwgbmFtZSwgY2hhbmdlLCBncm93dGgsIHBvaW50cywgcmV3YXJkLCBjb3VudCwgbWVtYmVyRm91bmQpIHtcclxuICAgICAgICAgIHZhciBuZXdSb3cgPSBfdGhpcy5sZWFkZXJib2FyZFJvdyhyYW5rLCBpY29uLCBuYW1lLCBjaGFuZ2UsIGdyb3d0aCwgcG9pbnRzLCByZXdhcmQsIGNvdW50LCBtZW1iZXJGb3VuZCk7XHJcbiAgICAgICAgICB2YXIgcHJldkNlbGxSb3cgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5jb250YWluZXIsICcuY2wtbGItcmFuay0nICsgcmFuayArICcuY2wtbGItY291bnQtJyArIChjb3VudCAtIDEpKTtcclxuXHJcbiAgICAgICAgICBpZiAocHJldkNlbGxSb3cgIT09IG51bGwgJiYgdHlwZW9mIHByZXZDZWxsUm93Lmxlbmd0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgYXBwZW5kTmV4dChwcmV2Q2VsbFJvdywgbmV3Um93KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnRvcFJlc3VsdHMuYXBwZW5kQ2hpbGQobmV3Um93KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgICByYW5rQ2hlY2sucHVzaChsYi5yYW5rKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuZ2V0UmV3YXJkID0gZnVuY3Rpb24gKHJhbmspIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgcmV3YXJkUmVzcG9uc2UgPSBbXTtcclxuXHJcbiAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09ICd1bmRlZmluZWQnICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09IG51bGwpIHtcclxuICAgICAgd2luZG93Lm1hcE9iamVjdChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnJld2FyZHMsIGZ1bmN0aW9uIChyZXdhcmQpIHtcclxuICAgICAgICBpZiAocmV3YXJkLnJld2FyZFJhbmsgaW5zdGFuY2VvZiBBcnJheSAmJiByZXdhcmQucmV3YXJkUmFuay5pbmRleE9mKHJhbmspICE9PSAtMSkge1xyXG4gICAgICAgICAgcmV3YXJkUmVzcG9uc2UucHVzaChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5yZXdhcmRzLnJld2FyZEZvcm1hdHRlcihyZXdhcmQpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXdhcmRSZXNwb25zZS5qb2luKCcsICcpO1xyXG4gIH07XHJcblxyXG4gIHRoaXMudXBkYXRlTGVhZGVyYm9hcmRSZXN1bHRzID0gZnVuY3Rpb24gKHJlbWFpbmluZ1Jlc3VsdHMpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgcmFua0NoZWNrID0gW107XHJcbiAgICB2YXIgY2xlYW51cFJhbmtDaGVjayA9IFtdO1xyXG5cclxuICAgIC8vIGNsZWFudXBcclxuICAgIHdpbmRvdy5tYXBPYmplY3QocmVtYWluaW5nUmVzdWx0cywgZnVuY3Rpb24gKGxiKSB7XHJcbiAgICAgIGNsZWFudXBSYW5rQ2hlY2sucHVzaChsYi5yYW5rKTtcclxuICAgICAgb2JqZWN0SXRlcmF0b3IocXVlcnkoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQubGlzdCwgJy5jbC1sYi1yYW5rLScgKyBsYi5yYW5rICsgJy5jbC1zaGFyZWQtcmFuaycpLCBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgcmVtb3ZlKG9iaik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgb2JqZWN0SXRlcmF0b3IocXVlcnkoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQuY29udGFpbmVyLCAnLmNsLWxiLXJvdycpLCBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIHJhbmsgPSBwYXJzZUludChvYmouZGF0YXNldC5yYW5rKTtcclxuICAgICAgICBpZiAoY2xlYW51cFJhbmtDaGVjay5pbmRleE9mKHJhbmspID09PSAtMSAmJiByYW5rID4gX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQuZGVmYXVsdEVtcHR5TGlzdCkge1xyXG4gICAgICAgICAgcmVtb3ZlKG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2cob2JqLmRhdGFzZXQsIG9iai5hdHRyaWJ1dGVzLCBvYmopO1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHdpbmRvdy5tYXBPYmplY3QocmVtYWluaW5nUmVzdWx0cywgZnVuY3Rpb24gKGxiKSB7XHJcbiAgICAgIHZhciBjb3VudCA9IDA7XHJcbiAgICAgIHZhciBpY29uID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQucG9wdWxhdGVJZGVudGljb25CYXNlNjRJbWFnZShsYi5tZW1iZXJJZCk7XHJcbiAgICAgIHZhciBtZW1iZXJGb3VuZCA9IChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5tZW1iZXJJZCA9PT0gbGIubWVtYmVySWQgfHwgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQgPT09IGxiLm1lbWJlclJlZklkKTtcclxuICAgICAgdmFyIG1lbWJlck5hbWUgPSAobWVtYmVyRm91bmQpID8gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQueW91IDogbGIubmFtZTtcclxuICAgICAgdmFyIHJld2FyZCA9IF90aGlzLmdldFJld2FyZChsYi5yYW5rKTtcclxuICAgICAgdmFyIGNoYW5nZSA9ICh0eXBlb2YgbGIuY2hhbmdlID09PSAndW5kZWZpbmVkJykgPyAwIDogbGIuY2hhbmdlO1xyXG4gICAgICB2YXIgZ3Jvd3RoVHlwZSA9IChjaGFuZ2UgPCAwKSA/ICdkb3duJyA6IChjaGFuZ2UgPiAwID8gJ3VwJyA6ICdzYW1lJyk7XHJcbiAgICAgIHZhciBncm93dGhJY29uID0gXCI8c3BhbiBjbGFzcz0nY2wtZ3Jvd3RoLWljb24gY2wtZ3Jvd3RoLVwiICsgZ3Jvd3RoVHlwZSArIFwiJz48L3NwYW4+XCI7XHJcblxyXG4gICAgICBpZiAocmFua0NoZWNrLmluZGV4T2YobGIucmFuaykgIT09IC0xKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcmMgPSAwOyByYyA8IHJhbmtDaGVjay5sZW5ndGg7IHJjKyspIHtcclxuICAgICAgICAgIGlmIChsYi5yYW5rID09PSByYW5rQ2hlY2tbcmNdKSB7XHJcbiAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBfdGhpcy5sZWFkZXJib2FyZFJvd1VwZGF0ZShcclxuICAgICAgICBsYi5yYW5rLFxyXG4gICAgICAgIGljb24sIC8vIGljb25cclxuICAgICAgICBtZW1iZXJOYW1lLFxyXG4gICAgICAgIGNoYW5nZSxcclxuICAgICAgICBncm93dGhJY29uLCAvLyBncm93dGhcclxuICAgICAgICBsYi5wb2ludHMsXHJcbiAgICAgICAgcmV3YXJkLFxyXG4gICAgICAgIGNvdW50LFxyXG4gICAgICAgIG1lbWJlckZvdW5kLFxyXG4gICAgICAgIGZ1bmN0aW9uIChyYW5rLCBpY29uLCBuYW1lLCBjaGFuZ2UsIGdyb3d0aCwgcG9pbnRzLCByZXdhcmQsIGNvdW50LCBtZW1iZXJGb3VuZCkge1xyXG4gICAgICAgICAgdmFyIG5ld1JvdyA9IF90aGlzLmxlYWRlcmJvYXJkUm93KHJhbmssIGljb24sIG5hbWUsIG5hbWUsIGdyb3d0aCwgcG9pbnRzLCByZXdhcmQsIGNvdW50LCBtZW1iZXJGb3VuZCk7XHJcbiAgICAgICAgICB2YXIgcHJldkNlbGxSb3cgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5jb250YWluZXIsICcuY2wtbGItcmFuay0nICsgcmFuayArICcuY2wtbGItY291bnQtJyArIChjb3VudCAtIDEpKTtcclxuXHJcbiAgICAgICAgICBpZiAocHJldkNlbGxSb3cgIT09IG51bGwgJiYgdHlwZW9mIHByZXZDZWxsUm93Lmxlbmd0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgYXBwZW5kTmV4dChwcmV2Q2VsbFJvdywgbmV3Um93KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmxpc3QuYXBwZW5kQ2hpbGQobmV3Um93KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgICByYW5rQ2hlY2sucHVzaChsYi5yYW5rKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHRoaXMudXBkYXRlTGVhZGVyYm9hcmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIHRvcFJlc3VsdHMgPSBbXTtcclxuICAgIHZhciByZW1haW5pbmdSZXN1bHRzID0gW107XHJcblxyXG4gICAgX3RoaXMucG9wdWxhdGVMZWFkZXJib2FyZFJlc3VsdHNXaXRoRGVmYXVsdEVudHJpZXMoKTtcclxuXHJcbiAgICB3aW5kb3cubWFwT2JqZWN0KF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmxlYWRlcmJvYXJkLmxlYWRlcmJvYXJkRGF0YSwgZnVuY3Rpb24gKGxiKSB7XHJcbiAgICAgIGlmIChsYi5yYW5rIDw9IF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnRvcFJlc3VsdFNpemUpIHtcclxuICAgICAgICB0b3BSZXN1bHRzLnB1c2gobGIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlbWFpbmluZ1Jlc3VsdHMucHVzaChsYik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIF90aGlzLnVwZGF0ZUxlYWRlcmJvYXJkVG9wUmVzdWx0cyh0b3BSZXN1bHRzKTtcclxuICAgIF90aGlzLnVwZGF0ZUxlYWRlcmJvYXJkUmVzdWx0cyhyZW1haW5pbmdSZXN1bHRzKTtcclxuXHJcbiAgICB2YXIgbWVtYmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQubGlzdCwgJy5jbC1sYi1tZW1iZXItcm93Jyk7XHJcbiAgICBpZiAobWVtYmVyICE9PSBudWxsKSB7XHJcbiAgICAgIF90aGlzLm1pc3NpbmdNZW1iZXIoX3RoaXMuaXNFbGVtZW50VmlzaWJsZUluVmlldyhtZW1iZXIsIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmxpc3QucGFyZW50Tm9kZSkpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMudXBkYXRlTGVhZGVyYm9hcmRUaW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBkaWZmID0gbW9tZW50KF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc2NoZWR1bGVkU3RhcnQpLmRpZmYobW9tZW50KCkpO1xyXG4gICAgdmFyIGRhdGUgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5mb3JtYXREYXRlVGltZShtb21lbnQuZHVyYXRpb24oZGlmZikpO1xyXG5cclxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC50aW1lckludGVydmFsKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC50aW1lckludGVydmFsKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGlmZiA8IDAgJiYgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zdGF0dXNDb2RlID09PSAwKSB7XHJcbiAgICAgIGRhdGUgPSAnJztcclxuICAgIH0gZWxzZSBpZiAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zdGF0dXNDb2RlID4gMCAmJiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnN0YXR1c0NvZGUgPCAzKSB7XHJcbiAgICAgIGRpZmYgPSBtb21lbnQoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zY2hlZHVsZWRFbmQpLmRpZmYobW9tZW50KCkpO1xyXG4gICAgICBkYXRlID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuZm9ybWF0RGF0ZVRpbWUobW9tZW50LmR1cmF0aW9uKGRpZmYpKTtcclxuICAgIH0gZWxzZSBpZiAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zdGF0dXNDb2RlID09PSAzKSB7XHJcbiAgICAgIGRhdGUgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi50b3VybmFtZW50cy5maW5pc2hpbmc7XHJcbiAgICB9IGVsc2UgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RhdHVzQ29kZSA+PSA0KSB7XHJcbiAgICAgIGRhdGUgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi50b3VybmFtZW50cy5maW5pc2hlZDtcclxuICAgIH1cclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5oZWFkZXJEYXRlLmlubmVySFRNTCA9IGRhdGU7XHJcbiAgICBfdGhpcy5zZXR0aW5ncy5kZXRhaWxzQ29udGFpbmVyRGF0ZS5pbm5lckhUTUwgPSBkYXRlO1xyXG5cclxuICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLnRpbWVySW50ZXJ2YWwgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgX3RoaXMudXBkYXRlTGVhZGVyYm9hcmRUaW1lKCk7XHJcbiAgICB9LCAxMDAwKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmxlYWRlcmJvYXJkRGV0YWlsc1VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgbWFpbkxhYmVsID0gcXVlcnkoX3RoaXMuc2V0dGluZ3Muc2VjdGlvbiwgJy5jbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWNvbnRlbnQtbGFiZWwnKTtcclxuXHJcbiAgICBtYWluTGFiZWwuaW5uZXJIVE1MID0gKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09IG51bGwpID8gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5sYWJlbCA6IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnRvdXJuYW1lbnRzLm5vQXZhaWxhYmxlQ29tcGV0aXRpb25zO1xyXG4gIH07XHJcblxyXG4gIHRoaXMubGVhZGVyYm9hcmRPcHRJbkNoZWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBvcHRJbiA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLnNlY3Rpb24sICcuY2wtbWFpbi13aWRnZXQtbGItb3B0aW4tYWN0aW9uJyk7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24gIT09IG51bGwgJiYgdHlwZW9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uLm9wdGluUmVxdWlyZWQgPT09ICdib29sZWFuJyAmJiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbi5vcHRpblJlcXVpcmVkKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW4gPT09ICdib29sZWFuJyAmJiAhX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW4pIHtcclxuICAgICAgICBvcHRJbi5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi50b3VybmFtZW50cy5lbnRlcjtcclxuICAgICAgICBvcHRJbi5wYXJlbnROb2RlLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG9wdEluLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb3B0SW4ucGFyZW50Tm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIGNsZWFudXAvcmVjb3ZlciBhY3Rpdml0eVxyXG4gIHRoaXMucHJlTG9hZGVyUmVydW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlTG9hZGVyQWN0aXZlICYmIF90aGlzLnNldHRpbmdzLnByZUxvYWRlci5wcmVsb2FkZXJDYWxsYmFja1JlY292ZXJ5ICE9PSBudWxsICYmXHJcbiAgICAgIF90aGlzLnNldHRpbmdzLnByZUxvYWRlci5wcmVMb2FkZXJsYXN0QXR0ZW1wdCAhPT0gbnVsbCAmJiB0eXBlb2YgX3RoaXMuc2V0dGluZ3MucHJlTG9hZGVyLnByZUxvYWRlcmxhc3RBdHRlbXB0ID09PSAnbnVtYmVyJyAmJlxyXG4gICAgICAoX3RoaXMuc2V0dGluZ3MucHJlTG9hZGVyLnByZUxvYWRlcmxhc3RBdHRlbXB0ICsgODAwMCkgPCBuZXcgRGF0ZSgpLmdldFRpbWUoKSkge1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlbG9hZGVyQ2FsbGJhY2tSZWNvdmVyeSgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMucHJlbG9hZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBwcmVMb2FkZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5zZWN0aW9uLCAnLmNsLW1haW4td2lkZ2V0LXByZS1sb2FkZXInKTtcclxuICAgIC8vIHZhciBjb250ZW50ID0gcXVlcnkoX3RoaXMuc2V0dGluZ3Muc2VjdGlvbiwgJy5jbC1tYWluLXdpZGdldC1wcmUtbG9hZGVyLWNvbnRlbnQnKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzaG93OiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlTG9hZGVyQWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlTG9hZGVybGFzdEF0dGVtcHQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICBwcmVMb2FkZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBwcmVMb2FkZXIuc3R5bGUub3BhY2l0eSA9IDE7XHJcbiAgICAgICAgfSwgMjApO1xyXG5cclxuICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MucHJlTG9hZGVyLnByZWxvYWRlckNhbGxiYWNrUmVjb3ZlcnkgPT09IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlbG9hZGVyQ2FsbGJhY2tSZWNvdmVyeSA9IGNhbGxiYWNrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgfSxcclxuICAgICAgaGlkZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF90aGlzLnNldHRpbmdzLnByZUxvYWRlci5wcmVMb2FkZXJBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlTG9hZGVybGFzdEF0dGVtcHQgPSBudWxsO1xyXG4gICAgICAgIHByZUxvYWRlci5zdHlsZS5vcGFjaXR5ID0gMDtcclxuXHJcbiAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLnByZUxvYWRlci5wcmVsb2FkZXJDYWxsYmFja1JlY292ZXJ5ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlbG9hZGVyQ2FsbGJhY2tSZWNvdmVyeSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHByZUxvYWRlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH0sIDIwMCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5sb2FkTGVhZGVyYm9hcmQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciA9PT0gbnVsbCkge1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5jb250YWluZXIgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5iaW5kQ29udGFpbmVyLmFwcGVuZENoaWxkKF90aGlzLmxheW91dCgpKTtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MubmF2aWdhdGlvbiA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWNvbnRhaW5lcicpO1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5zZWN0aW9uID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LXNlY3Rpb24tY29udGFpbmVyJyk7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmNvbnRhaW5lciA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLnNlY3Rpb24sICcuY2wtbWFpbi13aWRnZXQtbGItbGVhZGVyYm9hcmQnKTtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQuaGVhZGVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LWxiLWxlYWRlcmJvYXJkLWhlYWRlci1sYWJlbHMnKTtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQubGlzdCA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1sYi1sZWFkZXJib2FyZC1ib2R5LXJlcycpO1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC50b3BSZXN1bHRzID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LWxiLWxlYWRlcmJvYXJkLWhlYWRlci10b3AtcmVzJyk7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLmRldGFpbHNDb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1jb250YWluZXInKTtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudExpc3RDb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtdG91cm5hbWVudHMtbGlzdCcpO1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5kZXRhaWxzQ29udGFpbmVyRGF0ZSA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWhlYWRlci1kYXRlJyk7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLmhlYWRlckRhdGUgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtbGItaGVhZGVyLWRhdGUnKTtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MuYWNoaWV2ZW1lbnQuY29udGFpbmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LXNlY3Rpb24tYWNoJyk7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLmFjaGlldmVtZW50LmRldGFpbHNDb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtYWNoLWRldGFpbHMtY29udGFpbmVyJyk7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLnJld2FyZC5jb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtc2VjdGlvbi1yZXdhcmQnKTtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MucmV3YXJkLmRldGFpbHNDb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtcmV3YXJkLWRldGFpbHMtY29udGFpbmVyJyk7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLm1lc3NhZ2VzLmNvbnRhaW5lciA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1zZWN0aW9uLWluYm94Jyk7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLm1lc3NhZ2VzLmRldGFpbHNDb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtaW5ib3gtZGV0YWlscy1jb250YWluZXInKTtcclxuXHJcbiAgICAgIF90aGlzLmxlYWRlcmJvYXJkSGVhZGVyKCk7XHJcbiAgICAgIF90aGlzLmV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX3RoaXMubGVhZGVyYm9hcmRPcHRJbkNoZWNrKCk7XHJcbiAgICBfdGhpcy5sZWFkZXJib2FyZERldGFpbHNVcGRhdGUoKTtcclxuICAgIF90aGlzLnVwZGF0ZUxlYWRlcmJvYXJkKCk7XHJcblxyXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QgIT09IG51bGwpIHtcclxuICAgICAgX3RoaXMudXBkYXRlTGVhZGVyYm9hcmRUaW1lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBjYWxsYmFjaygpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMuY2xlYXJBbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLnNldHRpbmdzLmFjdGl2ZSA9IGZhbHNlO1xyXG5cclxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC50aW1lckludGVydmFsKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC50aW1lckludGVydmFsKTtcclxuICAgIH1cclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5wcmVMb2FkZXIucHJlTG9hZGVyQWN0aXZlID0gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5oaWRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLmNsZWFyQWxsKCk7XHJcblxyXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciAhPT0gbnVsbCkge1xyXG4gICAgICByZW1vdmVDbGFzcyhfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICdjbC1zaG93Jyk7XHJcblxyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcbiAgICAgICAgX3RoaXMuaGlkZUNvbXBldGl0aW9uRGV0YWlscygpO1xyXG4gICAgICAgIF90aGlzLmhpZGVBY2hpZXZlbWVudERldGFpbHMoKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIDMwKTtcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5taXNzaW5nTWVtYmVyID0gZnVuY3Rpb24gKGlzVmlzaWJsZSkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBhcmVhID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LWxiLW1pc3NpbmctbWVtYmVyJyk7XHJcblxyXG4gICAgaWYgKCFpc1Zpc2libGUpIHtcclxuICAgICAgdmFyIG1lbWJlciA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmxpc3QsICcuY2wtbGItbWVtYmVyLXJvdycpO1xyXG5cclxuICAgICAgaWYgKGFyZWEgIT09IG51bGwgJiYgbWVtYmVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgYXJlYS5pbm5lckhUTUwgPSBtZW1iZXIuaW5uZXJIVE1MO1xyXG5cclxuICAgICAgICBhcmVhLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFyZWEuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXJlYS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMuaXNFbGVtZW50VmlzaWJsZUluVmlldyA9IGZ1bmN0aW9uIChlbCwgY29udGFpbmVyKSB7XHJcbiAgICB2YXIgcG9zaXRpb24gPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIHZhciBlbGVtQ29udGFpbmVyID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgdmFyIGVsZW1Ub3AgPSBwb3NpdGlvbi50b3A7XHJcbiAgICB2YXIgZWxlbUJvdHRvbSA9IHBvc2l0aW9uLmJvdHRvbTtcclxuICAgIHZhciBlbGVtSGVpZ2h0ID0gcG9zaXRpb24uaGVpZ2h0O1xyXG5cclxuICAgIHJldHVybiBlbGVtVG9wIDw9IGVsZW1Db250YWluZXIudG9wXHJcbiAgICAgID8gZWxlbUNvbnRhaW5lci50b3AgLSBlbGVtVG9wIDw9IGVsZW1IZWlnaHQgOiBlbGVtQm90dG9tIC0gZWxlbUNvbnRhaW5lci5ib3R0b20gPD0gZWxlbUhlaWdodDtcclxuICB9O1xyXG5cclxuICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5saXN0LnBhcmVudE5vZGUub25zY3JvbGwgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB2YXIgbWVtYmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MubGVhZGVyYm9hcmQubGlzdCwgJy5jbC1sYi1tZW1iZXItcm93Jyk7XHJcblxyXG4gICAgICBpZiAobWVtYmVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgX3RoaXMubWlzc2luZ01lbWJlcihfdGhpcy5pc0VsZW1lbnRWaXNpYmxlSW5WaWV3KG1lbWJlciwgZXZ0LnRhcmdldCkpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5vbnJlc2l6ZSA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgdmFyIG1lbWJlciA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmxpc3QsICcuY2wtbGItbWVtYmVyLXJvdycpO1xyXG5cclxuICAgICAgaWYgKG1lbWJlciAhPT0gbnVsbCkge1xyXG4gICAgICAgIF90aGlzLm1pc3NpbmdNZW1iZXIoX3RoaXMuaXNFbGVtZW50VmlzaWJsZUluVmlldyhtZW1iZXIsIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmxpc3QucGFyZW50Tm9kZSkpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIC8vIHRoaXMuY2hlY2tMZWFkZXJib2FyZFNjcm9sbENvbnRhaW5lciA9IGZ1bmN0aW9uKCl7XHJcbiAgLy8gIHZhciBfdGhpcyA9IHRoaXMsXHJcbiAgLy8gICAgbGJTY3JvbGxDb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5jb250YWluZXIsIFwiLmNsLW1haW4td2lkZ2V0LWxiLWxlYWRlcmJvYXJkLWJvZHlcIik7XHJcbiAgLy9cclxuICAvLyAgaWYoIHNjcm9sbEVuYWJsZWQobGJTY3JvbGxDb250YWluZXIpICl7XHJcbiAgLy8gICAgYWRkQ2xhc3MobGJTY3JvbGxDb250YWluZXIsIFwiY2wtZWxlbWVudC1zY3JvbGxhYmxlXCIpO1xyXG4gIC8vICB9ZWxzZXtcclxuICAvLyAgICByZW1vdmVDbGFzcyhsYlNjcm9sbENvbnRhaW5lciwgXCJjbC1lbGVtZW50LXNjcm9sbGFibGVcIik7XHJcbiAgLy8gIH1cclxuICAvLyB9O1xyXG5cclxuICB0aGlzLmNvbXBldGl0aW9uRGV0YWlsc09wdEluQnV0dG9uU3RhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIG9wdEluID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLW9wdGluLWFjdGlvbicpO1xyXG5cclxuICAgIGlmICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW5SZXF1aXJlZCA9PT0gJ2Jvb2xlYW4nICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uLm9wdGluUmVxdWlyZWQpIHtcclxuICAgICAgaWYgKHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbi5vcHRpbiA9PT0gJ2Jvb2xlYW4nICYmICFfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbi5vcHRpbikge1xyXG4gICAgICAgIG9wdEluLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnRvdXJuYW1lbnRzLmVudGVyO1xyXG4gICAgICAgIHJlbW92ZUNsYXNzKG9wdEluLCAnY2wtZGlzYWJsZWQnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvcHRJbi5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi50b3VybmFtZW50cy5yZWdpc3RlcmVkO1xyXG4gICAgICAgIGFkZENsYXNzKG9wdEluLCAnY2wtZGlzYWJsZWQnKTtcclxuICAgICAgfVxyXG4gICAgICBvcHRJbi5wYXJlbnROb2RlLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb3B0SW4ucGFyZW50Tm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMubG9hZENvbXBldGl0aW9uRGV0YWlscyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBsYWJlbCA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1oZWFkZXItbGFiZWwnKTtcclxuICAgIC8vIHZhciBkYXRlID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1sYi1kZXRhaWxzLWhlYWRlci1kYXRlJyk7XHJcbiAgICB2YXIgYm9keSA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtbGItZGV0YWlscy1ib2R5Jyk7XHJcbiAgICB2YXIgaW1hZ2UgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5kZXRhaWxzQ29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LWxiLWRldGFpbHMtYm9keS1pbWFnZS1jb250Jyk7XHJcblxyXG4gICAgaW1hZ2UuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBsYWJlbC5pbm5lckhUTUwgPSAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5sYWJlbC5sZW5ndGggPiAwKSA/IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QubGFiZWwgOiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb21wZXRpdGlvbi5sYWJlbDtcclxuICAgIGJvZHkuaW5uZXJIVE1MID0gKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3QuZGVzY3JpcHRpb24ubGVuZ3RoID4gMCkgPyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LmRlc2NyaXB0aW9uIDogX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24uZGVzY3JpcHRpb247XHJcbiAgICBfdGhpcy5jb21wZXRpdGlvbkRldGFpbHNPcHRJbkJ1dHRvblN0YXRlKCk7XHJcblxyXG4gICAgX3RoaXMuc2V0dGluZ3MuZGV0YWlsc0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIF90aGlzLnNldHRpbmdzLmhlYWRlckRhdGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uZXh0cmFjdEltYWdlSGVhZGVyKSB7XHJcbiAgICAgIG9iamVjdEl0ZXJhdG9yKHF1ZXJ5KGJvZHksICdpbWcnKSwgZnVuY3Rpb24gKGltZywga2V5LCBjb3VudCkge1xyXG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgdmFyIG5ld0ltZyA9IGltZy5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICBpbWFnZS5hcHBlbmRDaGlsZChuZXdJbWcpO1xyXG5cclxuICAgICAgICAgIHJlbW92ZShpbWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGFkZENsYXNzKF90aGlzLnNldHRpbmdzLmRldGFpbHNDb250YWluZXIsICdjbC1zaG93Jyk7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xyXG4gICAgfSwgNTApO1xyXG4gIH07XHJcblxyXG4gIHRoaXMubG9hZENvbXBldGl0aW9uTGlzdCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgYWpheEluc3RhbmNlKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIGxpc3RSZXNDb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50TGlzdENvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC10b3VybmFtZW50cy1saXN0LWJvZHktcmVzJyk7XHJcbiAgICB2YXIgcHJlTG9hZGVyID0gX3RoaXMucHJlbG9hZGVyKCk7XHJcblxyXG4gICAgcHJlTG9hZGVyLnNob3coZnVuY3Rpb24gKCkge1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5jaGVja0ZvckF2YWlsYWJsZUNvbXBldGl0aW9ucyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFjY29yZGlvbk9iaiA9IF90aGlzLmFjY29yZGlvblN0eWxlKF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRzU2VjdGlvbi5hY2NvcmRpb25MYXlvdXQsIGZ1bmN0aW9uIChhY2NvcmRpb25TZWN0aW9uLCBsaXN0Q29udGFpbmVyLCB0b3BFbnRyeUNvbnRhaW5lciwgbGF5b3V0KSB7XHJcbiAgICAgICAgICB2YXIgdG91cm5hbWVudERhdGEgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50b3VybmFtZW50c1tsYXlvdXQudHlwZV07XHJcblxyXG4gICAgICAgICAgaWYgKHR5cGVvZiB0b3VybmFtZW50RGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgaWYgKHRvdXJuYW1lbnREYXRhLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgIGFjY29yZGlvblNlY3Rpb24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aW5kb3cubWFwT2JqZWN0KHRvdXJuYW1lbnREYXRhLCBmdW5jdGlvbiAodG91cm5hbWVudCwga2V5LCBjb3VudCkge1xyXG4gICAgICAgICAgICAgIGlmICgoY291bnQgKyAxKSA8PSBsYXlvdXQuc2hvd1RvcFJlc3VsdHMgJiYgcXVlcnkodG9wRW50cnlDb250YWluZXIsICcuY2wtdG91cm5hbWVudC0nICsgdG91cm5hbWVudC5pZCkgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0b3BFbnRyeUNvbnRhaW5lUmxpc3RJdGVtID0gX3RoaXMudG91cm5hbWVudEl0ZW0odG91cm5hbWVudCk7XHJcbiAgICAgICAgICAgICAgICB0b3BFbnRyeUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0b3BFbnRyeUNvbnRhaW5lUmxpc3RJdGVtKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmIChxdWVyeShsaXN0Q29udGFpbmVyLCAnLmNsLXRvdXJuYW1lbnQtJyArIHRvdXJuYW1lbnQuaWQpID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdEl0ZW0gPSBfdGhpcy50b3VybmFtZW50SXRlbSh0b3VybmFtZW50KTtcclxuICAgICAgICAgICAgICAgIGxpc3RDb250YWluZXIuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxpc3RSZXNDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgbGlzdFJlc0NvbnRhaW5lci5hcHBlbmRDaGlsZChhY2NvcmRpb25PYmopO1xyXG5cclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy50b3VybmFtZW50TGlzdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGFkZENsYXNzKF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRMaXN0Q29udGFpbmVyLCAnY2wtc2hvdycpO1xyXG5cclxuICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XHJcblxyXG4gICAgICAgICAgcHJlTG9hZGVyLmhpZGUoKTtcclxuICAgICAgICB9LCA1MCk7XHJcbiAgICAgIH0sIGFqYXhJbnN0YW5jZSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB0aGlzLmhpZGVDb21wZXRpdGlvbkxpc3QgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmVtb3ZlQ2xhc3MoX3RoaXMuc2V0dGluZ3MudG91cm5hbWVudExpc3RDb250YWluZXIsICdjbC1zaG93Jyk7XHJcblxyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLnRvdXJuYW1lbnRMaXN0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xyXG4gICAgfSwgMjAwKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmhpZGVDb21wZXRpdGlvbkRldGFpbHMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmVtb3ZlQ2xhc3MoX3RoaXMuc2V0dGluZ3MuZGV0YWlsc0NvbnRhaW5lciwgJ2NsLXNob3cnKTtcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5kZXRhaWxzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLmhlYWRlckRhdGUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xyXG4gICAgfSwgMjAwKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmFjaGlldmVtZW50SXRlbSA9IGZ1bmN0aW9uIChhY2gsIGFjaGlldmVkLCBwZXJjKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIGxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgZGV0YWlsc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGRldGFpbHNXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBjYXRlZ29yeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGRlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgcHJvZ3Jlc3Npb25XcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgcHJvZ3Jlc3Npb25Cb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsgLy8gYm94IHdpdGggY29udGFpbmVyICYgYmFyICYgcGVyY2VudGFnZVxyXG4gICAgdmFyIHByb2dyZXNzaW9uQ29udCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOyAvLyBjb250YWluZXJcclxuICAgIHZhciBwcm9ncmVzc2lvbkJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIHByb2dyZXNzaW9uUGVyY2VudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGlzc3VlZEJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGlzc3VlZEJveENvdW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgaXNzdWVkQm94Q2hlY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgIHZhciBtb3JlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgdmFyIHJld2FyZE5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBjcG9tbnRhaW5zSW1hZ2UgPSAodHlwZW9mIGFjaC5pY29uICE9PSAndW5kZWZpbmVkJyAmJiBhY2guaWNvbi5sZW5ndGggPiAwKTtcclxuXHJcbiAgICBsaXN0SXRlbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LWl0ZW0gY2wtYWNoLScgKyBhY2guaWQgKyAoY3BvbW50YWluc0ltYWdlID8gJyBjbC1hY2gtd2l0aC1pbWFnZScgOiAnJykpO1xyXG4gICAgZGV0YWlsc0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LWRldGFpbHMtY29udCcpO1xyXG4gICAgZGV0YWlsc1dyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1hY2gtbGlzdC1kZXRhaWxzLXdyYXAnKTtcclxuICAgIGxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtYWNoLWxpc3QtZGV0YWlscy1sYWJlbCcpO1xyXG4gICAgY2F0ZWdvcnkuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1hY2gtbGlzdC1kZXRhaWxzLWNhdGVnb3J5Jyk7XHJcbiAgICBkZXNjcmlwdGlvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LWRldGFpbHMtZGVzY3JpcHRpb24nKTtcclxuICAgIHByb2dyZXNzaW9uV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LXByb2dyZXNzaW9uJyk7XHJcbiAgICBwcm9ncmVzc2lvbkJveC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LXByb2dyZXNzaW9uLWJveCcpO1xyXG4gICAgcHJvZ3Jlc3Npb25Db250LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtYWNoLWxpc3QtcHJvZ3Jlc3Npb24tY29udCcpO1xyXG4gICAgcHJvZ3Jlc3Npb25CYXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1hY2gtbGlzdC1wcm9ncmVzc2lvbi1iYXInKTtcclxuICAgIHByb2dyZXNzaW9uUGVyY2VudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LXBlcmNlbnQtbnVtYmVyJyk7XHJcbiAgICBpc3N1ZWRCb3guc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1hY2gtbGlzdC1pc3N1ZWQtYm94Jyk7XHJcbiAgICBpc3N1ZWRCb3hDb3VudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LWlzc3VlZC1ib3gtY291bnQnKTtcclxuICAgIGlzc3VlZEJveENoZWNrLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtYWNoLWxpc3QtaXNzdWVkLWJveC1jaGVjaycpO1xyXG4gICAgbW9yZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LW1vcmUnKTtcclxuICAgIHJld2FyZE5hbWUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1hY2gtbGlzdC1kZXRhaWxzLXJld2FyZCcpO1xyXG4gICAgLy8gc3RhcnQgd2l0aCAwXHJcbiAgICBwcm9ncmVzc2lvblBlcmNlbnQuaW5uZXJIVE1MID0gJzAlJztcclxuICAgIC8vIGNvdW50IG51bWJlclxyXG4gICAgaXNzdWVkQm94Q291bnQuaW5uZXJIVE1MID0gJzAnO1xyXG4gICAgcmV3YXJkTmFtZS5pbm5lckhUTUwgPSAnJztcclxuICAgIG1vcmVCdXR0b24uZGF0YXNldC5pZCA9IGFjaC5pZDtcclxuICAgIG1vcmVCdXR0b24uaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24uYWNoaWV2ZW1lbnRzLm1vcmU7XHJcbiAgICBtb3JlQnV0dG9uLmhyZWYgPSAnamF2YXNjcmlwdDp2b2lkKDApOyc7XHJcblxyXG4gICAgbGlzdEl0ZW0uZGF0YXNldC5pZCA9IGFjaC5pZDtcclxuXHJcbiAgICBsYWJlbC5pbm5lckhUTUwgPSBhY2gubmFtZTtcclxuICAgIGNhdGVnb3J5LmlubmVySFRNTCA9IGFjaC5jYXRlZ29yeS5qb2luKCcsICcpO1xyXG5cclxuICAgIGRldGFpbHNXcmFwcGVyLmFwcGVuZENoaWxkKGxhYmVsKTtcclxuICAgIGRldGFpbHNXcmFwcGVyLmFwcGVuZENoaWxkKGNhdGVnb3J5KTtcclxuICAgIGRldGFpbHNXcmFwcGVyLmFwcGVuZENoaWxkKGRlc2NyaXB0aW9uKTtcclxuXHJcbiAgICBpZiAoY3BvbW50YWluc0ltYWdlKSB7XHJcbiAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICB2YXIgaW1hZ2VJY29uV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBpbWFnZUljb25XcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtYWNoLWxpc3QtaXRlbS1pbWctd3JhcHBlcicpO1xyXG4gICAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LWl0ZW0taW1nJyk7XHJcblxyXG4gICAgICBpbWFnZS5zcmMgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy51cmkuZ2F0ZXdheURvbWFpbiArIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnVyaS5hc3NldHMucmVwbGFjZSgnOmF0dGFjaG1lbnRJZCcsIGFjaC5pY29uKTtcclxuICAgICAgaW1hZ2UuYWx0ID0gYWNoLm5hbWU7XHJcblxyXG4gICAgICAvLyBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAvLyB9O1xyXG5cclxuICAgICAgaW1hZ2VJY29uV3JhcHBlci5hcHBlbmRDaGlsZChpbWFnZSk7XHJcbiAgICAgIGRldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoaW1hZ2VJY29uV3JhcHBlcik7XHJcbiAgICB9XHJcblxyXG4gICAgZGV0YWlsc0NvbnRhaW5lci5hcHBlbmRDaGlsZChkZXRhaWxzV3JhcHBlcik7XHJcblxyXG4gICAgLy8gcHJvZ3Jlc3Npb24gY29udGFpbmVyIGhhcyBiYXIgaW5zaWRlXHJcbiAgICBwcm9ncmVzc2lvbkNvbnQuYXBwZW5kQ2hpbGQocHJvZ3Jlc3Npb25CYXIpO1xyXG5cclxuICAgIC8vIHByb2dyZXNzaW9uIGJveCBoYXMgY29udGFpbmVyICsgcGVyY2VudCBudW1iZXJcclxuICAgIHByb2dyZXNzaW9uQm94LmFwcGVuZENoaWxkKHByb2dyZXNzaW9uQ29udCk7XHJcbiAgICBwcm9ncmVzc2lvbkJveC5hcHBlbmRDaGlsZChwcm9ncmVzc2lvblBlcmNlbnQpO1xyXG5cclxuICAgIC8vIGlzc3VlZCBib3ggaGFzIG51bWJlciwgdW5jaGVja2VkIG9yIGNoZWNrZWQgYm94XHJcbiAgICBpc3N1ZWRCb3guYXBwZW5kQ2hpbGQoaXNzdWVkQm94Q291bnQpO1xyXG4gICAgaXNzdWVkQm94LmFwcGVuZENoaWxkKGlzc3VlZEJveENoZWNrKTtcclxuXHJcbiAgICAvLyB3cmFwcGVyIGhhcyBib3gsIGNvdW50ZXIgYW5kIGJ1dHRvblxyXG4gICAgcHJvZ3Jlc3Npb25XcmFwcGVyLmFwcGVuZENoaWxkKHByb2dyZXNzaW9uQm94KTtcclxuICAgIHByb2dyZXNzaW9uV3JhcHBlci5hcHBlbmRDaGlsZChpc3N1ZWRCb3gpO1xyXG4gICAgcHJvZ3Jlc3Npb25XcmFwcGVyLmFwcGVuZENoaWxkKG1vcmVCdXR0b24pO1xyXG4gICAgcHJvZ3Jlc3Npb25XcmFwcGVyLmFwcGVuZENoaWxkKHJld2FyZE5hbWUpO1xyXG5cclxuICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKGRldGFpbHNDb250YWluZXIpO1xyXG4gICAgbGlzdEl0ZW0uYXBwZW5kQ2hpbGQocHJvZ3Jlc3Npb25XcmFwcGVyKTtcclxuXHJcbiAgICByZXR1cm4gbGlzdEl0ZW07XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5hY2hpZXZlbWVudExpc3RMYXlvdXQgPSBmdW5jdGlvbiAoYWNoaWV2ZW1lbnREYXRhKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIGFjaExpc3QgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5zZWN0aW9uLCAnLmNsLW1haW4td2lkZ2V0LXNlY3Rpb24tYWNoIC5jbC1tYWluLXdpZGdldC1hY2gtbGlzdC1ib2R5LXJlcycpO1xyXG5cclxuICAgIHdpbmRvdy5tYXBPYmplY3QoYWNoaWV2ZW1lbnREYXRhLCBmdW5jdGlvbiAoYWNoKSB7XHJcbiAgICAgIGlmIChxdWVyeShhY2hMaXN0LCAnLmNsLWFjaC0nICsgYWNoLmlkKSA9PT0gbnVsbCkge1xyXG4gICAgICAgIHZhciBsaXN0SXRlbSA9IF90aGlzLmFjaGlldmVtZW50SXRlbShhY2gpO1xyXG5cclxuICAgICAgICBhY2hMaXN0LmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5sb2FkQWNoaWV2ZW1lbnREZXRhaWxzID0gZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIGxhYmVsID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuYWNoaWV2ZW1lbnQuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1hY2gtZGV0YWlscy1oZWFkZXItbGFiZWwnKTtcclxuICAgIHZhciBib2R5ID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuYWNoaWV2ZW1lbnQuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1hY2gtZGV0YWlscy1ib2R5Jyk7XHJcbiAgICB2YXIgaW1hZ2UgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5hY2hpZXZlbWVudC5kZXRhaWxzQ29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LWFjaC1kZXRhaWxzLWJvZHktaW1hZ2UtY29udCcpO1xyXG5cclxuICAgIGltYWdlLmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgIGxhYmVsLmlubmVySFRNTCA9IGRhdGEuZGF0YS5uYW1lO1xyXG4gICAgYm9keS5pbm5lckhUTUwgPSBkYXRhLmRhdGEuZGVzY3JpcHRpb247XHJcblxyXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmFjaGlldmVtZW50cy5leHRyYWN0SW1hZ2VIZWFkZXIpIHtcclxuICAgICAgdmFyIGltYWdlTG9va3VwID0gcXVlcnkoYm9keSwgJ2ltZycpO1xyXG4gICAgICBvYmplY3RJdGVyYXRvcihpbWFnZUxvb2t1cCwgZnVuY3Rpb24gKGltZywga2V5LCBjb3VudCkge1xyXG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgdmFyIG5ld0ltZyA9IGltZy5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICBpbWFnZS5hcHBlbmRDaGlsZChuZXdJbWcpO1xyXG5cclxuICAgICAgICAgIHJlbW92ZShpbWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgX3RoaXMuc2V0dGluZ3MuYWNoaWV2ZW1lbnQuZGV0YWlsc0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBhZGRDbGFzcyhfdGhpcy5zZXR0aW5ncy5hY2hpZXZlbWVudC5kZXRhaWxzQ29udGFpbmVyLCAnY2wtc2hvdycpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcclxuICAgIH0sIDUwKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmhpZGVBY2hpZXZlbWVudERldGFpbHMgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmVtb3ZlQ2xhc3MoX3RoaXMuc2V0dGluZ3MuYWNoaWV2ZW1lbnQuZGV0YWlsc0NvbnRhaW5lciwgJ2NsLXNob3cnKTtcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5hY2hpZXZlbWVudC5kZXRhaWxzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xyXG4gICAgfSwgMjAwKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmxvYWRSZXdhcmREZXRhaWxzID0gZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIGxhYmVsID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MucmV3YXJkLmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtcmV3YXJkLWRldGFpbHMtaGVhZGVyLWxhYmVsJyk7XHJcbiAgICB2YXIgYm9keSA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLnJld2FyZC5kZXRhaWxzQ29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWJvZHknKTtcclxuICAgIHZhciBpbWFnZSA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLnJld2FyZC5kZXRhaWxzQ29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LXJld2FyZC1kZXRhaWxzLWJvZHktaW1hZ2UtY29udCcpO1xyXG4gICAgdmFyIGNsYWltQnRuID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MucmV3YXJkLmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtcmV3YXJkLWNsYWltLWJ0bicpO1xyXG4gICAgdmFyIGljb24gPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5yZXdhcmQuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1yZXdhcmQtd2lubmluZ3MtaWNvbicpO1xyXG4gICAgdmFyIHZhbHVlID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MucmV3YXJkLmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtcmV3YXJkLXdpbm5pbmdzLXZhbHVlJyk7XHJcblxyXG4gICAgbGFiZWwuaW5uZXJIVE1MID0gZGF0YS5kYXRhLnJld2FyZC5yZXdhcmROYW1lO1xyXG4gICAgYm9keS5pbm5lckhUTUwgPSBkYXRhLmRhdGEucmV3YXJkLmRlc2NyaXB0aW9uO1xyXG4gICAgdmFsdWUuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MucmV3YXJkcy5yZXdhcmRGb3JtYXR0ZXIoZGF0YS5kYXRhLnJld2FyZCk7XHJcbiAgICBjbGFpbUJ0bi5kYXRhc2V0LmlkID0gZGF0YS5kYXRhLmlkO1xyXG5cclxuICAgIGlmIChkYXRhLmRhdGEuY2xhaW1lZCkge1xyXG4gICAgICBhZGRDbGFzcyhjbGFpbUJ0biwgJ2NsLWNsYWltZWQnKTtcclxuICAgICAgY2xhaW1CdG4uaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ucmV3YXJkcy5jbGFpbWVkO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVtb3ZlQ2xhc3MoY2xhaW1CdG4sICdjbC1jbGFpbWVkJyk7XHJcbiAgICAgIGNsYWltQnRuLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnJld2FyZHMuY2xhaW07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBkYXRhLmRhdGEucmV3YXJkLmljb24gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIGljb24uaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgICB2YXIgX2ltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgIHZhciBpbWFnZUljb25XcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGltYWdlSWNvbldyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1yZXdhcmQtbGlzdC1pdGVtLWltZy13cmFwcGVyJyk7XHJcbiAgICAgIF9pbWFnZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXJld2FyZC1saXN0LWl0ZW0taW1nJyk7XHJcblxyXG4gICAgICBfaW1hZ2Uuc3JjID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy51cmkuYXNzZXRzLnJlcGxhY2UoJzphdHRhY2htZW50SWQnLCBkYXRhLmRhdGEucmV3YXJkLmljb24pO1xyXG4gICAgICBfaW1hZ2UuYWx0ID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MucmV3YXJkcy5yZXdhcmRGb3JtYXR0ZXIoZGF0YS5kYXRhLnJld2FyZCk7XHJcblxyXG4gICAgICBpY29uLmFwcGVuZENoaWxkKF9pbWFnZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpY29uLmlubmVySFRNTCA9IFwiPHNwYW4gY2xhc3M9J2NsLXBsYWNlLWhvbGRlci1yZXdhcmQtaW1hZ2UnPjwvc3Bhbj5cIjtcclxuICAgIH1cclxuXHJcbiAgICBvYmplY3RJdGVyYXRvcihxdWVyeShib2R5LCAnaW1nJyksIGZ1bmN0aW9uIChpbWcsIGtleSwgY291bnQpIHtcclxuICAgICAgaWYgKGNvdW50ID09PSAwKSB7XHJcbiAgICAgICAgdmFyIG5ld0ltZyA9IGltZy5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgaW1hZ2UuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgaW1hZ2UuYXBwZW5kQ2hpbGQobmV3SW1nKTtcclxuXHJcbiAgICAgICAgcmVtb3ZlKGltZyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIF90aGlzLnNldHRpbmdzLnJld2FyZC5kZXRhaWxzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGFkZENsYXNzKF90aGlzLnNldHRpbmdzLnJld2FyZC5kZXRhaWxzQ29udGFpbmVyLCAnY2wtc2hvdycpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcclxuICAgIH0sIDUwKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmxvYWRNZXNzYWdlRGV0YWlscyA9IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBsYWJlbCA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLm1lc3NhZ2VzLmRldGFpbHNDb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtaW5ib3gtZGV0YWlscy1oZWFkZXItbGFiZWwnKTtcclxuICAgIHZhciBib2R5ID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MubWVzc2FnZXMuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1pbmJveC1kZXRhaWxzLWJvZHknKTtcclxuXHJcbiAgICBsYWJlbC5pbm5lckhUTUwgPSBkYXRhLmRhdGEuc3ViamVjdDtcclxuICAgIGJvZHkuaW5uZXJIVE1MID0gZGF0YS5kYXRhLmJvZHk7XHJcblxyXG4gICAgX3RoaXMuc2V0dGluZ3MubWVzc2FnZXMuZGV0YWlsc0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBhZGRDbGFzcyhfdGhpcy5zZXR0aW5ncy5tZXNzYWdlcy5kZXRhaWxzQ29udGFpbmVyLCAnY2wtc2hvdycpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcclxuICAgIH0sIDUwKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmhpZGVSZXdhcmREZXRhaWxzID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJlbW92ZUNsYXNzKF90aGlzLnNldHRpbmdzLnJld2FyZC5kZXRhaWxzQ29udGFpbmVyLCAnY2wtc2hvdycpO1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLnJld2FyZC5kZXRhaWxzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xyXG4gICAgfSwgMjAwKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmhpZGVNZXNzYWdlRGV0YWlscyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZW1vdmVDbGFzcyhfdGhpcy5zZXR0aW5ncy5tZXNzYWdlcy5kZXRhaWxzQ29udGFpbmVyLCAnY2wtc2hvdycpO1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLm1lc3NhZ2VzLmRldGFpbHNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XHJcbiAgICB9LCAyMDApO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuZ2V0QWNoaWV2ZW1lbnRJbmZvID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgZm9yICh2YXIgYWNoIG9mIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmFjaGlldmVtZW50cy5saXN0KSB7XHJcbiAgICAgIGlmIChhY2guaWQgPT09IGlkKSByZXR1cm4gYWNoO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMudXBkYXRlQWNoaWV2ZW1lbnRQcm9ncmVzc2lvbkFuZElzc3VlZCA9IGZ1bmN0aW9uIChpc3N1ZWQsIHByb2dyZXNzaW9uKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIGFjaExpc3QgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5zZWN0aW9uLCAnLmNsLW1haW4td2lkZ2V0LXNlY3Rpb24tYWNoIC5jbC1tYWluLXdpZGdldC1hY2gtbGlzdC1ib2R5LXJlcycpO1xyXG5cclxuICAgIG9iamVjdEl0ZXJhdG9yKHF1ZXJ5KGFjaExpc3QsICcuY2wtYWNoLWxpc3QtaXRlbScpLCBmdW5jdGlvbiAoYWNoKSB7XHJcbiAgICAgIHZhciBpZCA9IGFjaC5kYXRhc2V0LmlkO1xyXG4gICAgICAvLyB2YXIgaXNzdWVkU3RhdHVzID0gKGlzc3VlZC5pbmRleE9mKGlkKSAhPT0gLTEpO1xyXG4gICAgICB2YXIgYWNoSW5mbyA9IF90aGlzLmdldEFjaGlldmVtZW50SW5mbyhpZCk7XHJcbiAgICAgIHZhciBwZXJjID0gMDtcclxuICAgICAgdmFyIGlzc3VlZENudCA9ICcnO1xyXG4gICAgICB2YXIgaXNzdWVkQ2hjayA9ICcuLi9sZWFkZXJib2FyZF92My9zcmMvaW1hZ2VzL2FjaC1naWZ0Ym94LnN2Zyc7XHJcbiAgICAgIHZhciByZXdhcmQgPSAnJztcclxuXHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFjaEluZm8ucmV3YXJkcykgJiYgYWNoSW5mby5yZXdhcmRzLmxlbmd0aCA+PiAwKSB7XHJcbiAgICAgICAgcmV3YXJkID0gYWNoSW5mby5yZXdhcmRzWzBdLnJld2FyZE5hbWUudG9TdHJpbmcoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgd2luZG93Lm1hcE9iamVjdChwcm9ncmVzc2lvbiwgZnVuY3Rpb24gKHByKSB7XHJcbiAgICAgICAgaWYgKHByLmFjaGlldmVtZW50SWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAvLyBwcm9ncmVzcyBiYXJcclxuICAgICAgICAgIGlmIChhY2hJbmZvLnNjaGVkdWxpbmcuc2NoZWR1bGVUeXBlID09PSAnT25jZScgJiYgcHIuaXNzdWVkID4gMCkge1xyXG4gICAgICAgICAgICBwZXJjID0gMTAwO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGVyYyA9IChwYXJzZUZsb2F0KHByLmdvYWxQZXJjZW50YWdlQ29tcGxldGUpICogMTAwKS50b0ZpeGVkKDEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gaXNzdWUgY291bnRcclxuICAgICAgICAgIGlmIChhY2hJbmZvLnNjaGVkdWxpbmcuc2NoZWR1bGVUeXBlID09PSAnUmVwZWF0ZWRseScpIHtcclxuICAgICAgICAgICAgaXNzdWVkQ250ID0gcHIuaXNzdWVkLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoYWNoSW5mby5zY2hlZHVsaW5nLnNjaGVkdWxlVHlwZSA9PT0gJ09uY2UnKSB7XHJcbiAgICAgICAgICAgIGlzc3VlZENoY2sgPSAocHIuaXNzdWVkID4gMCkgPyAnLi4vbGVhZGVyYm9hcmRfdjMvc3JjL2ltYWdlcy9hY2gtaXNzdWVkLnN2ZycgOiAnLi4vbGVhZGVyYm9hcmRfdjMvc3JjL2ltYWdlcy9hY2gtbm90LWlzc3VlZC5zdmcnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoYWNoICE9PSBudWxsKSB7XHJcbiAgICAgICAgdmFyIGJhciA9IHF1ZXJ5KGFjaCwgJy5jbC1hY2gtbGlzdC1wcm9ncmVzc2lvbi1iYXInKTtcclxuICAgICAgICB2YXIgcGVyY2VudE51bSA9IHF1ZXJ5KGFjaCwgJy5jbC1hY2gtbGlzdC1wZXJjZW50LW51bWJlcicpO1xyXG4gICAgICAgIHZhciBpc3N1ZWRDb3VudCA9IHF1ZXJ5KGFjaCwgJy5jbC1hY2gtbGlzdC1pc3N1ZWQtYm94LWNvdW50Jyk7XHJcbiAgICAgICAgdmFyIGlzc3VlZENoZWNrID0gcXVlcnkoYWNoLCAnLmNsLWFjaC1saXN0LWlzc3VlZC1ib3gtY2hlY2snKTtcclxuICAgICAgICB2YXIgcmV3YXJkTmFtZSA9IHF1ZXJ5KGFjaCwgJy5jbC1hY2gtbGlzdC1kZXRhaWxzLXJld2FyZCcpO1xyXG4gICAgICAgIGJhci5zdHlsZS53aWR0aCA9ICgocGVyYyA+IDEgfHwgcGVyYyA9PT0gMCkgPyBwZXJjIDogMSkgKyAnJSc7XHJcbiAgICAgICAgcGVyY2VudE51bS5pbm5lckhUTUwgPSAoKHBlcmMgPiAxIHx8IHBlcmMgPT09IDApID8gTWF0aC5yb3VuZChwZXJjKSA6IDEpICsgJyUnO1xyXG4gICAgICAgIGlzc3VlZENvdW50LmlubmVySFRNTCA9IGlzc3VlZENudDtcclxuICAgICAgICBpc3N1ZWRDaGVjay5zcmMgPSBpc3N1ZWRDaGNrO1xyXG4gICAgICAgIHJld2FyZE5hbWUuaW5uZXJIVE1MID0gcmV3YXJkO1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgdmFyIGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdmFyIGltYWdlSWNvbldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLWFjaC1saXN0LWlzc3VlZC1ib3gnKTtcclxuICAgICAgICBpbWFnZS5zcmMgPSAnQzovUHJvZ3JhbWlyYW5qZS9qdXJlcGV0cm92aWMvbGVhZGVyYm9hcmRfdjMvc3JjL2ltYWdlcy9hY2gtaXNzdWVkLnBuZyc7XHJcbiAgICAgICAgaW1hZ2VJY29uV3JhcHBlci5hcHBlbmRDaGlsZChpbWFnZSk7XHJcbiAgICAgICAgLy8gIGRldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoaW1hZ2VJY29uV3JhcHBlcik7XHJcbiAgICAgICAgKi9cclxuICAgICAgICAvKlxyXG4gICAgICAgIGlmIChpc3N1ZWRTdGF0dXMpIHtcclxuICAgICAgICAgIGFkZENsYXNzKGJhciwgJ2NsLWFjaC1jb21wbGV0ZScpO1xyXG4gICAgICAgICAgYmFyLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmFjaGlldmVtZW50cy5jb21wbGV0ZTtcclxuICAgICAgICAgIGJhci5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYmFyLnN0eWxlLndpZHRoID0gKChwZXJjID4gMSB8fCBwZXJjID09PSAwKSA/IHBlcmMgOiAxKSArICclJztcclxuICAgICAgICB9XHJcbiAgICAgICAgKi9cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5sb2FkQWNoaWV2ZW1lbnRzID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmNoZWNrRm9yQXZhaWxhYmxlQWNoaWV2ZW1lbnRzKGZ1bmN0aW9uIChhY2hpZXZlbWVudERhdGEpIHtcclxuICAgICAgX3RoaXMuYWNoaWV2ZW1lbnRMaXN0TGF5b3V0KGFjaGlldmVtZW50RGF0YSk7XHJcblxyXG4gICAgICB2YXIgaWRMaXN0ID0gW107XHJcbiAgICAgIHdpbmRvdy5tYXBPYmplY3QoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuYWNoaWV2ZW1lbnRzLmxpc3QsIGZ1bmN0aW9uIChhY2gpIHtcclxuICAgICAgICBpZExpc3QucHVzaChhY2guaWQpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmNoZWNrRm9yTWVtYmVyQWNoaWV2ZW1lbnRzSXNzdWVkKGZ1bmN0aW9uIChpc3N1ZWQpIHtcclxuICAgICAgICAgIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmNoZWNrRm9yTWVtYmVyQWNoaWV2ZW1lbnRzUHJvZ3Jlc3Npb24oaWRMaXN0LCBmdW5jdGlvbiAocHJvZ3Jlc3Npb24pIHtcclxuICAgICAgICAgICAgX3RoaXMudXBkYXRlQWNoaWV2ZW1lbnRQcm9ncmVzc2lvbkFuZElzc3VlZChpc3N1ZWQsIHByb2dyZXNzaW9uKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9LCA0MDApO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHRoaXMucmV3YXJkSXRlbSA9IGZ1bmN0aW9uIChyZXcpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgbGlzdEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBkZXRhaWxzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgZGV0YWlsc1dyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGRlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgbGlzdEl0ZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1yZXctbGlzdC1pdGVtIGNsLXJldy0nICsgcmV3LmlkKTtcclxuICAgIGRldGFpbHNDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1yZXctbGlzdC1kZXRhaWxzLWNvbnQnKTtcclxuICAgIGRldGFpbHNXcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtcmV3LWxpc3QtZGV0YWlscy13cmFwJyk7XHJcbiAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXJldy1saXN0LWRldGFpbHMtbGFiZWwnKTtcclxuICAgIGRlc2NyaXB0aW9uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtcmV3LWxpc3QtZGV0YWlscy1kZXNjcmlwdGlvbicpO1xyXG5cclxuICAgIGxpc3RJdGVtLmRhdGFzZXQuaWQgPSByZXcuaWQ7XHJcbiAgICB2YXIgbGFiZWxUZXh0ID0gc3RyaXBIdG1sKHJldy5zdWJqZWN0KTtcclxuICAgIHZhciBkZXNjcmlwdGlvblRleHQgPSBzdHJpcEh0bWwocmV3LmJvZHkpO1xyXG5cclxuICAgIGlmICh0eXBlb2YgcmV3LnByaXplICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBsaXN0SXRlbS5kYXRhc2V0LnJld2FyZElkID0gcmV3LnByaXplLmlkO1xyXG4gICAgICBsYWJlbFRleHQgPSBzdHJpcEh0bWwocmV3LnN1YmplY3QgKyAnIC0gJyArIHJldy5wcml6ZS5yZXdhcmQucmV3YXJkTmFtZSArICcgKCcgKyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5yZXdhcmRzLnJld2FyZEZvcm1hdHRlcihyZXcucHJpemUucmV3YXJkKSArICcpJyk7XHJcbiAgICAgIGRlc2NyaXB0aW9uVGV4dCA9IHN0cmlwSHRtbCgodHlwZW9mIHJldy5wcml6ZS5yZXdhcmQuZGVzY3JpcHRpb24gIT09ICd1bmRlZmluZWQnICYmIHJldy5wcml6ZS5yZXdhcmQuZGVzY3JpcHRpb24ubGVuZ3RoID4gMCkgPyByZXcucHJpemUucmV3YXJkLmRlc2NyaXB0aW9uIDogcmV3LmJvZHkpO1xyXG4gICAgfVxyXG5cclxuICAgIGxhYmVsLmlubmVySFRNTCA9IChsYWJlbFRleHQubGVuZ3RoID4gODApID8gKGxhYmVsVGV4dC5zdWJzdHIoMCwgODApICsgJy4uLicpIDogbGFiZWxUZXh0O1xyXG4gICAgZGVzY3JpcHRpb24uaW5uZXJIVE1MID0gKGRlc2NyaXB0aW9uVGV4dC5sZW5ndGggPiAyMDApID8gKGRlc2NyaXB0aW9uVGV4dC5zdWJzdHIoMCwgMjAwKSArICcuLi4nKSA6IGRlc2NyaXB0aW9uVGV4dDtcclxuXHJcbiAgICBkZXRhaWxzV3JhcHBlci5hcHBlbmRDaGlsZChsYWJlbCk7XHJcbiAgICBkZXRhaWxzV3JhcHBlci5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbik7XHJcbiAgICBkZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKGRldGFpbHNXcmFwcGVyKTtcclxuICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKGRldGFpbHNDb250YWluZXIpO1xyXG5cclxuICAgIHJldHVybiBsaXN0SXRlbTtcclxuICB9O1xyXG5cclxuICB0aGlzLm1lc3NhZ2VJdGVtID0gZnVuY3Rpb24gKGluYm94KSB7XHJcbiAgICAvLyB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIGxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgZGV0YWlsc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGRldGFpbHNXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGNvbnRlbnQgPSBzdHJpcEh0bWwoaW5ib3guYm9keSk7XHJcblxyXG4gICAgbGlzdEl0ZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1pbmJveC1saXN0LWl0ZW0gY2wtaW5ib3gtJyArIGluYm94LmlkKTtcclxuICAgIGRldGFpbHNDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1pbmJveC1saXN0LWRldGFpbHMtY29udCcpO1xyXG4gICAgZGV0YWlsc1dyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1pbmJveC1saXN0LWRldGFpbHMtd3JhcCcpO1xyXG4gICAgbGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC1pbmJveC1saXN0LWRldGFpbHMtbGFiZWwnKTtcclxuICAgIGRlc2NyaXB0aW9uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtaW5ib3gtbGlzdC1kZXRhaWxzLWRlc2NyaXB0aW9uJyk7XHJcblxyXG4gICAgbGlzdEl0ZW0uZGF0YXNldC5pZCA9IGluYm94LmlkO1xyXG4gICAgbGFiZWwuaW5uZXJIVE1MID0gKGluYm94LnN1YmplY3QubGVuZ3RoID4gMzYpID8gaW5ib3guc3ViamVjdC5zdWJzdHIoMCwgMzYpICsgJy4uLicgOiBpbmJveC5zdWJqZWN0O1xyXG4gICAgZGVzY3JpcHRpb24uaW5uZXJIVE1MID0gKGNvbnRlbnQubGVuZ3RoID4gNjApID8gY29udGVudC5zdWJzdHIoMCwgNjApICsgJy4uLicgOiBjb250ZW50O1xyXG5cclxuICAgIGRldGFpbHNXcmFwcGVyLmFwcGVuZENoaWxkKGxhYmVsKTtcclxuICAgIGRldGFpbHNXcmFwcGVyLmFwcGVuZENoaWxkKGRlc2NyaXB0aW9uKTtcclxuICAgIGRldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoZGV0YWlsc1dyYXBwZXIpO1xyXG4gICAgbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZGV0YWlsc0NvbnRhaW5lcik7XHJcblxyXG4gICAgcmV0dXJuIGxpc3RJdGVtO1xyXG4gIH07XHJcblxyXG4gIHRoaXMudG91cm5hbWVudEl0ZW0gPSBmdW5jdGlvbiAodG91cm5hbWVudCkge1xyXG4gICAgLy8gdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBsaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGRldGFpbHNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBkZXRhaWxzV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBkZXNjcmlwdGlvbkNvbnRlbnQgPSBzdHJpcEh0bWwodG91cm5hbWVudC5kZXNjcmlwdGlvbik7XHJcblxyXG4gICAgbGlzdEl0ZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC10b3VyLWxpc3QtaXRlbSBjbC10b3VyLScgKyB0b3VybmFtZW50LmlkKTtcclxuICAgIGRldGFpbHNDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC10b3VyLWxpc3QtZGV0YWlscy1jb250Jyk7XHJcbiAgICBkZXRhaWxzV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXRvdXItbGlzdC1kZXRhaWxzLXdyYXAnKTtcclxuICAgIGxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtdG91ci1saXN0LWRldGFpbHMtbGFiZWwnKTtcclxuICAgIGRlc2NyaXB0aW9uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtdG91ci1saXN0LWRldGFpbHMtZGVzY3JpcHRpb24nKTtcclxuXHJcbiAgICBsaXN0SXRlbS5kYXRhc2V0LmlkID0gdG91cm5hbWVudC5pZDtcclxuICAgIGxhYmVsLmlubmVySFRNTCA9IHRvdXJuYW1lbnQubGFiZWw7XHJcbiAgICBkZXNjcmlwdGlvbi5pbm5lckhUTUwgPSAoZGVzY3JpcHRpb25Db250ZW50Lmxlbmd0aCA+IDEwMCkgPyBkZXNjcmlwdGlvbkNvbnRlbnQuc3Vic3RyKDAsIDEwMCkgKyAnLi4uJyA6IGRlc2NyaXB0aW9uQ29udGVudDtcclxuXHJcbiAgICBkZXRhaWxzV3JhcHBlci5hcHBlbmRDaGlsZChsYWJlbCk7XHJcbiAgICBkZXRhaWxzV3JhcHBlci5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbik7XHJcbiAgICBkZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKGRldGFpbHNXcmFwcGVyKTtcclxuICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKGRldGFpbHNDb250YWluZXIpO1xyXG5cclxuICAgIHJldHVybiBsaXN0SXRlbTtcclxuICB9O1xyXG5cclxuICB0aGlzLnJld2FyZHNMaXN0TGF5b3V0ID0gZnVuY3Rpb24gKHJld2FyZHMsIGF2YWlsYWJsZVJld2FyZHMsIGV4cGlyZWRSZXdhcmRzKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIHJld2FyZExpc3QgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5zZWN0aW9uLCAnLmNsLW1haW4td2lkZ2V0LXNlY3Rpb24tcmV3YXJkIC5jbC1tYWluLXdpZGdldC1yZXdhcmQtbGlzdC1ib2R5LXJlcycpO1xyXG5cclxuICAgIHZhciBhY2NvcmRpb25PYmogPSBfdGhpcy5hY2NvcmRpb25TdHlsZShfdGhpcy5zZXR0aW5ncy5yZXdhcmRzU2VjdGlvbi5hY2NvcmRpb25MYXlvdXQsIGZ1bmN0aW9uIChhY2NvcmRpb25TZWN0aW9uLCBsaXN0Q29udGFpbmVyLCB0b3BFbnRyeUNvbnRhaW5lciwgbGF5b3V0KSB7XHJcbiAgICAgIHZhciByZXdhcmREYXRhID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MucmV3YXJkc1tsYXlvdXQudHlwZV07XHJcblxyXG4gICAgICBpZiAodHlwZW9mIHJld2FyZERhdGEgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgaWYgKHJld2FyZERhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICBhY2NvcmRpb25TZWN0aW9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdpbmRvdy5tYXBPYmplY3QocmV3YXJkRGF0YSwgZnVuY3Rpb24gKHJldywga2V5LCBjb3VudCkge1xyXG4gICAgICAgICAgaWYgKChjb3VudCArIDEpIDw9IGxheW91dC5zaG93VG9wUmVzdWx0cyAmJiBxdWVyeSh0b3BFbnRyeUNvbnRhaW5lciwgJy5jbC1yZXdhcmQtJyArIHJldy5pZCkgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdmFyIHRvcEVudHJ5Q29udGFpbmVSbGlzdEl0ZW0gPSBfdGhpcy5yZXdhcmRJdGVtKHJldyk7XHJcbiAgICAgICAgICAgIHRvcEVudHJ5Q29udGFpbmVyLmFwcGVuZENoaWxkKHRvcEVudHJ5Q29udGFpbmVSbGlzdEl0ZW0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChxdWVyeShsaXN0Q29udGFpbmVyLCAnLmNsLXJld2FyZC0nICsgcmV3LmlkKSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgbGlzdEl0ZW0gPSBfdGhpcy5yZXdhcmRJdGVtKHJldyk7XHJcbiAgICAgICAgICAgIGxpc3RDb250YWluZXIuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXdhcmRMaXN0LmlubmVySFRNTCA9ICcnO1xyXG4gICAgcmV3YXJkTGlzdC5hcHBlbmRDaGlsZChhY2NvcmRpb25PYmopO1xyXG5cclxuICAgIC8vIG1hcE9iamVjdChyZXdhcmREYXRhLCBmdW5jdGlvbihyZXcpe1xyXG4gICAgLy8gICBpZiggcXVlcnkocmV3YXJkTGlzdCwgXCIuY2wtcmV3YXJkLVwiICsgcmV3LmlkKSA9PT0gbnVsbCApIHtcclxuICAgIC8vICAgICB2YXIgbGlzdEl0ZW0gPSBfdGhpcy5yZXdhcmRJdGVtKHJldyk7XHJcbiAgICAvL1xyXG4gICAgLy8gICAgIHJld2FyZExpc3QuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xyXG4gICAgLy8gICB9XHJcbiAgICAvLyB9KTtcclxuICB9O1xyXG5cclxuICB0aGlzLm1lc3NhZ2VzTGlzdExheW91dCA9IGZ1bmN0aW9uIChyZXdhcmRzLCBhdmFpbGFibGVSZXdhcmRzLCBleHBpcmVkUmV3YXJkcykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBtZXNzYWdlTGlzdCA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLnNlY3Rpb24sICcuY2wtbWFpbi13aWRnZXQtc2VjdGlvbi1pbmJveCAuY2wtbWFpbi13aWRnZXQtaW5ib3gtbGlzdC1ib2R5LXJlcycpO1xyXG5cclxuICAgIG1lc3NhZ2VMaXN0LmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgIHdpbmRvdy5tYXBPYmplY3QoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVzc2FnZXMubWVzc2FnZXMsIGZ1bmN0aW9uIChpbmJveEl0ZW0sIGtleSwgY291bnQpIHtcclxuICAgICAgdmFyIGxpc3RJdGVtID0gX3RoaXMubWVzc2FnZUl0ZW0oaW5ib3hJdGVtKTtcclxuICAgICAgbWVzc2FnZUxpc3QuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5sb2FkUmV3YXJkcyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5jaGVja0ZvckF2YWlsYWJsZVJld2FyZHMoZnVuY3Rpb24gKHJld2FyZHMsIGF2YWlsYWJsZVJld2FyZHMsIGV4cGlyZWRSZXdhcmRzKSB7XHJcbiAgICAgIF90aGlzLnJld2FyZHNMaXN0TGF5b3V0KHJld2FyZHMsIGF2YWlsYWJsZVJld2FyZHMsIGV4cGlyZWRSZXdhcmRzKTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB0aGlzLmxvYWRNZXNzYWdlcyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5jaGVja0ZvckF2YWlsYWJsZU1lc3NhZ2VzKGZ1bmN0aW9uIChyZXdhcmRzLCBhdmFpbGFibGVSZXdhcmRzLCBleHBpcmVkUmV3YXJkcykge1xyXG4gICAgICBfdGhpcy5tZXNzYWdlc0xpc3RMYXlvdXQocmV3YXJkcywgYXZhaWxhYmxlUmV3YXJkcywgZXhwaXJlZFJld2FyZHMpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciBjaGFuZ2VJbnRlcnZhbDtcclxuICB2YXIgY2hhbmdlQ29udGFpbmVySW50ZXJ2YWw7XHJcbiAgdGhpcy5uYXZpZ2F0aW9uU3dpdGNoID0gZnVuY3Rpb24gKHRhcmdldCwgY2FsbGJhY2spIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgcHJlTG9hZGVyID0gX3RoaXMucHJlbG9hZGVyKCk7XHJcblxyXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb25Td2l0Y2hJblByb2dyZXNzICYmIF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb25Td2l0Y2hMYXN0QXRlbXB0ICsgMzAwMCA8IG5ldyBEYXRlKCkuZ2V0VGltZSgpKSB7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb25Td2l0Y2hJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFfdGhpcy5zZXR0aW5ncy5uYXZpZ2F0aW9uU3dpdGNoSW5Qcm9ncmVzcykge1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5uYXZpZ2F0aW9uU3dpdGNoSW5Qcm9ncmVzcyA9IHRydWU7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb25Td2l0Y2hMYXN0QXRlbXB0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgICBpZiAoIWhhc0NsYXNzKHRhcmdldC5wYXJlbnROb2RlLCAnY2wtYWN0aXZlLW5hdicpKSB7XHJcbiAgICAgICAgcHJlTG9hZGVyLnNob3coZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgaWYgKGNoYW5nZUludGVydmFsKSBjbGVhclRpbWVvdXQoY2hhbmdlSW50ZXJ2YWwpO1xyXG4gICAgICAgICAgaWYgKGNoYW5nZUNvbnRhaW5lckludGVydmFsKSBjbGVhclRpbWVvdXQoY2hhbmdlQ29udGFpbmVySW50ZXJ2YWwpO1xyXG5cclxuICAgICAgICAgIG9iamVjdEl0ZXJhdG9yKHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWl0ZW1zIC5jbC1hY3RpdmUtbmF2JyksIGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3Mob2JqLCAnY2wtYWN0aXZlLW5hdicpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgb2JqZWN0SXRlcmF0b3IocXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LXNlY3Rpb24tY29udGFpbmVyIC5jbC1tYWluLWFjdGl2ZS1zZWN0aW9uJyksIGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3Mob2JqLCAnY2wtbWFpbi1hY3RpdmUtc2VjdGlvbicpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICBvYmouc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfSwgMTUwKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGNoYW5nZUNvbnRhaW5lckludGVydmFsID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChoYXNDbGFzcyh0YXJnZXQsICdjbC1tYWluLXdpZGdldC1uYXZpZ2F0aW9uLWxiLWljb24nKSkge1xyXG4gICAgICAgICAgICAgIF90aGlzLmxvYWRMZWFkZXJib2FyZChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGJDb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtc2VjdGlvbi1jb250YWluZXIgLmNsLW1haW4td2lkZ2V0LWxiJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGJDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VJbnRlcnZhbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICBhZGRDbGFzcyhsYkNvbnRhaW5lciwgJ2NsLW1haW4tYWN0aXZlLXNlY3Rpb24nKTtcclxuICAgICAgICAgICAgICAgIH0sIDMwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcHJlTG9hZGVyLmhpZGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5uYXZpZ2F0aW9uU3dpdGNoSW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NsYXNzKHRhcmdldCwgJ2NsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24tYWNoLWljb24nKSkge1xyXG4gICAgICAgICAgICAgIF90aGlzLmxvYWRBY2hpZXZlbWVudHMoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFjaENvbnRhaW5lciA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1tYWluLXdpZGdldC1zZWN0aW9uLWNvbnRhaW5lciAuY2wtbWFpbi13aWRnZXQtc2VjdGlvbi1hY2gnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5hY2hpZXZlbWVudC5kZXRhaWxzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgICAgICAgICAgYWNoQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlSW50ZXJ2YWwgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWNoQ29udGFpbmVyLCAnY2wtbWFpbi1hY3RpdmUtc2VjdGlvbicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIDMwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBwcmVMb2FkZXIuaGlkZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb25Td2l0Y2hJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3ModGFyZ2V0LCAnY2wtbWFpbi13aWRnZXQtbmF2aWdhdGlvbi1yZXdhcmRzLWljb24nKSkge1xyXG4gICAgICAgICAgICAgIF90aGlzLmxvYWRSZXdhcmRzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXdhcmRzQ29udGFpbmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LXNlY3Rpb24tY29udGFpbmVyIC5jbC1tYWluLXdpZGdldC1zZWN0aW9uLXJld2FyZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJld2FyZHNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VJbnRlcnZhbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICBhZGRDbGFzcyhyZXdhcmRzQ29udGFpbmVyLCAnY2wtbWFpbi1hY3RpdmUtc2VjdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgfSwgMzApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBwcmVMb2FkZXIuaGlkZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb25Td2l0Y2hJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3ModGFyZ2V0LCAnY2wtbWFpbi13aWRnZXQtbmF2aWdhdGlvbi1pbmJveC1pY29uJykpIHtcclxuICAgICAgICAgICAgICBfdGhpcy5sb2FkTWVzc2FnZXMoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluYm94Q29udGFpbmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LXNlY3Rpb24tY29udGFpbmVyIC5jbC1tYWluLXdpZGdldC1zZWN0aW9uLWluYm94Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaW5ib3hDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VJbnRlcnZhbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICBhZGRDbGFzcyhpbmJveENvbnRhaW5lciwgJ2NsLW1haW4tYWN0aXZlLXNlY3Rpb24nKTtcclxuICAgICAgICAgICAgICAgIH0sIDMwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBwcmVMb2FkZXIuaGlkZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIF90aGlzLnNldHRpbmdzLm5hdmlnYXRpb25Td2l0Y2hJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sIDI1MCk7XHJcblxyXG4gICAgICAgICAgYWRkQ2xhc3ModGFyZ2V0LnBhcmVudE5vZGUsICdjbC1hY3RpdmUtbmF2Jyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubmF2aWdhdGlvblN3aXRjaEluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5yZXNldE5hdmlnYXRpb24gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgbGJDb250YWluZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtc2VjdGlvbi1jb250YWluZXIgLmNsLW1haW4td2lkZ2V0LWxiJyk7XHJcblxyXG4gICAgb2JqZWN0SXRlcmF0b3IocXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24taXRlbXMgLmNsLWFjdGl2ZS1uYXYnKSwgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICByZW1vdmVDbGFzcyhvYmosICdjbC1hY3RpdmUtbmF2Jyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBvYmplY3RJdGVyYXRvcihxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtbWFpbi13aWRnZXQtc2VjdGlvbi1jb250YWluZXIgLmNsLW1haW4tYWN0aXZlLXNlY3Rpb24nKSwgZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICBvYmouc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgcmVtb3ZlQ2xhc3Mob2JqLCAnY2wtbWFpbi1hY3RpdmUtc2VjdGlvbicpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYWRkQ2xhc3MocXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24taXRlbXMgLmNsLW1haW4td2lkZ2V0LW5hdmlnYXRpb24tbGInKSwgJ2NsLWFjdGl2ZS1uYXYnKTtcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBsYkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYWRkQ2xhc3MobGJDb250YWluZXIsICdjbC1tYWluLWFjdGl2ZS1zZWN0aW9uJyk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICd1bmRlZmluZWQnKSBjYWxsYmFjaygpO1xyXG4gICAgICB9LCAzMCk7XHJcbiAgICB9LCA0MCk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5pbml0TGF5b3V0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLnNldHRpbmdzLmFjdGl2ZSA9IHRydWU7XHJcblxyXG4gICAgX3RoaXMubG9hZExlYWRlcmJvYXJkKCk7XHJcblxyXG4gICAgX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGFkZENsYXNzKF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJ2NsLXNob3cnKTtcclxuXHJcbiAgICAgIHZhciBtZW1iZXIgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5sZWFkZXJib2FyZC5saXN0LCAnLmNsLWxiLW1lbWJlci1yb3cnKTtcclxuICAgICAgaWYgKG1lbWJlciAhPT0gbnVsbCkge1xyXG4gICAgICAgIF90aGlzLm1pc3NpbmdNZW1iZXIoX3RoaXMuaXNFbGVtZW50VmlzaWJsZUluVmlldyhtZW1iZXIsIF90aGlzLnNldHRpbmdzLmxlYWRlcmJvYXJkLmxpc3QucGFyZW50Tm9kZSkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBfdGhpcy5yZXNldE5hdmlnYXRpb24oY2FsbGJhY2spO1xyXG4gICAgfSwgMzApO1xyXG4gIH07XHJcbn07XHJcbiIsImltcG9ydCBjTGFicyBmcm9tICcuL2NMYWJzJztcclxuXHJcbi8qKlxyXG4gKiBTU0UgTWVzc2FnaW5nXHJcbiAqIEBwYXJhbSBvcHRpb25zXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1lc3NhZ2luZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgdGhpcy5zZXR0aW5ncyA9IHtcclxuICAgIHNvdXJjZTogbnVsbCxcclxuICAgIGFqYXg6IHtcclxuICAgICAgdXJsOiBudWxsLFxyXG4gICAgICBhcGlLZXk6IHVuZGVmaW5lZCxcclxuICAgICAgZXJyb3JDYWxsYmFjazogZnVuY3Rpb24gKCkge1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgc3NlVXJsOiBudWxsLFxyXG4gICAgaGVhcnRiZWF0OiBudWxsLFxyXG4gICAgbGFzdEhlYXJ0YmVhdDogbnVsbCxcclxuICAgIG1haW5BamF4OiBuZXcgY0xhYnMuQWpheCgpLFxyXG4gICAgaGVhcnRCZWF0QWpheDogbmV3IGNMYWJzLkFqYXgoKSxcclxuICAgIGhlYXJ0V2FpdFRpbWU6IDI1MDAwLFxyXG4gICAgbWVzc2FnZVF1ZXVlOiBbXSxcclxuICAgIG1lc3NhZ2VJbnRlcnZhbDogMTAwMCxcclxuICAgIHN0YXJ0dXBDaGVjazogdHJ1ZSxcclxuICAgIGFjdGl2ZTogZmFsc2UsXHJcbiAgICBkZWJ1ZzogZmFsc2UsXHJcbiAgICBjYWxsYmFjazogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIH0sXHJcbiAgICBvblN0YXJ0dXBFcnJvcjogZnVuY3Rpb24gKCkge1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIGZvciAodmFyIG9wdCBpbiBvcHRpb25zKSB7XHJcbiAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KG9wdCkpIHtcclxuICAgICAgICB0aGlzLnNldHRpbmdzW29wdF0gPSBvcHRpb25zW29wdF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRoaXMuaW50ZXJ2YWxJbnN0YW5jZSA9IG51bGw7XHJcbiAgdGhpcy5oZWFydGJlYXRJbnRlcnZhbEluc3RhbmNlID0gbnVsbDtcclxuXHJcbiAgdGhpcy5sb29rdXBEYXRhID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MubWVzc2FnZVF1ZXVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgdmFyIGRhdGEgPSBfdGhpcy5zZXR0aW5ncy5tZXNzYWdlUXVldWVbMF07XHJcblxyXG4gICAgICB2YXIgaW5kZXggPSBfdGhpcy5zZXR0aW5ncy5tZXNzYWdlUXVldWUuaW5kZXhPZihkYXRhKTtcclxuICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5tZXNzYWdlUXVldWUuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5hamF4LnVybCA9PT0gJ3N0cmluZycgJiYgX3RoaXMuc2V0dGluZ3MuYWpheC51cmwubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIF90aGlzLmdldERhdGEoZGF0YSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MuY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLnNldEludGVydmFsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5pbnRlcnZhbEluc3RhbmNlID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICBfdGhpcy5sb29rdXBEYXRhKCk7XHJcbiAgICB9LCBfdGhpcy5zZXR0aW5ncy5tZXNzYWdlSW50ZXJ2YWwpO1xyXG5cclxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5oZWFydGJlYXQgIT09IG51bGwpIHtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MubGFzdEhlYXJ0YmVhdCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgIF90aGlzLmhlYXJ0YmVhdEludGVydmFsSW5zdGFuY2UgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKTtcclxuICAgICAgICB2YXIgZGlmZiA9IF90aGlzLnNldHRpbmdzLmxhc3RIZWFydGJlYXQuZ2V0VGltZSgpIC0gY3VycmVudFRpbWUuZ2V0VGltZSgpO1xyXG5cclxuICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3Muc291cmNlLnJlYWR5U3RhdGUgPT09IDAgJiYgZGlmZiA+IF90aGlzLnNldHRpbmdzLmhlYXJ0V2FpdFRpbWUpIHtcclxuICAgICAgICAgIF90aGlzLmNsb3NlQ2hhbmVsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfdGhpcy5oZWFyQmVhdENoZWNrKCk7XHJcbiAgICAgIH0sIF90aGlzLnNldHRpbmdzLmhlYXJ0V2FpdFRpbWUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlcXVlc3QgYSBoZWFydGJlYXRcclxuICAgKiAtIGlmIHRoZSByZXF1ZXN0IGlzIGZhaWxpbmcgY2xvc2UgdGhlIGNvbm5lY3Rpb25cclxuICAgKiAtIGlmIHRoZSByZXF1ZXN0IGlzIHN1Y2Nlc3NmdWwgYnV0IHRoZSBjb25uZWN0aW9uIGlzIGNsb3NlZCByZW9wZW4gYW5kIGNhbGwgZm9yIGEgaGVhcnRiZWF0IGFnYWluXHJcbiAgICovXHJcbiAgdGhpcy5oZWFyQmVhdENoZWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICB2YXIgZGF0YU9iaiA9IHtcclxuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy5oZWFydGJlYXQsXHJcbiAgICAgIGhlYWRlcnM6IF90aGlzLnNldHRpbmdzLmFqYXguYXBpS2V5LFxyXG4gICAgICB0eXBlOiAnR0VUJyxcclxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlLCBkYXRhT2JqZWN0LCB4aHIpIHtcclxuICAgICAgICBpZiAoeGhyLnN0YXR1cyAhPT0gMjAwICYmIF90aGlzLnNldHRpbmdzLnNvdXJjZS5yZWFkeVN0YXRlID09PSAwKSB7XHJcbiAgICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuZGVidWcpIGNvbnNvbGUubG9nKCdbTXNnXSBTU0UgQ2xvc2luZyBjb25uZWN0aW9uJyk7XHJcbiAgICAgICAgICBfdGhpcy5jbG9zZUNoYW5lbCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwICYmIF90aGlzLnNldHRpbmdzLnNvdXJjZS5yZWFkeVN0YXRlID09PSAyKSB7XHJcbiAgICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuZGVidWcpIGNvbnNvbGUubG9nKCdbTXNnXSBTU0UgVHJ5aW5nIHRvIHJlLW9wZW4gdGhlIGNvbm5lY3Rpb24nKTtcclxuICAgICAgICAgIF90aGlzLm9wZW5DaGFuZWwoKTtcclxuXHJcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuaGVhckJlYXRDaGVjaygpO1xyXG4gICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHR5cGVvZiBfdGhpcy5zZXR0aW5ncy5hamF4LmFwaUtleSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgZGF0YU9iai5oZWFkZXJzID0gX3RoaXMuc2V0dGluZ3MuYWpheC5hcGlLZXk7XHJcbiAgICB9XHJcblxyXG4gICAgX3RoaXMuc2V0dGluZ3MuaGVhcnRCZWF0QWpheC5hYm9ydCgpLmdldERhdGEoZGF0YU9iaik7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5nZXREYXRhID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICB2YXIgZGF0YU9iaiA9IHtcclxuICAgICAgdXJsOiBfdGhpcy5zZXR0aW5ncy5hamF4LnVybCxcclxuICAgICAgdHlwZTogJ0dFVCcsXHJcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSwgZGF0YU9iamVjdCwgeGhyKSB7XHJcbiAgICAgICAgdmFyIGpzb24gPSB7fTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5kZWJ1ZykgY29uc29sZS5sb2coZSwgX3RoaXMuc2V0dGluZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5jYWxsYmFjayhqc29uKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MuYWpheC5lcnJvckNhbGxiYWNrKGpzb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodHlwZW9mIF90aGlzLnNldHRpbmdzLmFqYXguYXBpS2V5ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBkYXRhT2JqLmhlYWRlcnMgPSBfdGhpcy5zZXR0aW5ncy5hamF4LmFwaUtleTtcclxuICAgIH1cclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5tYWluQWpheC5hYm9ydCgpLmdldERhdGEoZGF0YU9iaik7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5vcGVuQ2hhbmVsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5zb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoX3RoaXMuc2V0dGluZ3Muc3NlVXJsLCB7IHdpdGhDcmVkZW50aWFsczogdHJ1ZSB9KTtcclxuXHJcbiAgICBfdGhpcy5zZXJ2ZXJTaWRlRXZlbnRMaXN0ZW5lcnMoX3RoaXMuc2V0dGluZ3Muc291cmNlKTtcclxuICB9O1xyXG5cclxuICB0aGlzLnNlcnZlclNpZGVFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuZGVidWcpIGNvbnNvbGUubG9nKCdbTXNnXSBjb25uZWN0aW9uIG9wZW5lZCcsIGUpO1xyXG4gICAgfSwgZmFsc2UpO1xyXG5cclxuICAgIHNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmRlYnVnKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1tNc2ddIG1lc3NhZ2UgY2hlY2snLCBfdGhpcy5zZXR0aW5ncy5zc2VVcmwpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUuZGF0YSk7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIGRhdGEgPSBlLmRhdGE7XHJcbiAgICAgIHZhciBqc29uID0gbnVsbDtcclxuXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAganNvbiA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmhlYXJ0YmVhdCAhPT0gbnVsbCkge1xyXG4gICAgICAgIF90aGlzLnNldHRpbmdzLmxhc3RIZWFydGJlYXQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoanNvbiAhPT0gbnVsbCAmJiB0eXBlb2YganNvbi5oZWFydGJlYXQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MubWVzc2FnZVF1ZXVlLnB1c2goanNvbik7XHJcbiAgICAgIH1cclxuICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICBzb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuZGVidWcpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnW01zZ10gZXJyb3IgY2hlY2snLCBfdGhpcy5zZXR0aW5ncy5zc2VVcmwpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiBlc2xpbnQgZXFlcWVxOiBcIm9mZlwiICovXHJcbiAgICAgIGlmIChlLnJlYWR5U3RhdGUgPT0gRXZlbnRTb3VyY2UuQ0xPU0VEKSB7XHJcbiAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmRlYnVnKSBjb25zb2xlLndhcm4oJ1tNc2ddIGNvbm5lY3Rpb24gY2xvc2VkJywgZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKF90aGlzLnNldHRpbmdzLmRlYnVnKSBjb25zb2xlLmxvZyhlLCBlLnJlYWR5U3RhdGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBfdGhpcy5jbG9zZUNoYW5lbCgpO1xyXG5cclxuICAgICAgX3RoaXMuc2V0dGluZ3Muc3RhcnR1cENoZWNrID0gZmFsc2U7XHJcbiAgICB9LCBmYWxzZSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5jbG9zZUNoYW5lbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuc2V0dGluZ3MuYWN0aXZlID0gZmFsc2U7XHJcbiAgICB0aGlzLnNldHRpbmdzLnNvdXJjZS5jbG9zZSgpO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuc3NlRmFpbGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5oZWFydGJlYXQgPSBudWxsO1xyXG4gICAgX3RoaXMuc2V0dGluZ3MuYWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgaWYgKF90aGlzLmhlYXJ0YmVhdEludGVydmFsSW5zdGFuY2UgIT09IG51bGwpIHtcclxuICAgICAgY2xlYXJJbnRlcnZhbChfdGhpcy5oZWFydGJlYXRJbnRlcnZhbEluc3RhbmNlKTtcclxuICAgIH1cclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5vblN0YXJ0dXBFcnJvcihfdGhpcy5zZXR0aW5ncyk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy53aW5kb3dBY3Rpdml0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgKGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIGhpZGRlbiA9ICdoaWRkZW4nO1xyXG5cclxuICAgICAgLy8gU3RhbmRhcmRzOlxyXG4gICAgICBpZiAoaGlkZGVuIGluIGRvY3VtZW50KSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uY2hhbmdlKTtcclxuICAgICAgfSBlbHNlIGlmICgoaGlkZGVuID0gJ21vekhpZGRlbicpIGluIGRvY3VtZW50KSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW96dmlzaWJpbGl0eWNoYW5nZScsIG9uY2hhbmdlKTtcclxuICAgICAgfSBlbHNlIGlmICgoaGlkZGVuID0gJ3dlYmtpdEhpZGRlbicpIGluIGRvY3VtZW50KSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0dmlzaWJpbGl0eWNoYW5nZScsIG9uY2hhbmdlKTtcclxuICAgICAgfSBlbHNlIGlmICgoaGlkZGVuID0gJ21zSGlkZGVuJykgaW4gZG9jdW1lbnQpIHtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtc3Zpc2liaWxpdHljaGFuZ2UnLCBvbmNoYW5nZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoJ29uZm9jdXNpbicgaW4gZG9jdW1lbnQpIHsgLy8gSUUgOSBhbmQgbG93ZXI6XHJcbiAgICAgICAgZG9jdW1lbnQub25mb2N1c2luID0gZG9jdW1lbnQub25mb2N1c291dCA9IG9uY2hhbmdlO1xyXG4gICAgICB9IGVsc2UgeyAvLyBBbGwgb3RoZXJzOlxyXG4gICAgICAgIHdpbmRvdy5vbnBhZ2VzaG93ID0gd2luZG93Lm9ucGFnZWhpZGUgPSB3aW5kb3cub25mb2N1cyA9IHdpbmRvdy5vbmJsdXIgPSBvbmNoYW5nZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gb25jaGFuZ2UgKGV2dCkge1xyXG4gICAgICAgIHZhciBzdGF0dXMgPSAnJztcclxuICAgICAgICB2YXIgdiA9ICd2aXNpYmxlJztcclxuICAgICAgICB2YXIgaCA9ICdoaWRkZW4nO1xyXG4gICAgICAgIHZhciBldnRNYXAgPSB7XHJcbiAgICAgICAgICBmb2N1czogdiwgZm9jdXNpbjogdiwgcGFnZXNob3c6IHYsIGJsdXI6IGgsIGZvY3Vzb3V0OiBoLCBwYWdlaGlkZTogaFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGV2dCA9IGV2dCB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgICAgaWYgKGV2dC50eXBlIGluIGV2dE1hcCkge1xyXG4gICAgICAgICAgc3RhdHVzID0gZXZ0TWFwW2V2dC50eXBlXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3RhdHVzID0gdGhpc1toaWRkZW5dID8gJ2hpZGRlbicgOiAndmlzaWJsZSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3RhdHVzID09PSAndmlzaWJsZScgJiYgKF90aGlzLnNldHRpbmdzLnNvdXJjZS5yZWFkeVN0YXRlICE9PSAwICYmIF90aGlzLnNldHRpbmdzLnNvdXJjZS5yZWFkeVN0YXRlICE9PSAxKSkge1xyXG4gICAgICAgICAgX3RoaXMub3BlbkNoYW5lbCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSAnaGlkZGVuJyAmJiAoX3RoaXMuc2V0dGluZ3Muc291cmNlLnJlYWR5U3RhdGUgPT09IDAgfHwgX3RoaXMuc2V0dGluZ3Muc291cmNlLnJlYWR5U3RhdGUgPT09IDEpKSB7XHJcbiAgICAgICAgICBfdGhpcy5jbG9zZUNoYW5lbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gc2V0IHRoZSBpbml0aWFsIHN0YXRlIChidXQgb25seSBpZiBicm93c2VyIHN1cHBvcnRzIHRoZSBQYWdlIFZpc2liaWxpdHkgQVBJKVxyXG4gICAgICBpZiAoZG9jdW1lbnRbaGlkZGVuXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgb25jaGFuZ2UoeyB0eXBlOiBkb2N1bWVudFtoaWRkZW5dID8gJ2JsdXInIDogJ2ZvY3VzJyB9KTtcclxuICAgICAgfVxyXG4gICAgfSkoKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5kZWJ1ZykgY29uc29sZS5sb2coJ1tNc2ddIFNTRSBzdGFydGluZycsIF90aGlzLnNldHRpbmdzLnNzZVVybCwgbmV3IERhdGUoKSk7XHJcblxyXG4gICAgICBfdGhpcy5vcGVuQ2hhbmVsKCk7XHJcblxyXG4gICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuZGVidWcpIGNvbnNvbGUubG9nKCdbTXNnXSBTU0Ugc3RhcnRlZCcsIF90aGlzLnNldHRpbmdzLnNzZVVybCwgbmV3IERhdGUoKSwgX3RoaXMuc2V0dGluZ3Muc291cmNlLnJlYWR5U3RhdGUpO1xyXG5cclxuICAgICAgX3RoaXMuc2V0SW50ZXJ2YWwoKTtcclxuICAgICAgX3RoaXMud2luZG93QWN0aXZpdHkoKTtcclxuXHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghX3RoaXMuc2V0dGluZ3Muc3RhcnR1cENoZWNrKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnc3NlIGZhaWxlZCcpO1xyXG4gICAgICAgICAgX3RoaXMuc3NlRmFpbGVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCAyMDAwKTtcclxuXHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmxvYWQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuZGVidWcpIGNvbnNvbGUubG9nKCdbTXNnXSBjbG9zaW5nIG1lc3NhZ2luZyBzZXJ2aWNlJywgbmV3IERhdGUoKSk7XHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3Muc291cmNlLmNsb3NlKCk7XHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MuYWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIF90aGlzLnNldHRpbmdzLmhlYXJ0QmVhdEFqYXguYWJvcnQoKTtcclxuXHJcbiAgICAgICAgaWYgKF90aGlzLmludGVydmFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoX3RoaXMuaW50ZXJ2YWxJbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGlmIChfdGhpcy5zZXR0aW5ncy5kZWJ1ZykgY29uc29sZS5sb2coJ1tNc2ddIGNsb3NpbmcgbWVzc2FnaW5nIHNlcnZpY2UnKTtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5zb3VyY2UuY2xvc2UoKTtcclxuXHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MuaGVhcnRCZWF0QWpheC5hYm9ydCgpO1xyXG5cclxuICAgICAgICBpZiAoX3RoaXMuaW50ZXJ2YWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChfdGhpcy5pbnRlcnZhbEluc3RhbmNlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuZGVidWcpIGNvbnNvbGUubG9nKCdFdmVudFNvdXJjZSBmYWlsZWQnKTtcclxuICAgICAgX3RoaXMuc3NlRmFpbGVkKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5pbml0KCk7XHJcbn07XHJcbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHF1ZXJ5IGZyb20gJy4uL3V0aWxzL3F1ZXJ5JztcclxuaW1wb3J0IGFkZENsYXNzIGZyb20gJy4uL3V0aWxzL2FkZENsYXNzJztcclxuaW1wb3J0IGhhc0NsYXNzIGZyb20gJy4uL3V0aWxzL2hhc0NsYXNzJztcclxuaW1wb3J0IHJlbW92ZUNsYXNzIGZyb20gJy4uL3V0aWxzL3JlbW92ZUNsYXNzJztcclxuaW1wb3J0IHJlbW92ZSBmcm9tICcuLi91dGlscy9yZW1vdmUnO1xyXG5pbXBvcnQgZHJhZ0VsZW1lbnQgZnJvbSAnLi9kcmFnRWxlbWVudCc7XHJcblxyXG5leHBvcnQgY29uc3QgTWluaVNjb3JlQm9hcmQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gIHRoaXMuc2V0dGluZ3MgPSB7XHJcbiAgICBsYldpZGdldDogbnVsbCxcclxuICAgIGNvbnRhaW5lcjogbnVsbCxcclxuICAgIG92ZXJsYXlDb250YWluZXI6IG51bGwsXHJcbiAgICBpbmZvQ29udGFpbmVyOiBudWxsLFxyXG4gICAgdXBkYXRlSW50ZXJ2YWw6IG51bGwsXHJcbiAgICB1cGRhdGVJbnRlcnZhbFRpbWU6IDEwMDAsXHJcbiAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgZW5hYmxlRHJhZ2dpbmc6IHRydWUsXHJcbiAgICBkcmFnZ2luZzogZmFsc2VcclxuICB9O1xyXG5cclxuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBmb3IgKHZhciBvcHQgaW4gb3B0aW9ucykge1xyXG4gICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHQpKSB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5nc1tvcHRdID0gb3B0aW9uc1tvcHRdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0aGlzLmxheW91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgaWNvbldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgdmFyIGluZm9ybWF0aW9uV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGluZm9ybWF0aW9uVG9wV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGluZm9ybWF0aW9uV3JhcHBlckNsb3NlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgaW5mb3JtYXRpb25DbG9zZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuXHJcbiAgICB3cmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXdyYXBwZXInKTtcclxuICAgIGljb25XcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWljb24td3JhcHBlcicpO1xyXG4gICAgaWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1pY29uJyk7XHJcbiAgICBpbmZvcm1hdGlvblRvcFdyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtaW5mb3JtYXRpb24tdG9wLXdyYXBwZXInKTtcclxuICAgIGluZm9ybWF0aW9uV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1pbmZvcm1hdGlvbi13cmFwcGVyJyk7XHJcbiAgICBpbmZvcm1hdGlvbldyYXBwZXJDbG9zZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1pbmZvcm1hdGlvbi1jbG9zZS13cmFwcGVyJyk7XHJcbiAgICBpbmZvcm1hdGlvbkNsb3NlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWluZm9ybWF0aW9uLWNsb3NlJyk7XHJcblxyXG4gICAgaW5mb3JtYXRpb25DbG9zZS5ocmVmID0gJ2phdmFzY3JpcHQ6dm9pZCgwKTsnO1xyXG4gICAgaW5mb3JtYXRpb25DbG9zZS5pbm5lckhUTUwgPSAneCc7XHJcblxyXG4gICAgaW5mb3JtYXRpb25XcmFwcGVyQ2xvc2UuYXBwZW5kQ2hpbGQoaW5mb3JtYXRpb25DbG9zZSk7XHJcbiAgICBpbmZvcm1hdGlvbldyYXBwZXIuYXBwZW5kQ2hpbGQoaW5mb3JtYXRpb25XcmFwcGVyQ2xvc2UpO1xyXG4gICAgaW5mb3JtYXRpb25Ub3BXcmFwcGVyLmFwcGVuZENoaWxkKGluZm9ybWF0aW9uV3JhcHBlcik7XHJcbiAgICBpY29uV3JhcHBlci5hcHBlbmRDaGlsZChpY29uKTtcclxuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoaWNvbldyYXBwZXIpO1xyXG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChpbmZvcm1hdGlvblRvcFdyYXBwZXIpO1xyXG5cclxuICAgIHJldHVybiB3cmFwcGVyO1xyXG4gIH07XHJcblxyXG4gIHRoaXMub3ZlcmxheUxheW91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1vdmVybGF5LXdyYXBwZXInKTtcclxuXHJcbiAgICByZXR1cm4gd3JhcHBlcjtcclxuICB9O1xyXG5cclxuICB0aGlzLnRpbWVNYW5hZ2VtZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBkaWZmID0gMDtcclxuICAgIHZhciBsYWJlbCA9ICcnO1xyXG4gICAgdmFyIGRhdGUgPSAnJztcclxuICAgIHZhciBkYXRlT2JqID0gJyc7XHJcbiAgICB2YXIgaW52ZXJzZSA9IGZhbHNlO1xyXG5cclxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0ICE9PSBudWxsKSB7XHJcbiAgICAgIGRpZmYgPSBtb21lbnQoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zY2hlZHVsZWRTdGFydCkuZGlmZihtb21lbnQoKSk7XHJcbiAgICAgIGxhYmVsID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubWluaUxlYWRlcmJvYXJkLnN0YXJ0c0luO1xyXG4gICAgICBkYXRlID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuZm9ybWF0RGF0ZVRpbWUobW9tZW50LmR1cmF0aW9uKGRpZmYpKTtcclxuICAgICAgZGF0ZU9iaiA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmZvcm1hdERhdGVUaW1lKG1vbWVudC5kdXJhdGlvbihkaWZmKSk7XHJcbiAgICAgIGludmVyc2UgPSBmYWxzZTtcclxuXHJcbiAgICAgIGlmIChkaWZmIDwgMCAmJiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnN0YXR1c0NvZGUgPT09IDApIHtcclxuICAgICAgICBsYWJlbCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLm1pbmlMZWFkZXJib2FyZC5zdGFydGluZztcclxuICAgICAgICBkYXRlID0gJyc7XHJcbiAgICAgIH0gZWxzZSBpZiAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zdGF0dXNDb2RlID4gMCAmJiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnN0YXR1c0NvZGUgPCAzKSB7XHJcbiAgICAgICAgZGlmZiA9IG1vbWVudChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnNjaGVkdWxlZEVuZCkuZGlmZihtb21lbnQoKSk7XHJcbiAgICAgICAgZGF0ZU9iaiA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmZvcm1hdERhdGVUaW1lKG1vbWVudC5kdXJhdGlvbihkaWZmKSk7XHJcbiAgICAgICAgbGFiZWwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5mb3JtYXREYXRlVGltZShtb21lbnQuZHVyYXRpb24oZGlmZikpO1xyXG4gICAgICAgIGRhdGUgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5taW5pTGVhZGVyYm9hcmQucmFuaztcclxuICAgICAgICBpbnZlcnNlID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnN0YXR1c0NvZGUgPT09IDMpIHtcclxuICAgICAgICBsYWJlbCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLm1pbmlMZWFkZXJib2FyZC5maW5pc2hpbmc7XHJcbiAgICAgICAgZGF0ZSA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLm1pbmlMZWFkZXJib2FyZC5yYW5rO1xyXG4gICAgICAgIGludmVyc2UgPSB0cnVlO1xyXG4gICAgICB9IGVsc2UgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RhdHVzQ29kZSA+PSA0KSB7XHJcbiAgICAgICAgbGFiZWwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5taW5pTGVhZGVyYm9hcmQuZmluaXNoZWQ7XHJcbiAgICAgICAgZGF0ZSA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLm1pbmlMZWFkZXJib2FyZC5yYW5rO1xyXG4gICAgICAgIGludmVyc2UgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICBkaWZmOiBkaWZmLFxyXG4gICAgICBkYXRlOiBkYXRlLFxyXG4gICAgICBkYXRlT2JqOiBkYXRlT2JqLFxyXG4gICAgICBpbnZlcnNlOiBpbnZlcnNlXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHRoaXMubGF5b3V0RGVmYXVsdE9yRW1wdHlFbnRyeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBsYlJlc3VsdHNNZW1FbnRyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGxiUmVzdWx0c01lbUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgbGJSZXN1bHRzTWVtUmFuayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGxiUmVzdWx0c01lbUljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBsYlJlc3VsdHNNZW1JbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgIHZhciBsYlJlc3VsdHNNZW1Qb2ludHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICBsYlJlc3VsdHNNZW1FbnRyeS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1kZWZhdWx0LW1lbS1lbnRyeScpO1xyXG4gICAgbGJSZXN1bHRzTWVtTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZGVmYXVsdC1tZW0tbGFiZWwnKTtcclxuICAgIGxiUmVzdWx0c01lbVJhbmsuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZGVmYXVsdC1tZW0tcmFuaycpO1xyXG4gICAgbGJSZXN1bHRzTWVtSWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1kZWZhdWx0LW1lbS1pY29uJyk7XHJcbiAgICBsYlJlc3VsdHNNZW1JbWcuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZGVmYXVsdC1tZW0taW1nJyk7XHJcbiAgICBsYlJlc3VsdHNNZW1JbWcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIGxiUmVzdWx0c01lbVBvaW50cy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1kZWZhdWx0LW1lbS1wb2ludHMnKTtcclxuXHJcbiAgICBsYlJlc3VsdHNNZW1FbnRyeS5hcHBlbmRDaGlsZChsYlJlc3VsdHNNZW1MYWJlbCk7XHJcbiAgICBsYlJlc3VsdHNNZW1FbnRyeS5hcHBlbmRDaGlsZChsYlJlc3VsdHNNZW1SYW5rKTtcclxuICAgIGxiUmVzdWx0c01lbUljb24uYXBwZW5kQ2hpbGQobGJSZXN1bHRzTWVtSW1nKTtcclxuICAgIGxiUmVzdWx0c01lbUVudHJ5LmFwcGVuZENoaWxkKGxiUmVzdWx0c01lbUljb24pO1xyXG4gICAgbGJSZXN1bHRzTWVtRW50cnkuYXBwZW5kQ2hpbGQobGJSZXN1bHRzTWVtUG9pbnRzKTtcclxuXHJcbiAgICByZXR1cm4gbGJSZXN1bHRzTWVtRW50cnk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5sYXlvdXRGaXJzdFRvT3JFbXB0eUVudHJ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGxiUmVzdWx0c01lbUVudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgbGJSZXN1bHRzTWVtTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBsYlJlc3VsdHNNZW1SYW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgbGJSZXN1bHRzTWVtSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGxiUmVzdWx0c01lbUltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgdmFyIGxiUmVzdWx0c01lbVBvaW50cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgIGxiUmVzdWx0c01lbUVudHJ5LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1lbnRyeScpO1xyXG4gICAgbGJSZXN1bHRzTWVtTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZmlyc3QtdG8tbWVtLWxhYmVsJyk7XHJcbiAgICBsYlJlc3VsdHNNZW1SYW5rLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1yYW5rJyk7XHJcbiAgICBsYlJlc3VsdHNNZW1JY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1pY29uJyk7XHJcbiAgICBsYlJlc3VsdHNNZW1JbWcuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZmlyc3QtdG8tbWVtLWltZycpO1xyXG4gICAgbGJSZXN1bHRzTWVtSW1nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICBsYlJlc3VsdHNNZW1Qb2ludHMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZmlyc3QtdG8tbWVtLXBvaW50cycpO1xyXG5cclxuICAgIGxiUmVzdWx0c01lbUVudHJ5LmFwcGVuZENoaWxkKGxiUmVzdWx0c01lbUxhYmVsKTtcclxuICAgIGxiUmVzdWx0c01lbUVudHJ5LmFwcGVuZENoaWxkKGxiUmVzdWx0c01lbVJhbmspO1xyXG4gICAgbGJSZXN1bHRzTWVtSWNvbi5hcHBlbmRDaGlsZChsYlJlc3VsdHNNZW1JbWcpO1xyXG4gICAgbGJSZXN1bHRzTWVtRW50cnkuYXBwZW5kQ2hpbGQobGJSZXN1bHRzTWVtSWNvbik7XHJcbiAgICBsYlJlc3VsdHNNZW1FbnRyeS5hcHBlbmRDaGlsZChsYlJlc3VsdHNNZW1Qb2ludHMpO1xyXG5cclxuICAgIHJldHVybiBsYlJlc3VsdHNNZW1FbnRyeTtcclxuICB9O1xyXG5cclxuICAvLyBsZXQgdGVzdExpdmUgPSBmYWxzZTtcclxuICB0aGlzLmxheW91dERlZmF1bHRPckVtcHR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciB0aW1lTWFuYWdlbWVudCA9IF90aGlzLnRpbWVNYW5hZ2VtZW50KCk7XHJcbiAgICAvLyB2YXIgZGlmZiA9IHRpbWVNYW5hZ2VtZW50LmRpZmY7XHJcbiAgICB2YXIgbGFiZWwgPSB0aW1lTWFuYWdlbWVudC5sYWJlbDtcclxuICAgIHZhciBkYXRlID0gdGltZU1hbmFnZW1lbnQuZGF0ZTtcclxuICAgIHZhciBkYXRlT2JqID0gdGltZU1hbmFnZW1lbnQuZGF0ZU9iajtcclxuICAgIHZhciB3cmFwcGVyRG9tT2JqID0gX3RoaXMuc2V0dGluZ3MuaW5mb0NvbnRhaW5lcjtcclxuICAgIHZhciBkZWZhdWx0RG9tT2JqID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1kZWZhdWx0LXdyYXBwZXInKTtcclxuICAgIHZhciBpbnZlcnNlID0gdGltZU1hbmFnZW1lbnQuaW52ZXJzZTtcclxuXHJcbiAgICBpZiAoZGVmYXVsdERvbU9iaiA9PT0gbnVsbCkge1xyXG4gICAgICBfdGhpcy5yZW1vdmVVbnVzZWRFbGVtZW50cygpO1xyXG5cclxuICAgICAgYWRkQ2xhc3MoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnY2wtbXMtZGVmYXVsdC1zdHlsZScpO1xyXG5cclxuICAgICAgdmFyIGxiV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJEYXRlV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJEYXRlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdmFyIGxiRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJSZXN1bHRzV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJSZXN1bHRzTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJIZWFkZXJzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHZhciBsYkhlYWRlcnNSYW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHZhciBsYkhlYWRlcnNQb2ludHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdmFyIGxiUmVzdWx0c01lbUVudHJ5ID0gX3RoaXMubGF5b3V0RGVmYXVsdE9yRW1wdHlFbnRyeSgpO1xyXG4gICAgICB2YXIgaW1nID0gcXVlcnkobGJSZXN1bHRzTWVtRW50cnksICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtbWVtLWltZycpO1xyXG5cclxuICAgICAgbGJXcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtd3JhcHBlcicpO1xyXG4gICAgICBsYkRhdGVMYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1kZWZhdWx0LWRhdGUtbGFiZWwnKTtcclxuICAgICAgbGJEYXRlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtZGF0ZScpO1xyXG4gICAgICBsYkRhdGVXcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtZGF0ZS13cmFwcGVyJyk7XHJcbiAgICAgIGxiUmVzdWx0c1dyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZGVmYXVsdC1yZXN1bHRzLXdyYXBwZXInKTtcclxuICAgICAgbGJSZXN1bHRzTGlzdC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1kZWZhdWx0LXJlc3VsdHMtbGlzdCcpO1xyXG4gICAgICBsYkhlYWRlcnMuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZGVmYXVsdC1yZXN1bHRzLWhlYWRlcnMnKTtcclxuICAgICAgbGJIZWFkZXJzUmFuay5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1kZWZhdWx0LXJlc3VsdHMtaGVhZGVyLXJhbmsnKTtcclxuICAgICAgbGJIZWFkZXJzUG9pbnRzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWRlZmF1bHQtcmVzdWx0cy1oZWFkZXItcG9pbnRzJyk7XHJcblxyXG4gICAgICBsYlJlc3VsdHNNZW1FbnRyeS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1kZWZhdWx0LW1lbS1lbnRyeScpO1xyXG5cclxuICAgICAgLy8gbGJEYXRlTGFiZWwuaW5uZXJIVE1MID0gbGFiZWw7XHJcbiAgICAgIGxiRGF0ZS5pbm5lckhUTUwgPSBkYXRlT2JqO1xyXG5cclxuICAgICAgbGJEYXRlV3JhcHBlci5hcHBlbmRDaGlsZChsYkRhdGVMYWJlbCk7XHJcbiAgICAgIGxiRGF0ZVdyYXBwZXIuYXBwZW5kQ2hpbGQobGJEYXRlKTtcclxuXHJcbiAgICAgIHF1ZXJ5KGxiUmVzdWx0c01lbUVudHJ5LCAnLmNsLXdpZGdldC1tcy1kZWZhdWx0LW1lbS1yYW5rJykuaW5uZXJIVE1MID0gJy0tJztcclxuICAgICAgcXVlcnkobGJSZXN1bHRzTWVtRW50cnksICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtbWVtLXBvaW50cycpLmlubmVySFRNTCA9ICctLSc7XHJcblxyXG4gICAgICBpbWcuc3JjID0gJyc7XHJcbiAgICAgIGltZy5hbHQgPSAnJztcclxuICAgICAgaW1nLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgbGJIZWFkZXJzUmFuay5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5sZWFkZXJib2FyZC5yYW5rO1xyXG4gICAgICBsYkhlYWRlcnNQb2ludHMuaW5uZXJIVE1MID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQucG9pbnRzO1xyXG5cclxuICAgICAgbGJIZWFkZXJzLmFwcGVuZENoaWxkKGxiSGVhZGVyc1JhbmspO1xyXG4gICAgICBsYkhlYWRlcnMuYXBwZW5kQ2hpbGQobGJIZWFkZXJzUG9pbnRzKTtcclxuICAgICAgbGJSZXN1bHRzTGlzdC5hcHBlbmRDaGlsZChsYlJlc3VsdHNNZW1FbnRyeSk7XHJcbiAgICAgIGxiUmVzdWx0c1dyYXBwZXIuYXBwZW5kQ2hpbGQobGJIZWFkZXJzKTtcclxuICAgICAgbGJSZXN1bHRzV3JhcHBlci5hcHBlbmRDaGlsZChsYlJlc3VsdHNMaXN0KTtcclxuXHJcbiAgICAgIGxiV3JhcHBlci5hcHBlbmRDaGlsZChsYkRhdGVXcmFwcGVyKTtcclxuICAgICAgbGJXcmFwcGVyLmFwcGVuZENoaWxkKGxiUmVzdWx0c1dyYXBwZXIpO1xyXG5cclxuICAgICAgZGVmYXVsdERvbU9iaiA9IHdyYXBwZXJEb21PYmouYXBwZW5kQ2hpbGQobGJXcmFwcGVyKTtcclxuXHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGFkZENsYXNzKHdyYXBwZXJEb21PYmosICdjbC1zaG93Jyk7XHJcbiAgICAgIH0sIDIwMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIWhhc0NsYXNzKHdyYXBwZXJEb21PYmosICdjbC1zaG93JykpIHtcclxuICAgICAgICBhZGRDbGFzcyh3cmFwcGVyRG9tT2JqLCAnY2wtc2hvdycpO1xyXG4gICAgICB9XHJcbiAgICAgIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtZGVmYXVsdC1kYXRlLWxhYmVsJykuaW5uZXJIVE1MID0gbGFiZWw7XHJcbiAgICAgIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtZGVmYXVsdC1kYXRlJykuaW5uZXJIVE1MID0gZGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICB3aW5kb3cubWFwT2JqZWN0KF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmxlYWRlcmJvYXJkLmxlYWRlcmJvYXJkRGF0YSwgZnVuY3Rpb24gKGxiRW50cnkpIHtcclxuICAgICAgaWYgKChsYkVudHJ5Lm1lbWJlclJlZklkID09PSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5tZW1iZXJJZCB8fCBsYkVudHJ5Lm1lbWJlcklkID09PSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5tZW1iZXJJZCkgJiYgdHlwZW9mIGxiRW50cnkucmFua2luZ3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgdmFyIHNjb3JlQXJlYSA9IHF1ZXJ5KGRlZmF1bHREb21PYmosICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtcmVzdWx0cy1saXN0Jyk7XHJcbiAgICAgICAgc2NvcmVBcmVhLmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtZGF0ZS1sYWJlbCcpLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtZGVmYXVsdC1kYXRlJykuaW5uZXJIVE1MID0gZGF0ZU9iajtcclxuICAgICAgICBhZGRDbGFzcyhxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtZGF0ZS13cmFwcGVyJyksICdjbC13aWRnZXQtbXMtZGVmYXVsdC1kYXRlLW9ubHknKTtcclxuXHJcbiAgICAgICAgd2luZG93Lm1hcE9iamVjdChsYkVudHJ5LnJhbmtpbmdzLCBmdW5jdGlvbiAobGJSYW5raW5nRW50cnkpIHtcclxuICAgICAgICAgIHZhciBpY29uID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQucG9wdWxhdGVJZGVudGljb25CYXNlNjRJbWFnZShsYlJhbmtpbmdFbnRyeS5tZW1iZXJJZCk7XHJcbiAgICAgICAgICB2YXIgbGJXcmFwcGVyID0gX3RoaXMubGF5b3V0RGVmYXVsdE9yRW1wdHlFbnRyeSgpO1xyXG4gICAgICAgICAgdmFyIGltZyA9IHF1ZXJ5KGxiV3JhcHBlciwgJy5jbC13aWRnZXQtbXMtZGVmYXVsdC1tZW0taW1nJyk7XHJcbiAgICAgICAgICB2YXIgc2VsZk1lbWJlciA9ICgobGJSYW5raW5nRW50cnkubWVtYmVyUmVmSWQgPT09IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm1lbWJlcklkIHx8IGxiUmFua2luZ0VudHJ5Lm1lbWJlcklkID09PSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5tZW1iZXJJZCkpO1xyXG5cclxuICAgICAgICAgIGltZy5zcmMgPSBpY29uO1xyXG4gICAgICAgICAgaW1nLmFsdCA9ICcnO1xyXG4gICAgICAgICAgaW1nLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgICAgIGlmIChzZWxmTWVtYmVyKSB7XHJcbiAgICAgICAgICAgIGFkZENsYXNzKGxiV3JhcHBlciwgJ2NsLXdpZGdldC1tcy1kZWZhdWx0LW1lbS1zZWxmJyk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcXVlcnkobGJXcmFwcGVyLCAnLmNsLXdpZGdldC1tcy1kZWZhdWx0LW1lbS1sYWJlbCcpLmlubmVySFRNTCA9IHNlbGZNZW1iZXIgPyAnWU9VJyA6ICcnO1xyXG4gICAgICAgICAgcXVlcnkobGJXcmFwcGVyLCAnLmNsLXdpZGdldC1tcy1kZWZhdWx0LW1lbS1yYW5rJykuaW5uZXJIVE1MID0gXCI8c3BhbiBjbGFzcz0nY2wtbWVtLXJhbmstbGFiZWwnPlwiICsgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQucmFuayArIFwiPC9zcGFuPjxzcGFuIGNsYXNzPSdjbC1tZW0tcmFuayc+XCIgKyBsYlJhbmtpbmdFbnRyeS5yYW5rICsgJzwvc3Bhbj4nO1xyXG4gICAgICAgICAgcXVlcnkobGJXcmFwcGVyLCAnLmNsLXdpZGdldC1tcy1kZWZhdWx0LW1lbS1wb2ludHMnKS5pbm5lckhUTUwgPSBcIjxzcGFuIGNsYXNzPSdjbC1tZW0tcG9pbnRzLWxhYmVsJz5cIiArIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmxlYWRlcmJvYXJkLnBvaW50cyArIFwiPC9zcGFuPjxzcGFuIGNsYXNzPSdjbC1tZW0tcG9pbnRzJz5cIiArIGxiUmFua2luZ0VudHJ5LnBvaW50cyArICc8L3NwYW4+JztcclxuXHJcbiAgICAgICAgICBzY29yZUFyZWEuYXBwZW5kQ2hpbGQobGJXcmFwcGVyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gdGVzdExpdmUgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyAgdmFyIGxhc3RTY29yZSA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgXCIuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtbGFzdC1zY29yZVwiKS5pbm5lckhUTUwsXHJcbiAgICAgICAgLy8gIGhpZ2hTY29yZSA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgXCIuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtaGlnaC1zY29yZVwiKS5pbm5lckhUTUwsXHJcbiAgICAgICAgLy8gIHJhbmsgPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsIFwiLmNsLXdpZGdldC1tcy1kZWZhdWx0LXJhbmstdmFsdWVcIiksXHJcbiAgICAgICAgLy8gIGNoYW5nZSA9IChsYkVudHJ5LmNoYW5nZSA8IDApID8gXCJkb3duXCIgOiAoIGxiRW50cnkuY2hhbmdlID4gMCA/IFwidXBcIiA6IFwic2FtZVwiICksXHJcbiAgICAgICAgLy8gIHJhbmtWYWx1ZSA9IGxiRW50cnkucmFuaztcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIGlmKCBsYXN0U2NvcmUgIT09IFN0cmluZyhsYkVudHJ5LnBvaW50cykgJiYgU3RyaW5nKGxiRW50cnkucG9pbnRzKSAhPT0gaGlnaFNjb3JlICl7XHJcbiAgICAgICAgLy8gIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgXCIuY2wtd2lkZ2V0LW1zLWRlZmF1bHQtbGFzdC1zY29yZVwiKS5pbm5lckhUTUwgPSBoaWdoU2NvcmU7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCBcIi5jbC13aWRnZXQtbXMtZGVmYXVsdC1oaWdoLXNjb3JlXCIpLmlubmVySFRNTCA9IGxiRW50cnkucG9pbnRzO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gcmVtb3ZlQ2xhc3MocmFuaywgXCJjbC1tcy1yYW5rLXVwXCIpO1xyXG4gICAgICAgIC8vIHJlbW92ZUNsYXNzKHJhbmssIFwiY2wtbXMtcmFuay1kb3duXCIpO1xyXG4gICAgICAgIC8vIHJlbW92ZUNsYXNzKHJhbmssIFwiY2wtbXMtcmFuay1zYW1lXCIpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gYWRkQ2xhc3MocmFuaywgXCJjbC1tcy1yYW5rLVwiICsgY2hhbmdlKTtcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIHJhbmsuaW5uZXJIVE1MID0gcmFua1ZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoaW52ZXJzZSAmJiAhaGFzQ2xhc3MoZGVmYXVsdERvbU9iaiwgJ2NsLWludmVyc2UnKSkge1xyXG4gICAgICBhZGRDbGFzcyhkZWZhdWx0RG9tT2JqLCAnY2wtaW52ZXJzZScpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMubGF5b3V0Rmlyc3RUb09yRW1wdHkgPSBmdW5jdGlvbiAoc3RyYXRlZ3kpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgdGltZU1hbmFnZW1lbnQgPSBfdGhpcy50aW1lTWFuYWdlbWVudCgpO1xyXG4gICAgLy8gdmFyIGRpZmYgPSB0aW1lTWFuYWdlbWVudC5kaWZmO1xyXG4gICAgdmFyIGxhYmVsID0gdGltZU1hbmFnZW1lbnQubGFiZWw7XHJcbiAgICB2YXIgZGF0ZSA9IHRpbWVNYW5hZ2VtZW50LmRhdGU7XHJcbiAgICB2YXIgZGF0ZU9iaiA9IHRpbWVNYW5hZ2VtZW50LmRhdGVPYmo7XHJcbiAgICB2YXIgd3JhcHBlckRvbU9iaiA9IF90aGlzLnNldHRpbmdzLmluZm9Db250YWluZXI7XHJcbiAgICB2YXIgZGVmYXVsdERvbU9iaiA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtZmlyc3QtdG8td3JhcHBlcicpO1xyXG4gICAgdmFyIGludmVyc2UgPSB0aW1lTWFuYWdlbWVudC5pbnZlcnNlO1xyXG5cclxuICAgIGlmIChkZWZhdWx0RG9tT2JqID09PSBudWxsKSB7XHJcbiAgICAgIF90aGlzLnJlbW92ZVVudXNlZEVsZW1lbnRzKCk7XHJcblxyXG4gICAgICBhZGRDbGFzcyhfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICdjbC1tcy1maXJzdC10by1zdHlsZScpO1xyXG5cclxuICAgICAgdmFyIGxiV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJEYXRlV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJEYXRlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdmFyIGxiRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJSZXN1bHRzV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJSZXN1bHRzTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJIZWFkZXJzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHZhciBsYkhlYWRlcnNSYW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHZhciBsYkhlYWRlcnNQb2ludHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdmFyIGxiUmVzdWx0c01lbUVudHJ5ID0gX3RoaXMubGF5b3V0Rmlyc3RUb09yRW1wdHlFbnRyeSgpO1xyXG4gICAgICB2YXIgaW1nID0gcXVlcnkobGJSZXN1bHRzTWVtRW50cnksICcuY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1pbWcnKTtcclxuXHJcbiAgICAgIGxiV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1maXJzdC10by13cmFwcGVyJyk7XHJcbiAgICAgIGxiRGF0ZUxhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLWRhdGUtbGFiZWwnKTtcclxuICAgICAgbGJEYXRlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLWRhdGUnKTtcclxuICAgICAgbGJEYXRlV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1maXJzdC10by1kYXRlLXdyYXBwZXInKTtcclxuICAgICAgbGJSZXN1bHRzV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1maXJzdC10by1yZXN1bHRzLXdyYXBwZXInKTtcclxuICAgICAgbGJSZXN1bHRzTGlzdC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1maXJzdC10by1yZXN1bHRzLWxpc3QnKTtcclxuICAgICAgbGJIZWFkZXJzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLXJlc3VsdHMtaGVhZGVycycpO1xyXG4gICAgICBsYkhlYWRlcnNSYW5rLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLXJlc3VsdHMtaGVhZGVyLXJhbmsnKTtcclxuICAgICAgbGJIZWFkZXJzUG9pbnRzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLXJlc3VsdHMtaGVhZGVyLXBvaW50cycpO1xyXG5cclxuICAgICAgbGJSZXN1bHRzTWVtRW50cnkuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtZmlyc3QtdG8tbWVtLWVudHJ5Jyk7XHJcblxyXG4gICAgICAvLyBsYkRhdGVMYWJlbC5pbm5lckhUTUwgPSBsYWJlbDtcclxuICAgICAgbGJEYXRlLmlubmVySFRNTCA9IGRhdGVPYmo7XHJcblxyXG4gICAgICBsYkRhdGVXcmFwcGVyLmFwcGVuZENoaWxkKGxiRGF0ZUxhYmVsKTtcclxuICAgICAgbGJEYXRlV3JhcHBlci5hcHBlbmRDaGlsZChsYkRhdGUpO1xyXG5cclxuICAgICAgcXVlcnkobGJSZXN1bHRzTWVtRW50cnksICcuY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1yYW5rJykuaW5uZXJIVE1MID0gJy0tJztcclxuICAgICAgcXVlcnkobGJSZXN1bHRzTWVtRW50cnksICcuY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1wb2ludHMnKS5pbm5lckhUTUwgPSAnLS0vJyArIHN0cmF0ZWd5LnJlY29yZFRpbWVXaGVuU3VtUmVhY2hlcztcclxuXHJcbiAgICAgIGltZy5zcmMgPSAnJztcclxuICAgICAgaW1nLmFsdCA9ICcnO1xyXG4gICAgICBpbWcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgICBsYkhlYWRlcnNSYW5rLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmxlYWRlcmJvYXJkLnJhbms7XHJcbiAgICAgIGxiSGVhZGVyc1BvaW50cy5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5sZWFkZXJib2FyZC5wb2ludHM7XHJcblxyXG4gICAgICBsYkhlYWRlcnMuYXBwZW5kQ2hpbGQobGJIZWFkZXJzUmFuayk7XHJcbiAgICAgIGxiSGVhZGVycy5hcHBlbmRDaGlsZChsYkhlYWRlcnNQb2ludHMpO1xyXG4gICAgICBsYlJlc3VsdHNMaXN0LmFwcGVuZENoaWxkKGxiUmVzdWx0c01lbUVudHJ5KTtcclxuICAgICAgbGJSZXN1bHRzV3JhcHBlci5hcHBlbmRDaGlsZChsYkhlYWRlcnMpO1xyXG4gICAgICBsYlJlc3VsdHNXcmFwcGVyLmFwcGVuZENoaWxkKGxiUmVzdWx0c0xpc3QpO1xyXG5cclxuICAgICAgbGJXcmFwcGVyLmFwcGVuZENoaWxkKGxiRGF0ZVdyYXBwZXIpO1xyXG4gICAgICBsYldyYXBwZXIuYXBwZW5kQ2hpbGQobGJSZXN1bHRzV3JhcHBlcik7XHJcblxyXG4gICAgICBkZWZhdWx0RG9tT2JqID0gd3JhcHBlckRvbU9iai5hcHBlbmRDaGlsZChsYldyYXBwZXIpO1xyXG5cclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYWRkQ2xhc3Mod3JhcHBlckRvbU9iaiwgJ2NsLXNob3cnKTtcclxuICAgICAgfSwgMjAwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICghaGFzQ2xhc3Mod3JhcHBlckRvbU9iaiwgJ2NsLXNob3cnKSkge1xyXG4gICAgICAgIGFkZENsYXNzKHdyYXBwZXJEb21PYmosICdjbC1zaG93Jyk7XHJcbiAgICAgIH1cclxuICAgICAgcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1maXJzdC10by1kYXRlLWxhYmVsJykuaW5uZXJIVE1MID0gbGFiZWw7XHJcbiAgICAgIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtZmlyc3QtdG8tZGF0ZScpLmlubmVySFRNTCA9IGRhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgd2luZG93Lm1hcE9iamVjdChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5sZWFkZXJib2FyZC5sZWFkZXJib2FyZERhdGEsIGZ1bmN0aW9uIChsYkVudHJ5KSB7XHJcbiAgICAgIGlmICgobGJFbnRyeS5tZW1iZXJSZWZJZCA9PT0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQgfHwgbGJFbnRyeS5tZW1iZXJJZCA9PT0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQpICYmIHR5cGVvZiBsYkVudHJ5LnJhbmtpbmdzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHZhciBzY29yZUFyZWEgPSBxdWVyeShkZWZhdWx0RG9tT2JqLCAnLmNsLXdpZGdldC1tcy1maXJzdC10by1yZXN1bHRzLWxpc3QnKTtcclxuICAgICAgICBzY29yZUFyZWEuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgICAgIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtZmlyc3QtdG8tZGF0ZS1sYWJlbCcpLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtZmlyc3QtdG8tZGF0ZScpLmlubmVySFRNTCA9IGRhdGVPYmo7XHJcbiAgICAgICAgYWRkQ2xhc3MocXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1maXJzdC10by1kYXRlLXdyYXBwZXInKSwgJ2NsLXdpZGdldC1tcy1maXJzdC10by1kYXRlLW9ubHknKTtcclxuXHJcbiAgICAgICAgd2luZG93Lm1hcE9iamVjdChsYkVudHJ5LnJhbmtpbmdzLCBmdW5jdGlvbiAobGJSYW5raW5nRW50cnkpIHtcclxuICAgICAgICAgIHZhciBpY29uID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQucG9wdWxhdGVJZGVudGljb25CYXNlNjRJbWFnZShsYlJhbmtpbmdFbnRyeS5tZW1iZXJJZCk7XHJcbiAgICAgICAgICB2YXIgbGJXcmFwcGVyID0gX3RoaXMubGF5b3V0Rmlyc3RUb09yRW1wdHlFbnRyeSgpO1xyXG4gICAgICAgICAgdmFyIGltZyA9IHF1ZXJ5KGxiV3JhcHBlciwgJy5jbC13aWRnZXQtbXMtZmlyc3QtdG8tbWVtLWltZycpO1xyXG4gICAgICAgICAgdmFyIHNlbGZNZW1iZXIgPSAoKGxiUmFua2luZ0VudHJ5Lm1lbWJlclJlZklkID09PSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5tZW1iZXJJZCB8fCBsYlJhbmtpbmdFbnRyeS5tZW1iZXJJZCA9PT0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQpKTtcclxuXHJcbiAgICAgICAgICBpZiAoc2VsZk1lbWJlcikge1xyXG4gICAgICAgICAgICBhZGRDbGFzcyhsYldyYXBwZXIsICdjbC13aWRnZXQtbXMtZmlyc3QtdG8tbWVtLXNlbGYnKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpbWcuc3JjID0gaWNvbjtcclxuICAgICAgICAgIGltZy5hbHQgPSAnJztcclxuICAgICAgICAgIGltZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHJcbiAgICAgICAgICBxdWVyeShsYldyYXBwZXIsICcuY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLW1lbS1sYWJlbCcpLmlubmVySFRNTCA9IHNlbGZNZW1iZXIgPyAnWU9VJyA6ICcnO1xyXG4gICAgICAgICAgcXVlcnkobGJXcmFwcGVyLCAnLmNsLXdpZGdldC1tcy1maXJzdC10by1tZW0tcmFuaycpLmlubmVySFRNTCA9IFwiPHNwYW4gY2xhc3M9J2NsLW1lbS1yYW5rLWxhYmVsJz5cIiArIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLmxlYWRlcmJvYXJkLnJhbmsgKyBcIjwvc3Bhbj48c3BhbiBjbGFzcz0nY2wtbWVtLXJhbmsnPlwiICsgbGJSYW5raW5nRW50cnkucmFuayArICc8L3NwYW4+JztcclxuICAgICAgICAgIHF1ZXJ5KGxiV3JhcHBlciwgJy5jbC13aWRnZXQtbXMtZmlyc3QtdG8tbWVtLXBvaW50cycpLmlubmVySFRNTCA9IFwiPHNwYW4gY2xhc3M9J2NsLW1lbS1wb2ludHMtbGFiZWwnPlwiICsgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudHJhbnNsYXRpb24ubGVhZGVyYm9hcmQucG9pbnRzICsgXCI8L3NwYW4+PHNwYW4gY2xhc3M9J2NsLW1lbS1wb2ludHMnPlwiICsgbGJSYW5raW5nRW50cnkucG9pbnRzICsgJy8nICsgc3RyYXRlZ3kucmVjb3JkVGltZVdoZW5TdW1SZWFjaGVzICsgJzwvc3Bhbj4nO1xyXG5cclxuICAgICAgICAgIHNjb3JlQXJlYS5hcHBlbmRDaGlsZChsYldyYXBwZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoaW52ZXJzZSAmJiAhaGFzQ2xhc3MoZGVmYXVsdERvbU9iaiwgJ2NsLWludmVyc2UnKSkge1xyXG4gICAgICBhZGRDbGFzcyhkZWZhdWx0RG9tT2JqLCAnY2wtaW52ZXJzZScpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMubGF5b3V0U3VtQmVzdE9mID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciB0aW1lTWFuYWdlbWVudCA9IF90aGlzLnRpbWVNYW5hZ2VtZW50KCk7XHJcbiAgICAvLyB2YXIgZGlmZiA9IHRpbWVNYW5hZ2VtZW50LmRpZmY7XHJcbiAgICB2YXIgbGFiZWwgPSB0aW1lTWFuYWdlbWVudC5sYWJlbDtcclxuICAgIHZhciBkYXRlID0gdGltZU1hbmFnZW1lbnQuZGF0ZTtcclxuICAgIHZhciB3cmFwcGVyRG9tT2JqID0gX3RoaXMuc2V0dGluZ3MuaW5mb0NvbnRhaW5lcjtcclxuICAgIHZhciBzdW1CZXN0RG9tT2JqID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1zdW0tYmVzdC13cmFwcGVyJyk7XHJcbiAgICB2YXIgaW52ZXJzZSA9IHRpbWVNYW5hZ2VtZW50LmludmVyc2U7XHJcblxyXG4gICAgaWYgKHN1bUJlc3REb21PYmogPT09IG51bGwpIHtcclxuICAgICAgX3RoaXMucmVtb3ZlVW51c2VkRWxlbWVudHMoKTtcclxuXHJcbiAgICAgIHZhciBsYldyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdmFyIGxiRGF0ZVdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdmFyIGxiRGF0ZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHZhciBsYkRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdmFyIGxiUmVzdWx0c1dyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdmFyIGxiUmVzdWx0c1Njb3JlQXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJSZXN1bHRzU2NvcmVBcmVhSGlnaCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJSZXN1bHRzU2NvcmVBcmVhSGlnaExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHZhciBsYlJlc3VsdHNTY29yZUFyZWFIaWdoU2NvcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdmFyIGxiUmVzdWx0c1Njb3JlQXJlYUxhc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdmFyIGxiUmVzdWx0c1Njb3JlQXJlYUxhc3RMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJSZXN1bHRzU2NvcmVBcmVhTGFzdFNjb3JlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHZhciBsYlJlc3VsdHNSYW5rQXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgbGJSZXN1bHRzUmFua1ZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG5cclxuICAgICAgbGJXcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LXdyYXBwZXInKTtcclxuICAgICAgbGJEYXRlTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtc3VtLWJlc3QtZGF0ZS1sYWJlbCcpO1xyXG4gICAgICBsYkRhdGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtc3VtLWJlc3QtZGF0ZScpO1xyXG4gICAgICBsYkRhdGVXcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWRhdGUtd3JhcHBlcicpO1xyXG4gICAgICBsYlJlc3VsdHNXcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LXJlc3VsdHMtd3JhcHBlcicpO1xyXG5cclxuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWFyZWEnKTtcclxuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhSGlnaC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1zdW0tYmVzdC1oaWdoLWFyZWEnKTtcclxuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhSGlnaExhYmVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWhpZ2gtbGFiZWwnKTtcclxuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhSGlnaFNjb3JlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWhpZ2gtc2NvcmUnKTtcclxuXHJcbiAgICAgIGxiUmVzdWx0c1Njb3JlQXJlYUxhc3Quc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtc3VtLWJlc3QtbGFzdC1hcmVhJyk7XHJcbiAgICAgIGxiUmVzdWx0c1Njb3JlQXJlYUxhc3RMYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1zdW0tYmVzdC1sYXN0LWxhYmVsJyk7XHJcbiAgICAgIGxiUmVzdWx0c1Njb3JlQXJlYUxhc3RTY29yZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1zdW0tYmVzdC1sYXN0LXNjb3JlJyk7XHJcblxyXG4gICAgICBsYlJlc3VsdHNSYW5rQXJlYS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1zdW0tYmVzdC1yYW5rLWFyZWEnKTtcclxuICAgICAgbGJSZXN1bHRzUmFua1ZhbHVlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LXJhbmstdmFsdWUnKTtcclxuXHJcbiAgICAgIGxiRGF0ZUxhYmVsLmlubmVySFRNTCA9IGxhYmVsO1xyXG4gICAgICBsYkRhdGUuaW5uZXJIVE1MID0gZGF0ZTtcclxuXHJcbiAgICAgIGxiUmVzdWx0c1Njb3JlQXJlYUhpZ2hMYWJlbC5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5taW5pTGVhZGVyYm9hcmQuaGlnaFNjb3JlO1xyXG4gICAgICBsYlJlc3VsdHNTY29yZUFyZWFIaWdoU2NvcmUuaW5uZXJIVE1MID0gJy0tJztcclxuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhSGlnaC5hcHBlbmRDaGlsZChsYlJlc3VsdHNTY29yZUFyZWFIaWdoTGFiZWwpO1xyXG4gICAgICBsYlJlc3VsdHNTY29yZUFyZWFIaWdoLmFwcGVuZENoaWxkKGxiUmVzdWx0c1Njb3JlQXJlYUhpZ2hTY29yZSk7XHJcbiAgICAgIGxiUmVzdWx0c1Njb3JlQXJlYS5hcHBlbmRDaGlsZChsYlJlc3VsdHNTY29yZUFyZWFIaWdoKTtcclxuXHJcbiAgICAgIGxiUmVzdWx0c1Njb3JlQXJlYUxhc3RMYWJlbC5pbm5lckhUTUwgPSBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy50cmFuc2xhdGlvbi5taW5pTGVhZGVyYm9hcmQubGFzdFNjb3JlO1xyXG4gICAgICBsYlJlc3VsdHNTY29yZUFyZWFMYXN0U2NvcmUuaW5uZXJIVE1MID0gJy0tJztcclxuICAgICAgbGJSZXN1bHRzU2NvcmVBcmVhTGFzdC5hcHBlbmRDaGlsZChsYlJlc3VsdHNTY29yZUFyZWFMYXN0TGFiZWwpO1xyXG4gICAgICBsYlJlc3VsdHNTY29yZUFyZWFMYXN0LmFwcGVuZENoaWxkKGxiUmVzdWx0c1Njb3JlQXJlYUxhc3RTY29yZSk7XHJcbiAgICAgIGxiUmVzdWx0c1Njb3JlQXJlYS5hcHBlbmRDaGlsZChsYlJlc3VsdHNTY29yZUFyZWFMYXN0KTtcclxuXHJcbiAgICAgIGxiUmVzdWx0c1JhbmtWYWx1ZS5pbm5lckhUTUwgPSAnLS0nO1xyXG4gICAgICBsYlJlc3VsdHNSYW5rQXJlYS5hcHBlbmRDaGlsZChsYlJlc3VsdHNSYW5rVmFsdWUpO1xyXG5cclxuICAgICAgbGJSZXN1bHRzV3JhcHBlci5hcHBlbmRDaGlsZChsYlJlc3VsdHNTY29yZUFyZWEpO1xyXG4gICAgICBsYlJlc3VsdHNXcmFwcGVyLmFwcGVuZENoaWxkKGxiUmVzdWx0c1JhbmtBcmVhKTtcclxuXHJcbiAgICAgIGxiRGF0ZVdyYXBwZXIuYXBwZW5kQ2hpbGQobGJEYXRlTGFiZWwpO1xyXG4gICAgICBsYkRhdGVXcmFwcGVyLmFwcGVuZENoaWxkKGxiRGF0ZSk7XHJcblxyXG4gICAgICBsYldyYXBwZXIuYXBwZW5kQ2hpbGQobGJEYXRlV3JhcHBlcik7XHJcbiAgICAgIGxiV3JhcHBlci5hcHBlbmRDaGlsZChsYlJlc3VsdHNXcmFwcGVyKTtcclxuXHJcbiAgICAgIHN1bUJlc3REb21PYmogPSB3cmFwcGVyRG9tT2JqLmFwcGVuZENoaWxkKGxiV3JhcHBlcik7XHJcblxyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhZGRDbGFzcyh3cmFwcGVyRG9tT2JqLCAnY2wtc2hvdycpO1xyXG4gICAgICB9LCAyMDApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKCFoYXNDbGFzcyh3cmFwcGVyRG9tT2JqLCAnY2wtc2hvdycpKSB7XHJcbiAgICAgICAgYWRkQ2xhc3Mod3JhcHBlckRvbU9iaiwgJ2NsLXNob3cnKTtcclxuICAgICAgfVxyXG4gICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWRhdGUtbGFiZWwnKS5pbm5lckhUTUwgPSBsYWJlbDtcclxuICAgICAgcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1zdW0tYmVzdC1kYXRlJykuaW5uZXJIVE1MID0gZGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICB3aW5kb3cubWFwT2JqZWN0KF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmxlYWRlcmJvYXJkLmxlYWRlcmJvYXJkRGF0YSwgZnVuY3Rpb24gKGxiRW50cnkpIHtcclxuICAgICAgaWYgKGxiRW50cnkubWVtYmVyUmVmSWQgPT09IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm1lbWJlcklkIHx8IGxiRW50cnkubWVtYmVySWQgPT09IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm1lbWJlcklkKSB7XHJcbiAgICAgICAgdmFyIGxhc3RTY29yZSA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtc3VtLWJlc3QtbGFzdC1zY29yZScpLmlubmVySFRNTDtcclxuICAgICAgICB2YXIgaGlnaFNjb3JlID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1zdW0tYmVzdC1oaWdoLXNjb3JlJykuaW5uZXJIVE1MO1xyXG4gICAgICAgIHZhciByYW5rID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1zdW0tYmVzdC1yYW5rLXZhbHVlJyk7XHJcbiAgICAgICAgdmFyIGNoYW5nZSA9IChsYkVudHJ5LmNoYW5nZSA8IDApID8gJ2Rvd24nIDogKGxiRW50cnkuY2hhbmdlID4gMCA/ICd1cCcgOiAnc2FtZScpO1xyXG4gICAgICAgIHZhciByYW5rVmFsdWUgPSBsYkVudHJ5LnJhbms7XHJcblxyXG4gICAgICAgIGlmIChsYXN0U2NvcmUgIT09IFN0cmluZyhsYkVudHJ5LnBvaW50cykgJiYgU3RyaW5nKGxiRW50cnkucG9pbnRzKSAhPT0gaGlnaFNjb3JlKSB7XHJcbiAgICAgICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWxhc3Qtc2NvcmUnKS5pbm5lckhUTUwgPSBoaWdoU2NvcmU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLXN1bS1iZXN0LWhpZ2gtc2NvcmUnKS5pbm5lckhUTUwgPSBsYkVudHJ5LnBvaW50cztcclxuXHJcbiAgICAgICAgcmVtb3ZlQ2xhc3MocmFuaywgJ2NsLW1zLXJhbmstdXAnKTtcclxuICAgICAgICByZW1vdmVDbGFzcyhyYW5rLCAnY2wtbXMtcmFuay1kb3duJyk7XHJcbiAgICAgICAgcmVtb3ZlQ2xhc3MocmFuaywgJ2NsLW1zLXJhbmstc2FtZScpO1xyXG5cclxuICAgICAgICBhZGRDbGFzcyhyYW5rLCAnY2wtbXMtcmFuay0nICsgY2hhbmdlKTtcclxuXHJcbiAgICAgICAgcmFuay5pbm5lckhUTUwgPSByYW5rVmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChpbnZlcnNlICYmICFoYXNDbGFzcyhzdW1CZXN0RG9tT2JqLCAnY2wtaW52ZXJzZScpKSB7XHJcbiAgICAgIGFkZENsYXNzKHN1bUJlc3REb21PYmosICdjbC1pbnZlcnNlJyk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5sYXlvdXRSZXF1aXJlc09wdEluID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBkaWZmID0gbW9tZW50KF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uLnNjaGVkdWxlZFN0YXJ0KS5kaWZmKG1vbWVudCgpKTtcclxuICAgIHZhciBsYWJlbCA9ICdTdGFydGluZyBJbic7XHJcbiAgICB2YXIgd3JhcHBlckRvbU9iaiA9IF90aGlzLnNldHRpbmdzLmluZm9Db250YWluZXI7XHJcbiAgICB2YXIgZGF0ZSA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmZvcm1hdERhdGVUaW1lKG1vbWVudC5kdXJhdGlvbihkaWZmKSk7XHJcblxyXG4gICAgaWYgKGRpZmYgPCAwICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RhdHVzQ29kZSA9PT0gMCkge1xyXG4gICAgICBsYWJlbCA9ICdzdGFydGluZyc7XHJcbiAgICAgIGRhdGUgPSAnJztcclxuICAgIH0gZWxzZSBpZiAoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zdGF0dXNDb2RlID4gMCAmJiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0LnN0YXR1c0NvZGUgPCAzKSB7XHJcbiAgICAgIGRpZmYgPSBtb21lbnQoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zY2hlZHVsZWRFbmQpLmRpZmYobW9tZW50KCkpO1xyXG4gICAgICBsYWJlbCA9ICdzdGFydGVkJztcclxuICAgICAgZGF0ZSA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmZvcm1hdERhdGVUaW1lKG1vbWVudC5kdXJhdGlvbihkaWZmKSk7XHJcbiAgICB9IGVsc2UgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RhdHVzQ29kZSA9PT0gMykge1xyXG4gICAgICBsYWJlbCA9ICdmaW5pc2hpbmcnO1xyXG4gICAgICBkYXRlID0gJyc7XHJcbiAgICB9IGVsc2UgaWYgKF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RhdHVzQ29kZSA+PSA0KSB7XHJcbiAgICAgIGxhYmVsID0gJ2ZpbmlzaGVkJztcclxuICAgICAgZGF0ZSA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLW9wdGluLXdyYXBwZXInKSA9PT0gbnVsbCkge1xyXG4gICAgICBfdGhpcy5yZW1vdmVVbnVzZWRFbGVtZW50cygpO1xyXG5cclxuICAgICAgdmFyIG9wdEluV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgb3B0SW5EYXRlV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgb3B0SW5EYXRlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdmFyIG9wdEluRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgb3B0SW5EYXRlQWN0aW9uV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB2YXIgb3B0SW5EYXRlQWN0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG5cclxuICAgICAgb3B0SW5XcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLW9wdGluLXdyYXBwZXInKTtcclxuICAgICAgb3B0SW5EYXRlTGFiZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtb3B0aW4tZGF0ZS1sYWJlbCcpO1xyXG4gICAgICBvcHRJbkRhdGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbXMtb3B0aW4tZGF0ZScpO1xyXG4gICAgICBvcHRJbkRhdGVXcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLW9wdGluLWRhdGUtd3JhcHBlcicpO1xyXG4gICAgICBvcHRJbkRhdGVBY3Rpb25XcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW1zLW9wdGluLWFjdGlvbi13cmFwcGVyJyk7XHJcbiAgICAgIG9wdEluRGF0ZUFjdGlvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1tcy1vcHRpbi1hY3Rpb24nKTtcclxuXHJcbiAgICAgIG9wdEluRGF0ZUxhYmVsLmlubmVySFRNTCA9IGxhYmVsO1xyXG4gICAgICBvcHRJbkRhdGUuaW5uZXJIVE1MID0gZGF0ZTtcclxuICAgICAgb3B0SW5EYXRlQWN0aW9uLmlubmVySFRNTCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnRyYW5zbGF0aW9uLnRvdXJuYW1lbnRzLmVudGVyO1xyXG5cclxuICAgICAgb3B0SW5EYXRlV3JhcHBlci5hcHBlbmRDaGlsZChvcHRJbkRhdGVMYWJlbCk7XHJcbiAgICAgIG9wdEluRGF0ZVdyYXBwZXIuYXBwZW5kQ2hpbGQob3B0SW5EYXRlKTtcclxuXHJcbiAgICAgIG9wdEluRGF0ZUFjdGlvbldyYXBwZXIuYXBwZW5kQ2hpbGQob3B0SW5EYXRlQWN0aW9uKTtcclxuICAgICAgb3B0SW5XcmFwcGVyLmFwcGVuZENoaWxkKG9wdEluRGF0ZVdyYXBwZXIpO1xyXG4gICAgICBvcHRJbldyYXBwZXIuYXBwZW5kQ2hpbGQob3B0SW5EYXRlQWN0aW9uV3JhcHBlcik7XHJcblxyXG4gICAgICB3cmFwcGVyRG9tT2JqLmFwcGVuZENoaWxkKG9wdEluV3JhcHBlcik7XHJcblxyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhZGRDbGFzcyh3cmFwcGVyRG9tT2JqLCAnY2wtc2hvdycpO1xyXG4gICAgICB9LCAyMDApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKCFoYXNDbGFzcyh3cmFwcGVyRG9tT2JqLCAnY2wtc2hvdycpKSB7XHJcbiAgICAgICAgYWRkQ2xhc3Mod3JhcHBlckRvbU9iaiwgJ2NsLXNob3cnKTtcclxuICAgICAgfVxyXG4gICAgICBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLW9wdGluLWRhdGUtbGFiZWwnKS5pbm5lckhUTUwgPSBsYWJlbDtcclxuICAgICAgcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1vcHRpbi1kYXRlJykuaW5uZXJIVE1MID0gZGF0ZTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLnJlbW92ZVVudXNlZEVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBkZWZhdWx0TGF5b3V0V3JhcHBlckRvbU9iaiA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtZGVmYXVsdC13cmFwcGVyJyk7XHJcbiAgICB2YXIgb3B0SW5XcmFwcGVyRG9tT2JqID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1vcHRpbi13cmFwcGVyJyk7XHJcbiAgICB2YXIgc3VtQmVzdERvbU9iaiA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtc3VtLWJlc3Qtd3JhcHBlcicpO1xyXG4gICAgdmFyIGZpcnN0VG9Eb21PYmogPSBxdWVyeShfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICcuY2wtd2lkZ2V0LW1zLWZpcnN0LXRvLXdyYXBwZXInKTtcclxuXHJcbiAgICByZW1vdmVDbGFzcyhfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICdjbC1tcy1kZWZhdWx0LXN0eWxlJyk7XHJcbiAgICByZW1vdmVDbGFzcyhfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICdjbC1tcy1vcHRpbi1zdHlsZScpO1xyXG4gICAgcmVtb3ZlQ2xhc3MoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnY2wtbXMtc3VtLWJlc3Qtc3R5bGUnKTtcclxuICAgIHJlbW92ZUNsYXNzKF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJ2NsLW1zLWZpcnN0LXRvLXN0eWxlJyk7XHJcblxyXG4gICAgaWYgKGRlZmF1bHRMYXlvdXRXcmFwcGVyRG9tT2JqICE9PSBudWxsKSB7XHJcbiAgICAgIHJlbW92ZShkZWZhdWx0TGF5b3V0V3JhcHBlckRvbU9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdEluV3JhcHBlckRvbU9iaiAhPT0gbnVsbCkge1xyXG4gICAgICByZW1vdmUob3B0SW5XcmFwcGVyRG9tT2JqKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc3VtQmVzdERvbU9iaiAhPT0gbnVsbCkge1xyXG4gICAgICByZW1vdmUoc3VtQmVzdERvbU9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGZpcnN0VG9Eb21PYmogIT09IG51bGwpIHtcclxuICAgICAgcmVtb3ZlKGZpcnN0VG9Eb21PYmopO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMuY2xlYXJBbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy51cGRhdGVJbnRlcnZhbCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuc2V0dGluZ3MudXBkYXRlSW50ZXJ2YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIF90aGlzLnJlbW92ZUluZm9BcmVhKCk7XHJcblxyXG4gICAgX3RoaXMuc2V0dGluZ3MuYWN0aXZlID0gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5yZW1vdmVJbmZvQXJlYSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgd3JhcHBlckRvbU9iaiA9IHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC1zaG93Jyk7XHJcbiAgICB2YXIgbGF5b3V0ID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1kZWZhdWx0LXdyYXBwZXInKTtcclxuXHJcbiAgICBpZiAod3JhcHBlckRvbU9iaiAhPT0gbnVsbCkgcmVtb3ZlQ2xhc3Mod3JhcHBlckRvbU9iaiwgJ2NsLXNob3cnKTtcclxuXHJcbiAgICBpZiAobGF5b3V0ICE9PSBudWxsKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJlbW92ZShsYXlvdXQpO1xyXG4gICAgICB9LCAzMDApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMudXBkYXRlU2NvcmVCb2FyZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLnVwZGF0ZUludGVydmFsKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zZXR0aW5ncy51cGRhdGVJbnRlcnZhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgX3RoaXMuc2V0dGluZ3MudXBkYXRlSW50ZXJ2YWwgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgX3RoaXMubG9hZEluZm9BcmVhKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfdGhpcy51cGRhdGVTY29yZUJvYXJkKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSwgX3RoaXMuc2V0dGluZ3MudXBkYXRlSW50ZXJ2YWxUaW1lKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmxvYWRJbmZvQXJlYSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuYWN0aXZlICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uICE9PSBudWxsICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbXBldGl0aW9uLnN0YXR1c0NvZGUgPCA3KSB7XHJcbiAgICAgIGlmICh0eXBlb2YgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW4gPT09ICdib29sZWFuJyAmJiAhX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29tcGV0aXRpb24ub3B0aW4pIHtcclxuICAgICAgICBfdGhpcy5sYXlvdXRSZXF1aXJlc09wdEluKCk7XHJcbiAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgfSBlbHNlIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0ICE9PSBudWxsICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RyYXRlZ3kudHlwZSA9PT0gJ1N1bUJlc3QnKSB7XHJcbiAgICAgICAgX3RoaXMubGF5b3V0U3VtQmVzdE9mKCk7XHJcbiAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgfSBlbHNlIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0ICE9PSBudWxsICYmIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmNvbXBldGl0aW9uLmFjdGl2ZUNvbnRlc3Quc3RyYXRlZ3kudHlwZSA9PT0gJ0ZpcnN0VG8nKSB7XHJcbiAgICAgICAgX3RoaXMubGF5b3V0Rmlyc3RUb09yRW1wdHkoX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuY29tcGV0aXRpb24uYWN0aXZlQ29udGVzdC5zdHJhdGVneSk7XHJcbiAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgfSBlbHNlIGlmIChfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5jb21wZXRpdGlvbi5hY3RpdmVDb250ZXN0SWQgIT09IG51bGwpIHtcclxuICAgICAgICBfdGhpcy5sYXlvdXREZWZhdWx0T3JFbXB0eSgpO1xyXG4gICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgX3RoaXMubGF5b3V0RGVmYXVsdE9yRW1wdHkoKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgX3RoaXMuY2xlYXJBbGwoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLmV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBkcmFnRWxlbWVudChfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsIHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbXMtaWNvbicpLCBfdGhpcy5zZXR0aW5ncy5vdmVybGF5Q29udGFpbmVyLCBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5iaW5kQ29udGFpbmVyLCBmdW5jdGlvbiAobmV3VG9wLCBuZXdMZWZ0KSB7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnN0b3BBY3Rpdml0eSgpO1xyXG4gICAgICBpZiAobmV3VG9wIDw9IDUpIHtcclxuICAgICAgICBhZGRDbGFzcyhfdGhpcy5zZXR0aW5ncy5jb250YWluZXIsICdjbC12ZXJ0aWNhbC1taW5pJyk7XHJcbiAgICAgIH0gZWxzZSBpZiAobmV3TGVmdCA8PSA1KSB7XHJcbiAgICAgICAgcmVtb3ZlQ2xhc3MoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnY2wtdmVydGljYWwtbWluaScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5kcmFnZ2luZyA9IHRydWU7XHJcbiAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnJlc3RhcnRBY3Rpdml0eSgpO1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfdGhpcy5zZXR0aW5ncy5kcmFnZ2luZyA9IGZhbHNlO1xyXG4gICAgICB9LCAyMDApO1xyXG4gICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5jbGlja2VkTWluaVNjb3JlQm9hcmQoKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuaW5pdExheW91dCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyID09PSBudWxsKSB7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLmJpbmRDb250YWluZXIuYXBwZW5kQ2hpbGQoX3RoaXMubGF5b3V0KCkpO1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5vdmVybGF5Q29udGFpbmVyID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuYmluZENvbnRhaW5lci5hcHBlbmRDaGlsZChfdGhpcy5vdmVybGF5TGF5b3V0KCkpO1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5pbmZvQ29udGFpbmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1tcy1pbmZvcm1hdGlvbi13cmFwcGVyJyk7XHJcblxyXG4gICAgICBfdGhpcy5ldmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgY2FsbGJhY2soKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLmxvYWRTY29yZUJvYXJkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5pbml0TGF5b3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgX3RoaXMubG9hZEluZm9BcmVhKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBfdGhpcy51cGRhdGVTY29yZUJvYXJkKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgX3RoaXMudXBkYXRlU2NvcmVCb2FyZCgpO1xyXG4gICAgICB9LCAxMDAwKTtcclxuICAgIH0pO1xyXG4gIH07XHJcbn07XHJcbiIsImltcG9ydCB7IE1lc3NhZ2luZyB9IGZyb20gJy4vTWVzc2FnaW5nJztcclxuaW1wb3J0IHJlbW92ZUNsYXNzIGZyb20gJy4uL3V0aWxzL3JlbW92ZUNsYXNzJztcclxuaW1wb3J0IHF1ZXJ5IGZyb20gJy4uL3V0aWxzL3F1ZXJ5JztcclxuaW1wb3J0IHN0cmlwSHRtbCBmcm9tICcuLi91dGlscy9zdHJpcEh0bWwnO1xyXG5pbXBvcnQgYWRkQ2xhc3MgZnJvbSAnLi4vdXRpbHMvYWRkQ2xhc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IE5vdGlmaWNhdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gIHRoaXMuc2V0dGluZ3MgPSB7XHJcbiAgICBjb250YWluZXI6IG51bGwsXHJcbiAgICBkZXRhaWxzQ29udGFpbmVyOiBudWxsLFxyXG4gICAgbGJXaWRnZXQ6IG51bGwsXHJcbiAgICBldmVudFN0cmVhbTogW10sXHJcbiAgICBjaGVja1RpbWVvdXQ6IDIwMDAsXHJcbiAgICBvbkRpc3BsYXlDaGVja1RpbWVvdXQ6IDEwMDAwLFxyXG4gICAgY2hlY2tJbnRlcnZhbDogbnVsbCxcclxuICAgIGF1dG9Ob3RpZmljYXRpb25IaWRlSW50ZXJ2YWw6IG51bGwsXHJcbiAgICBhdXRvTm90aWZpY2F0aW9uSGlkZVRpbWU6IDEwMDAwLFxyXG4gICAgZGlzcGxheUluUHJvZ3Jlc3M6IGZhbHNlXHJcbiAgfTtcclxuXHJcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgZm9yICh2YXIgb3B0IGluIG9wdGlvbnMpIHtcclxuICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0KSkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3Nbb3B0XSA9IG9wdGlvbnNbb3B0XTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGhpcy5sYXlvdXRXcmFwcGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBpY29uV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICB2YXIgaW5mb3JtYXRpb25XcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgaW5mb3JtYXRpb25Ub3BXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgaW5mb3JtYXRpb25EZXRhaWxzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgaW5mb3JtYXRpb25EZXRhaWxzTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHZhciBpbmZvcm1hdGlvbkRldGFpbHNEZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdmFyIGluZm9ybWF0aW9uV3JhcHBlckNsb3NlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB2YXIgaW5mb3JtYXRpb25DbG9zZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuXHJcbiAgICB3cmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW5vdGlmLXdyYXBwZXInKTtcclxuICAgIGljb25XcmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW5vdGlmLWljb24td3JhcHBlcicpO1xyXG4gICAgaWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1ub3RpZi1pY29uJyk7XHJcbiAgICBpbmZvcm1hdGlvblRvcFdyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbm90aWYtaW5mb3JtYXRpb24tdG9wLXdyYXBwZXInKTtcclxuICAgIGluZm9ybWF0aW9uV3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1ub3RpZi1pbmZvcm1hdGlvbi13cmFwcGVyJyk7XHJcbiAgICBpbmZvcm1hdGlvbkRldGFpbHNDb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdjbC13aWRnZXQtbm90aWYtaW5mb3JtYXRpb24tZGV0YWlscy13cmFwcGVyJyk7XHJcbiAgICBpbmZvcm1hdGlvbkRldGFpbHNMYWJlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1ub3RpZi1pbmZvcm1hdGlvbi1kZXRhaWxzLWxhYmVsJyk7XHJcbiAgICBpbmZvcm1hdGlvbkRldGFpbHNEZXNjcmlwdGlvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1ub3RpZi1pbmZvcm1hdGlvbi1kZXRhaWxzLWRlc2NyaXB0aW9uJyk7XHJcbiAgICBpbmZvcm1hdGlvbldyYXBwZXJDbG9zZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2NsLXdpZGdldC1ub3RpZi1pbmZvcm1hdGlvbi1jbG9zZS13cmFwcGVyJyk7XHJcbiAgICBpbmZvcm1hdGlvbkNsb3NlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnY2wtd2lkZ2V0LW5vdGlmLWluZm9ybWF0aW9uLWNsb3NlJyk7XHJcblxyXG4gICAgaW5mb3JtYXRpb25DbG9zZS5ocmVmID0gJ2phdmFzY3JpcHQ6dm9pZCgwKTsnO1xyXG4gICAgaW5mb3JtYXRpb25DbG9zZS5pbm5lckhUTUwgPSAneCc7XHJcblxyXG4gICAgaW5mb3JtYXRpb25EZXRhaWxzQ29udGFpbmVyLmFwcGVuZENoaWxkKGluZm9ybWF0aW9uRGV0YWlsc0xhYmVsKTtcclxuICAgIGluZm9ybWF0aW9uRGV0YWlsc0NvbnRhaW5lci5hcHBlbmRDaGlsZChpbmZvcm1hdGlvbkRldGFpbHNEZXNjcmlwdGlvbik7XHJcblxyXG4gICAgaW5mb3JtYXRpb25XcmFwcGVyQ2xvc2UuYXBwZW5kQ2hpbGQoaW5mb3JtYXRpb25DbG9zZSk7XHJcbiAgICBpbmZvcm1hdGlvbldyYXBwZXIuYXBwZW5kQ2hpbGQoaW5mb3JtYXRpb25XcmFwcGVyQ2xvc2UpO1xyXG4gICAgaW5mb3JtYXRpb25XcmFwcGVyLmFwcGVuZENoaWxkKGluZm9ybWF0aW9uRGV0YWlsc0NvbnRhaW5lcik7XHJcbiAgICBpbmZvcm1hdGlvblRvcFdyYXBwZXIuYXBwZW5kQ2hpbGQoaW5mb3JtYXRpb25XcmFwcGVyKTtcclxuICAgIGljb25XcmFwcGVyLmFwcGVuZENoaWxkKGljb24pO1xyXG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChpY29uV3JhcHBlcik7XHJcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGluZm9ybWF0aW9uVG9wV3JhcHBlcik7XHJcblxyXG4gICAgcmV0dXJuIHdyYXBwZXI7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHByb2Nlc3NlZCA9IHt9O1xyXG4gIHRoaXMuc3RhcnRTU0UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLnNldHRpbmdzLnNzZUluc3RhbmNlID0gbmV3IE1lc3NhZ2luZyh7XHJcbiAgICAgIHNzZVVybDogX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy51cmkubWVtYmVyU1NFLnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnNwYWNlTmFtZSkucmVwbGFjZSgnOmlkJywgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQpLFxyXG4gICAgICBoZWFydGJlYXQ6IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudXJpLm1lbWJlclNTRUhlYXJ0YmVhdC5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm1lbWJlcklkKSxcclxuICAgICAgYWpheDoge1xyXG4gICAgICAgIHVybDogbnVsbCxcclxuICAgICAgICBhcGlLZXk6IHtcclxuICAgICAgICAgICdYLUFQSS1LRVknOiBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5hcGlLZXlcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciBkYXRhS2V5ID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgcHJvY2Vzc2VkW2RhdGFLZXldID09PSAndW5kZWZpbmVkJyB8fCAodHlwZW9mIHByb2Nlc3NlZFtkYXRhS2V5XSAhPT0gJ3VuZGVmaW5lZCcgJiYgKHByb2Nlc3NlZFtkYXRhS2V5XSArIDEwMDAwKSA8IGN1cnJlbnRUaW1lKSkge1xyXG4gICAgICAgICAgcHJvY2Vzc2VkW0pTT04uc3RyaW5naWZ5KGRhdGEpXSA9IGN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgX3RoaXMuc2V0dGluZ3MuZXZlbnRTdHJlYW0ucHVzaChkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIG9uU3RhcnR1cEVycm9yOiBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcclxuICAgICAgfSxcclxuICAgICAgZGVidWc6IHRydWVcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuYXV0b05vdGlmaWNhdGlvbkhpZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5hdXRvTm90aWZpY2F0aW9uSGlkZUludGVydmFsKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zZXR0aW5ncy5hdXRvTm90aWZpY2F0aW9uSGlkZUludGVydmFsKTtcclxuICAgIH1cclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5hdXRvTm90aWZpY2F0aW9uSGlkZUludGVydmFsID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIF90aGlzLmhpZGVOb3RpZmljYXRpb24oKTtcclxuICAgIH0sIF90aGlzLnNldHRpbmdzLmF1dG9Ob3RpZmljYXRpb25IaWRlVGltZSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5oaWRlTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoX3RoaXMuc2V0dGluZ3MuYXV0b05vdGlmaWNhdGlvbkhpZGVJbnRlcnZhbCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuc2V0dGluZ3MuYXV0b05vdGlmaWNhdGlvbkhpZGVJbnRlcnZhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgX3RoaXMuc2V0dGluZ3MuZGlzcGxheUluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgIHJlbW92ZUNsYXNzKHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbm90aWYtaW5mb3JtYXRpb24td3JhcHBlcicpLCAnY2wtc2hvdycpO1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIF90aGlzLnNldHRpbmdzLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfSwgMjAwKTtcclxuICB9O1xyXG5cclxuICB0aGlzLnNob3dBY2hpZXZlbWVudE5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIGxhYmVsID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC13aWRnZXQtbm90aWYtaW5mb3JtYXRpb24tZGV0YWlscy1sYWJlbCcpO1xyXG4gICAgdmFyIGRlc2NyaXB0aW9uID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuZGV0YWlsc0NvbnRhaW5lciwgJy5jbC13aWRnZXQtbm90aWYtaW5mb3JtYXRpb24tZGV0YWlscy1kZXNjcmlwdGlvbicpO1xyXG4gICAgdmFyIGRlc2NyaXB0aW9uVGV4dCA9IHN0cmlwSHRtbChkYXRhLmRhdGEuZGVzY3JpcHRpb24pO1xyXG5cclxuICAgIGxhYmVsLmlubmVySFRNTCA9IChkYXRhLmRhdGEubmFtZS5sZW5ndGggPiAyMykgPyBkYXRhLmRhdGEubmFtZS5zdWJzdHIoMCwgMjMpICsgJy4uLicgOiBkYXRhLmRhdGEubmFtZTtcclxuICAgIGRlc2NyaXB0aW9uLmlubmVySFRNTCA9IChkZXNjcmlwdGlvblRleHQubGVuZ3RoID4gNjApID8gZGVzY3JpcHRpb25UZXh0LnN1YnN0cigwLCA2MCkgKyAnLi4uJyA6IGRlc2NyaXB0aW9uVGV4dDtcclxuXHJcbiAgICBfdGhpcy5zZXR0aW5ncy5kZXRhaWxzQ29udGFpbmVyLmRhdGFzZXQuaWQgPSBkYXRhLmRhdGEuaWQ7XHJcblxyXG4gICAgX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGFkZENsYXNzKHF1ZXJ5KF90aGlzLnNldHRpbmdzLmNvbnRhaW5lciwgJy5jbC13aWRnZXQtbm90aWYtaW5mb3JtYXRpb24td3JhcHBlcicpLCAnY2wtc2hvdycpO1xyXG4gICAgfSwgMjAwKTtcclxuXHJcbiAgICBfdGhpcy5hdXRvTm90aWZpY2F0aW9uSGlkZSgpO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuZXZlbnRTdHJlYW1DaGVjayA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgaWYgKF90aGlzLnNldHRpbmdzLmNoZWNrSW50ZXJ2YWwpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnNldHRpbmdzLmNoZWNrSW50ZXJ2YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5ldmVudFN0cmVhbS5sZW5ndGggPiAwICYmICFfdGhpcy5zZXR0aW5ncy5kaXNwbGF5SW5Qcm9ncmVzcykge1xyXG4gICAgICB2YXIgZGF0YSA9IF90aGlzLnNldHRpbmdzLmV2ZW50U3RyZWFtWzBdO1xyXG4gICAgICB2YXIgaW5kZXggPSBfdGhpcy5zZXR0aW5ncy5ldmVudFN0cmVhbS5pbmRleE9mKGRhdGEpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBkYXRhLmFjaGlldmVtZW50SWQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MuZGlzcGxheUluUHJvZ3Jlc3MgPSB0cnVlO1xyXG4gICAgICAgIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LmdldEFjaGlldmVtZW50KGRhdGEuYWNoaWV2ZW1lbnRJZCwgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgIF90aGlzLnNob3dBY2hpZXZlbWVudE5vdGlmaWNhdGlvbihkYXRhKTtcclxuXHJcbiAgICAgICAgICBfdGhpcy5zZXR0aW5ncy5jaGVja0ludGVydmFsID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmV2ZW50U3RyZWFtQ2hlY2soKTtcclxuICAgICAgICAgIH0sIF90aGlzLnNldHRpbmdzLm9uRGlzcGxheUNoZWNrVGltZW91dCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIF90aGlzLnNldHRpbmdzLmV2ZW50U3RyZWFtLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEubm90aWZpY2F0aW9uSWQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MuY2hlY2tJbnRlcnZhbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgX3RoaXMuZXZlbnRTdHJlYW1DaGVjaygpO1xyXG4gICAgICAgIH0sIF90aGlzLnNldHRpbmdzLmNoZWNrVGltZW91dCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MuY2hlY2tJbnRlcnZhbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgX3RoaXMuZXZlbnRTdHJlYW1DaGVjaygpO1xyXG4gICAgICAgIH0sIF90aGlzLnNldHRpbmdzLmNoZWNrVGltZW91dCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgX3RoaXMuc2V0dGluZ3MuZXZlbnRTdHJlYW0uc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MuY2hlY2tJbnRlcnZhbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF90aGlzLmV2ZW50U3RyZWFtQ2hlY2soKTtcclxuICAgICAgfSwgX3RoaXMuc2V0dGluZ3MuY2hlY2tUaW1lb3V0KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGlmIChfdGhpcy5zZXR0aW5ncy5jb250YWluZXIgPT09IG51bGwpIHtcclxuICAgICAgX3RoaXMuc3RhcnRTU0UoKTtcclxuICAgICAgX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MuYmluZENvbnRhaW5lci5hcHBlbmRDaGlsZChfdGhpcy5sYXlvdXRXcmFwcGVyKCkpO1xyXG4gICAgICBfdGhpcy5zZXR0aW5ncy5kZXRhaWxzQ29udGFpbmVyID0gcXVlcnkoX3RoaXMuc2V0dGluZ3MuY29udGFpbmVyLCAnLmNsLXdpZGdldC1ub3RpZi1pbmZvcm1hdGlvbi1kZXRhaWxzLXdyYXBwZXInKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIHRlcm1pbmF0ZSBTU0VcclxuICAgICAgX3RoaXMuc2V0dGluZ3Muc3NlSW5zdGFuY2UuY2xvc2VDaGFuZWwoKTtcclxuXHJcbiAgICAgIC8vIHVwZGF0ZSB0aGUgbWVtYmVyXHJcbiAgICAgIF90aGlzLnNldHRpbmdzLnNzZUluc3RhbmNlLnNldHRpbmdzLnNzZVVybCA9IF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnVyaS5nYXRld2F5RG9tYWluICsgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudXJpLm1lbWJlclNTRS5yZXBsYWNlKCc6c3BhY2UnLCBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy5zcGFjZU5hbWUpLnJlcGxhY2UoJzppZCcsIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLm1lbWJlcklkKTtcclxuICAgICAgX3RoaXMuc2V0dGluZ3Muc3NlSW5zdGFuY2Uuc2V0dGluZ3MuaGVhcnRiZWF0ID0gX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MudXJpLmdhdGV3YXlEb21haW4gKyBfdGhpcy5zZXR0aW5ncy5sYldpZGdldC5zZXR0aW5ncy51cmkubWVtYmVyU1NFSGVhcnRiZWF0LnJlcGxhY2UoJzpzcGFjZScsIF90aGlzLnNldHRpbmdzLmxiV2lkZ2V0LnNldHRpbmdzLnNwYWNlTmFtZSkucmVwbGFjZSgnOmlkJywgX3RoaXMuc2V0dGluZ3MubGJXaWRnZXQuc2V0dGluZ3MubWVtYmVySWQpO1xyXG5cclxuICAgICAgLy8gcmUtaW5zdGFudGlhdGUgU1NFXHJcbiAgICAgIF90aGlzLnNldHRpbmdzLnNzZUluc3RhbmNlLm9wZW5DaGFuZWwoKTtcclxuICAgIH1cclxuXHJcbiAgICBfdGhpcy5ldmVudFN0cmVhbUNoZWNrKCk7XHJcbiAgfTtcclxufTtcclxuIiwiLy8gZGVmYXVsdCBkb21haW5cclxuXHJcbi8vIHZhciBhcGlVUkwgPSBcImh0dHA6Ly8xOTIuMTY4LjEuODo5OTk4XCI7XHJcblxyXG5jb25zdCBhcGlVUkwgPSAnaHR0cHM6Ly9nYXRld2F5LmNvbXBldGl0aW9ubGFicy5jb20nO1xyXG5cclxuY29uc3QgY0xhYnMgPSB7XHJcbiAgYXBpOiB7XHJcbiAgICB1cmw6IGFwaVVSTFxyXG4gIH0sXHJcbiAgY2xhc3NTZWxlY3RvcjogL15cXC4oW1xcdy1dKykkLywgLy8gY2xhc3Mgc3RyaW5nIGV4cHJlc3Npb24gY2hlY2tcclxuICBpZFNlbGVjdG9yOiAvXiNbXFx3XFxkXFwtXFxfXFwmXFwhXFxAXFwqXSskLywgLy8gSUQgc3RyaW5nIGV4cHJlc3Npb24gY2hlY2tcclxuICB0YWdTZWxlY3RvcjogL15bXFx3LV0rJC8gLy8gVEFHIHN0cmluZyBleHByZXNzaW9uIGNoZWNrXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjTGFicztcclxuIiwiaW1wb3J0IHsgYWRkQ2xhc3MsIGhhc0NsYXNzLCBpc2lPU0RldmljZSwgaXNNb2JpbGVUYWJsZXQsIHJlbW92ZUNsYXNzIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5cclxuLy8gdmFyIHNjcm9sbE9iajIgPSBudWxsO1xyXG5sZXQgbW92ZW1lbnRJbnRlcnZhbDtcclxuXHJcbmNvbnN0IGRyYWdFbGVtZW50ID0gZnVuY3Rpb24gKGVsbW50LCBkcmFnZ2FibGVFbCwgb3ZlcmxheUNvbnRhaW5lciwgY29udGFpbmVyLCBkcmFnZ2luZywgZmluaXNoRHJhZ2dpbmcsIG1vYmlsZVRvdWNoKSB7XHJcbiAgdmFyIHBvczEgPSAwO1xyXG4gIHZhciBwb3MyID0gMDtcclxuICB2YXIgcG9zMyA9IDA7XHJcbiAgdmFyIHBvczQgPSAwO1xyXG4gIHZhciBpc01vYmlsZSA9IGlzTW9iaWxlVGFibGV0KCk7XHJcbiAgdmFyIGlzaU9TID0gaXNpT1NEZXZpY2UoKTtcclxuICB2YXIgaXNQYXJlbnRXaW5kb3cgPSBlbG1udC5wYXJlbnROb2RlLm5vZGVOYW1lID09PSAnQk9EWSc7XHJcbiAgdmFyIG1heExlZnQgPSAoaXNQYXJlbnRXaW5kb3cgPyB3aW5kb3cuaW5uZXJXaWR0aCA6IGNvbnRhaW5lci5vZmZzZXRXaWR0aCk7XHJcbiAgdmFyIG1heFRvcCA9IChpc1BhcmVudFdpbmRvdyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lci5vZmZzZXRIZWlnaHQpO1xyXG4gIHZhciB0b3VjaFN0YXJ0OyB2YXIgbW92aW5nID0gbnVsbDtcclxuICAvLyBzY3JvbGxPYmoyID0gcXVlcnkoXCIuc2Nyb2xsLXJlc1wiKTtcclxuXHJcbiAgaWYgKG1vdmVtZW50SW50ZXJ2YWwpIHtcclxuICAgIGNsZWFyVGltZW91dChtb3ZlbWVudEludGVydmFsKTtcclxuICB9XHJcblxyXG4gIHZhciBvbldpbmRvd0NoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBpc1ZlcnRpY2FsID0gaGFzQ2xhc3MoZWxtbnQsICdjbC12ZXJ0aWNhbC1taW5pJyk7XHJcbiAgICB2YXIgbWF4TGVmdCA9IChpc1BhcmVudFdpbmRvdyA/IHdpbmRvdy5pbm5lcldpZHRoIDogY29udGFpbmVyLm9mZnNldFdpZHRoKTtcclxuICAgIHZhciBtYXhUb3AgPSAoaXNQYXJlbnRXaW5kb3cgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiBjb250YWluZXIub2Zmc2V0SGVpZ2h0KTtcclxuICAgIHZhciBvZmZzZXRNYXhMZWZ0ID0gbWF4TGVmdCAtIHBhcnNlSW50KGVsbW50Lm9mZnNldFdpZHRoICsgKGlzVmVydGljYWwgPyBkcmFnZ2FibGVFbC5vZmZzZXRXaWR0aCAvIDcgOiBkcmFnZ2FibGVFbC5vZmZzZXRXaWR0aCAvIDEuNikpO1xyXG4gICAgdmFyIG9mZnNldE1heFRvcCA9IG1heFRvcCAtIHBhcnNlSW50KGVsbW50Lm9mZnNldEhlaWdodCArIChpc1ZlcnRpY2FsID8gZHJhZ2dhYmxlRWwub2Zmc2V0SGVpZ2h0IC8gMS4yIDogZHJhZ2dhYmxlRWwub2Zmc2V0SGVpZ2h0IC8gNCkpO1xyXG4gICAgdmFyIGVsVG9wID0gcGFyc2VJbnQoZWxtbnQuc3R5bGUudG9wKTtcclxuICAgIHZhciBlbExlZnQgPSBwYXJzZUludChlbG1udC5zdHlsZS5sZWZ0KTtcclxuXHJcbiAgICBpZiAoZWxUb3AgPiBvZmZzZXRNYXhUb3AgJiYgb2Zmc2V0TWF4VG9wID4gNSkge1xyXG4gICAgICBlbG1udC5zdHlsZS50b3AgPSBvZmZzZXRNYXhUb3AgKyAncHgnO1xyXG4gICAgfVxyXG4gICAgaWYgKGVsTGVmdCA+IG9mZnNldE1heExlZnQgJiYgb2Zmc2V0TWF4TGVmdCA+IDUpIHtcclxuICAgICAgZWxtbnQuc3R5bGUubGVmdCA9IG9mZnNldE1heExlZnQgKyAncHgnO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGlmIChpc01vYmlsZSkge1xyXG4gICAgLyogbGlzdGVuIHRvIHRoZSB0b3VjaE1vdmUgZXZlbnQsXHJcbiAgICAgIGV2ZXJ5IHRpbWUgaXQgZmlyZXMsIGdyYWIgdGhlIGxvY2F0aW9uXHJcbiAgICAgIG9mIHRvdWNoIGFuZCBhc3NpZ24gaXQgdG8gYm94ICovXHJcblxyXG4gICAgdmFyIGp1c3RBVG91Y2ggPSBmYWxzZTtcclxuICAgIGRyYWdnYWJsZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBqdXN0QVRvdWNoID0gdHJ1ZTtcclxuXHJcbiAgICAgIGlmICh0b3VjaFN0YXJ0KSBjbGVhclRpbWVvdXQodG91Y2hTdGFydCk7XHJcblxyXG4gICAgICBtYXhMZWZ0ID0gKGlzUGFyZW50V2luZG93ID8gd2luZG93LmlubmVyV2lkdGggOiBjb250YWluZXIub2Zmc2V0V2lkdGgpO1xyXG4gICAgICBtYXhUb3AgPSAoaXNQYXJlbnRXaW5kb3cgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiBjb250YWluZXIub2Zmc2V0SGVpZ2h0KTtcclxuXHJcbiAgICAgIHRvdWNoU3RhcnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBqdXN0QVRvdWNoID0gZmFsc2U7XHJcbiAgICAgIH0sIDEwMCk7XHJcbiAgICB9LCB7IHBhc3NpdmU6IGlzaU9TIH0pO1xyXG5cclxuICAgIGRyYWdnYWJsZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgcG9zMyA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWDtcclxuICAgICAgcG9zNCA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWTtcclxuICAgICAgLy8gbW92aW5nID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgICBlbGVtZW50RHJhZyhlKTtcclxuICAgIH0sIHsgcGFzc2l2ZTogaXNpT1MgfSk7XHJcblxyXG4gICAgZHJhZ2dhYmxlRWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAvLyBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIC8vIGN1cnJlbnQgYm94IHBvc2l0aW9uLlxyXG4gICAgICBjbG9zZURyYWdFbGVtZW50KGUpO1xyXG4gICAgICBtb3ZpbmcgPSBudWxsO1xyXG5cclxuICAgICAgaWYgKGp1c3RBVG91Y2ggJiYgdHlwZW9mIG1vYmlsZVRvdWNoID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgbW9iaWxlVG91Y2goKTtcclxuICAgICAgfVxyXG4gICAgfSwgeyBwYXNzaXZlOiBpc2lPUyB9KTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBvbldpbmRvd0NoYW5nZSgpO1xyXG4gICAgfSwgdHJ1ZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGlmIHByZXNlbnQsIHRoZSBoZWFkZXIgaXMgd2hlcmUgeW91IG1vdmUgdGhlIERJViBmcm9tOlxyXG4gICAgZHJhZ2dhYmxlRWwub25tb3VzZWRvd24gPSBkcmFnTW91c2VEb3duO1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBvbldpbmRvd0NoYW5nZSgpO1xyXG4gICAgfSwgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkcmFnTW91c2VEb3duIChlKSB7XHJcbiAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgbWF4TGVmdCA9IChpc1BhcmVudFdpbmRvdyA/IHdpbmRvdy5pbm5lcldpZHRoIDogY29udGFpbmVyLm9mZnNldFdpZHRoKTtcclxuICAgIG1heFRvcCA9IChpc1BhcmVudFdpbmRvdyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lci5vZmZzZXRIZWlnaHQpO1xyXG5cclxuICAgIG92ZXJsYXlDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblxyXG4gICAgLy8gZ2V0IHRoZSBtb3VzZSBjdXJzb3IgcG9zaXRpb24gYXQgc3RhcnR1cDpcclxuICAgIHBvczMgPSBlLmNsaWVudFg7XHJcbiAgICBwb3M0ID0gZS5jbGllbnRZO1xyXG4gICAgZG9jdW1lbnQub25tb3VzZXVwID0gY2xvc2VEcmFnRWxlbWVudDtcclxuICAgIC8vIGNhbGwgYSBmdW5jdGlvbiB3aGVuZXZlciB0aGUgY3Vyc29yIG1vdmVzOlxyXG4gICAgZG9jdW1lbnQub25tb3VzZW1vdmUgPSBlbGVtZW50RHJhZztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZHMgYWRkaXRpb25hbCBvZmZzZXQgdG8gbWF4IGxlZnQgYW5kIHRvcCBiYXNlZCBvbiBvcmllbnRhdGlvbiBhbmQgY29udGFpbmVyIHdpZHRoICh3aWxsIGJlIGFmZmVjdGVkIGJ5IENTUyBzdHlsaW5nIHNvIG5lZWRzIHRvIGJlIGFkanVzdGVkIGFjY29yZGluZ2x5KVxyXG4gICAqIC0gZWxtbnQgPT4gaXMgdGhlIG1haW4gY29udGFpbmVyIHRoYXQgaGFzIHRoZSBwb3NpdGlvbmluZyBhcHBsaWVkIHRvXHJcbiAgICogLSBkcmFnZ2FibGVFbCA9PiBrZXkgZWxlbWVudCB0aGF0IGlzIG1lYW4gZm9yIGRyYWdnaW5nXHJcbiAgICovXHJcbiAgdmFyIGNoZWNrTWF4TWluUmVzdHJhaW50cyA9IGZ1bmN0aW9uIChuZXdUb3AsIG5ld0xlZnQsIG9mZnNldE1heExlZnQsIG9mZnNldE1heFRvcCkge1xyXG4gICAgdmFyIC8vIG1pbkxlZnQgPSAoaXNWZXJ0aWNhbCA/IGVsbW50Lm9mZnNldFdpZHRoLzQgOiAwICksIC8vIGF0dGVtcHQgdG8gcmVzdHJpY3QgdGhlIGNvbnRhaW5lciB0byBnbyBvdXQgb2YgYm91bmRzIGJ5IGEgZmV3IHBpeGVscywgbmVlZHMgc29tZSB3b3JrXHJcbiAgICAgIG1pbkxlZnQgPSAwO1xyXG4gICAgdmFyIHRvcCA9IChuZXdUb3AgPD0gMCA/IDAgOiBuZXdUb3ApO1xyXG4gICAgdmFyIGxlZnQgPSAobmV3TGVmdCA8PSBtaW5MZWZ0ID8gbWluTGVmdCA6IG5ld0xlZnQpO1xyXG5cclxuICAgIGlmIChsZWZ0ID49IG9mZnNldE1heExlZnQpIHtcclxuICAgICAgbGVmdCA9IG9mZnNldE1heExlZnQ7XHJcbiAgICB9XHJcbiAgICBpZiAodG9wID49IG9mZnNldE1heFRvcCkge1xyXG4gICAgICB0b3AgPSBvZmZzZXRNYXhUb3A7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdG9wOiB0b3AsXHJcbiAgICAgIGxlZnQ6IGxlZnRcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gZWxlbWVudERyYWcgKGUpIHtcclxuICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIC8vIGNhbGN1bGF0ZSB0aGUgbmV3IGN1cnNvciBwb3NpdGlvbjpcclxuICAgIHZhciBwb3NYID0gKGlzTW9iaWxlKSA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUuY2xpZW50WDtcclxuICAgIHZhciBwb3NZID0gKGlzTW9iaWxlKSA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUuY2xpZW50WTtcclxuICAgIHZhciBpc1ZlcnRpY2FsID0gaGFzQ2xhc3MoZWxtbnQsICdjbC12ZXJ0aWNhbC1taW5pJyk7XHJcbiAgICB2YXIgb2Zmc2V0TWF4TGVmdCA9IG1heExlZnQgLSBwYXJzZUludChlbG1udC5vZmZzZXRXaWR0aCArIChpc1ZlcnRpY2FsID8gZHJhZ2dhYmxlRWwub2Zmc2V0V2lkdGggLyA3IDogZHJhZ2dhYmxlRWwub2Zmc2V0V2lkdGggLyAxLjYpKTtcclxuICAgIHZhciBvZmZzZXRNYXhUb3AgPSBtYXhUb3AgLSBwYXJzZUludChlbG1udC5vZmZzZXRIZWlnaHQgKyAoaXNWZXJ0aWNhbCA/IGRyYWdnYWJsZUVsLm9mZnNldEhlaWdodCAvIDEuMiA6IGRyYWdnYWJsZUVsLm9mZnNldEhlaWdodCAvIDQpKTtcclxuXHJcbiAgICBwb3MxID0gcG9zMyAtIHBvc1g7XHJcbiAgICBwb3MyID0gcG9zNCAtIHBvc1k7XHJcbiAgICBwb3MzID0gcGFyc2VJbnQocG9zWCk7XHJcbiAgICBwb3M0ID0gcGFyc2VJbnQocG9zWSk7XHJcbiAgICBtb3ZpbmcgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHJcbiAgICBjaGVja01vdmVtZW50KCk7XHJcblxyXG4gICAgaWYgKCFoYXNDbGFzcyhlbG1udCwgJ2NsLWJlaW5nLW1vdmVkJykpIGFkZENsYXNzKGVsbW50LCAnY2wtYmVpbmctbW92ZWQnKTtcclxuXHJcbiAgICB2YXIgbmV3VG9wID0gKGlzTW9iaWxlKSA/IChwb3NZIC0gcGFyc2VJbnQoZHJhZ2dhYmxlRWwub2Zmc2V0SGVpZ2h0IC8gMikpIDogKGVsbW50Lm9mZnNldFRvcCAtIHBvczIpO1xyXG4gICAgdmFyIG5ld0xlZnQgPSAoaXNNb2JpbGUpID8gKHBvc1ggLSBwYXJzZUludChkcmFnZ2FibGVFbC5vZmZzZXRXaWR0aCAvIDIpKSA6IChlbG1udC5vZmZzZXRMZWZ0IC0gcG9zMSk7XHJcbiAgICB2YXIgbGVmdFRvcENoZWNrID0gY2hlY2tNYXhNaW5SZXN0cmFpbnRzKG5ld1RvcCwgbmV3TGVmdCwgb2Zmc2V0TWF4TGVmdCwgb2Zmc2V0TWF4VG9wKTsgLy8gc2V0IHRoZSBlbGVtZW50J3MgbmV3IHBvc2l0aW9uOlxyXG5cclxuICAgIC8vIHNjcm9sbE9iajIuaW5uZXJIVE1MID0gbGVmdFRvcENoZWNrLnRvcCArIFwiLVwiICsgbGVmdFRvcENoZWNrLmxlZnQgKyBcIiA6IFwiKyBuZXdUb3AgKyBcIi1cIiArIG5ld0xlZnQgKyBcIiA6IFwiICsgKHBvc1ggPCAwIHx8IHBvc1kgPCAwIHx8IHBvc1ggPiBtYXhMZWZ0IHx8IHBvc1kgPiBtYXhUb3ApICsgXCItXCIgKyAobmV3VG9wID4gb2Zmc2V0TWF4VG9wIHx8IG5ld0xlZnQgPiBvZmZzZXRNYXhMZWZ0KTtcclxuICAgIC8vIHNjcm9sbE9iajIuaW5uZXJIVE1MID0gbGVmdFRvcENoZWNrLnRvcCArIFwiLVwiICsgbGVmdFRvcENoZWNrLmxlZnQgKyBcIiA6IFwiKyBuZXdUb3AgK1wiLVwiKyBuZXdMZWZ0ICsgXCIgOiBcIiArIChwb3NYIDwgMCB8fCBwb3NZIDwgMCB8fCBwb3NYID4gbWF4TGVmdCB8fCBwb3NZID4gbWF4VG9wKSArIFwiLVwiICsgKG5ld1RvcCA+IG9mZnNldE1heFRvcCB8fCBuZXdMZWZ0ID4gb2Zmc2V0TWF4TGVmdCk7XHJcblxyXG4gICAgaWYgKHBvc1ggPCAwIHx8IHBvc1kgPCAwIHx8IHBvc1ggPiBtYXhMZWZ0IHx8IHBvc1kgPiBtYXhUb3ApIHtcclxuICAgICAgY2xvc2VEcmFnRWxlbWVudChlKTtcclxuICAgIH0gZWxzZSBpZiAobmV3VG9wID4gb2Zmc2V0TWF4VG9wIHx8IG5ld0xlZnQgPiBvZmZzZXRNYXhMZWZ0KSB7XHJcbiAgICAgIGNsb3NlRHJhZ0VsZW1lbnQoZSk7XHJcbiAgICB9IGVsc2UgaWYgKGxlZnRUb3BDaGVjay50b3AgPiBvZmZzZXRNYXhUb3AgfHwgbGVmdFRvcENoZWNrLmxlZnQgPiBvZmZzZXRNYXhMZWZ0KSB7XHJcbiAgICAgIGNsb3NlRHJhZ0VsZW1lbnQoZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBlbG1udC5zdHlsZS50b3AgPSBsZWZ0VG9wQ2hlY2sudG9wICsgJ3B4JztcclxuICAgICAgZWxtbnQuc3R5bGUubGVmdCA9IGxlZnRUb3BDaGVjay5sZWZ0ICsgJ3B4JztcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGRyYWdnaW5nID09PSAnZnVuY3Rpb24nKSBkcmFnZ2luZyhuZXdUb3AsIG5ld0xlZnQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2xvc2VEcmFnRWxlbWVudCAoZSkge1xyXG4gICAgb3ZlcmxheUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgaWYgKGlzTW9iaWxlKSB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIHN0b3AgbW92aW5nIHdoZW4gbW91c2UgYnV0dG9uIGlzIHJlbGVhc2VkOlxyXG4gICAgICBkb2N1bWVudC5vbm1vdXNldXAgPSBudWxsO1xyXG4gICAgICBkb2N1bWVudC5vbm1vdXNlbW92ZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBtb3ZpbmcgPSBudWxsO1xyXG5cclxuICAgIHJlbW92ZUNsYXNzKGVsbW50LCAnY2wtYmVpbmctbW92ZWQnKTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGZpbmlzaERyYWdnaW5nID09PSAnZnVuY3Rpb24nKSBmaW5pc2hEcmFnZ2luZygpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2hlY2tNb3ZlbWVudCAoKSB7XHJcbiAgICBpZiAobW92ZW1lbnRJbnRlcnZhbCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQobW92ZW1lbnRJbnRlcnZhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgbW92ZW1lbnRJbnRlcnZhbCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAobW92aW5nICE9PSBudWxsICYmIG1vdmluZyArIDMwMDAgPCBuZXcgRGF0ZSgpLmdldFRpbWUoKSAmJiAhaXNNb2JpbGUpIHtcclxuICAgICAgICBjbG9zZURyYWdFbGVtZW50KCk7XHJcbiAgICAgIH0gZWxzZSBpZiAobW92aW5nICE9PSBudWxsKSB7XHJcbiAgICAgICAgY2hlY2tNb3ZlbWVudCgpO1xyXG4gICAgICB9XHJcbiAgICB9LCAzMDAwKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkcmFnRWxlbWVudDtcclxuIiwiLy8gZ2xvYmFsIHRpbWVvdXQgaGFuZGxpbmdcclxuXHJcbnRyeSB7XHJcbiAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0R2xvYmFsICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICB3aW5kb3cuX3NldFRpbWVvdXRHbG9iYWxSZXBvc2l0b3J5ID0gW107XHJcbiAgICB3aW5kb3cuc2V0VGltZW91dEdsb2JhbCA9IGZ1bmN0aW9uIChpZCwgZnVuYywgdGltZXIpIHtcclxuICAgICAgdmFyIGV4aXN0cyA9IGZhbHNlO1xyXG4gICAgICB3aW5kb3cubWFwT2JqZWN0KHdpbmRvdy5fc2V0VGltZW91dEdsb2JhbFJlcG9zaXRvcnksIGZ1bmN0aW9uIChpbnN0YW5jZSwga2V5LCBjb3VudCkge1xyXG4gICAgICAgIGlmIChpZCA9PT0gaW5zdGFuY2UuaWQpIHtcclxuICAgICAgICAgIGV4aXN0cyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmICghZXhpc3RzKSB7XHJcbiAgICAgICAgdmFyIGludGVydmFsID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB3aW5kb3cubWFwT2JqZWN0KHdpbmRvdy5fc2V0VGltZW91dEdsb2JhbFJlcG9zaXRvcnksIGZ1bmN0aW9uIChpbnN0YW5jZSwga2V5LCBjb3VudCkge1xyXG4gICAgICAgICAgICBpZiAoaWQgPT09IGluc3RhbmNlLmlkKSB7XHJcbiAgICAgICAgICAgICAgd2luZG93Ll9zZXRUaW1lb3V0R2xvYmFsUmVwb3NpdG9yeS5zcGxpY2Uoa2V5LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGZ1bmMoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aW1lcik7XHJcblxyXG4gICAgICAgIHdpbmRvdy5fc2V0VGltZW91dEdsb2JhbFJlcG9zaXRvcnkucHVzaCh7XHJcbiAgICAgICAgICBpZDogaWQsXHJcbiAgICAgICAgICBmdW5jOiBmdW5jLFxyXG4gICAgICAgICAgdGltZXI6IHRpbWVyLFxyXG4gICAgICAgICAgaW50ZXJ2YWw6IGludGVydmFsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBpbnRlcnZhbDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXRHbG9iYWwgLSBJRCBbJyArIGlkICsgJ10gYWxyZWFkeSBpbiB1c2UnKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgY2xvc2VUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAod2luZG93Ll9zZXRUaW1lb3V0R2xvYmFsUmVwb3NpdG9yeS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgd2luZG93Lm1hcE9iamVjdCh3aW5kb3cuX3NldFRpbWVvdXRHbG9iYWxSZXBvc2l0b3J5LCBmdW5jdGlvbiAoaW5zdGFuY2UsIGtleSwgY291bnQpIHtcclxuICAgICAgICAgIGlmIChpbnN0YW5jZS5pbnRlcnZhbCkge1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKGluc3RhbmNlLmludGVydmFsKTtcclxuICAgICAgICAgICAgaW5zdGFuY2UuaW50ZXJ2YWwgPSBudWxsO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciByZUVuYWJsZVRpbWVvdXRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAod2luZG93Ll9zZXRUaW1lb3V0R2xvYmFsUmVwb3NpdG9yeS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdmFyIHRtcCA9IFtdO1xyXG4gICAgICAgIHdpbmRvdy5tYXBPYmplY3Qod2luZG93Ll9zZXRUaW1lb3V0R2xvYmFsUmVwb3NpdG9yeSwgZnVuY3Rpb24gKGluc3RhbmNlLCBrZXksIGNvdW50KSB7XHJcbiAgICAgICAgICB0bXAucHVzaChpbnN0YW5jZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHdpbmRvdy5fc2V0VGltZW91dEdsb2JhbFJlcG9zaXRvcnkgPSBbXTtcclxuICAgICAgICB3aW5kb3cubWFwT2JqZWN0KHRtcCwgZnVuY3Rpb24gKGluc3RhbmNlLCBrZXksIGNvdW50KSB7XHJcbiAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dEdsb2JhbChpbnN0YW5jZS5pZCwgaW5zdGFuY2UuZnVuYywgaW5zdGFuY2UudGltZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciB3aW5kb3dBY3Rpdml0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaGlkZGVuID0gJ2hpZGRlbic7XHJcblxyXG4gICAgICAgIC8vIFN0YW5kYXJkczpcclxuICAgICAgICBpZiAoaGlkZGVuIGluIGRvY3VtZW50KSB7XHJcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25jaGFuZ2UpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoKGhpZGRlbiA9ICdtb3pIaWRkZW4nKSBpbiBkb2N1bWVudCkge1xyXG4gICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW96dmlzaWJpbGl0eWNoYW5nZScsIG9uY2hhbmdlKTtcclxuICAgICAgICB9IGVsc2UgaWYgKChoaWRkZW4gPSAnd2Via2l0SGlkZGVuJykgaW4gZG9jdW1lbnQpIHtcclxuICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdHZpc2liaWxpdHljaGFuZ2UnLCBvbmNoYW5nZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICgoaGlkZGVuID0gJ21zSGlkZGVuJykgaW4gZG9jdW1lbnQpIHtcclxuICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21zdmlzaWJpbGl0eWNoYW5nZScsIG9uY2hhbmdlKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCdvbmZvY3VzaW4nIGluIGRvY3VtZW50KSB7IC8vIElFIDkgYW5kIGxvd2VyOlxyXG4gICAgICAgICAgZG9jdW1lbnQub25mb2N1c2luID0gZG9jdW1lbnQub25mb2N1c291dCA9IG9uY2hhbmdlO1xyXG4gICAgICAgIH0gZWxzZSB7IC8vIEFsbCBvdGhlcnM6XHJcbiAgICAgICAgICB3aW5kb3cub25wYWdlc2hvdyA9IHdpbmRvdy5vbnBhZ2VoaWRlID0gd2luZG93Lm9uZm9jdXMgPSB3aW5kb3cub25ibHVyID0gb25jaGFuZ2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBvbmNoYW5nZSAoZXZ0KSB7XHJcbiAgICAgICAgICB2YXIgc3RhdHVzID0gJyc7XHJcbiAgICAgICAgICB2YXIgdiA9ICd2aXNpYmxlJztcclxuICAgICAgICAgIHZhciBoID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICB2YXIgZXZ0TWFwID0ge1xyXG4gICAgICAgICAgICBmb2N1czogdiwgZm9jdXNpbjogdiwgcGFnZXNob3c6IHYsIGJsdXI6IGgsIGZvY3Vzb3V0OiBoLCBwYWdlaGlkZTogaFxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBldnQgPSBldnQgfHwgd2luZG93LmV2ZW50O1xyXG4gICAgICAgICAgaWYgKGV2dC50eXBlIGluIGV2dE1hcCkge1xyXG4gICAgICAgICAgICBzdGF0dXMgPSBldnRNYXBbZXZ0LnR5cGVdO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RhdHVzID0gdGhpc1toaWRkZW5dID8gJ2hpZGRlbicgOiAndmlzaWJsZSc7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ3Zpc2libGUnKSB7XHJcbiAgICAgICAgICAgIHJlRW5hYmxlVGltZW91dHMoKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSAnaGlkZGVuJykge1xyXG4gICAgICAgICAgICBjbG9zZVRpbWVvdXQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNldCB0aGUgaW5pdGlhbCBzdGF0ZSAoYnV0IG9ubHkgaWYgYnJvd3NlciBzdXBwb3J0cyB0aGUgUGFnZSBWaXNpYmlsaXR5IEFQSSlcclxuICAgICAgICBpZiAoZG9jdW1lbnRbaGlkZGVuXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBvbmNoYW5nZSh7IHR5cGU6IGRvY3VtZW50W2hpZGRlbl0gPyAnYmx1cicgOiAnZm9jdXMnIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSkoKTtcclxuICAgIH07XHJcblxyXG4gICAgd2luZG93QWN0aXZpdHkoKTtcclxuICB9XHJcbn0gY2F0Y2ggKGVycikge1xyXG4gIGNvbnNvbGUubG9nKGVycik7XHJcbn1cclxuIiwiLy9cclxuaWYgKCF3aW5kb3cuY29uc29sZSkge1xyXG4gIHdpbmRvdy5jb25zb2xlID0gZnVuY3Rpb24gKCkge1xyXG4gIH07XHJcblxyXG4gIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICB3aW5kb3cuY29uc29sZS5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKGVycikge1xyXG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoZXJyKTtcclxuICAgIH07XHJcbiAgICB3aW5kb3cuY29uc29sZS5wcm90b3R5cGUud2FybiA9IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGVycik7XHJcbiAgICB9O1xyXG4gICAgd2luZG93LmNvbnNvbGUucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xyXG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoZXJyKTtcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG4vL1xyXG50cnkge1xyXG4gIEV2ZW50LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCB8fCAoRXZlbnQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5yZXR1cm5WYWx1ZSA9ICExO1xyXG4gIH0pO1xyXG59IGNhdGNoIChlcnIpIHtcclxuICBjb25zb2xlLmxvZyhlcnIpO1xyXG59XHJcblxyXG4vL1xyXG50cnkge1xyXG4gIEV2ZW50LnByb3RvdHlwZS5zdG9wUHJvcGFnYXRpb24gfHwgKEV2ZW50LnByb3RvdHlwZS5zdG9wUHJvcGFnYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmNhbmNlbEJ1YmJsZSA9ICEwO1xyXG4gIH0pO1xyXG59IGNhdGNoIChlcnIpIHtcclxuICBjb25zb2xlLmxvZyhlcnIpO1xyXG59XHJcblxyXG4vL1xyXG50cnkge1xyXG4gIHR5cGVvZiBtYXBPYmplY3QgIT09ICdmdW5jdGlvbicgJiYgKHdpbmRvdy5tYXBPYmplY3QgPSBmdW5jdGlvbiAoZSwgdCkge1xyXG4gICAgaWYgKGUgIT09IG51bGwpIHtcclxuICAgICAgdmFyIG4gPSAwO1xyXG4gICAgICBmb3IgKHZhciByIGluIGUpIGUuaGFzT3duUHJvcGVydHkocikgJiYgKHQoZVtyXSwgciwgbiksIG4rKyk7XHJcbiAgICAgIHJldHVybiAhMDtcclxuICAgIH1cclxuICAgIHJldHVybiBjb25zb2xlLmxvZygncmV0dXJuZWQgb2JqZWN0IGlzIG51bGwnLCB0eXBlb2YgZSksICExO1xyXG4gIH0pO1xyXG59IGNhdGNoIChlcnIpIHtcclxuICBjb25zb2xlLmxvZyhlcnIpO1xyXG59XHJcblxyXG4vL1xyXG50cnkge1xyXG4gIGlmICghRWxlbWVudC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgdmFyIGV2ZW50TGlzdGVuZXJzID0gW107IHZhciBhZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGUsIHQpIHtcclxuICAgICAgdmFyIG47IHZhciByID0gdGhpcztcclxuICAgICAgaWYgKG4gPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUudGFyZ2V0ID0gZS5zcmNFbGVtZW50LCBlLmN1cnJlbnRUYXJnZXQgPSByLCBlLnBhZ2VYID0gZXZlbnQuY2xpZW50WCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCwgZS5wYWdlWSA9IGV2ZW50LmNsaWVudFkgKyBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCwgdC5oYW5kbGVFdmVudCA/IHQuaGFuZGxlRXZlbnQoZSkgOiB0LmNhbGwociwgZSk7XHJcbiAgICAgIH0sIGUgPT09ICdET01Db250ZW50TG9hZGVkJykge1xyXG4gICAgICAgIHZhciBvID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScgJiYgbihlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCgnb25yZWFkeXN0YXRlY2hhbmdlJywgbyksIGV2ZW50TGlzdGVuZXJzLnB1c2goe1xyXG4gICAgICAgICAgb2JqZWN0OiB0aGlzLFxyXG4gICAgICAgICAgdHlwZTogZSxcclxuICAgICAgICAgIGxpc3RlbmVyOiB0LFxyXG4gICAgICAgICAgd3JhcHBlcjogb1xyXG4gICAgICAgIH0pLCBkb2N1bWVudC5yZWFkeVN0YXRlID09ICdjb21wbGV0ZScpIHtcclxuICAgICAgICAgIHZhciBpID0gbmV3IEV2ZW50KCk7XHJcbiAgICAgICAgICBpLnNyY0VsZW1lbnQgPSB3aW5kb3csIG8oaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgdGhpcy5hdHRhY2hFdmVudCgnb24nICsgZSwgbiksIGV2ZW50TGlzdGVuZXJzLnB1c2goeyBvYmplY3Q6IHRoaXMsIHR5cGU6IGUsIGxpc3RlbmVyOiB0LCB3cmFwcGVyOiBuIH0pO1xyXG4gICAgfTsgdmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZSwgdCkge1xyXG4gICAgICBmb3IgKHZhciBuID0gMDsgbiA8IGV2ZW50TGlzdGVuZXJzLmxlbmd0aDspIHtcclxuICAgICAgICB2YXIgciA9IGV2ZW50TGlzdGVuZXJzW25dO1xyXG4gICAgICAgIGlmIChyLm9iamVjdCA9PSB0aGlzICYmIHIudHlwZSA9PSBlICYmIHIubGlzdGVuZXIgPT0gdCkge1xyXG4gICAgICAgICAgZSA9PSAnRE9NQ29udGVudExvYWRlZCcgPyB0aGlzLmRldGFjaEV2ZW50KCdvbnJlYWR5c3RhdGVjaGFuZ2UnLCByLndyYXBwZXIpIDogdGhpcy5kZXRhY2hFdmVudCgnb24nICsgZSwgci53cmFwcGVyKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICArK247XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBFbGVtZW50LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lciwgRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IHJlbW92ZUV2ZW50TGlzdGVuZXIsIEhUTUxEb2N1bWVudCAmJiAoSFRNTERvY3VtZW50LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lciwgSFRNTERvY3VtZW50LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gcmVtb3ZlRXZlbnRMaXN0ZW5lciksIFdpbmRvdyAmJiAoV2luZG93LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lciwgV2luZG93LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcik7XHJcbiAgfVxyXG4gIEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZSB8fCAoRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xyXG4gIH0sIE5vZGVMaXN0LnByb3RvdHlwZS5yZW1vdmUgPSBIVE1MQ29sbGVjdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZm9yICh2YXIgZSA9IDAsIHQgPSB0aGlzLmxlbmd0aDsgdCA+IGU7IGUrKykgdGhpc1tlXSAmJiB0aGlzW2VdLnBhcmVudEVsZW1lbnQgJiYgdGhpc1tlXS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXNbZV0pO1xyXG4gIH0pO1xyXG59IGNhdGNoIChlcnIpIHtcclxuICBjb25zb2xlLmxvZyhlcnIpO1xyXG59XHJcbnR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcgJiYgKHR5cGVvZiB3aW5kb3cuSlNPTiAhPT0gJ29iamVjdCcgJiYgKHdpbmRvdy5KU09OID0ge30pLCAoZnVuY3Rpb24gKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgZnVuY3Rpb24gZiAoZSkge1xyXG4gICAgcmV0dXJuIGUgPCAxMCA/ICcwJyArIGUgOiBlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcXVvdGUgKGUpIHtcclxuICAgIHJldHVybiBlc2NhcGFibGUubGFzdEluZGV4ID0gMCwgZXNjYXBhYmxlLnRlc3QoZSkgPyAnXCInICsgZS5yZXBsYWNlKGVzY2FwYWJsZSwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgdmFyIHQgPSBtZXRhW2VdO1xyXG4gICAgICByZXR1cm4gdHlwZW9mIHQgPT09ICdzdHJpbmcnID8gdCA6ICdcXFxcdScgKyAoJzAwMDAnICsgZS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO1xyXG4gICAgfSkgKyAnXCInIDogJ1wiJyArIGUgKyAnXCInO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3RyIChlLCB0KSB7XHJcbiAgICB2YXIgbjsgdmFyIHI7IHZhciBvOyB2YXIgaTsgdmFyIGE7IHZhciBwID0gZ2FwOyB2YXIgdSA9IHRbZV07XHJcbiAgICBzd2l0Y2ggKHUgJiYgdHlwZW9mIHUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB1LnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyAmJiAodSA9IHUudG9KU09OKGUpKSwgdHlwZW9mIHJlcCA9PT0gJ2Z1bmN0aW9uJyAmJiAodSA9IHJlcC5jYWxsKHQsIGUsIHUpKSwgdHlwZW9mIHUpIHtcclxuICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgICByZXR1cm4gcXVvdGUodSk7XHJcbiAgICAgIGNhc2UgJ251bWJlcic6XHJcbiAgICAgICAgcmV0dXJuIGlzRmluaXRlKHUpID8gU3RyaW5nKHUpIDogJ251bGwnO1xyXG4gICAgICBjYXNlICdib29sZWFuJzpcclxuICAgICAgY2FzZSAnbnVsbCc6XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZyh1KTtcclxuICAgICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgICBpZiAoIXUpIHJldHVybiAnbnVsbCc7XHJcbiAgICAgICAgaWYgKGdhcCArPSBpbmRlbnQsIGEgPSBbXSwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseSh1KSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xyXG4gICAgICAgICAgZm9yIChpID0gdS5sZW5ndGgsIG4gPSAwOyBpID4gbjsgbiArPSAxKSBhW25dID0gc3RyKG4sIHUpIHx8ICdudWxsJztcclxuICAgICAgICAgIHJldHVybiBvID0gYS5sZW5ndGggPT09IDAgPyAnW10nIDogZ2FwID8gJ1tcXG4nICsgZ2FwICsgYS5qb2luKCcsXFxuJyArIGdhcCkgKyAnXFxuJyArIHAgKyAnXScgOiAnWycgKyBhLmpvaW4oJywnKSArICddJywgZ2FwID0gcCwgbztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlcCAmJiB0eXBlb2YgcmVwID09PSAnb2JqZWN0JykgZm9yIChpID0gcmVwLmxlbmd0aCwgbiA9IDA7IGkgPiBuOyBuICs9IDEpIHR5cGVvZiByZXBbbl0gPT09ICdzdHJpbmcnICYmIChyID0gcmVwW25dLCBvID0gc3RyKHIsIHUpLCBvICYmIGEucHVzaChxdW90ZShyKSArIChnYXAgPyAnOiAnIDogJzonKSArIG8pKTsgZWxzZSBmb3IgKHIgaW4gdSkgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHUsIHIpICYmIChvID0gc3RyKHIsIHUpLCBvICYmIGEucHVzaChxdW90ZShyKSArIChnYXAgPyAnOiAnIDogJzonKSArIG8pKTtcclxuICAgICAgICByZXR1cm4gbyA9IGEubGVuZ3RoID09PSAwID8gJ3t9JyA6IGdhcCA/ICd7XFxuJyArIGdhcCArIGEuam9pbignLFxcbicgKyBnYXApICsgJ1xcbicgKyBwICsgJ30nIDogJ3snICsgYS5qb2luKCcsJykgKyAnfScsIGdhcCA9IHAsIG87XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0eXBlb2YgRGF0ZS5wcm90b3R5cGUudG9KU09OICE9PSAnZnVuY3Rpb24nICYmIChEYXRlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gaXNGaW5pdGUodGhpcy52YWx1ZU9mKCkpID8gdGhpcy5nZXRVVENGdWxsWWVhcigpICsgJy0nICsgZih0aGlzLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGYodGhpcy5nZXRVVENEYXRlKCkpICsgJ1QnICsgZih0aGlzLmdldFVUQ0hvdXJzKCkpICsgJzonICsgZih0aGlzLmdldFVUQ01pbnV0ZXMoKSkgKyAnOicgKyBmKHRoaXMuZ2V0VVRDU2Vjb25kcygpKSArICdaJyA6IG51bGw7XHJcbiAgfSwgU3RyaW5nLnByb3RvdHlwZS50b0pTT04gPSBOdW1iZXIucHJvdG90eXBlLnRvSlNPTiA9IEJvb2xlYW4ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKTtcclxuICB9KTtcclxuICB2YXIgY3gsIGVzY2FwYWJsZSwgZ2FwLCBpbmRlbnQsIG1ldGEsIHJlcDtcclxuICB0eXBlb2Ygd2luZG93LkpTT04uc3RyaW5naWZ5ICE9PSAnZnVuY3Rpb24nICYmIChlc2NhcGFibGUgPSAvW1xcXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHg5ZlxcdTAwYWRcXHUwNjAwLVxcdTA2MDRcXHUwNzBmXFx1MTdiNFxcdTE3YjVcXHUyMDBjLVxcdTIwMGZcXHUyMDI4LVxcdTIwMmZcXHUyMDYwLVxcdTIwNmZcXHVmZWZmXFx1ZmZmMC1cXHVmZmZmXS9nLCBtZXRhID0ge1xyXG4gICAgJ1xcYic6ICdcXFxcYicsXHJcbiAgICAnXHQnOiAnXFxcXHQnLFxyXG4gICAgJ1xcbic6ICdcXFxcbicsXHJcbiAgICAnXFxmJzogJ1xcXFxmJyxcclxuICAgICdcXHInOiAnXFxcXHInLFxyXG4gICAgJ1wiJzogJ1xcXFxcIicsXHJcbiAgICAnXFxcXCc6ICdcXFxcXFxcXCdcclxuICB9LCB3aW5kb3cuSlNPTi5zdHJpbmdpZnkgPSBmdW5jdGlvbiAoZSwgdCwgbikge1xyXG4gICAgdmFyIHI7XHJcbiAgICBpZiAoZ2FwID0gJycsIGluZGVudCA9ICcnLCB0eXBlb2YgbiA9PT0gJ251bWJlcicpIGZvciAociA9IDA7IG4gPiByOyByICs9IDEpIGluZGVudCArPSAnICc7IGVsc2UgdHlwZW9mIG4gPT09ICdzdHJpbmcnICYmIChpbmRlbnQgPSBuKTtcclxuICAgIGlmIChyZXAgPSB0LCB0ICYmIHR5cGVvZiB0ICE9PSAnZnVuY3Rpb24nICYmICh0eXBlb2YgdCAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHQubGVuZ3RoICE9PSAnbnVtYmVyJykpIHRocm93IG5ldyBFcnJvcignSlNPTi5zdHJpbmdpZnknKTtcclxuICAgIHJldHVybiBzdHIoJycsIHsgJyc6IGUgfSk7XHJcbiAgfSksIHR5cGVvZiB3aW5kb3cuSlNPTi5wYXJzZSAhPT0gJ2Z1bmN0aW9uJyAmJiAoY3ggPSAvW1xcdTAwMDBcXHUwMGFkXFx1MDYwMC1cXHUwNjA0XFx1MDcwZlxcdTE3YjRcXHUxN2I1XFx1MjAwYy1cXHUyMDBmXFx1MjAyOC1cXHUyMDJmXFx1MjA2MC1cXHUyMDZmXFx1ZmVmZlxcdWZmZjAtXFx1ZmZmZl0vZywgd2luZG93LkpTT04ucGFyc2UgPSBmdW5jdGlvbiAodGV4dCwgcmV2aXZlcikge1xyXG4gICAgZnVuY3Rpb24gd2FsayAoZSwgdCkge1xyXG4gICAgICB2YXIgbjsgdmFyIHI7IHZhciBvID0gZVt0XTtcclxuICAgICAgaWYgKG8gJiYgdHlwZW9mIG8gPT09ICdvYmplY3QnKSBmb3IgKG4gaW4gbykgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIG4pICYmIChyID0gd2FsayhvLCBuKSwgdm9pZCAwICE9PSByID8gb1tuXSA9IHIgOiBkZWxldGUgb1tuXSk7XHJcbiAgICAgIHJldHVybiByZXZpdmVyLmNhbGwoZSwgdCwgbyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGo7XHJcbiAgICBpZiAodGV4dCA9IFN0cmluZyh0ZXh0KSwgY3gubGFzdEluZGV4ID0gMCwgY3gudGVzdCh0ZXh0KSAmJiAodGV4dCA9IHRleHQucmVwbGFjZShjeCwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgcmV0dXJuICdcXFxcdScgKyAoJzAwMDAnICsgZS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO1xyXG4gICAgfSkpLCAvXltcXF0sOnt9XFxzXSokLy50ZXN0KHRleHQucmVwbGFjZSgvXFxcXCg/OltcIlxcXFxcXC9iZm5ydF18dVswLTlhLWZBLUZdezR9KS9nLCAnQCcpLnJlcGxhY2UoL1wiW15cIlxcXFxcXG5cXHJdKlwifHRydWV8ZmFsc2V8bnVsbHwtP1xcZCsoPzpcXC5cXGQqKT8oPzpbZUVdWytcXC1dP1xcZCspPy9nLCAnXScpLnJlcGxhY2UoLyg/Ol58OnwsKSg/OlxccypcXFspKy9nLCAnJykpKSByZXR1cm4gaiA9IGV2YWwoJygnICsgdGV4dCArICcpJyksIHR5cGVvZiByZXZpdmVyID09PSAnZnVuY3Rpb24nID8gd2Fsayh7ICcnOiBqIH0sICcnKSA6IGo7XHJcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0pTT04ucGFyc2UnKTtcclxuICB9KTtcclxufSgpKSk7XHJcblxyXG4vL1xyXG52YXIgX3NsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xyXG5cclxudHJ5IHtcclxuICBfc2xpY2UuY2FsbChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xyXG59IGNhdGNoIChlKSB7XHJcbiAgQXJyYXkucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgIGlmIChlID0gdHlwZW9mIGUgIT09ICd1bmRlZmluZWQnID8gZSA6IHRoaXMubGVuZ3RoLCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcykgPT09ICdbb2JqZWN0IEFycmF5XScpIHJldHVybiBfc2xpY2UuY2FsbCh0aGlzLCB0LCBlKTtcclxuICAgIHZhciByOyB2YXIgaTsgdmFyIGMgPSBbXTsgdmFyIGwgPSB0aGlzLmxlbmd0aDsgdmFyIG8gPSB0IHx8IDA7XHJcbiAgICBvID0gbyA+PSAwID8gbyA6IGwgKyBvO1xyXG4gICAgdmFyIGEgPSBlIHx8IGw7XHJcbiAgICBpZiAoZSA8IDAgJiYgKGEgPSBsICsgZSksIGkgPSBhIC0gbywgaSA+IDApIGlmIChjID0gbmV3IEFycmF5KGkpLCB0aGlzLmNoYXJBdCkgZm9yIChyID0gMDsgaSA+IHI7IHIrKykgY1tyXSA9IHRoaXMuY2hhckF0KG8gKyByKTsgZWxzZSBmb3IgKHIgPSAwOyBpID4gcjsgcisrKSBjW3JdID0gdGhpc1tvICsgcl07XHJcbiAgICByZXR1cm4gYztcclxuICB9O1xyXG59XHJcblxyXG4vLyBbRXZlbnRTb3VyY2VdIFBvbHlmaWxsIGZpeDogaHR0cHM6Ly9naXRodWIuY29tL3JlbXkvcG9seWZpbGxzL2Jsb2IvbWFzdGVyL0V2ZW50U291cmNlLmpzXHJcblxyXG4oZnVuY3Rpb24gKGdsb2JhbCkge1xyXG4gIGlmICgnRXZlbnRTb3VyY2UnIGluIGdsb2JhbCkgcmV0dXJuO1xyXG4gIHZhciByZVRyaW0gPSAvXihcXHN8XFx1MDBBMCkrfChcXHN8XFx1MDBBMCkrJC9nO1xyXG4gIHZhciBFdmVudFNvdXJjZSA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgIHZhciBldmVudHNvdXJjZSA9IHRoaXM7IHZhciBpbnRlcnZhbCA9IDUwMDsgLyogcG9sbGluZyBpbnRlcnZhbCAgKi8gdmFyIGxhc3RFdmVudElkID0gbnVsbDsgdmFyIGNhY2hlID0gJyc7XHJcbiAgICBpZiAoIXVybCB8fCB0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xyXG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ05vdCBlbm91Z2ggYXJndW1lbnRzJyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLlVSTCA9IHVybDtcclxuICAgIHRoaXMucmVhZHlTdGF0ZSA9IHRoaXMuQ09OTkVDVElORztcclxuICAgIHRoaXMuX3BvbGxUaW1lciA9IG51bGw7XHJcbiAgICB0aGlzLl94aHIgPSBudWxsO1xyXG5cclxuICAgIGZ1bmN0aW9uIHBvbGxBZ2FpbiAoaW50ZXJ2YWwpIHtcclxuICAgICAgZXZlbnRzb3VyY2UuX3BvbGxUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHBvbGwuY2FsbChldmVudHNvdXJjZSk7XHJcbiAgICAgIH0sIGludGVydmFsKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwb2xsICgpIHtcclxuICAgICAgdHJ5IHsgLyogZm9yY2UgaGlkaW5nIG9mIHRoZSBlcnJvciBtZXNzYWdlLi4uIGluc2FuZT8gKi9cclxuICAgICAgICBpZiAoZXZlbnRzb3VyY2UucmVhZHlTdGF0ZSA9PT0gZXZlbnRzb3VyY2UuQ0xPU0VEKSByZXR1cm47IC8qIE5PVEU6IElFNyBhbmQgdXB3YXJkcyBzdXBwb3J0ICovXHJcbiAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgIHhoci5vcGVuKCdHRVQnLCBldmVudHNvdXJjZS5VUkwsIHRydWUpO1xyXG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAndGV4dC9ldmVudC1zdHJlYW0nKTtcclxuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ2FjaGUtQ29udHJvbCcsICduby1jYWNoZScpOyAvKiB3ZSBtdXN0IG1ha2UgdXNlIG9mIHRoaXMgb24gdGhlIHNlcnZlciBzaWRlIGlmIHdlJ3JlIHdvcmtpbmcgd2l0aCBBbmRyb2lkIC0gYmVjYXVzZSB0aGV5IGRvbid0IHRyaWdnZXIgcmVhZHljaGFuZ2UgdW50aWwgdGhlIHNlcnZlciBjb25uZWN0aW9uIGlzIGNsb3NlZCAqL1xyXG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLVJlcXVlc3RlZC1XaXRoJywgJ1hNTEh0dHBSZXF1ZXN0Jyk7XHJcbiAgICAgICAgaWYgKGxhc3RFdmVudElkICE9IG51bGwpIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdMYXN0LUV2ZW50LUlEJywgbGFzdEV2ZW50SWQpO1xyXG4gICAgICAgIGNhY2hlID0gJyc7XHJcbiAgICAgICAgeGhyLnRpbWVvdXQgPSA1MDAwMDtcclxuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PSAzIHx8ICh0aGlzLnJlYWR5U3RhdGUgPT0gNCAmJiB0aGlzLnN0YXR1cyA9PSAyMDApKSB7IC8qIG9uIHN1Y2Nlc3MgKi9cclxuICAgICAgICAgICAgaWYgKGV2ZW50c291cmNlLnJlYWR5U3RhdGUgPT0gZXZlbnRzb3VyY2UuQ09OTkVDVElORykge1xyXG4gICAgICAgICAgICAgIGV2ZW50c291cmNlLnJlYWR5U3RhdGUgPSBldmVudHNvdXJjZS5PUEVOO1xyXG4gICAgICAgICAgICAgIGV2ZW50c291cmNlLmRpc3BhdGNoRXZlbnQoJ29wZW4nLCB7IHR5cGU6ICdvcGVuJyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcmVzcG9uc2VUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgcmVzcG9uc2VUZXh0ID0gdGhpcy5yZXNwb25zZVRleHQgfHwgJyc7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgfSAvKiBwcm9jZXNzIHRoaXMucmVzcG9uc2VUZXh0ICovXHJcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IHJlc3BvbnNlVGV4dC5zdWJzdHIoY2FjaGUubGVuZ3RoKS5zcGxpdCgnXFxuJyk7IHZhciBldmVudFR5cGUgPSAnbWVzc2FnZSc7IHZhciBkYXRhID0gW107IHZhciBpID0gMDtcclxuICAgICAgICAgICAgdmFyIGxpbmUgPSAnJztcclxuICAgICAgICAgICAgY2FjaGUgPSByZXNwb25zZVRleHQ7IC8qIFRPRE8gaGFuZGxlICdldmVudCcgKGZvciBidWZmZXIgbmFtZSksIHJldHJ5ICovXHJcbiAgICAgICAgICAgIGZvciAoOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICBsaW5lID0gcGFydHNbaV0ucmVwbGFjZShyZVRyaW0sICcnKTtcclxuICAgICAgICAgICAgICBpZiAobGluZS5pbmRleE9mKCdldmVudCcpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudFR5cGUgPSBsaW5lLnJlcGxhY2UoL2V2ZW50Oj9cXHMqLywgJycpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobGluZS5pbmRleE9mKCdyZXRyeScpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmV0cnkgPSBwYXJzZUludChsaW5lLnJlcGxhY2UoL3JldHJ5Oj9cXHMqLywgJycpKTtcclxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4ocmV0cnkpKSB7XHJcbiAgICAgICAgICAgICAgICAgIGludGVydmFsID0gcmV0cnk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5lLmluZGV4T2YoJ2RhdGEnKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKGxpbmUucmVwbGFjZSgvZGF0YTo/XFxzKi8sICcnKSk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5lLmluZGV4T2YoJ2lkOicpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0RXZlbnRJZCA9IGxpbmUucmVwbGFjZSgvaWQ6P1xccyovLCAnJyk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5lLmluZGV4T2YoJ2lkJykgPT09IDApIHsgLyogdGhpcyByZXNldHMgdGhlIGlkICovXHJcbiAgICAgICAgICAgICAgICBsYXN0RXZlbnRJZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5lID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhciBldmVudCA9IG5ldyBNZXNzYWdlRXZlbnQoZGF0YS5qb2luKCdcXG4nKSwgZXZlbnRzb3VyY2UudXJsLCBsYXN0RXZlbnRJZCk7XHJcbiAgICAgICAgICAgICAgICAgIGV2ZW50c291cmNlLmRpc3BhdGNoRXZlbnQoZXZlbnRUeXBlLCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgIGRhdGEgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gJ21lc3NhZ2UnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSA0KSBwb2xsQWdhaW4oaW50ZXJ2YWwpOyAvKiBkb24ndCBuZWVkIHRvIHBvbGwgYWdhaW4sIGJlY2F1c2Ugd2UncmUgbG9uZy1sb2FkaW5nICovXHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c291cmNlLnJlYWR5U3RhdGUgIT09IGV2ZW50c291cmNlLkNMT1NFRCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSA0KSB7IC8qIGFuZCBzb21lIG90aGVyIHN0YXR1cyBkaXNwYXRjaCBlcnJvciAqL1xyXG4gICAgICAgICAgICAgIGV2ZW50c291cmNlLnJlYWR5U3RhdGUgPSBldmVudHNvdXJjZS5DT05ORUNUSU5HO1xyXG4gICAgICAgICAgICAgIGV2ZW50c291cmNlLmRpc3BhdGNoRXZlbnQoJ2Vycm9yJywgeyB0eXBlOiAnZXJyb3InIH0pO1xyXG4gICAgICAgICAgICAgIHBvbGxBZ2FpbihpbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yZWFkeVN0YXRlID09PSAwKSB7IC8qIGxpa2VseSBhYm9ydGVkICovXHJcbiAgICAgICAgICAgICAgcG9sbEFnYWluKGludGVydmFsKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgeGhyLnNlbmQoKTtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGlmICh0cnVlIHx8IHhoci5yZWFkeVN0YXRlID09PSAzKSB4aHIuYWJvcnQoKTtcclxuICAgICAgICB9LCB4aHIudGltZW91dCk7XHJcbiAgICAgICAgZXZlbnRzb3VyY2UuX3hociA9IHhocjtcclxuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBpbiBhbiBhdHRlbXB0IHRvIHNpbGVuY2UgdGhlIGVycm9ycyAqL1xyXG4gICAgICAgIGV2ZW50c291cmNlLmRpc3BhdGNoRXZlbnQoJ2Vycm9yJywgeyB0eXBlOiAnZXJyb3InLCBkYXRhOiBlLm1lc3NhZ2UgfSk7IC8qID8/PyAqL1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHBvbGwoKTsgLyogaW5pdCBub3cgKi9cclxuICB9O1xyXG4gIEV2ZW50U291cmNlLnByb3RvdHlwZSA9IHtcclxuICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7IC8qIGNsb3NlcyB0aGUgY29ubmVjdGlvbiAtIGRpc2FibGluZyB0aGUgcG9sbGluZyAqL1xyXG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSB0aGlzLkNMT1NFRDtcclxuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9wb2xsVGltZXIpO1xyXG4gICAgICB0aGlzLl94aHIuYWJvcnQoKTtcclxuICAgIH0sXHJcbiAgICBDT05ORUNUSU5HOiAwLFxyXG4gICAgT1BFTjogMSxcclxuICAgIENMT1NFRDogMixcclxuICAgIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uICh0eXBlLCBldmVudCkge1xyXG4gICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzWydfJyArIHR5cGUgKyAnSGFuZGxlcnMnXTtcclxuICAgICAgaWYgKGhhbmRsZXJzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgaGFuZGxlcnNbaV0uY2FsbCh0aGlzLCBldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzWydvbicgKyB0eXBlXSkge1xyXG4gICAgICAgIHRoaXNbJ29uJyArIHR5cGVdLmNhbGwodGhpcywgZXZlbnQpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKHR5cGUsIGhhbmRsZXIpIHtcclxuICAgICAgaWYgKCF0aGlzWydfJyArIHR5cGUgKyAnSGFuZGxlcnMnXSkge1xyXG4gICAgICAgIHRoaXNbJ18nICsgdHlwZSArICdIYW5kbGVycyddID0gW107XHJcbiAgICAgIH1cclxuICAgICAgdGhpc1snXycgKyB0eXBlICsgJ0hhbmRsZXJzJ10ucHVzaChoYW5kbGVyKTtcclxuICAgIH0sXHJcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAodHlwZSwgaGFuZGxlcikge1xyXG4gICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzWydfJyArIHR5cGUgKyAnSGFuZGxlcnMnXTtcclxuICAgICAgaWYgKCFoYW5kbGVycykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKHZhciBpID0gaGFuZGxlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICBpZiAoaGFuZGxlcnNbaV0gPT09IGhhbmRsZXIpIHtcclxuICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9uZXJyb3I6IG51bGwsXHJcbiAgICBvbm1lc3NhZ2U6IG51bGwsXHJcbiAgICBvbm9wZW46IG51bGwsXHJcbiAgICByZWFkeVN0YXRlOiAwLFxyXG4gICAgVVJMOiAnJ1xyXG4gIH07XHJcbiAgdmFyIE1lc3NhZ2VFdmVudCA9IGZ1bmN0aW9uIChkYXRhLCBvcmlnaW4sIGxhc3RFdmVudElkKSB7XHJcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgdGhpcy5vcmlnaW4gPSBvcmlnaW47XHJcbiAgICB0aGlzLmxhc3RFdmVudElkID0gbGFzdEV2ZW50SWQgfHwgJyc7XHJcbiAgfTtcclxuICBNZXNzYWdlRXZlbnQucHJvdG90eXBlID0geyBkYXRhOiBudWxsLCB0eXBlOiAnbWVzc2FnZScsIGxhc3RFdmVudElkOiAnJywgb3JpZ2luOiAnJyB9O1xyXG4gIGlmICgnbW9kdWxlJyBpbiBnbG9iYWwpIG1vZHVsZS5leHBvcnRzID0gRXZlbnRTb3VyY2U7XHJcbiAgZ2xvYmFsLkV2ZW50U291cmNlID0gRXZlbnRTb3VyY2U7XHJcbn0pKHdpbmRvdyk7XHJcbiIsIi8qKlxyXG4gKiBBcHAvQXBwZW5kIG5ldyBjbGFzcyBzdHJpbmcgdG8gdGhlIHByb3ZpZGVkIERPTSBlbGVtZW50XHJcbiAqIEBwYXJhbSBlbGVtZW50XHJcbiAqIEBwYXJhbSBjbGFzc05hbWVcclxuICogQHJldHVybnMge3tjbGFzc0xpc3R9fCp9XHJcbiAqL1xyXG5jb25zdCBhZGRDbGFzcyA9IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUpIHtcclxuICB0cnkge1xyXG4gICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XHJcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZWxlbWVudC5jbGFzc05hbWUgKz0gJyAnICsgY2xhc3NOYW1lO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGNvbnNvbGUudHJhY2UoKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBlbGVtZW50O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWRkQ2xhc3M7XHJcbiIsImNvbnN0IGFwcGVuZE5leHQgPSBmdW5jdGlvbiAoZWwsIG5ld05vZGUpIHtcclxuICBpZiAoZWwubmV4dFNpYmxpbmcpIHtcclxuICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIGVsLm5leHRTaWJsaW5nKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZWwucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChuZXdOb2RlKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhcHBlbmROZXh0O1xyXG4iLCJpbXBvcnQgY0xhYnMgZnJvbSAnLi4vbW9kdWxlcy9jTGFicyc7XHJcbmltcG9ydCBoYXNDbGFzcyBmcm9tICcuL2hhc0NsYXNzJztcclxuXHJcbi8qKlxyXG4gKiBJdGVyYXRlIHVwIHRoZSB0cmVlIG9mIERPTSBlbGVtZW50cyB0byBmaW5kIHRoZSBjbG9zZXMgbWF0Y2hcclxuICogQHBhcmFtIGVsZW1lbnRcclxuICogQHBhcmFtIHNlbGVjdG9yXHJcbiAqIEByZXR1cm5zIHtudWxsIHwgUGFyZW50Tm9kZX1cclxuICovXHJcbmNvbnN0IGNsb3Nlc3QgPSBmdW5jdGlvbiAoZWxlbWVudCwgc2VsZWN0b3IpIHtcclxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnb2JqZWN0Jykge1xyXG4gICAgdmFyIHNlbGVjdG9yQ2xhc3NTdHJpbmcgPSBzZWxlY3Rvci5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyk7XHJcbiAgICB2YXIgc2VsZWN0b3JJZFN0cmluZyA9IHNlbGVjdG9yLmlkO1xyXG5cclxuICAgIGlmIChzZWxlY3RvcklkU3RyaW5nICE9PSBudWxsICYmIHNlbGVjdG9ySWRTdHJpbmcubGVuZ3RoID4gMCkge1xyXG4gICAgICBzZWxlY3RvciA9ICcjJyArIHNlbGVjdG9ySWRTdHJpbmc7XHJcbiAgICB9IGVsc2UgaWYgKHNlbGVjdG9yQ2xhc3NTdHJpbmcgIT09IG51bGwgJiYgc2VsZWN0b3JDbGFzc1N0cmluZy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHNlbGVjdG9yID0gJy4nICsgc2VsZWN0b3JDbGFzc1N0cmluZy5zcGxpdCgnICcpWzBdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5ub2RlTmFtZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNsb3Nlc3QgKGVsZW1lbnQsIHNlbGVjdG9yKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhlbGVtZW50LCBzZWxlY3Rvcik7XHJcbiAgICAgIGNvbnNvbGUudHJhY2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZWxlbWVudCAhPT0gbnVsbCAmJiB0eXBlb2YgZWxlbWVudCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgaWYgKHNlbGVjdG9yLm1hdGNoKGNMYWJzLmNsYXNzU2VsZWN0b3IpICYmIGhhc0NsYXNzKGVsZW1lbnQsIHNlbGVjdG9yKSkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgICB9IGVsc2UgaWYgKHNlbGVjdG9yLm1hdGNoKGNMYWJzLmlkU2VsZWN0b3IpICYmIGVsZW1lbnQuaWQgPT09IHNlbGVjdG9yLnJlcGxhY2UoJyMnLCAnJykpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgICAgfSBlbHNlIGlmIChzZWxlY3Rvci5tYXRjaChjTGFicy50YWdTZWxlY3RvcikgJiYgZWxlbWVudC5ub2RlTmFtZSA9PT0gc2VsZWN0b3IudG9VcHBlckNhc2UoKSkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBjbG9zZXN0KGVsZW1lbnQsIHNlbGVjdG9yKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdvYmplY3QnKSB7XHJcbiAgICByZXR1cm4gY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcik7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsb3Nlc3Q7XHJcbiIsIi8qKlxyXG4gKiBQcmVwZW5kcyAwIHRoZSBwcm92aWRlZCBudW1iZXIgYW5kIHJldHVybnMgdGhlIGZvcm1hdGVkIGVsZW1lbnQgYXMgYSBzdHJpbmdcclxuICogQHBhcmFtIG51bVxyXG4gKiBAcGFyYW0gc2l6ZSB7bnVtYmVyfVxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAxID0+IDAwMVxyXG4gKi9cclxuY29uc3QgZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zID0gZnVuY3Rpb24gKG51bSwgc2l6ZSkge1xyXG4gIHZhciBzID0gU3RyaW5nKG51bSk7XHJcbiAgd2hpbGUgKHMubGVuZ3RoIDwgc2l6ZSkgcyA9ICcwJyArIHM7XHJcbiAgcmV0dXJuIHM7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmb3JtYXROdW1iZXJMZWFkaW5nWmVyb3M7XHJcbiIsImNvbnN0IGdldE9mZnNldCA9IGZ1bmN0aW9uIChlbCkge1xyXG4gIHZhciBfeCA9IDA7XHJcbiAgdmFyIF95ID0gMDtcclxuICB3aGlsZSAoZWwgJiYgIWlzTmFOKGVsLm9mZnNldExlZnQpICYmICFpc05hTihlbC5vZmZzZXRUb3ApKSB7XHJcbiAgICBfeCArPSBlbC5vZmZzZXRMZWZ0IC0gZWwuc2Nyb2xsTGVmdDtcclxuICAgIF95ICs9IGVsLm9mZnNldFRvcCAtIGVsLnNjcm9sbFRvcDtcclxuICAgIGVsID0gZWwub2Zmc2V0UGFyZW50O1xyXG4gIH1cclxuICByZXR1cm4geyB0b3A6IF95LCBsZWZ0OiBfeCB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZ2V0T2Zmc2V0O1xyXG4iLCIvKipcclxuICogUHJvdmlkZXMgYW4gYWJpbGl0eSB0byBjaGVjayBpZiBhIERPTSBlbGVtZW50IGNvbnRhaW5zIGEgY2xhc3Mgc3RyaW5nXHJcbiAqIEBwYXJhbSBlbGVtZW50XHJcbiAqIEBwYXJhbSBjbGFzc05hbWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gX2hhc0NsYXNzIChlbGVtZW50LCBjbGFzc05hbWUpIHtcclxuICBjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZSgnLicsICcnKTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xyXG4gICAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKCcoXnwgKScgKyBjbGFzc05hbWUgKyAnKCB8JCknLCAnZ2knKS50ZXN0KGVsZW1lbnQuY2xhc3NOYW1lKTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBpZiAodHlwZW9mIGUuc3RhY2sgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGUuc3RhY2spO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coZSwgZWxlbWVudCwgY2xhc3NOYW1lKTtcclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBoYXNDbGFzcyA9IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUpIHtcclxuICBpZiAodHlwZW9mIGNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcclxuICAgIHJldHVybiBfaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcclxuICB9IGVsc2UgaWYgKGNsYXNzTmFtZSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICB2YXIgaGFzQ2xhc3MgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGkgaW4gY2xhc3NOYW1lKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lW2ldID09PSAnc3RyaW5nJyAmJiBfaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lW2ldKSkge1xyXG4gICAgICAgIGhhc0NsYXNzID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhhc0NsYXNzO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGhhc0NsYXNzO1xyXG4iLCJleHBvcnQgeyBkZWZhdWx0IGFzIHNpemVvZiB9IGZyb20gJy4vc2l6ZW9mJztcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBpc0VsZW1lbnQgfSBmcm9tICcuL2lzRWxlbWVudCc7XHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb2JqZWN0Q291bnQgfSBmcm9tICcuL29iamVjdENvdW50JztcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyByZW1vdmUgfSBmcm9tICcuL3JlbW92ZSc7XHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb2JqZWN0SXRlcmF0b3IgfSBmcm9tICcuL29iamVjdEl0ZXJhdG9yJztcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBhZGRDbGFzcyB9IGZyb20gJy4vYWRkQ2xhc3MnO1xyXG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlbW92ZUNsYXNzIH0gZnJvbSAnLi9yZW1vdmVDbGFzcyc7XHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaGFzQ2xhc3MgfSBmcm9tICcuL2hhc0NsYXNzJztcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBzdHJpbmdDb250YWlucyB9IGZyb20gJy4vc3RyaW5nQ29udGFpbnMnO1xyXG5leHBvcnQgeyBkZWZhdWx0IGFzIGZvcm1hdE51bWJlckxlYWRpbmdaZXJvcyB9IGZyb20gJy4vZm9ybWF0TnVtYmVyTGVhZGluZ1plcm9zJztcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBzdHJpcEh0bWwgfSBmcm9tICcuL3N0cmlwSHRtbCc7XHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY2xvc2VzdCB9IGZyb20gJy4vY2xvc2VzdCc7XHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNNb2JpbGVUYWJsZXQgfSBmcm9tICcuL2lzTW9iaWxlVGFibGV0JztcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBnZXRPZmZzZXQgfSBmcm9tICcuL2dldE9mZnNldCc7XHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNpT1NEZXZpY2UgfSBmcm9tICcuL2lzaU9TRGV2aWNlJztcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBhcHBlbmROZXh0IH0gZnJvbSAnLi9hcHBlbmROZXh0JztcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBxdWVyeSB9IGZyb20gJy4vcXVlcnknO1xyXG5leHBvcnQgeyBkZWZhdWx0IGFzIHRyaW0gfSBmcm9tICcuL3RyaW0nO1xyXG5leHBvcnQgeyBkZWZhdWx0IGFzIG1lcmdlT2JqZWN0cyB9IGZyb20gJy4vbWVyZ2VPYmplY3RzJztcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBzY3JvbGxFbmFibGVkIH0gZnJvbSAnLi9zY3JvbGxFbmFibGVkJztcclxuIiwiLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiBpdCBpcyBhIERPTSBlbGVtZW50XHJcbiAqXHJcbiAqIEBwYXJhbSBvIHtPYmplY3R9XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqL1xyXG5jb25zdCBpc0VsZW1lbnQgPSBmdW5jdGlvbiAobykge1xyXG4gIHJldHVybiAoXHJcbiAgICB0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdvYmplY3QnXHJcbiAgICAgID8gbyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50XHJcbiAgICAgIDogLyogRE9NMiAqLyBvICYmIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIG8ubm9kZVR5cGUgPT09IDEgJiYgdHlwZW9mIG8ubm9kZU5hbWUgPT09ICdzdHJpbmcnXHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGlzRWxlbWVudDtcclxuIiwiLy8gYSBjaGVjayB0byB0ZXN0IGlmIHRoZSBkZXZpY2UgaXMgYSBtb2JpbGUgb3IgdGFibGV0XHJcbmltcG9ydCBzdHJpbmdDb250YWlucyBmcm9tICcuL3N0cmluZ0NvbnRhaW5zJztcclxuXHJcbmNvbnN0IGlzTW9iaWxlVGFibGV0ID0gZnVuY3Rpb24gKCkge1xyXG4gIGxldCBjaGVjayA9IGZhbHNlO1xyXG5cclxuICAoZnVuY3Rpb24gKGEpIHtcclxuICAgIGlmICgvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vfGFuZHJvaWR8aXBhZHxwbGF5Ym9va3xzaWxrL2kudGVzdChhKSB8fCAvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaS50ZXN0KGEuc3Vic3RyKDAsIDQpKSkgY2hlY2sgPSB0cnVlO1xyXG4gIH0pKG5hdmlnYXRvci51c2VyQWdlbnQgfHwgbmF2aWdhdG9yLnZlbmRvciB8fCB3aW5kb3cub3BlcmEpO1xyXG5cclxuICAvLyBjdXN0b20gc29sdXRpb24gYmVjYXVzZSBsYXRlc3QgaU9TIDEzIHVzZXJBZ2VudCBkb2Vzbid0IHJldHVybiBjb3JyZWN0IG1vYmlsZSBpbmZvcm1hdGlvblxyXG4gIGlmICghY2hlY2spIHtcclxuICAgIGNoZWNrID0gc3RyaW5nQ29udGFpbnMod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSwgJ21hY2ludG9zaCcpICYmICgnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNoZWNrO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgaXNNb2JpbGVUYWJsZXQ7XHJcbiIsIi8vIGNoZWNrIGlmIGlPU1xyXG5jb25zdCBpc2lPU0RldmljZSA9IGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gISFuYXZpZ2F0b3IucGxhdGZvcm0gJiYgL2lQKGFkfGhvbmV8b2QpLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpc2lPU0RldmljZTtcclxuIiwiaW1wb3J0IHNpemVvZiBmcm9tICcuL3NpemVvZic7XHJcblxyXG5jb25zdCBtZXJnZU9iamVjdHMgPSBmdW5jdGlvbiAob2JqMSwgb2JqMiwgYXJyYXlUeXBlKSB7XHJcbiAgdmFyIG9iajMgPSAodHlwZW9mIGFycmF5VHlwZSA9PT0gJ3VuZGVmaW5lZCcgfHwgYXJyYXlUeXBlID09PSBmYWxzZSkgPyB7fSA6IFtdO1xyXG5cclxuICBmb3IgKGNvbnN0IGkgaW4gb2JqMSkge1xyXG4gICAgb2JqM1tpXSA9IG9iajFbaV07XHJcbiAgfVxyXG5cclxuICBmb3IgKGNvbnN0IGsgaW4gb2JqMikge1xyXG4gICAgaWYgKHR5cGVvZiBvYmoxW2tdICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICBvYmozW2tdID0gb2JqMltrXTtcclxuICAgIH0gZWxzZSBpZiAob2JqMVtrXSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgIG9iajNba10gPSBvYmoyW2tdOyAvLyBhcnJheXMgZ2V0IG92ZXJ3cml0dGVuIGFuZCBub3QgZXh0ZW5kZWRcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iajFba10gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvYmoxW2tdID09PSAnb2JqZWN0JyAmJiBvYmoxW2tdICE9PSBudWxsICYmIHR5cGVvZiBvYmoxW2tdLm5vZGVUeXBlID09PSAndW5kZWZpbmVkJyAmJiBzaXplb2Yob2JqMVtrXSkgPiAwKSB7XHJcbiAgICAgIG9iajNba10gPSBtZXJnZU9iamVjdHMob2JqMVtrXSwgb2JqMltrXSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmoxW2tdICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb2JqMVtrXSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgb2JqM1trXSA9IG9iajJba107XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZygnZmFpbCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvYmozW2tdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgZGVsZXRlIG9iajNba107XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb2JqMztcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1lcmdlT2JqZWN0cztcclxuIiwiLyoqXHJcbiAqIFJldHVybnMgYSBjb3VudCBvZiBvYmplY3QgZnJvbSBhIHF1ZXJ5IHJlc3VsdFxyXG4gKiBAcGFyYW1vYmogIHtPYmplY3R9IGFueXRoaW5nIG9yIEFycmF5IG9iamVjdFxyXG4gKi9cclxuY29uc3Qgb2JqZWN0Q291bnQgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgaWYgKG9iaiAhPT0gbnVsbCAmJiBvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQgJiYgb2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgIHJldHVybiBvYmoubGVuZ3RoO1xyXG4gIH0gZWxzZSBpZiAob2JqICE9PSBudWxsKSB7XHJcbiAgICByZXR1cm4gMTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0Q291bnQ7XHJcbiIsIlxyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIGl0IGlzIGEgRE9NIGVsZW1lbnRcclxuICpcclxuICogQHBhcmFtIG8ge09iamVjdH1cclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICovXHJcbnZhciBpc0VsZW1lbnQgPSBmdW5jdGlvbiAobykgeyByZXR1cm4gKHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gJ29iamVjdCcgPyBvIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgOiAvKiBET00yICovIG8gJiYgdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5ub2RlVHlwZSA9PT0gMSAmJiB0eXBlb2Ygby5ub2RlTmFtZSA9PT0gJ3N0cmluZycpOyB9O1xyXG5cclxuLyoqXHJcbiAqIE9iamVjdCBpdGVyYXRvciAtIGJlc3QgdXNhZ2UgaXMgZm9yIGEgbGlzdCBvZiBET00gZWxlbWVudHNcclxuICogQHBhcmFtIG9ialxyXG4gKiBAcGFyYW0gY2FsbGJhY2tcclxuICovXHJcbmNvbnN0IG9iamVjdEl0ZXJhdG9yID0gZnVuY3Rpb24gKG9iaiwgY2FsbGJhY2spIHtcclxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmoubGVuZ3RoICE9PSAndW5kZWZpbmVkJyAmJiBvYmogaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgbGV0IGNvdW50ID0gMDtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xyXG4gICAgICAvLyBhZGRpbmcgYWRkaXRpb25hbCBjaGVjayB0byBzZWUgaWYgb2JqZWN0IGlzIGVsZW1lbnQgb3IgYXJyYXlcclxuICAgICAgaWYgKGlzRWxlbWVudChvYmpba2V5XSkpIHtcclxuICAgICAgICBjYWxsYmFjayhvYmpba2V5XSwga2V5LCBjb3VudCwgb2JqLmxlbmd0aCk7XHJcbiAgICAgIH1cclxuICAgICAgY291bnQrKztcclxuICAgIH1cclxuICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogIT09ICd1bmRlZmluZWQnICYmIG9iaiAhPT0gbnVsbCkge1xyXG4gICAgLy8gYWRkaW5nIGFkZGl0aW9uYWwgY2hlY2sgdG8gc2VlIGlmIG9iamVjdCBpcyBlbGVtZW50IG9yIGFycmF5XHJcbiAgICBpZiAoaXNFbGVtZW50KG9iaikpIHtcclxuICAgICAgY2FsbGJhY2sob2JqLCAwLCAwLCAxKTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBvYmplY3RJdGVyYXRvcjtcclxuIiwiaW1wb3J0IGNMYWJzIGZyb20gJy4uL21vZHVsZXMvY0xhYnMnO1xyXG5pbXBvcnQgdHJpbSBmcm9tICcuL3RyaW0nO1xyXG5cclxuLyoqXHJcbiAqIFF1ZXJ5IHNlbGVjdG9yLCBzdXBwb3J0cyBDU1MgZWxlbWVudCBzZWxlY3Rpb25cclxuICpcclxuICogU3VwcG9ydHM6XHJcbiAqICAtIENsYXNzIHNlbGVjdGlvbjogXCIuZWxlbWVudFwiXHJcbiAqICAtIElEIHNlbGVjdGlvbjogXCIjZWxlbWVudFwiXHJcbiAqICAtIFRhZyBzZWxlY3Rpb246IFwiZGl2XCJcclxuICogIC0gTXVsdGkgZGVwdGggc2VsZWN0aW9uOiAnLmVsZW1lbnQgdWwgbGknXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBcIm9wdGlvbmFsXCJcclxuICogQHBhcmFtIHtTdHJpbmd9IENTUyBlbGVtZW50IHNlbGVjdG9yXHJcbiAqIEByZXR1cm5zIHsoT2JqZWN0fG51bGx8QXJyYXkpfSBkZXBlbmRpbmcgb24gdGhlIHByb3ZpZGVkIHNlbGVjdG9yIHJlc3VsdHMgY2FuIHZhcnkgKG51bGwsIG5vZGUsIE5vZGVMaXN0IGFycmF5KVxyXG4gKi9cclxuY29uc3QgcXVlcnkgPSBmdW5jdGlvbiAoZG9jLCBzZWxlY3Rvcikge1xyXG4gIHZhciByZXN1bHQ7XHJcblxyXG4gIHZhciB0bXBEb2MgPSBkb2M7IHZhciB0bXBTZWxlY3RvciA9IHNlbGVjdG9yOyAvLyB1c2VkIGZvciBkZWJ1ZyBvbmx5XHJcblxyXG4gIGlmICh0eXBlb2YgZG9jID09PSAnc3RyaW5nJyAmJiBzZWxlY3RvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICBzZWxlY3RvciA9IGRvYztcclxuICAgIGRvYyA9IGRvY3VtZW50O1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIGlmIChkb2MgIT09IG51bGwpIHtcclxuICAgICAgc2VsZWN0b3IgPSB0cmltKHNlbGVjdG9yKTsgLy9cclxuXHJcbiAgICAgIGlmIChzZWxlY3Rvci5tYXRjaChjTGFicy5jbGFzc1NlbGVjdG9yKSkge1xyXG4gICAgICAgIHJlc3VsdCA9IGRvYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHNlbGVjdG9yLnJlcGxhY2UoJy4nLCAnJykpO1xyXG4gICAgICB9IGVsc2UgaWYgKHNlbGVjdG9yLm1hdGNoKGNMYWJzLmlkU2VsZWN0b3IpKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3IucmVwbGFjZSgnIycsICcnKSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0b3IubWF0Y2goY0xhYnMudGFnU2VsZWN0b3IpKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXN1bHQgPSBkb2MucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAocmVzdWx0ICE9PSBudWxsICYmIHJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIHJlc3VsdC5ub2RlVHlwZSkge1xyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSBlbHNlIGlmIChyZXN1bHQgIT09IG51bGwgJiYgcmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICByZXR1cm4gcmVzdWx0WzBdO1xyXG4gICAgfSBlbHNlIGlmIChyZXN1bHQgIT09IG51bGwgJiYgcmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHJlc3VsdCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgIGNvbnNvbGUubG9nKHRtcFNlbGVjdG9yKTtcclxuICAgIGNvbnNvbGUubG9nKHRtcERvYyk7XHJcbiAgICBjb25zb2xlLmxvZyhkb2MsIHNlbGVjdG9yKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBxdWVyeTtcclxuIiwiLyoqXHJcbiAqIFJlbW92ZXMgYW4gSFRNTCBET00gZWxlbWVudFxyXG4gKiBAcGFyYW1vYmogZWwge09iamVjdH0gRE9NIGVsZW1lbnRcclxuICovXHJcbmNvbnN0IHJlbW92ZSA9IGZ1bmN0aW9uIChlbCkge1xyXG4gIGlmIChlbCAhPT0gbnVsbCkge1xyXG4gICAgZWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbCk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcmVtb3ZlO1xyXG4iLCIvKipcclxuICogUmVtb3ZlIGNsYXNzIHN0cmluZyBmcm9tIHByb3ZpZGVkIERPTSBlbGVtZW50XHJcbiAqIEBwYXJhbSBlbGVtZW50XHJcbiAqIEBwYXJhbSBjbGFzc05hbWVcclxuICogQHJldHVybnMge3tjbGFzc0xpc3R9fCp9XHJcbiAqL1xyXG5jb25zdCByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUpIHtcclxuICB0cnkge1xyXG4gICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XHJcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxiKScgKyBjbGFzc05hbWUuc3BsaXQoJyAnKS5qb2luKCd8JykgKyAnKFxcXFxifCQpJywgJ2dpJyksICcgJyk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgY29uc29sZS5sb2coZWxlbWVudCwgY2xhc3NOYW1lKTtcclxuICAgIC8vIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAvLyBjb25zb2xlLnRyYWNlKCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZWxlbWVudDtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJlbW92ZUNsYXNzO1xyXG4iLCJjb25zdCBzY3JvbGxFbmFibGVkID0gZnVuY3Rpb24gKGRvYykge1xyXG4gIHJldHVybiAoZG9jICE9PSBudWxsKSA/IChkb2Muc2Nyb2xsSGVpZ2h0ID4gZG9jLm9mZnNldEhlaWdodCkgOiBmYWxzZTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNjcm9sbEVuYWJsZWQ7XHJcbiIsImltcG9ydCBpc0VsZW1lbnQgZnJvbSAnLi9pc0VsZW1lbnQnO1xyXG5cclxuLyoqXHJcbiAqIHJldHVybnMgdGhlIHNpemUgb2YgYW4gT2JqZWN0IG9yIGFycmF5XHJcbiAqXHJcbiAqIEBwYXJhbSBvYmoge09iamVjdH1cclxuICogQHJldHVybiB7TnVtYmVyfVxyXG4gKi9cclxuY29uc3Qgc2l6ZW9mID0gZnVuY3Rpb24gKG9iaikge1xyXG4gIGxldCBzaXplID0gMDsgbGV0IGtleTtcclxuICBmb3IgKGtleSBpbiBvYmopIHtcclxuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkgc2l6ZSsrO1xyXG4gIH1cclxuXHJcbiAgaWYgKHNpemUgPT09IDAgJiYgaXNFbGVtZW50KG9iaikpIHtcclxuICAgIHNpemUgPSAxO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNpemU7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzaXplb2Y7XHJcbiIsIi8qKlxyXG4gKiBBIGNoZWNrIGlmIGEgc3RyaW5nIGNvbnRhaW5zIGFuIGVudHJ5IG9mIHNlYXJjaGVkIGZvciB0ZXJtXHJcbiAqIEBwYXJhbSBzdHIge3N0cmluZ31cclxuICogQHBhcmFtIHBhcnRpYWwge3N0cmluZ31cclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5jb25zdCBzdHJpbmdDb250YWlucyA9IGZ1bmN0aW9uIChzdHIsIHBhcnRpYWwpIHtcclxuICByZXR1cm4gKHN0ci5pbmRleE9mKHBhcnRpYWwpID4gLTEpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc3RyaW5nQ29udGFpbnM7XHJcbiIsIi8qKlxyXG4gKiBSZW1vdmVzIEhUTUwgdGFncyBmcm9tIHRoZSBwcm92aWRlZCBpbnB1dCBhbmQgcmV0dXJucyBvbmx5IHRoZSB0ZXh0XHJcbiAqIC0gdGhpcyBpcyBhIHZlcnkgYmFzaWMgaW1wbGVtZW50YXRpb24gYW5kIHNob3VsZCBiZSB1c2VkIGNhcmVmdWxseVxyXG4gKiBAcGFyYW0gaHRtbCB7c3RyaW5nfVxyXG4gKiBAcmV0dXJucyB7c3RyaW5nIHwgc3RyaW5nfVxyXG4gKi9cclxuY29uc3Qgc3RyaXBIdG1sID0gZnVuY3Rpb24gKGh0bWwpIHtcclxuICB2YXIgdG1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcbiAgdG1wLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgcmV0dXJuIHRtcC50ZXh0Q29udGVudCB8fCB0bXAuaW5uZXJUZXh0IHx8ICcnO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc3RyaXBIdG1sO1xyXG4iLCJjb25zdCB0cmltID0gZnVuY3Rpb24gKHN0cmluZykge1xyXG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdHJpbTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIi4uL2Nzcy9zdHlsZS5jc3NcIjsiXSwic291cmNlUm9vdCI6IiJ9